
STM32F746-Disco-LWIP-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000247a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039f4  08024974  08024974  00034974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028368  08028368  000401ec  2**0
                  CONTENTS
  4 .ARM          00000008  08028368  08028368  00038368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028370  08028370  000401ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028370  08028370  00038370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028374  08028374  00038374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08028378  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000ac  08028424  000400ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000014c  080284c4  0004014c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011ac4  200001ec  08028564  000401ec  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20011cb0  08028564  00041cb0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000401ec  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0004021c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00059d97  00000000  00000000  0004025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000cd80  00000000  00000000  00099ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004300  00000000  00000000  000a6d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003475  00000000  00000000  000ab078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00047da9  00000000  00000000  000ae4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00068118  00000000  00000000  000f6296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0014206e  00000000  00000000  0015e3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00012450  00000000  00000000  002a041c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000079  00000000  00000000  002b286c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802495c 	.word	0x0802495c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0802495c 	.word	0x0802495c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <vApplicationGetIdleTaskMemory+0x2c>)
 8000600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <vApplicationGetIdleTaskMemory+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000208 	.word	0x20000208
 8000620:	200002ac 	.word	0x200002ac

08000624 <HAL_UART_RxCpltCallback>:
NetworkParams connection;



// UART 인터럽트 핸들러
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

	if (huart == &huart1) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a10      	ldr	r2, [pc, #64]	; (8000670 <HAL_UART_RxCpltCallback+0x4c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d119      	bne.n	8000668 <HAL_UART_RxCpltCallback+0x44>
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	490f      	ldr	r1, [pc, #60]	; (8000674 <HAL_UART_RxCpltCallback+0x50>)
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <HAL_UART_RxCpltCallback+0x4c>)
 800063a:	f00c fa8c 	bl	800cb56 <HAL_UART_Receive_IT>

		rx_buffer[rx_index++] = rx_data;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <HAL_UART_RxCpltCallback+0x54>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	b291      	uxth	r1, r2
 8000646:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <HAL_UART_RxCpltCallback+0x54>)
 8000648:	8011      	strh	r1, [r2, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_UART_RxCpltCallback+0x50>)
 800064e:	7819      	ldrb	r1, [r3, #0]
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_UART_RxCpltCallback+0x58>)
 8000652:	5499      	strb	r1, [r3, r2]

		if (rx_index == BUFFER_SIZE ) {
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_UART_RxCpltCallback+0x54>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	2b04      	cmp	r3, #4
 800065a:	d105      	bne.n	8000668 <HAL_UART_RxCpltCallback+0x44>
			// 수신된 데이터를 전송
//			HAL_UART_Transmit(&huart1, rx_buffer, BUFFER_SIZE, HAL_MAX_DELAY);
			// 데이터 처리 함수 호출
			data_received_flag = 1;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_UART_RxCpltCallback+0x5c>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <HAL_UART_RxCpltCallback+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	801a      	strh	r2, [r3, #0]

		}

	}
//	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000b68 	.word	0x20000b68
 8000674:	20000ec2 	.word	0x20000ec2
 8000678:	20000ec0 	.word	0x20000ec0
 800067c:	20000ebc 	.word	0x20000ebc
 8000680:	20000eb8 	.word	0x20000eb8

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b090      	sub	sp, #64	; 0x40
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	const char *json_data = "{\"name\": \"홍용재\", \"age\": \"24\"}";
 800068a:	4b37      	ldr	r3, [pc, #220]	; (8000768 <main+0xe4>)
 800068c:	63fb      	str	r3, [r7, #60]	; 0x3c



	// JSON 데이터의 길이 계산
	int json_data_length = strlen(json_data);
 800068e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000690:	f7ff fdbe 	bl	8000210 <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38

	// Content-Length 헤더를 포함한 HTTP 요청
	// 적절한 크기의 버퍼를 할당

	// HTTP 요청을 문자열로 생성
	sprintf(http_request, "POST / HTTP/1.1\r\n"
 8000698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800069a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800069c:	4933      	ldr	r1, [pc, #204]	; (800076c <main+0xe8>)
 800069e:	4834      	ldr	r0, [pc, #208]	; (8000770 <main+0xec>)
 80006a0:	f022 ffb6 	bl	8023610 <siprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f002 ffba 	bl	800361c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f870 	bl	800078c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ac:	f000 f8e0 	bl	8000870 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f001 f850 	bl	8001754 <MX_GPIO_Init>
  MX_ADC3_Init();
 80006b4:	f000 f90e 	bl	80008d4 <MX_ADC3_Init>
  MX_CRC_Init();
 80006b8:	f000 f95e 	bl	8000978 <MX_CRC_Init>
  MX_DCMI_Init();
 80006bc:	f000 f97e 	bl	80009bc <MX_DCMI_Init>
  MX_DMA2D_Init();
 80006c0:	f000 f9b0 	bl	8000a24 <MX_DMA2D_Init>
  MX_FMC_Init();
 80006c4:	f000 fff6 	bl	80016b4 <MX_FMC_Init>
  MX_I2C1_Init();
 80006c8:	f000 f9de 	bl	8000a88 <MX_I2C1_Init>
  MX_I2C3_Init();
 80006cc:	f000 fa1c 	bl	8000b08 <MX_I2C3_Init>
  MX_LTDC_Init();
 80006d0:	f000 fa5a 	bl	8000b88 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006d4:	f000 fada 	bl	8000c8c <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006d8:	f000 fb04 	bl	8000ce4 <MX_RTC_Init>
  MX_SAI2_Init();
 80006dc:	f000 fba6 	bl	8000e2c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80006e0:	f000 fc4c 	bl	8000f7c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80006e4:	f000 fc6c 	bl	8000fc0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80006e8:	f000 fc9a 	bl	8001020 <MX_SPI2_Init>
  MX_TIM1_Init();
 80006ec:	f000 fcd6 	bl	800109c <MX_TIM1_Init>
  MX_TIM2_Init();
 80006f0:	f000 fd80 	bl	80011f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006f4:	f000 fdf4 	bl	80012e0 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006f8:	f000 fe6a 	bl	80013d0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006fc:	f000 fee0 	bl	80014c0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000700:	f000 ff32 	bl	8001568 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000704:	f000 ff76 	bl	80015f4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000708:	f000 ffa4 	bl	8001654 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800070c:	f00f fa4a 	bl	800fba4 <MX_FATFS_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  	HAL_UART_Receive_IT(&huart1, &rx_data , 1);
 8000710:	2201      	movs	r2, #1
 8000712:	4918      	ldr	r1, [pc, #96]	; (8000774 <main+0xf0>)
 8000714:	4818      	ldr	r0, [pc, #96]	; (8000778 <main+0xf4>)
 8000716:	f00c fa1e 	bl	800cb56 <HAL_UART_Receive_IT>

  	osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 1024);
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <main+0xf8>)
 800071c:	f107 041c 	add.w	r4, r7, #28
 8000720:	461d      	mov	r5, r3
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f012 fdd3 	bl	80132e0 <osThreadCreate>
 800073a:	4603      	mov	r3, r0
 800073c:	4a10      	ldr	r2, [pc, #64]	; (8000780 <main+0xfc>)
 800073e:	6013      	str	r3, [r2, #0]

	osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 1024);
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <main+0x100>)
 8000742:	463c      	mov	r4, r7
 8000744:	461d      	mov	r5, r3
 8000746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800074e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000752:	463b      	mov	r3, r7
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f012 fdc2 	bl	80132e0 <osThreadCreate>
 800075c:	4603      	mov	r3, r0
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <main+0x104>)
 8000760:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000762:	f012 fd9a 	bl	801329a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000766:	e7fe      	b.n	8000766 <main+0xe2>
 8000768:	08024974 	.word	0x08024974
 800076c:	08024998 	.word	0x08024998
 8000770:	20000cb8 	.word	0x20000cb8
 8000774:	20000ec2 	.word	0x20000ec2
 8000778:	20000b68 	.word	0x20000b68
 800077c:	08024a1c 	.word	0x08024a1c
 8000780:	20000cac 	.word	0x20000cac
 8000784:	08024a44 	.word	0x08024a44
 8000788:	20000cb0 	.word	0x20000cb0

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f023 f8b5 	bl	802390a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007b0:	f007 fd7c 	bl	80082ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <SystemClock_Config+0xdc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a2b      	ldr	r2, [pc, #172]	; (8000868 <SystemClock_Config+0xdc>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <SystemClock_Config+0xdc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <SystemClock_Config+0xe0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a26      	ldr	r2, [pc, #152]	; (800086c <SystemClock_Config+0xe0>)
 80007d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <SystemClock_Config+0xe0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007e4:	2309      	movs	r3, #9
 80007e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ee:	2301      	movs	r3, #1
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007fc:	2319      	movs	r3, #25
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000800:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000804:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000806:	2302      	movs	r3, #2
 8000808:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800080a:	2309      	movs	r3, #9
 800080c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	4618      	mov	r0, r3
 8000814:	f007 fe6c 	bl	80084f0 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800081e:	f001 fbb9 	bl	8001f94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000822:	f007 fd53 	bl	80082cc <HAL_PWREx_EnableOverDrive>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800082c:	f001 fbb2 	bl	8001f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2302      	movs	r3, #2
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800083c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2106      	movs	r1, #6
 800084e:	4618      	mov	r0, r3
 8000850:	f008 f8f2 	bl	8008a38 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800085a:	f001 fb9b 	bl	8001f94 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	; 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000

08000870 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b0a2      	sub	sp, #136	; 0x88
 8000874:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2284      	movs	r2, #132	; 0x84
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f023 f844 	bl	802390a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <PeriphCommonClock_Config+0x60>)
 8000884:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000886:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800088a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800088c:	2305      	movs	r3, #5
 800088e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000894:	2303      	movs	r3, #3
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800089c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008a0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80008a2:	2300      	movs	r3, #0
 80008a4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80008a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	4618      	mov	r0, r3
 80008b8:	f008 fad6 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80008c2:	f001 fb67 	bl	8001f94 <Error_Handler>
  }
}
 80008c6:	bf00      	nop
 80008c8:	3788      	adds	r7, #136	; 0x88
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	00b00008 	.word	0x00b00008

080008d4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_ADC3_Init+0x98>)
 80008e8:	4a21      	ldr	r2, [pc, #132]	; (8000970 <MX_ADC3_Init+0x9c>)
 80008ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_ADC3_Init+0x98>)
 80008ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008f2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_ADC3_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_ADC3_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_ADC3_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_ADC3_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_ADC3_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_ADC3_Init+0x98>)
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <MX_ADC3_Init+0xa0>)
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_ADC3_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_ADC3_Init+0x98>)
 8000922:	2201      	movs	r2, #1
 8000924:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_ADC3_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_ADC3_Init+0x98>)
 8000930:	2201      	movs	r2, #1
 8000932:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_ADC3_Init+0x98>)
 8000936:	f002 fecf 	bl	80036d8 <HAL_ADC_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000940:	f001 fb28 	bl	8001f94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000944:	2304      	movs	r3, #4
 8000946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000948:	2301      	movs	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_ADC3_Init+0x98>)
 8000956:	f002 ff03 	bl	8003760 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000960:	f001 fb18 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200004ac 	.word	0x200004ac
 8000970:	40012200 	.word	0x40012200
 8000974:	0f000001 	.word	0x0f000001

08000978 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_CRC_Init+0x3c>)
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <MX_CRC_Init+0x40>)
 8000980:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_CRC_Init+0x3c>)
 8000984:	2200      	movs	r2, #0
 8000986:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_CRC_Init+0x3c>)
 800098a:	2200      	movs	r2, #0
 800098c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_CRC_Init+0x3c>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <MX_CRC_Init+0x3c>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_CRC_Init+0x3c>)
 800099c:	2201      	movs	r2, #1
 800099e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_CRC_Init+0x3c>)
 80009a2:	f003 fa0f 	bl	8003dc4 <HAL_CRC_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009ac:	f001 faf2 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200004f4 	.word	0x200004f4
 80009b8:	40023000 	.word	0x40023000

080009bc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_DCMI_Init+0x60>)
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <MX_DCMI_Init+0x64>)
 80009c4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_DCMI_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_DCMI_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_DCMI_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_DCMI_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_DCMI_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <MX_DCMI_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_DCMI_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_DCMI_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_DCMI_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_DCMI_Init+0x60>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_DCMI_Init+0x60>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_DCMI_Init+0x60>)
 8000a0a:	f003 fac5 	bl	8003f98 <HAL_DCMI_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a14:	f001 fabe 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000518 	.word	0x20000518
 8000a20:	50050000 	.word	0x50050000

08000a24 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_DMA2D_Init+0x5c>)
 8000a2a:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <MX_DMA2D_Init+0x60>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_DMA2D_Init+0x5c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_DMA2D_Init+0x5c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_DMA2D_Init+0x5c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_DMA2D_Init+0x5c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_DMA2D_Init+0x5c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_DMA2D_Init+0x5c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_DMA2D_Init+0x5c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <MX_DMA2D_Init+0x5c>)
 8000a5a:	f003 fc43 	bl	80042e4 <HAL_DMA2D_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a64:	f001 fa96 	bl	8001f94 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_DMA2D_Init+0x5c>)
 8000a6c:	f003 fd94 	bl	8004598 <HAL_DMA2D_ConfigLayer>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a76:	f001 fa8d 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000568 	.word	0x20000568
 8000a84:	4002b000 	.word	0x4002b000

08000a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_I2C1_Init+0x74>)
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <MX_I2C1_Init+0x78>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_I2C1_Init+0x74>)
 8000a94:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <MX_I2C1_Init+0x7c>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_I2C1_Init+0x74>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_I2C1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_I2C1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac2:	480e      	ldr	r0, [pc, #56]	; (8000afc <MX_I2C1_Init+0x74>)
 8000ac4:	f006 ff60 	bl	8007988 <HAL_I2C_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ace:	f001 fa61 	bl	8001f94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4809      	ldr	r0, [pc, #36]	; (8000afc <MX_I2C1_Init+0x74>)
 8000ad6:	f006 ffe7 	bl	8007aa8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ae0:	f001 fa58 	bl	8001f94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_I2C1_Init+0x74>)
 8000ae8:	f007 f829 	bl	8007b3e <HAL_I2CEx_ConfigDigitalFilter>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000af2:	f001 fa4f 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200005a8 	.word	0x200005a8
 8000b00:	40005400 	.word	0x40005400
 8000b04:	00c0eaff 	.word	0x00c0eaff

08000b08 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_I2C3_Init+0x74>)
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <MX_I2C3_Init+0x78>)
 8000b10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_I2C3_Init+0x74>)
 8000b14:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <MX_I2C3_Init+0x7c>)
 8000b16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_I2C3_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_I2C3_Init+0x74>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_I2C3_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_I2C3_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_I2C3_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_I2C3_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_I2C3_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b42:	480e      	ldr	r0, [pc, #56]	; (8000b7c <MX_I2C3_Init+0x74>)
 8000b44:	f006 ff20 	bl	8007988 <HAL_I2C_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b4e:	f001 fa21 	bl	8001f94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b52:	2100      	movs	r1, #0
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <MX_I2C3_Init+0x74>)
 8000b56:	f006 ffa7 	bl	8007aa8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b60:	f001 fa18 	bl	8001f94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b64:	2100      	movs	r1, #0
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_I2C3_Init+0x74>)
 8000b68:	f006 ffe9 	bl	8007b3e <HAL_I2CEx_ConfigDigitalFilter>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b72:	f001 fa0f 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200005fc 	.word	0x200005fc
 8000b80:	40005c00 	.word	0x40005c00
 8000b84:	00c0eaff 	.word	0x00c0eaff

08000b88 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	; 0x38
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2234      	movs	r2, #52	; 0x34
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f022 feb8 	bl	802390a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b9a:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000b9c:	4a3a      	ldr	r2, [pc, #232]	; (8000c88 <MX_LTDC_Init+0x100>)
 8000b9e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ba0:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ba6:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bac:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bb2:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000bba:	2228      	movs	r2, #40	; 0x28
 8000bbc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000bc0:	2209      	movs	r2, #9
 8000bc2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000bc6:	2235      	movs	r2, #53	; 0x35
 8000bc8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000bcc:	220b      	movs	r2, #11
 8000bce:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000bd2:	f240 2215 	movw	r2, #533	; 0x215
 8000bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000bda:	f240 121b 	movw	r2, #283	; 0x11b
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000be2:	f240 2235 	movw	r2, #565	; 0x235
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000bea:	f240 121d 	movw	r2, #285	; 0x11d
 8000bee:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c08:	481e      	ldr	r0, [pc, #120]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000c0a:	f006 ffe5 	bl	8007bd8 <HAL_LTDC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c14:	f001 f9be 	bl	8001f94 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000c1c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c20:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000c26:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c2a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c30:	23ff      	movs	r3, #255	; 0xff
 8000c32:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c3c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c42:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000c48:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000c4e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_LTDC_Init+0xfc>)
 8000c6e:	f007 f945 	bl	8007efc <HAL_LTDC_ConfigLayer>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000c78:	f001 f98c 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3738      	adds	r7, #56	; 0x38
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000650 	.word	0x20000650
 8000c88:	40016800 	.word	0x40016800

08000c8c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_QUADSPI_Init+0x50>)
 8000c92:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <MX_QUADSPI_Init+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_QUADSPI_Init+0x50>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_QUADSPI_Init+0x50>)
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_QUADSPI_Init+0x50>)
 8000ca4:	2210      	movs	r2, #16
 8000ca6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_QUADSPI_Init+0x50>)
 8000caa:	2218      	movs	r2, #24
 8000cac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_QUADSPI_Init+0x50>)
 8000cb0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000cb4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_QUADSPI_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <MX_QUADSPI_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_QUADSPI_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_QUADSPI_Init+0x50>)
 8000cca:	f007 fb4f 	bl	800836c <HAL_QSPI_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000cd4:	f001 f95e 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200006f8 	.word	0x200006f8
 8000ce0:	a0001000 	.word	0xa0001000

08000ce4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b090      	sub	sp, #64	; 0x40
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2228      	movs	r2, #40	; 0x28
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f022 fe00 	bl	802390a <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d0a:	4b46      	ldr	r3, [pc, #280]	; (8000e24 <MX_RTC_Init+0x140>)
 8000d0c:	4a46      	ldr	r2, [pc, #280]	; (8000e28 <MX_RTC_Init+0x144>)
 8000d0e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d10:	4b44      	ldr	r3, [pc, #272]	; (8000e24 <MX_RTC_Init+0x140>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d16:	4b43      	ldr	r3, [pc, #268]	; (8000e24 <MX_RTC_Init+0x140>)
 8000d18:	227f      	movs	r2, #127	; 0x7f
 8000d1a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d1c:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <MX_RTC_Init+0x140>)
 8000d1e:	22ff      	movs	r2, #255	; 0xff
 8000d20:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d22:	4b40      	ldr	r3, [pc, #256]	; (8000e24 <MX_RTC_Init+0x140>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d28:	4b3e      	ldr	r3, [pc, #248]	; (8000e24 <MX_RTC_Init+0x140>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <MX_RTC_Init+0x140>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d34:	483b      	ldr	r0, [pc, #236]	; (8000e24 <MX_RTC_Init+0x140>)
 8000d36:	f008 fdc7 	bl	80098c8 <HAL_RTC_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000d40:	f001 f928 	bl	8001f94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d62:	2201      	movs	r2, #1
 8000d64:	4619      	mov	r1, r3
 8000d66:	482f      	ldr	r0, [pc, #188]	; (8000e24 <MX_RTC_Init+0x140>)
 8000d68:	f008 fe32 	bl	80099d0 <HAL_RTC_SetTime>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000d72:	f001 f90f 	bl	8001f94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d76:	2301      	movs	r3, #1
 8000d78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d92:	2201      	movs	r2, #1
 8000d94:	4619      	mov	r1, r3
 8000d96:	4823      	ldr	r0, [pc, #140]	; (8000e24 <MX_RTC_Init+0x140>)
 8000d98:	f008 feb4 	bl	8009b04 <HAL_RTC_SetDate>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000da2:	f001 f8f7 	bl	8001f94 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4811      	ldr	r0, [pc, #68]	; (8000e24 <MX_RTC_Init+0x140>)
 8000dde:	f008 ff15 	bl	8009c0c <HAL_RTC_SetAlarm>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000de8:	f001 f8d4 	bl	8001f94 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	2201      	movs	r2, #1
 8000df6:	4619      	mov	r1, r3
 8000df8:	480a      	ldr	r0, [pc, #40]	; (8000e24 <MX_RTC_Init+0x140>)
 8000dfa:	f008 ff07 	bl	8009c0c <HAL_RTC_SetAlarm>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000e04:	f001 f8c6 	bl	8001f94 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_RTC_Init+0x140>)
 8000e0e:	f009 f8c9 	bl	8009fa4 <HAL_RTCEx_SetTimeStamp>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000e18:	f001 f8bc 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	3740      	adds	r7, #64	; 0x40
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000744 	.word	0x20000744
 8000e28:	40002800 	.word	0x40002800

08000e2c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e30:	4b4d      	ldr	r3, [pc, #308]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e32:	4a4e      	ldr	r2, [pc, #312]	; (8000f6c <MX_SAI2_Init+0x140>)
 8000e34:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e36:	4b4c      	ldr	r3, [pc, #304]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e3c:	4b4a      	ldr	r3, [pc, #296]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e42:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e44:	2240      	movs	r2, #64	; 0x40
 8000e46:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e48:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e4e:	4b46      	ldr	r3, [pc, #280]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e54:	4b44      	ldr	r3, [pc, #272]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e5a:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e60:	4b41      	ldr	r3, [pc, #260]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e66:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e6c:	4b3e      	ldr	r3, [pc, #248]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e6e:	4a40      	ldr	r2, [pc, #256]	; (8000f70 <MX_SAI2_Init+0x144>)
 8000e70:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e72:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e78:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e84:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000e8a:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e8c:	2208      	movs	r2, #8
 8000e8e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000e90:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e9c:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000eae:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000eba:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000ec0:	4829      	ldr	r0, [pc, #164]	; (8000f68 <MX_SAI2_Init+0x13c>)
 8000ec2:	f009 f8d7 	bl	800a074 <HAL_SAI_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000ecc:	f001 f862 	bl	8001f94 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000ed2:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <MX_SAI2_Init+0x14c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000ede:	2203      	movs	r2, #3
 8000ee0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000ee2:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000ee4:	2240      	movs	r2, #64	; 0x40
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f20:	2208      	movs	r2, #8
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <MX_SAI2_Init+0x148>)
 8000f56:	f009 f88d 	bl	800a074 <HAL_SAI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000f60:	f001 f818 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000764 	.word	0x20000764
 8000f6c:	40015c04 	.word	0x40015c04
 8000f70:	0002ee00 	.word	0x0002ee00
 8000f74:	200007e8 	.word	0x200007e8
 8000f78:	40015c24 	.word	0x40015c24

08000f7c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <MX_SDMMC1_SD_Init+0x40>)
 8000f84:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000f9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f9e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000086c 	.word	0x2000086c
 8000fbc:	40012c00 	.word	0x40012c00

08000fc0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_SPDIFRX_Init+0x5c>)
 8000fc6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000fca:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <MX_SPDIFRX_Init+0x5c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_SPDIFRX_Init+0x5c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <MX_SPDIFRX_Init+0x5c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_SPDIFRX_Init+0x5c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <MX_SPDIFRX_Init+0x5c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_SPDIFRX_Init+0x5c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <MX_SPDIFRX_Init+0x5c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_SPDIFRX_Init+0x5c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <MX_SPDIFRX_Init+0x5c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_SPDIFRX_Init+0x5c>)
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_SPDIFRX_Init+0x5c>)
 800100a:	f00a fabf 	bl	800b58c <HAL_SPDIFRX_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001014:	f000 ffbe 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200008f0 	.word	0x200008f0

08001020 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_SPI2_Init+0x74>)
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <MX_SPI2_Init+0x78>)
 8001028:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_SPI2_Init+0x74>)
 800102c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001030:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_SPI2_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_SPI2_Init+0x74>)
 800103a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800103e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_SPI2_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_SPI2_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_SPI2_Init+0x74>)
 800104e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001052:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_SPI2_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_SPI2_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_SPI2_Init+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_SPI2_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_SPI2_Init+0x74>)
 800106e:	2207      	movs	r2, #7
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_SPI2_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_SPI2_Init+0x74>)
 800107a:	2208      	movs	r2, #8
 800107c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_SPI2_Init+0x74>)
 8001080:	f00a fae0 	bl	800b644 <HAL_SPI_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800108a:	f000 ff83 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000093c 	.word	0x2000093c
 8001098:	40003800 	.word	0x40003800

0800109c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b09a      	sub	sp, #104	; 0x68
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	222c      	movs	r2, #44	; 0x2c
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f022 fc17 	bl	802390a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010dc:	4b43      	ldr	r3, [pc, #268]	; (80011ec <MX_TIM1_Init+0x150>)
 80010de:	4a44      	ldr	r2, [pc, #272]	; (80011f0 <MX_TIM1_Init+0x154>)
 80010e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010e2:	4b42      	ldr	r3, [pc, #264]	; (80011ec <MX_TIM1_Init+0x150>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b40      	ldr	r3, [pc, #256]	; (80011ec <MX_TIM1_Init+0x150>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010ee:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <MX_TIM1_Init+0x150>)
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <MX_TIM1_Init+0x150>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010fc:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <MX_TIM1_Init+0x150>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <MX_TIM1_Init+0x150>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001108:	4838      	ldr	r0, [pc, #224]	; (80011ec <MX_TIM1_Init+0x150>)
 800110a:	f00a fb46 	bl	800b79a <HAL_TIM_Base_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001114:	f000 ff3e 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800111e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001122:	4619      	mov	r1, r3
 8001124:	4831      	ldr	r0, [pc, #196]	; (80011ec <MX_TIM1_Init+0x150>)
 8001126:	f00a fe91 	bl	800be4c <HAL_TIM_ConfigClockSource>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001130:	f000 ff30 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001134:	482d      	ldr	r0, [pc, #180]	; (80011ec <MX_TIM1_Init+0x150>)
 8001136:	f00a fbff 	bl	800b938 <HAL_TIM_PWM_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001140:	f000 ff28 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001150:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001154:	4619      	mov	r1, r3
 8001156:	4825      	ldr	r0, [pc, #148]	; (80011ec <MX_TIM1_Init+0x150>)
 8001158:	f00b fb02 	bl	800c760 <HAL_TIMEx_MasterConfigSynchronization>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001162:	f000 ff17 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001166:	2360      	movs	r3, #96	; 0x60
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116e:	2300      	movs	r3, #0
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001172:	2300      	movs	r3, #0
 8001174:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001186:	2200      	movs	r2, #0
 8001188:	4619      	mov	r1, r3
 800118a:	4818      	ldr	r0, [pc, #96]	; (80011ec <MX_TIM1_Init+0x150>)
 800118c:	f00a fd4a 	bl	800bc24 <HAL_TIM_PWM_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001196:	f000 fefd 	bl	8001f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <MX_TIM1_Init+0x150>)
 80011d0:	f00b fb54 	bl	800c87c <HAL_TIMEx_ConfigBreakDeadTime>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80011da:	f000 fedb 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <MX_TIM1_Init+0x150>)
 80011e0:	f001 fc48 	bl	8002a74 <HAL_TIM_MspPostInit>

}
 80011e4:	bf00      	nop
 80011e6:	3768      	adds	r7, #104	; 0x68
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200009a0 	.word	0x200009a0
 80011f0:	40010000 	.word	0x40010000

080011f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]
 8001222:	615a      	str	r2, [r3, #20]
 8001224:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <MX_TIM2_Init+0xe8>)
 8001228:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <MX_TIM2_Init+0xe8>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <MX_TIM2_Init+0xe8>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <MX_TIM2_Init+0xe8>)
 800123c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001240:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <MX_TIM2_Init+0xe8>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MX_TIM2_Init+0xe8>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124e:	4823      	ldr	r0, [pc, #140]	; (80012dc <MX_TIM2_Init+0xe8>)
 8001250:	f00a faa3 	bl	800b79a <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800125a:	f000 fe9b 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001268:	4619      	mov	r1, r3
 800126a:	481c      	ldr	r0, [pc, #112]	; (80012dc <MX_TIM2_Init+0xe8>)
 800126c:	f00a fdee 	bl	800be4c <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001276:	f000 fe8d 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <MX_TIM2_Init+0xe8>)
 800127c:	f00a fb5c 	bl	800b938 <HAL_TIM_PWM_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001286:	f000 fe85 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <MX_TIM2_Init+0xe8>)
 800129a:	f00b fa61 	bl	800c760 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012a4:	f000 fe76 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a8:	2360      	movs	r3, #96	; 0x60
 80012aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <MX_TIM2_Init+0xe8>)
 80012c0:	f00a fcb0 	bl	800bc24 <HAL_TIM_PWM_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80012ca:	f000 fe63 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <MX_TIM2_Init+0xe8>)
 80012d0:	f001 fbd0 	bl	8002a74 <HAL_TIM_MspPostInit>

}
 80012d4:	bf00      	nop
 80012d6:	3738      	adds	r7, #56	; 0x38
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200009ec 	.word	0x200009ec

080012e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	; 0x38
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	615a      	str	r2, [r3, #20]
 8001310:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <MX_TIM3_Init+0xe8>)
 8001314:	4a2d      	ldr	r2, [pc, #180]	; (80013cc <MX_TIM3_Init+0xec>)
 8001316:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <MX_TIM3_Init+0xe8>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <MX_TIM3_Init+0xe8>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <MX_TIM3_Init+0xe8>)
 8001326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <MX_TIM3_Init+0xe8>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <MX_TIM3_Init+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001338:	4823      	ldr	r0, [pc, #140]	; (80013c8 <MX_TIM3_Init+0xe8>)
 800133a:	f00a fa2e 	bl	800b79a <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001344:	f000 fe26 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001352:	4619      	mov	r1, r3
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <MX_TIM3_Init+0xe8>)
 8001356:	f00a fd79 	bl	800be4c <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001360:	f000 fe18 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001364:	4818      	ldr	r0, [pc, #96]	; (80013c8 <MX_TIM3_Init+0xe8>)
 8001366:	f00a fae7 	bl	800b938 <HAL_TIM_PWM_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001370:	f000 fe10 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4811      	ldr	r0, [pc, #68]	; (80013c8 <MX_TIM3_Init+0xe8>)
 8001384:	f00b f9ec 	bl	800c760 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800138e:	f000 fe01 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001392:	2360      	movs	r3, #96	; 0x60
 8001394:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	2200      	movs	r2, #0
 80013a6:	4619      	mov	r1, r3
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <MX_TIM3_Init+0xe8>)
 80013aa:	f00a fc3b 	bl	800bc24 <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013b4:	f000 fdee 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <MX_TIM3_Init+0xe8>)
 80013ba:	f001 fb5b 	bl	8002a74 <HAL_TIM_MspPostInit>

}
 80013be:	bf00      	nop
 80013c0:	3738      	adds	r7, #56	; 0x38
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000a38 	.word	0x20000a38
 80013cc:	40000400 	.word	0x40000400

080013d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	; 0x38
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <MX_TIM5_Init+0xe8>)
 8001404:	4a2d      	ldr	r2, [pc, #180]	; (80014bc <MX_TIM5_Init+0xec>)
 8001406:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001408:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <MX_TIM5_Init+0xe8>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MX_TIM5_Init+0xe8>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <MX_TIM5_Init+0xe8>)
 8001416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800141a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <MX_TIM5_Init+0xe8>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <MX_TIM5_Init+0xe8>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001428:	4823      	ldr	r0, [pc, #140]	; (80014b8 <MX_TIM5_Init+0xe8>)
 800142a:	f00a f9b6 	bl	800b79a <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001434:	f000 fdae 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800143e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001442:	4619      	mov	r1, r3
 8001444:	481c      	ldr	r0, [pc, #112]	; (80014b8 <MX_TIM5_Init+0xe8>)
 8001446:	f00a fd01 	bl	800be4c <HAL_TIM_ConfigClockSource>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001450:	f000 fda0 	bl	8001f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001454:	4818      	ldr	r0, [pc, #96]	; (80014b8 <MX_TIM5_Init+0xe8>)
 8001456:	f00a fa6f 	bl	800b938 <HAL_TIM_PWM_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001460:	f000 fd98 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4811      	ldr	r0, [pc, #68]	; (80014b8 <MX_TIM5_Init+0xe8>)
 8001474:	f00b f974 	bl	800c760 <HAL_TIMEx_MasterConfigSynchronization>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800147e:	f000 fd89 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001482:	2360      	movs	r3, #96	; 0x60
 8001484:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	220c      	movs	r2, #12
 8001496:	4619      	mov	r1, r3
 8001498:	4807      	ldr	r0, [pc, #28]	; (80014b8 <MX_TIM5_Init+0xe8>)
 800149a:	f00a fbc3 	bl	800bc24 <HAL_TIM_PWM_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80014a4:	f000 fd76 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <MX_TIM5_Init+0xe8>)
 80014aa:	f001 fae3 	bl	8002a74 <HAL_TIM_MspPostInit>

}
 80014ae:	bf00      	nop
 80014b0:	3738      	adds	r7, #56	; 0x38
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000a84 	.word	0x20000a84
 80014bc:	40000c00 	.word	0x40000c00

080014c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <MX_TIM8_Init+0xa0>)
 80014e0:	4a20      	ldr	r2, [pc, #128]	; (8001564 <MX_TIM8_Init+0xa4>)
 80014e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <MX_TIM8_Init+0xa0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_TIM8_Init+0xa0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <MX_TIM8_Init+0xa0>)
 80014f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_TIM8_Init+0xa0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <MX_TIM8_Init+0xa0>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_TIM8_Init+0xa0>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800150a:	4815      	ldr	r0, [pc, #84]	; (8001560 <MX_TIM8_Init+0xa0>)
 800150c:	f00a f945 	bl	800b79a <HAL_TIM_Base_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001516:	f000 fd3d 	bl	8001f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4619      	mov	r1, r3
 8001526:	480e      	ldr	r0, [pc, #56]	; (8001560 <MX_TIM8_Init+0xa0>)
 8001528:	f00a fc90 	bl	800be4c <HAL_TIM_ConfigClockSource>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001532:	f000 fd2f 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_TIM8_Init+0xa0>)
 8001548:	f00b f90a 	bl	800c760 <HAL_TIMEx_MasterConfigSynchronization>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001552:	f000 fd1f 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000ad0 	.word	0x20000ad0
 8001564:	40010400 	.word	0x40010400

08001568 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	615a      	str	r2, [r3, #20]
 800157e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_TIM12_Init+0x84>)
 8001582:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <MX_TIM12_Init+0x88>)
 8001584:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <MX_TIM12_Init+0x84>)
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <MX_TIM12_Init+0x84>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_TIM12_Init+0x84>)
 8001594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001598:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_TIM12_Init+0x84>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_TIM12_Init+0x84>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015a6:	4811      	ldr	r0, [pc, #68]	; (80015ec <MX_TIM12_Init+0x84>)
 80015a8:	f00a f9c6 	bl	800b938 <HAL_TIM_PWM_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80015b2:	f000 fcef 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b6:	2360      	movs	r3, #96	; 0x60
 80015b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM12_Init+0x84>)
 80015ce:	f00a fb29 	bl	800bc24 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80015d8:	f000 fcdc 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM12_Init+0x84>)
 80015de:	f001 fa49 	bl	8002a74 <HAL_TIM_MspPostInit>

}
 80015e2:	bf00      	nop
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000b1c 	.word	0x20000b1c
 80015f0:	40001800 	.word	0x40001800

080015f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_USART1_UART_Init+0x58>)
 80015fa:	4a15      	ldr	r2, [pc, #84]	; (8001650 <MX_USART1_UART_Init+0x5c>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_USART1_UART_Init+0x58>)
 8001600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_USART1_UART_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_USART1_UART_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_USART1_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_USART1_UART_Init+0x58>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_USART1_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_USART1_UART_Init+0x58>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_USART1_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_USART1_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_USART1_UART_Init+0x58>)
 8001638:	f00b f9bc 	bl	800c9b4 <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001642:	f000 fca7 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000b68 	.word	0x20000b68
 8001650:	40011000 	.word	0x40011000

08001654 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_USART6_UART_Init+0x58>)
 800165a:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <MX_USART6_UART_Init+0x5c>)
 800165c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MX_USART6_UART_Init+0x58>)
 8001660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001664:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART6_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_USART6_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART6_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART6_UART_Init+0x58>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART6_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART6_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART6_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART6_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART6_UART_Init+0x58>)
 8001698:	f00b f98c 	bl	800c9b4 <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80016a2:	f000 fc77 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000bf0 	.word	0x20000bf0
 80016b0:	40011400 	.word	0x40011400

080016b4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	615a      	str	r2, [r3, #20]
 80016ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <MX_FMC_Init+0x98>)
 80016ce:	4a20      	ldr	r2, [pc, #128]	; (8001750 <MX_FMC_Init+0x9c>)
 80016d0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_FMC_Init+0x98>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MX_FMC_Init+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_FMC_Init+0x98>)
 80016e0:	2204      	movs	r2, #4
 80016e2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <MX_FMC_Init+0x98>)
 80016e6:	2210      	movs	r2, #16
 80016e8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_FMC_Init+0x98>)
 80016ec:	2240      	movs	r2, #64	; 0x40
 80016ee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <MX_FMC_Init+0x98>)
 80016f2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80016f6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_FMC_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <MX_FMC_Init+0x98>)
 8001700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001704:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_FMC_Init+0x98>)
 8001708:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_FMC_Init+0x98>)
 8001710:	2200      	movs	r2, #0
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001714:	2302      	movs	r3, #2
 8001716:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001718:	2307      	movs	r3, #7
 800171a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800171c:	2304      	movs	r3, #4
 800171e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001720:	2307      	movs	r3, #7
 8001722:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001724:	2303      	movs	r3, #3
 8001726:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800172c:	2302      	movs	r3, #2
 800172e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_FMC_Init+0x98>)
 8001736:	f009 fef4 	bl	800b522 <HAL_SDRAM_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001740:	f000 fc28 	bl	8001f94 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001744:	bf00      	nop
 8001746:	3720      	adds	r7, #32
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000c78 	.word	0x20000c78
 8001750:	a0000140 	.word	0xa0000140

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b090      	sub	sp, #64	; 0x40
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800176a:	4bb0      	ldr	r3, [pc, #704]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4aaf      	ldr	r2, [pc, #700]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001770:	f043 0310 	orr.w	r3, r3, #16
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4bad      	ldr	r3, [pc, #692]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001780:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001782:	4baa      	ldr	r3, [pc, #680]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4aa9      	ldr	r2, [pc, #676]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4ba7      	ldr	r3, [pc, #668]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	4ba4      	ldr	r3, [pc, #656]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4aa3      	ldr	r2, [pc, #652]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4ba1      	ldr	r3, [pc, #644]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	623b      	str	r3, [r7, #32]
 80017b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b2:	4b9e      	ldr	r3, [pc, #632]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a9d      	ldr	r2, [pc, #628]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b9b      	ldr	r3, [pc, #620]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	4b98      	ldr	r3, [pc, #608]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a97      	ldr	r2, [pc, #604]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b95      	ldr	r3, [pc, #596]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b92      	ldr	r3, [pc, #584]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a91      	ldr	r2, [pc, #580]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b8f      	ldr	r3, [pc, #572]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017fa:	4b8c      	ldr	r3, [pc, #560]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a8b      	ldr	r2, [pc, #556]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b89      	ldr	r3, [pc, #548]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001812:	4b86      	ldr	r3, [pc, #536]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a85      	ldr	r2, [pc, #532]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b83      	ldr	r3, [pc, #524]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800182a:	4b80      	ldr	r3, [pc, #512]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a7f      	ldr	r2, [pc, #508]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001830:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b7d      	ldr	r3, [pc, #500]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001842:	4b7a      	ldr	r3, [pc, #488]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a79      	ldr	r2, [pc, #484]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001848:	f043 0320 	orr.w	r3, r3, #32
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b77      	ldr	r3, [pc, #476]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	4b74      	ldr	r3, [pc, #464]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a73      	ldr	r2, [pc, #460]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b71      	ldr	r3, [pc, #452]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2120      	movs	r1, #32
 8001876:	486e      	ldr	r0, [pc, #440]	; (8001a30 <MX_GPIO_Init+0x2dc>)
 8001878:	f004 fb32 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	210c      	movs	r1, #12
 8001880:	486c      	ldr	r0, [pc, #432]	; (8001a34 <MX_GPIO_Init+0x2e0>)
 8001882:	f004 fb2d 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2108      	movs	r1, #8
 800188a:	486b      	ldr	r0, [pc, #428]	; (8001a38 <MX_GPIO_Init+0x2e4>)
 800188c:	f004 fb28 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001896:	4867      	ldr	r0, [pc, #412]	; (8001a34 <MX_GPIO_Init+0x2e0>)
 8001898:	f004 fb22 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a2:	4866      	ldr	r0, [pc, #408]	; (8001a3c <MX_GPIO_Init+0x2e8>)
 80018a4:	f004 fb1c 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	21c8      	movs	r1, #200	; 0xc8
 80018ac:	4864      	ldr	r0, [pc, #400]	; (8001a40 <MX_GPIO_Init+0x2ec>)
 80018ae:	f004 fb17 	bl	8005ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80018b2:	2308      	movs	r3, #8
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c2:	4619      	mov	r1, r3
 80018c4:	485f      	ldr	r0, [pc, #380]	; (8001a44 <MX_GPIO_Init+0x2f0>)
 80018c6:	f004 f947 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80018ca:	f643 4323 	movw	r3, #15395	; 0x3c23
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018dc:	230a      	movs	r3, #10
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e4:	4619      	mov	r1, r3
 80018e6:	4858      	ldr	r0, [pc, #352]	; (8001a48 <MX_GPIO_Init+0x2f4>)
 80018e8:	f004 f936 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f2:	2300      	movs	r3, #0
 80018f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fe:	4619      	mov	r1, r3
 8001900:	4852      	ldr	r0, [pc, #328]	; (8001a4c <MX_GPIO_Init+0x2f8>)
 8001902:	f004 f929 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001906:	2340      	movs	r3, #64	; 0x40
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800190a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001918:	4619      	mov	r1, r3
 800191a:	4845      	ldr	r0, [pc, #276]	; (8001a30 <MX_GPIO_Init+0x2dc>)
 800191c:	f004 f91c 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001920:	2320      	movs	r3, #32
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001934:	4619      	mov	r1, r3
 8001936:	483e      	ldr	r0, [pc, #248]	; (8001a30 <MX_GPIO_Init+0x2dc>)
 8001938:	f004 f90e 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800193c:	f241 030c 	movw	r3, #4108	; 0x100c
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	4837      	ldr	r0, [pc, #220]	; (8001a34 <MX_GPIO_Init+0x2e0>)
 8001956:	f004 f8ff 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800195a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196c:	4619      	mov	r1, r3
 800196e:	4838      	ldr	r0, [pc, #224]	; (8001a50 <MX_GPIO_Init+0x2fc>)
 8001970:	f004 f8f2 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001974:	2308      	movs	r3, #8
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	4619      	mov	r1, r3
 800198a:	482b      	ldr	r0, [pc, #172]	; (8001a38 <MX_GPIO_Init+0x2e4>)
 800198c:	f004 f8e4 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001990:	2310      	movs	r3, #16
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001994:	2300      	movs	r3, #0
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a0:	4619      	mov	r1, r3
 80019a2:	4823      	ldr	r0, [pc, #140]	; (8001a30 <MX_GPIO_Init+0x2dc>)
 80019a4:	f004 f8d8 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80019a8:	f248 0304 	movw	r3, #32772	; 0x8004
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ae:	2300      	movs	r3, #0
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ba:	4619      	mov	r1, r3
 80019bc:	481f      	ldr	r0, [pc, #124]	; (8001a3c <MX_GPIO_Init+0x2e8>)
 80019be:	f004 f8cb 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80019c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d8:	4619      	mov	r1, r3
 80019da:	4818      	ldr	r0, [pc, #96]	; (8001a3c <MX_GPIO_Init+0x2e8>)
 80019dc:	f004 f8bc 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f4:	4619      	mov	r1, r3
 80019f6:	480f      	ldr	r0, [pc, #60]	; (8001a34 <MX_GPIO_Init+0x2e0>)
 80019f8:	f004 f8ae 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80019fc:	2310      	movs	r3, #16
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a0c:	230a      	movs	r3, #10
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a14:	4619      	mov	r1, r3
 8001a16:	4809      	ldr	r0, [pc, #36]	; (8001a3c <MX_GPIO_Init+0x2e8>)
 8001a18:	f004 f89e 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001a1c:	23c8      	movs	r3, #200	; 0xc8
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
 8001a28:	e014      	b.n	8001a54 <MX_GPIO_Init+0x300>
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40022000 	.word	0x40022000
 8001a38:	40022800 	.word	0x40022800
 8001a3c:	40021c00 	.word	0x40021c00
 8001a40:	40021800 	.word	0x40021800
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40022400 	.word	0x40022400
 8001a50:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4819      	ldr	r0, [pc, #100]	; (8001ac4 <MX_GPIO_Init+0x370>)
 8001a60:	f004 f87a 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001a64:	2305      	movs	r3, #5
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a74:	230a      	movs	r3, #10
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4812      	ldr	r0, [pc, #72]	; (8001ac8 <MX_GPIO_Init+0x374>)
 8001a80:	f004 f86a 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001a84:	2304      	movs	r3, #4
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a94:	4619      	mov	r1, r3
 8001a96:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <MX_GPIO_Init+0x370>)
 8001a98:	f004 f85e 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001a9c:	2328      	movs	r3, #40	; 0x28
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001aac:	230a      	movs	r3, #10
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_GPIO_Init+0x378>)
 8001ab8:	f004 f84e 	bl	8005b58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001abc:	bf00      	nop
 8001abe:	3740      	adds	r7, #64	; 0x40
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021800 	.word	0x40021800
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40020000 	.word	0x40020000

08001ad0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 8001ad0:	b5b0      	push	{r4, r5, r7, lr}
 8001ad2:	b0ba      	sub	sp, #232	; 0xe8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
	MX_USB_HOST_Init();
 8001ad8:	f021 f9e8 	bl	8022eac <MX_USB_HOST_Init>

  /* init code for LWIP */
	MX_LWIP_Init();
 8001adc:	f00e fab2 	bl	8010044 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

	ip_addr_t server_addr;

	IP_ADDR4(&server_addr, 192, 168, 0, 5);
 8001ae0:	4b6e      	ldr	r3, [pc, #440]	; (8001c9c <StartDefaultTask+0x1cc>)
 8001ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc


	// 네트워크 커넥션 생성
	struct netconn *conn = netconn_new(NETCONN_TCP);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2010      	movs	r0, #16
 8001aec:	f014 fd8a 	bl	8016604 <netconn_new_with_proto_and_callback>
 8001af0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	connection.conn = conn;
 8001af4:	4a6a      	ldr	r2, [pc, #424]	; (8001ca0 <StartDefaultTask+0x1d0>)
 8001af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001afa:	6013      	str	r3, [r2, #0]

	if (conn != NULL) {
 8001afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d07d      	beq.n	8001c00 <StartDefaultTask+0x130>
		// 논블로킹 모드로 설정
//		netconn_set_nonblocking(conn, 1);

		uint8_t data[] = "Network Connection create successfully\n";
 8001b04:	4b67      	ldr	r3, [pc, #412]	; (8001ca4 <StartDefaultTask+0x1d4>)
 8001b06:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001b0a:	461d      	mov	r5, r3
 8001b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b18:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_UART_Transmit(&huart1, data, sizeof(data), HAL_MAX_DELAY);
 8001b1c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b24:	2228      	movs	r2, #40	; 0x28
 8001b26:	4860      	ldr	r0, [pc, #384]	; (8001ca8 <StartDefaultTask+0x1d8>)
 8001b28:	f00a ff92 	bl	800ca50 <HAL_UART_Transmit>

		err_t err = netconn_connect(connection.conn, &server_addr, SERVER_PORT);
 8001b2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ca0 <StartDefaultTask+0x1d0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8001b34:	f241 1294 	movw	r2, #4500	; 0x1194
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f014 fddd 	bl	80166f8 <netconn_connect>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		connection.err = err;
 8001b44:	f997 30e3 	ldrsb.w	r3, [r7, #227]	; 0xe3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <StartDefaultTask+0x1d0>)
 8001b4c:	605a      	str	r2, [r3, #4]

		if (err == ERR_OK) {
 8001b4e:	f997 30e3 	ldrsb.w	r3, [r7, #227]	; 0xe3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d125      	bne.n	8001ba2 <StartDefaultTask+0xd2>
			// 연결 성공
			uint8_t data[] = "Network Connection successfully\n";
 8001b56:	4b55      	ldr	r3, [pc, #340]	; (8001cac <StartDefaultTask+0x1dc>)
 8001b58:	f107 040c 	add.w	r4, r7, #12
 8001b5c:	461d      	mov	r5, r3
 8001b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b66:	682b      	ldr	r3, [r5, #0]
 8001b68:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, data, sizeof(data), HAL_MAX_DELAY);
 8001b6a:	f107 010c 	add.w	r1, r7, #12
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b72:	2221      	movs	r2, #33	; 0x21
 8001b74:	484c      	ldr	r0, [pc, #304]	; (8001ca8 <StartDefaultTask+0x1d8>)
 8001b76:	f00a ff6b 	bl	800ca50 <HAL_UART_Transmit>

			osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 1024);
 8001b7a:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <StartDefaultTask+0x1e0>)
 8001b7c:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8001b80:	461d      	mov	r5, r3
 8001b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001b8e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f011 fba3 	bl	80132e0 <osThreadCreate>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a45      	ldr	r2, [pc, #276]	; (8001cb4 <StartDefaultTask+0x1e4>)
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e043      	b.n	8001c2a <StartDefaultTask+0x15a>

			// 여기서 추가 작업 수행
		} else if (err == ERR_INPROGRESS) {
 8001ba2:	f997 30e3 	ldrsb.w	r3, [r7, #227]	; 0xe3
 8001ba6:	f113 0f05 	cmn.w	r3, #5
 8001baa:	d116      	bne.n	8001bda <StartDefaultTask+0x10a>
			// 연결이 진행 중인 경우
			uint8_t data[] = "Network Connecting...\n";
 8001bac:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <StartDefaultTask+0x1e8>)
 8001bae:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001bb2:	461d      	mov	r5, r3
 8001bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001bbc:	6020      	str	r0, [r4, #0]
 8001bbe:	3404      	adds	r4, #4
 8001bc0:	8021      	strh	r1, [r4, #0]
 8001bc2:	3402      	adds	r4, #2
 8001bc4:	0c0b      	lsrs	r3, r1, #16
 8001bc6:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, data, sizeof(data), HAL_MAX_DELAY);
 8001bc8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd0:	2217      	movs	r2, #23
 8001bd2:	4835      	ldr	r0, [pc, #212]	; (8001ca8 <StartDefaultTask+0x1d8>)
 8001bd4:	f00a ff3c 	bl	800ca50 <HAL_UART_Transmit>
 8001bd8:	e027      	b.n	8001c2a <StartDefaultTask+0x15a>
			// 여기서 연결이 완료될 때까지 대기하거나 다른 작업을 수행
		} else {
			// 연결 실패
			uint8_t data[] = "Network Connection failed...\n";
 8001bda:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <StartDefaultTask+0x1ec>)
 8001bdc:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8001be0:	461d      	mov	r5, r3
 8001be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001bea:	c407      	stmia	r4!, {r0, r1, r2}
 8001bec:	8023      	strh	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, data, sizeof(data), HAL_MAX_DELAY);
 8001bee:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bf6:	221e      	movs	r2, #30
 8001bf8:	482b      	ldr	r0, [pc, #172]	; (8001ca8 <StartDefaultTask+0x1d8>)
 8001bfa:	f00a ff29 	bl	800ca50 <HAL_UART_Transmit>
 8001bfe:	e014      	b.n	8001c2a <StartDefaultTask+0x15a>
			// 오류 처리
		}
		// 연결 시도
	} else {
		// 네트워크 커넥션 생성 실패
		uint8_t data[] = "Network Connection create failed...\n";
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <StartDefaultTask+0x1f0>)
 8001c02:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001c06:	461d      	mov	r5, r3
 8001c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c14:	6020      	str	r0, [r4, #0]
 8001c16:	3404      	adds	r4, #4
 8001c18:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart1, data, sizeof(data), HAL_MAX_DELAY);
 8001c1a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c22:	2225      	movs	r2, #37	; 0x25
 8001c24:	4820      	ldr	r0, [pc, #128]	; (8001ca8 <StartDefaultTask+0x1d8>)
 8001c26:	f00a ff13 	bl	800ca50 <HAL_UART_Transmit>
		// 오류 처리
	}

	/* Infinite loop */
	for (;;) {
		if (data_received_flag) {
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <StartDefaultTask+0x1f4>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d02e      	beq.n	8001c92 <StartDefaultTask+0x1c2>
			data_received_flag = 0; // 플래그 초기화
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <StartDefaultTask+0x1f4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
			if (strncmp( (char *)rx_buffer, "push", 4) == 0) {
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	4922      	ldr	r1, [pc, #136]	; (8001cc8 <StartDefaultTask+0x1f8>)
 8001c3e:	4823      	ldr	r0, [pc, #140]	; (8001ccc <StartDefaultTask+0x1fc>)
 8001c40:	f021 fe27 	bl	8023892 <strncmp>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d113      	bne.n	8001c72 <StartDefaultTask+0x1a2>
				osThreadDef(netconnConnecti, StartTask03, osPriorityHigh, 0,
 8001c4a:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <StartDefaultTask+0x200>)
 8001c4c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001c50:	461d      	mov	r5, r3
 8001c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						1024);
				netconnConnectiHandle = osThreadCreate(
 8001c5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f011 fb3b 	bl	80132e0 <osThreadCreate>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <StartDefaultTask+0x204>)
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	e00f      	b.n	8001c92 <StartDefaultTask+0x1c2>
						osThread(netconnConnecti), NULL);
			} else {
				uint8_t response[] = "Received failed\n";
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <StartDefaultTask+0x208>)
 8001c74:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001c78:	461d      	mov	r5, r3
 8001c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7e:	682b      	ldr	r3, [r5, #0]
 8001c80:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart1, response, sizeof(response),
 8001c82:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c8a:	2211      	movs	r2, #17
 8001c8c:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <StartDefaultTask+0x1d8>)
 8001c8e:	f00a fedf 	bl	800ca50 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
			}
		}
		osDelay(100); // 적절한 딜레이 추가
 8001c92:	2064      	movs	r0, #100	; 0x64
 8001c94:	f011 fb7c 	bl	8013390 <osDelay>
		if (data_received_flag) {
 8001c98:	e7c7      	b.n	8001c2a <StartDefaultTask+0x15a>
 8001c9a:	bf00      	nop
 8001c9c:	0500a8c0 	.word	0x0500a8c0
 8001ca0:	20000ec4 	.word	0x20000ec4
 8001ca4:	08024a68 	.word	0x08024a68
 8001ca8:	20000b68 	.word	0x20000b68
 8001cac:	08024a90 	.word	0x08024a90
 8001cb0:	08024a44 	.word	0x08024a44
 8001cb4:	20000cb0 	.word	0x20000cb0
 8001cb8:	08024ab4 	.word	0x08024ab4
 8001cbc:	08024acc 	.word	0x08024acc
 8001cc0:	08024aec 	.word	0x08024aec
 8001cc4:	20000eb8 	.word	0x20000eb8
 8001cc8:	08024a60 	.word	0x08024a60
 8001ccc:	20000ebc 	.word	0x20000ebc
 8001cd0:	08024b24 	.word	0x08024b24
 8001cd4:	20000cb4 	.word	0x20000cb4
 8001cd8:	08024b40 	.word	0x08024b40

08001cdc <StartTask02>:
* @brief Function implementing the myTask02 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN StartTask02 */
/* Infinite loop */

	for (;;) {
		osDelay(1);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f011 fb53 	bl	8013390 <osDelay>
 8001cea:	e7fb      	b.n	8001ce4 <StartTask02+0x8>

08001cec <lwip_strer>:

	/* USER CODE END StartTask02 */
}

/* USER CODE BEGIN Header_StartTask03 */
const char* lwip_strer(err_t err) {
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]

	switch (err) {
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	330e      	adds	r3, #14
 8001cfc:	2b0e      	cmp	r3, #14
 8001cfe:	d83b      	bhi.n	8001d78 <lwip_strer+0x8c>
 8001d00:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <lwip_strer+0x1c>)
 8001d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d06:	bf00      	nop
 8001d08:	08001d75 	.word	0x08001d75
 8001d0c:	08001d71 	.word	0x08001d71
 8001d10:	08001d79 	.word	0x08001d79
 8001d14:	08001d79 	.word	0x08001d79
 8001d18:	08001d6d 	.word	0x08001d6d
 8001d1c:	08001d69 	.word	0x08001d69
 8001d20:	08001d65 	.word	0x08001d65
 8001d24:	08001d61 	.word	0x08001d61
 8001d28:	08001d5d 	.word	0x08001d5d
 8001d2c:	08001d59 	.word	0x08001d59
 8001d30:	08001d55 	.word	0x08001d55
 8001d34:	08001d51 	.word	0x08001d51
 8001d38:	08001d4d 	.word	0x08001d4d
 8001d3c:	08001d49 	.word	0x08001d49
 8001d40:	08001d45 	.word	0x08001d45
	case ERR_OK:
		return "No error";
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <lwip_strer+0x9c>)
 8001d46:	e018      	b.n	8001d7a <lwip_strer+0x8e>
	case ERR_MEM:
		return "Out of memory error";
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <lwip_strer+0xa0>)
 8001d4a:	e016      	b.n	8001d7a <lwip_strer+0x8e>
	case ERR_BUF:
		return "Buffer error";
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <lwip_strer+0xa4>)
 8001d4e:	e014      	b.n	8001d7a <lwip_strer+0x8e>
	case ERR_TIMEOUT:
		return "Timeout error";
 8001d50:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <lwip_strer+0xa8>)
 8001d52:	e012      	b.n	8001d7a <lwip_strer+0x8e>
	case ERR_RTE:
		return "Routing problem";
 8001d54:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <lwip_strer+0xac>)
 8001d56:	e010      	b.n	8001d7a <lwip_strer+0x8e>
	case ERR_INPROGRESS:
		return "Operation in progress";
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <lwip_strer+0xb0>)
 8001d5a:	e00e      	b.n	8001d7a <lwip_strer+0x8e>
	case ERR_VAL:
		return "Invalid argument";
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <lwip_strer+0xb4>)
 8001d5e:	e00c      	b.n	8001d7a <lwip_strer+0x8e>
	case ERR_WOULDBLOCK:
		return "Operation would block";
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <lwip_strer+0xb8>)
 8001d62:	e00a      	b.n	8001d7a <lwip_strer+0x8e>
	case ERR_USE:
		return "Resource in use";
 8001d64:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <lwip_strer+0xbc>)
 8001d66:	e008      	b.n	8001d7a <lwip_strer+0x8e>
	case ERR_ALREADY:
		return "Already connected";
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <lwip_strer+0xc0>)
 8001d6a:	e006      	b.n	8001d7a <lwip_strer+0x8e>
	case ERR_ISCONN:
		return "Connection already established";
 8001d6c:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <lwip_strer+0xc4>)
 8001d6e:	e004      	b.n	8001d7a <lwip_strer+0x8e>
	case ERR_ABRT:
		return "Connection aborted";
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <lwip_strer+0xc8>)
 8001d72:	e002      	b.n	8001d7a <lwip_strer+0x8e>
	case ERR_RST:
		return "Connection reset";
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <lwip_strer+0xcc>)
 8001d76:	e000      	b.n	8001d7a <lwip_strer+0x8e>
	default:
		return "Unknown error";
 8001d78:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <lwip_strer+0xd0>)
	}
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	08024b54 	.word	0x08024b54
 8001d8c:	08024b60 	.word	0x08024b60
 8001d90:	08024b74 	.word	0x08024b74
 8001d94:	08024b84 	.word	0x08024b84
 8001d98:	08024b94 	.word	0x08024b94
 8001d9c:	08024ba4 	.word	0x08024ba4
 8001da0:	08024bbc 	.word	0x08024bbc
 8001da4:	08024bd0 	.word	0x08024bd0
 8001da8:	08024be8 	.word	0x08024be8
 8001dac:	08024bf8 	.word	0x08024bf8
 8001db0:	08024c0c 	.word	0x08024c0c
 8001db4:	08024c2c 	.word	0x08024c2c
 8001db8:	08024c40 	.word	0x08024c40
 8001dbc:	08024c54 	.word	0x08024c54

08001dc0 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b0b0      	sub	sp, #192	; 0xc0
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */


	struct netconn *conn = connection.conn;
 8001dc8:	4b61      	ldr	r3, [pc, #388]	; (8001f50 <StartTask03+0x190>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	err_t err = connection.err;
 8001dd0:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <StartTask03+0x190>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

	uint8_t data[] = "HTTP request start \n";
 8001dd8:	4b5e      	ldr	r3, [pc, #376]	; (8001f54 <StartTask03+0x194>)
 8001dda:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001dde:	461d      	mov	r5, r3
 8001de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001de4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001de8:	6020      	str	r0, [r4, #0]
 8001dea:	3404      	adds	r4, #4
 8001dec:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart1, data, sizeof(data), HAL_MAX_DELAY);
 8001dee:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df6:	2215      	movs	r2, #21
 8001df8:	4857      	ldr	r0, [pc, #348]	; (8001f58 <StartTask03+0x198>)
 8001dfa:	f00a fe29 	bl	800ca50 <HAL_UART_Transmit>


// 구조체 변수 멤버 사용
	/* USER CODE BEGIN 5 */

	if (conn != NULL) {
 8001dfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 808a 	beq.w	8001f1c <StartTask03+0x15c>

		if (err == ERR_OK) {
 8001e08:	f997 30b3 	ldrsb.w	r3, [r7, #179]	; 0xb3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d156      	bne.n	8001ebe <StartTask03+0xfe>

			// 연결이 성공하면 HTTP 요청 전송
			err = netconn_write(conn, http_request, strlen(http_request),
 8001e10:	4852      	ldr	r0, [pc, #328]	; (8001f5c <StartTask03+0x19c>)
 8001e12:	f7fe f9fd 	bl	8000210 <strlen>
 8001e16:	4602      	mov	r2, r0
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	494f      	ldr	r1, [pc, #316]	; (8001f5c <StartTask03+0x19c>)
 8001e20:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001e24:	f014 fca0 	bl	8016768 <netconn_write_partly>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
					NETCONN_NOCOPY);

			if (err == ERR_OK) {
 8001e2e:	f997 30b3 	ldrsb.w	r3, [r7, #179]	; 0xb3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d115      	bne.n	8001e62 <StartTask03+0xa2>
				uint8_t data[] = "HTTP request sent successfully.\n\n";
 8001e36:	4b4a      	ldr	r3, [pc, #296]	; (8001f60 <StartTask03+0x1a0>)
 8001e38:	f107 040c 	add.w	r4, r7, #12
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e46:	682b      	ldr	r3, [r5, #0]
 8001e48:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart1, data, sizeof(data), HAL_MAX_DELAY);
 8001e4a:	f107 010c 	add.w	r1, r7, #12
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e52:	2222      	movs	r2, #34	; 0x22
 8001e54:	4840      	ldr	r0, [pc, #256]	; (8001f58 <StartTask03+0x198>)
 8001e56:	f00a fdfb 	bl	800ca50 <HAL_UART_Transmit>
//				netconnConnectiHandle = NULL;

				vTaskDelete(NULL);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f013 f818 	bl	8014e90 <vTaskDelete>
 8001e60:	e071      	b.n	8001f46 <StartTask03+0x186>
				// 여기서부터 응답 처리 등 추가 작업 수행
			} else {
				const char *err_msg = "err : ";
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <StartTask03+0x1a4>)
 8001e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				char combined_msg[100]; // 충분한 크기의 버퍼 생성
				strcpy(combined_msg, err_msg); // 첫 번째 문자열 복사
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001e70:	4618      	mov	r0, r3
 8001e72:	f021 fdee 	bl	8023a52 <strcpy>
				strcat(combined_msg, lwip_strer(err));
 8001e76:	f997 30b3 	ldrsb.w	r3, [r7, #179]	; 0xb3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff36 	bl	8001cec <lwip_strer>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f021 fcf3 	bl	8023874 <strcat>
				HAL_UART_Transmit(&huart1, (uint8_t*) err_msg, strlen(err_msg),HAL_MAX_DELAY);
 8001e8e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001e92:	f7fe f9bd 	bl	8000210 <strlen>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e9e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001ea2:	482d      	ldr	r0, [pc, #180]	; (8001f58 <StartTask03+0x198>)
 8001ea4:	f00a fdd4 	bl	800ca50 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, "\n ", strlen("\n"),HAL_MAX_DELAY);
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eac:	2201      	movs	r2, #1
 8001eae:	492e      	ldr	r1, [pc, #184]	; (8001f68 <StartTask03+0x1a8>)
 8001eb0:	4829      	ldr	r0, [pc, #164]	; (8001f58 <StartTask03+0x198>)
 8001eb2:	f00a fdcd 	bl	800ca50 <HAL_UART_Transmit>
//				netconnConnectiHandle = NULL;
				vTaskDelete(NULL);
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f012 ffea 	bl	8014e90 <vTaskDelete>
 8001ebc:	e043      	b.n	8001f46 <StartTask03+0x186>
			}
		} else {
			const char *err_msg = "err : ";
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <StartTask03+0x1a4>)
 8001ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			char combined_msg[100]; // 충분한 크기의 버퍼 생성
			strcpy(combined_msg, err_msg); // 첫 번째 문자열 복사
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f021 fdc0 	bl	8023a52 <strcpy>
			strcat(combined_msg, lwip_strer(err)); // 두 번째 문자열 연결
 8001ed2:	f997 30b3 	ldrsb.w	r3, [r7, #179]	; 0xb3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff08 	bl	8001cec <lwip_strer>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f021 fcc5 	bl	8023874 <strcat>
			HAL_UART_Transmit(&huart1, (uint8_t*) combined_msg, strlen(combined_msg), HAL_MAX_DELAY);
 8001eea:	f107 030c 	add.w	r3, r7, #12
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe f98e 	bl	8000210 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	f107 010c 	add.w	r1, r7, #12
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f00:	4815      	ldr	r0, [pc, #84]	; (8001f58 <StartTask03+0x198>)
 8001f02:	f00a fda5 	bl	800ca50 <HAL_UART_Transmit>
//			netconnConnectiHandle = NULL;
			HAL_UART_Transmit(&huart1, "\n ", strlen("\n"),HAL_MAX_DELAY);
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4916      	ldr	r1, [pc, #88]	; (8001f68 <StartTask03+0x1a8>)
 8001f0e:	4812      	ldr	r0, [pc, #72]	; (8001f58 <StartTask03+0x198>)
 8001f10:	f00a fd9e 	bl	800ca50 <HAL_UART_Transmit>
			vTaskDelete(NULL);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f012 ffbb 	bl	8014e90 <vTaskDelete>
 8001f1a:	e014      	b.n	8001f46 <StartTask03+0x186>
		}
		// 연결 해제
//		netconn_delete(conn);
	} else {
		uint8_t data[] = "Failed to create connection.\n";
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <StartTask03+0x1ac>)
 8001f1e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001f22:	461d      	mov	r5, r3
 8001f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f2c:	c407      	stmia	r4!, {r0, r1, r2}
 8001f2e:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, data, sizeof(data), HAL_MAX_DELAY);
 8001f30:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f38:	221e      	movs	r2, #30
 8001f3a:	4807      	ldr	r0, [pc, #28]	; (8001f58 <StartTask03+0x198>)
 8001f3c:	f00a fd88 	bl	800ca50 <HAL_UART_Transmit>
//		netconnConnectiHandle= NULL;
		vTaskDelete(NULL);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f012 ffa5 	bl	8014e90 <vTaskDelete>
	}
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f011 fa22 	bl	8013390 <osDelay>
 8001f4c:	e7fb      	b.n	8001f46 <StartTask03+0x186>
 8001f4e:	bf00      	nop
 8001f50:	20000ec4 	.word	0x20000ec4
 8001f54:	08024c70 	.word	0x08024c70
 8001f58:	20000b68 	.word	0x20000b68
 8001f5c:	20000cb8 	.word	0x20000cb8
 8001f60:	08024c88 	.word	0x08024c88
 8001f64:	08024c64 	.word	0x08024c64
 8001f68:	08024c6c 	.word	0x08024c6c
 8001f6c:	08024cac 	.word	0x08024cac

08001f70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f82:	f001 fb59 	bl	8003638 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40001000 	.word	0x40001000

08001f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f98:	b672      	cpsid	i
}
 8001f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <Error_Handler+0x8>
	...

08001fa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_MspInit+0x4c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_MspInit+0x4c>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_MspInit+0x4c>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_MspInit+0x4c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_MspInit+0x4c>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_MspInit+0x4c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	210f      	movs	r1, #15
 8001fda:	f06f 0001 	mvn.w	r0, #1
 8001fde:	f001 fec7 	bl	8003d70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a21      	ldr	r2, [pc, #132]	; (8002094 <HAL_ADC_MspInit+0xa4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d13c      	bne.n	800208c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002012:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_ADC_MspInit+0xa8>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a20      	ldr	r2, [pc, #128]	; (8002098 <HAL_ADC_MspInit+0xa8>)
 8002018:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <HAL_ADC_MspInit+0xa8>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800202a:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_ADC_MspInit+0xa8>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <HAL_ADC_MspInit+0xa8>)
 8002030:	f043 0320 	orr.w	r3, r3, #32
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_ADC_MspInit+0xa8>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_ADC_MspInit+0xa8>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a14      	ldr	r2, [pc, #80]	; (8002098 <HAL_ADC_MspInit+0xa8>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_ADC_MspInit+0xa8>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800205a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800205e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002060:	2303      	movs	r3, #3
 8002062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	480b      	ldr	r0, [pc, #44]	; (800209c <HAL_ADC_MspInit+0xac>)
 8002070:	f003 fd72 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002074:	2301      	movs	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002078:	2303      	movs	r3, #3
 800207a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4619      	mov	r1, r3
 8002086:	4806      	ldr	r0, [pc, #24]	; (80020a0 <HAL_ADC_MspInit+0xb0>)
 8002088:	f003 fd66 	bl	8005b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800208c:	bf00      	nop
 800208e:	3728      	adds	r7, #40	; 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40012200 	.word	0x40012200
 8002098:	40023800 	.word	0x40023800
 800209c:	40021400 	.word	0x40021400
 80020a0:	40020000 	.word	0x40020000

080020a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <HAL_CRC_MspInit+0x38>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d10b      	bne.n	80020ce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_CRC_MspInit+0x3c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <HAL_CRC_MspInit+0x3c>)
 80020bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <HAL_CRC_MspInit+0x3c>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40023000 	.word	0x40023000
 80020e0:	40023800 	.word	0x40023800

080020e4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08e      	sub	sp, #56	; 0x38
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a50      	ldr	r2, [pc, #320]	; (8002244 <HAL_DCMI_MspInit+0x160>)
 8002102:	4293      	cmp	r3, r2
 8002104:	f040 809a 	bne.w	800223c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002108:	4b4f      	ldr	r3, [pc, #316]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 800210a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210c:	4a4e      	ldr	r2, [pc, #312]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6353      	str	r3, [r2, #52]	; 0x34
 8002114:	4b4c      	ldr	r3, [pc, #304]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 8002116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	623b      	str	r3, [r7, #32]
 800211e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002120:	4b49      	ldr	r3, [pc, #292]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	4a48      	ldr	r2, [pc, #288]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 8002126:	f043 0310 	orr.w	r3, r3, #16
 800212a:	6313      	str	r3, [r2, #48]	; 0x30
 800212c:	4b46      	ldr	r3, [pc, #280]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002138:	4b43      	ldr	r3, [pc, #268]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	4a42      	ldr	r2, [pc, #264]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 800213e:	f043 0308 	orr.w	r3, r3, #8
 8002142:	6313      	str	r3, [r2, #48]	; 0x30
 8002144:	4b40      	ldr	r3, [pc, #256]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002150:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	4a3c      	ldr	r2, [pc, #240]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 8002156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800215a:	6313      	str	r3, [r2, #48]	; 0x30
 800215c:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002168:	4b37      	ldr	r3, [pc, #220]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	4a36      	ldr	r2, [pc, #216]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 800216e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002172:	6313      	str	r3, [r2, #48]	; 0x30
 8002174:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002180:	4b31      	ldr	r3, [pc, #196]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	4a30      	ldr	r2, [pc, #192]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6313      	str	r3, [r2, #48]	; 0x30
 800218c:	4b2e      	ldr	r3, [pc, #184]	; (8002248 <HAL_DCMI_MspInit+0x164>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002198:	2360      	movs	r3, #96	; 0x60
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021a8:	230d      	movs	r3, #13
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b0:	4619      	mov	r1, r3
 80021b2:	4826      	ldr	r0, [pc, #152]	; (800224c <HAL_DCMI_MspInit+0x168>)
 80021b4:	f003 fcd0 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80021b8:	2308      	movs	r3, #8
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021c8:	230d      	movs	r3, #13
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	481f      	ldr	r0, [pc, #124]	; (8002250 <HAL_DCMI_MspInit+0x16c>)
 80021d4:	f003 fcc0 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80021d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021ea:	230d      	movs	r3, #13
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4817      	ldr	r0, [pc, #92]	; (8002254 <HAL_DCMI_MspInit+0x170>)
 80021f6:	f003 fcaf 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80021fa:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800220c:	230d      	movs	r3, #13
 800220e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002214:	4619      	mov	r1, r3
 8002216:	4810      	ldr	r0, [pc, #64]	; (8002258 <HAL_DCMI_MspInit+0x174>)
 8002218:	f003 fc9e 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800221c:	2350      	movs	r3, #80	; 0x50
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800222c:	230d      	movs	r3, #13
 800222e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002234:	4619      	mov	r1, r3
 8002236:	4809      	ldr	r0, [pc, #36]	; (800225c <HAL_DCMI_MspInit+0x178>)
 8002238:	f003 fc8e 	bl	8005b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3738      	adds	r7, #56	; 0x38
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	50050000 	.word	0x50050000
 8002248:	40023800 	.word	0x40023800
 800224c:	40021000 	.word	0x40021000
 8002250:	40020c00 	.word	0x40020c00
 8002254:	40021800 	.word	0x40021800
 8002258:	40021c00 	.word	0x40021c00
 800225c:	40020000 	.word	0x40020000

08002260 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <HAL_DMA2D_MspInit+0x44>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d113      	bne.n	800229a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <HAL_DMA2D_MspInit+0x48>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <HAL_DMA2D_MspInit+0x48>)
 8002278:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_DMA2D_MspInit+0x48>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2105      	movs	r1, #5
 800228e:	205a      	movs	r0, #90	; 0x5a
 8002290:	f001 fd6e 	bl	8003d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002294:	205a      	movs	r0, #90	; 0x5a
 8002296:	f001 fd87 	bl	8003da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	4002b000 	.word	0x4002b000
 80022a8:	40023800 	.word	0x40023800

080022ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b0ac      	sub	sp, #176	; 0xb0
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c4:	f107 0318 	add.w	r3, r7, #24
 80022c8:	2284      	movs	r2, #132	; 0x84
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f021 fb1c 	bl	802390a <memset>
  if(hi2c->Instance==I2C1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a44      	ldr	r2, [pc, #272]	; (80023e8 <HAL_I2C_MspInit+0x13c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d13d      	bne.n	8002358 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e6:	f107 0318 	add.w	r3, r7, #24
 80022ea:	4618      	mov	r0, r3
 80022ec:	f006 fdbc 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022f6:	f7ff fe4d 	bl	8001f94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4b3c      	ldr	r3, [pc, #240]	; (80023ec <HAL_I2C_MspInit+0x140>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a3b      	ldr	r2, [pc, #236]	; (80023ec <HAL_I2C_MspInit+0x140>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b39      	ldr	r3, [pc, #228]	; (80023ec <HAL_I2C_MspInit+0x140>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002312:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231a:	2312      	movs	r3, #18
 800231c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002320:	2301      	movs	r3, #1
 8002322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800232c:	2304      	movs	r3, #4
 800232e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002336:	4619      	mov	r1, r3
 8002338:	482d      	ldr	r0, [pc, #180]	; (80023f0 <HAL_I2C_MspInit+0x144>)
 800233a:	f003 fc0d 	bl	8005b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800233e:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_I2C_MspInit+0x140>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a2a      	ldr	r2, [pc, #168]	; (80023ec <HAL_I2C_MspInit+0x140>)
 8002344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b28      	ldr	r3, [pc, #160]	; (80023ec <HAL_I2C_MspInit+0x140>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002356:	e042      	b.n	80023de <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <HAL_I2C_MspInit+0x148>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d13d      	bne.n	80023de <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002366:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002368:	2300      	movs	r3, #0
 800236a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236e:	f107 0318 	add.w	r3, r7, #24
 8002372:	4618      	mov	r0, r3
 8002374:	f006 fd78 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800237e:	f7ff fe09 	bl	8001f94 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_I2C_MspInit+0x140>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_I2C_MspInit+0x140>)
 8002388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_I2C_MspInit+0x140>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800239a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800239e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023a2:	2312      	movs	r3, #18
 80023a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023b4:	2304      	movs	r3, #4
 80023b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023be:	4619      	mov	r1, r3
 80023c0:	480d      	ldr	r0, [pc, #52]	; (80023f8 <HAL_I2C_MspInit+0x14c>)
 80023c2:	f003 fbc9 	bl	8005b58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_I2C_MspInit+0x140>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_I2C_MspInit+0x140>)
 80023cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_I2C_MspInit+0x140>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
}
 80023de:	bf00      	nop
 80023e0:	37b0      	adds	r7, #176	; 0xb0
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40005400 	.word	0x40005400
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40005c00 	.word	0x40005c00
 80023f8:	40021c00 	.word	0x40021c00

080023fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08e      	sub	sp, #56	; 0x38
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a55      	ldr	r2, [pc, #340]	; (8002570 <HAL_LTDC_MspInit+0x174>)
 800241a:	4293      	cmp	r3, r2
 800241c:	f040 80a3 	bne.w	8002566 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002420:	4b54      	ldr	r3, [pc, #336]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	4a53      	ldr	r2, [pc, #332]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 8002426:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800242a:	6453      	str	r3, [r2, #68]	; 0x44
 800242c:	4b51      	ldr	r3, [pc, #324]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002434:	623b      	str	r3, [r7, #32]
 8002436:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002438:	4b4e      	ldr	r3, [pc, #312]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	4a4d      	ldr	r2, [pc, #308]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 800243e:	f043 0310 	orr.w	r3, r3, #16
 8002442:	6313      	str	r3, [r2, #48]	; 0x30
 8002444:	4b4b      	ldr	r3, [pc, #300]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002450:	4b48      	ldr	r3, [pc, #288]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	4a47      	ldr	r2, [pc, #284]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 8002456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800245a:	6313      	str	r3, [r2, #48]	; 0x30
 800245c:	4b45      	ldr	r3, [pc, #276]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002468:	4b42      	ldr	r3, [pc, #264]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4a41      	ldr	r2, [pc, #260]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 800246e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002472:	6313      	str	r3, [r2, #48]	; 0x30
 8002474:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002480:	4b3c      	ldr	r3, [pc, #240]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	4a3b      	ldr	r2, [pc, #236]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 8002486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800248a:	6313      	str	r3, [r2, #48]	; 0x30
 800248c:	4b39      	ldr	r3, [pc, #228]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	4a35      	ldr	r2, [pc, #212]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 800249e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a2:	6313      	str	r3, [r2, #48]	; 0x30
 80024a4:	4b33      	ldr	r3, [pc, #204]	; (8002574 <HAL_LTDC_MspInit+0x178>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80024b0:	2310      	movs	r3, #16
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024c0:	230e      	movs	r3, #14
 80024c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80024c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c8:	4619      	mov	r1, r3
 80024ca:	482b      	ldr	r0, [pc, #172]	; (8002578 <HAL_LTDC_MspInit+0x17c>)
 80024cc:	f003 fb44 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80024d0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024e2:	230e      	movs	r3, #14
 80024e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80024e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ea:	4619      	mov	r1, r3
 80024ec:	4823      	ldr	r0, [pc, #140]	; (800257c <HAL_LTDC_MspInit+0x180>)
 80024ee:	f003 fb33 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80024f2:	23f7      	movs	r3, #247	; 0xf7
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002502:	230e      	movs	r3, #14
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250a:	4619      	mov	r1, r3
 800250c:	481c      	ldr	r0, [pc, #112]	; (8002580 <HAL_LTDC_MspInit+0x184>)
 800250e:	f003 fb23 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002524:	2309      	movs	r3, #9
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252c:	4619      	mov	r1, r3
 800252e:	4815      	ldr	r0, [pc, #84]	; (8002584 <HAL_LTDC_MspInit+0x188>)
 8002530:	f003 fb12 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002534:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002546:	230e      	movs	r3, #14
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800254a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254e:	4619      	mov	r1, r3
 8002550:	480d      	ldr	r0, [pc, #52]	; (8002588 <HAL_LTDC_MspInit+0x18c>)
 8002552:	f003 fb01 	bl	8005b58 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2105      	movs	r1, #5
 800255a:	2058      	movs	r0, #88	; 0x58
 800255c:	f001 fc08 	bl	8003d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002560:	2058      	movs	r0, #88	; 0x58
 8002562:	f001 fc21 	bl	8003da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002566:	bf00      	nop
 8002568:	3738      	adds	r7, #56	; 0x38
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40016800 	.word	0x40016800
 8002574:	40023800 	.word	0x40023800
 8002578:	40021000 	.word	0x40021000
 800257c:	40022400 	.word	0x40022400
 8002580:	40022800 	.word	0x40022800
 8002584:	40021800 	.word	0x40021800
 8002588:	40022000 	.word	0x40022000

0800258c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	; 0x30
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a3b      	ldr	r2, [pc, #236]	; (8002698 <HAL_QSPI_MspInit+0x10c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d170      	bne.n	8002690 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80025ae:	4b3b      	ldr	r3, [pc, #236]	; (800269c <HAL_QSPI_MspInit+0x110>)
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	4a3a      	ldr	r2, [pc, #232]	; (800269c <HAL_QSPI_MspInit+0x110>)
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	6393      	str	r3, [r2, #56]	; 0x38
 80025ba:	4b38      	ldr	r3, [pc, #224]	; (800269c <HAL_QSPI_MspInit+0x110>)
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025c6:	4b35      	ldr	r3, [pc, #212]	; (800269c <HAL_QSPI_MspInit+0x110>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a34      	ldr	r2, [pc, #208]	; (800269c <HAL_QSPI_MspInit+0x110>)
 80025cc:	f043 0310 	orr.w	r3, r3, #16
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_QSPI_MspInit+0x110>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	4b2f      	ldr	r3, [pc, #188]	; (800269c <HAL_QSPI_MspInit+0x110>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a2e      	ldr	r2, [pc, #184]	; (800269c <HAL_QSPI_MspInit+0x110>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b2c      	ldr	r3, [pc, #176]	; (800269c <HAL_QSPI_MspInit+0x110>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f6:	4b29      	ldr	r3, [pc, #164]	; (800269c <HAL_QSPI_MspInit+0x110>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a28      	ldr	r2, [pc, #160]	; (800269c <HAL_QSPI_MspInit+0x110>)
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <HAL_QSPI_MspInit+0x110>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800260e:	2304      	movs	r3, #4
 8002610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261a:	2303      	movs	r3, #3
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800261e:	2309      	movs	r3, #9
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002622:	f107 031c 	add.w	r3, r7, #28
 8002626:	4619      	mov	r1, r3
 8002628:	481d      	ldr	r0, [pc, #116]	; (80026a0 <HAL_QSPI_MspInit+0x114>)
 800262a:	f003 fa95 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800262e:	2340      	movs	r3, #64	; 0x40
 8002630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800263e:	230a      	movs	r3, #10
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4619      	mov	r1, r3
 8002648:	4816      	ldr	r0, [pc, #88]	; (80026a4 <HAL_QSPI_MspInit+0x118>)
 800264a:	f003 fa85 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800264e:	2304      	movs	r3, #4
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265a:	2303      	movs	r3, #3
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800265e:	2309      	movs	r3, #9
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	480e      	ldr	r0, [pc, #56]	; (80026a4 <HAL_QSPI_MspInit+0x118>)
 800266a:	f003 fa75 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800266e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002680:	2309      	movs	r3, #9
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002684:	f107 031c 	add.w	r3, r7, #28
 8002688:	4619      	mov	r1, r3
 800268a:	4807      	ldr	r0, [pc, #28]	; (80026a8 <HAL_QSPI_MspInit+0x11c>)
 800268c:	f003 fa64 	bl	8005b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002690:	bf00      	nop
 8002692:	3730      	adds	r7, #48	; 0x30
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	a0001000 	.word	0xa0001000
 800269c:	40023800 	.word	0x40023800
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40020400 	.word	0x40020400
 80026a8:	40020c00 	.word	0x40020c00

080026ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0a4      	sub	sp, #144	; 0x90
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	2284      	movs	r2, #132	; 0x84
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f021 f924 	bl	802390a <memset>
  if(hrtc->Instance==RTC)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <HAL_RTC_MspInit+0x54>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d114      	bne.n	80026f6 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026cc:	2320      	movs	r3, #32
 80026ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	4618      	mov	r0, r3
 80026dc:	f006 fbc4 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80026e6:	f7ff fc55 	bl	8001f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RTC_MspInit+0x58>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <HAL_RTC_MspInit+0x58>)
 80026f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026f6:	bf00      	nop
 80026f8:	3790      	adds	r7, #144	; 0x90
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40002800 	.word	0x40002800
 8002704:	40023800 	.word	0x40023800

08002708 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a25      	ldr	r2, [pc, #148]	; (80027bc <HAL_SD_MspInit+0xb4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d144      	bne.n	80027b4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800272a:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <HAL_SD_MspInit+0xb8>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <HAL_SD_MspInit+0xb8>)
 8002730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002734:	6453      	str	r3, [r2, #68]	; 0x44
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_SD_MspInit+0xb8>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <HAL_SD_MspInit+0xb8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <HAL_SD_MspInit+0xb8>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <HAL_SD_MspInit+0xb8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_SD_MspInit+0xb8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <HAL_SD_MspInit+0xb8>)
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <HAL_SD_MspInit+0xb8>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002772:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002776:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002784:	230c      	movs	r3, #12
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	4619      	mov	r1, r3
 800278e:	480d      	ldr	r0, [pc, #52]	; (80027c4 <HAL_SD_MspInit+0xbc>)
 8002790:	f003 f9e2 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002794:	2304      	movs	r3, #4
 8002796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80027a4:	230c      	movs	r3, #12
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	4619      	mov	r1, r3
 80027ae:	4806      	ldr	r0, [pc, #24]	; (80027c8 <HAL_SD_MspInit+0xc0>)
 80027b0:	f003 f9d2 	bl	8005b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80027b4:	bf00      	nop
 80027b6:	3728      	adds	r7, #40	; 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020800 	.word	0x40020800
 80027c8:	40020c00 	.word	0x40020c00

080027cc <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0aa      	sub	sp, #168	; 0xa8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027e4:	f107 0310 	add.w	r3, r7, #16
 80027e8:	2284      	movs	r2, #132	; 0x84
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f021 f88c 	bl	802390a <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80027fa:	d143      	bne.n	8002884 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80027fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002800:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8002802:	2364      	movs	r3, #100	; 0x64
 8002804:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8002806:	2302      	movs	r3, #2
 8002808:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800280a:	2302      	movs	r3, #2
 800280c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800280e:	2302      	movs	r3, #2
 8002810:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8002812:	2301      	movs	r3, #1
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4618      	mov	r0, r3
 800281c:	f006 fb24 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8002826:	f7ff fbb5 	bl	8001f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800282a:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_SPDIFRX_MspInit+0xc0>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a17      	ldr	r2, [pc, #92]	; (800288c <HAL_SPDIFRX_MspInit+0xc0>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_SPDIFRX_MspInit+0xc0>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_SPDIFRX_MspInit+0xc0>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a11      	ldr	r2, [pc, #68]	; (800288c <HAL_SPDIFRX_MspInit+0xc0>)
 8002848:	f043 0308 	orr.w	r3, r3, #8
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_SPDIFRX_MspInit+0xc0>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286c:	2300      	movs	r3, #0
 800286e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002872:	2308      	movs	r3, #8
 8002874:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800287c:	4619      	mov	r1, r3
 800287e:	4804      	ldr	r0, [pc, #16]	; (8002890 <HAL_SPDIFRX_MspInit+0xc4>)
 8002880:	f003 f96a 	bl	8005b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002884:	bf00      	nop
 8002886:	37a8      	adds	r7, #168	; 0xa8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	40020c00 	.word	0x40020c00

08002894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a25      	ldr	r2, [pc, #148]	; (8002948 <HAL_SPI_MspInit+0xb4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d144      	bne.n	8002940 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028b6:	4b25      	ldr	r3, [pc, #148]	; (800294c <HAL_SPI_MspInit+0xb8>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a24      	ldr	r2, [pc, #144]	; (800294c <HAL_SPI_MspInit+0xb8>)
 80028bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <HAL_SPI_MspInit+0xb8>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80028ce:	4b1f      	ldr	r3, [pc, #124]	; (800294c <HAL_SPI_MspInit+0xb8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a1e      	ldr	r2, [pc, #120]	; (800294c <HAL_SPI_MspInit+0xb8>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <HAL_SPI_MspInit+0xb8>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_SPI_MspInit+0xb8>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_SPI_MspInit+0xb8>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_SPI_MspInit+0xb8>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80028fe:	2302      	movs	r3, #2
 8002900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800290e:	2305      	movs	r3, #5
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4619      	mov	r1, r3
 8002918:	480d      	ldr	r0, [pc, #52]	; (8002950 <HAL_SPI_MspInit+0xbc>)
 800291a:	f003 f91d 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800291e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002930:	2305      	movs	r3, #5
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4619      	mov	r1, r3
 800293a:	4806      	ldr	r0, [pc, #24]	; (8002954 <HAL_SPI_MspInit+0xc0>)
 800293c:	f003 f90c 	bl	8005b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002940:	bf00      	nop
 8002942:	3728      	adds	r7, #40	; 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40003800 	.word	0x40003800
 800294c:	40023800 	.word	0x40023800
 8002950:	40022000 	.word	0x40022000
 8002954:	40020400 	.word	0x40020400

08002958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2e      	ldr	r2, [pc, #184]	; (8002a20 <HAL_TIM_Base_MspInit+0xc8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10c      	bne.n	8002984 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800296a:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a2d      	ldr	r2, [pc, #180]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002982:	e046      	b.n	8002a12 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d10c      	bne.n	80029a8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800298e:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a24      	ldr	r2, [pc, #144]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	69bb      	ldr	r3, [r7, #24]
}
 80029a6:	e034      	b.n	8002a12 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_TIM_Base_MspInit+0xd0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10c      	bne.n	80029cc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029b2:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
}
 80029ca:	e022      	b.n	8002a12 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_TIM_Base_MspInit+0xd4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10c      	bne.n	80029f0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 80029dc:	f043 0308 	orr.w	r3, r3, #8
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
}
 80029ee:	e010      	b.n	8002a12 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <HAL_TIM_Base_MspInit+0xd8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d10b      	bne.n	8002a12 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <HAL_TIM_Base_MspInit+0xcc>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
}
 8002a12:	bf00      	nop
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40010000 	.word	0x40010000
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40000400 	.word	0x40000400
 8002a2c:	40000c00 	.word	0x40000c00
 8002a30:	40010400 	.word	0x40010400

08002a34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <HAL_TIM_PWM_MspInit+0x38>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d10b      	bne.n	8002a5e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a09      	ldr	r2, [pc, #36]	; (8002a70 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40001800 	.word	0x40001800
 8002a70:	40023800 	.word	0x40023800

08002a74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	; 0x30
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a56      	ldr	r2, [pc, #344]	; (8002bec <HAL_TIM_MspPostInit+0x178>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d11d      	bne.n	8002ad2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	4b56      	ldr	r3, [pc, #344]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a55      	ldr	r2, [pc, #340]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b53      	ldr	r3, [pc, #332]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	4619      	mov	r1, r3
 8002aca:	484a      	ldr	r0, [pc, #296]	; (8002bf4 <HAL_TIM_MspPostInit+0x180>)
 8002acc:	f003 f844 	bl	8005b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002ad0:	e087      	b.n	8002be2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ada:	d11d      	bne.n	8002b18 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002adc:	4b44      	ldr	r3, [pc, #272]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4a43      	ldr	r2, [pc, #268]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae8:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002af4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b06:	2301      	movs	r3, #1
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 031c 	add.w	r3, r7, #28
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4838      	ldr	r0, [pc, #224]	; (8002bf4 <HAL_TIM_MspPostInit+0x180>)
 8002b12:	f003 f821 	bl	8005b58 <HAL_GPIO_Init>
}
 8002b16:	e064      	b.n	8002be2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a36      	ldr	r2, [pc, #216]	; (8002bf8 <HAL_TIM_MspPostInit+0x184>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d11c      	bne.n	8002b5c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a32      	ldr	r2, [pc, #200]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002b3a:	2310      	movs	r3, #16
 8002b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 031c 	add.w	r3, r7, #28
 8002b52:	4619      	mov	r1, r3
 8002b54:	4829      	ldr	r0, [pc, #164]	; (8002bfc <HAL_TIM_MspPostInit+0x188>)
 8002b56:	f002 ffff 	bl	8005b58 <HAL_GPIO_Init>
}
 8002b5a:	e042      	b.n	8002be2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a27      	ldr	r2, [pc, #156]	; (8002c00 <HAL_TIM_MspPostInit+0x18c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d11c      	bne.n	8002ba0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b1f      	ldr	r3, [pc, #124]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002b92:	f107 031c 	add.w	r3, r7, #28
 8002b96:	4619      	mov	r1, r3
 8002b98:	481a      	ldr	r0, [pc, #104]	; (8002c04 <HAL_TIM_MspPostInit+0x190>)
 8002b9a:	f002 ffdd 	bl	8005b58 <HAL_GPIO_Init>
}
 8002b9e:	e020      	b.n	8002be2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <HAL_TIM_MspPostInit+0x194>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d11b      	bne.n	8002be2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002baa:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a10      	ldr	r2, [pc, #64]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <HAL_TIM_MspPostInit+0x17c>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002bc2:	2340      	movs	r3, #64	; 0x40
 8002bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002bd2:	2309      	movs	r3, #9
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	4619      	mov	r1, r3
 8002bdc:	480b      	ldr	r0, [pc, #44]	; (8002c0c <HAL_TIM_MspPostInit+0x198>)
 8002bde:	f002 ffbb 	bl	8005b58 <HAL_GPIO_Init>
}
 8002be2:	bf00      	nop
 8002be4:	3730      	adds	r7, #48	; 0x30
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40010000 	.word	0x40010000
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40020400 	.word	0x40020400
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40001800 	.word	0x40001800
 8002c0c:	40021c00 	.word	0x40021c00

08002c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0ae      	sub	sp, #184	; 0xb8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c28:	f107 0320 	add.w	r3, r7, #32
 8002c2c:	2284      	movs	r2, #132	; 0x84
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f020 fe6a 	bl	802390a <memset>
  if(huart->Instance==USART1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a57      	ldr	r2, [pc, #348]	; (8002d98 <HAL_UART_MspInit+0x188>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d165      	bne.n	8002d0c <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c40:	2340      	movs	r3, #64	; 0x40
 8002c42:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c44:	2300      	movs	r3, #0
 8002c46:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c48:	f107 0320 	add.w	r3, r7, #32
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f006 f90b 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c58:	f7ff f99c 	bl	8001f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c5c:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	4a4e      	ldr	r2, [pc, #312]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002c62:	f043 0310 	orr.w	r3, r3, #16
 8002c66:	6453      	str	r3, [r2, #68]	; 0x44
 8002c68:	4b4c      	ldr	r3, [pc, #304]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c74:	4b49      	ldr	r3, [pc, #292]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	4a48      	ldr	r2, [pc, #288]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
 8002c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c80:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8c:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	4a42      	ldr	r2, [pc, #264]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6313      	str	r3, [r2, #48]	; 0x30
 8002c98:	4b40      	ldr	r3, [pc, #256]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cbc:	2307      	movs	r3, #7
 8002cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002cc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4835      	ldr	r0, [pc, #212]	; (8002da0 <HAL_UART_MspInit+0x190>)
 8002cca:	f002 ff45 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ce8:	2307      	movs	r3, #7
 8002cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002cee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	482b      	ldr	r0, [pc, #172]	; (8002da4 <HAL_UART_MspInit+0x194>)
 8002cf6:	f002 ff2f 	bl	8005b58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2105      	movs	r1, #5
 8002cfe:	2025      	movs	r0, #37	; 0x25
 8002d00:	f001 f836 	bl	8003d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d04:	2025      	movs	r0, #37	; 0x25
 8002d06:	f001 f84f 	bl	8003da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002d0a:	e040      	b.n	8002d8e <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==USART6)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a25      	ldr	r2, [pc, #148]	; (8002da8 <HAL_UART_MspInit+0x198>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d13b      	bne.n	8002d8e <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002d16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d1a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d20:	f107 0320 	add.w	r3, r7, #32
 8002d24:	4618      	mov	r0, r3
 8002d26:	f006 f89f 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8002d30:	f7ff f930 	bl	8001f94 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	4a18      	ldr	r2, [pc, #96]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002d3a:	f043 0320 	orr.w	r3, r3, #32
 8002d3e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4c:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	6313      	str	r3, [r2, #48]	; 0x30
 8002d58:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_UART_MspInit+0x18c>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002d64:	23c0      	movs	r3, #192	; 0xc0
 8002d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d76:	2303      	movs	r3, #3
 8002d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d86:	4619      	mov	r1, r3
 8002d88:	4808      	ldr	r0, [pc, #32]	; (8002dac <HAL_UART_MspInit+0x19c>)
 8002d8a:	f002 fee5 	bl	8005b58 <HAL_GPIO_Init>
}
 8002d8e:	bf00      	nop
 8002d90:	37b8      	adds	r7, #184	; 0xb8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40011000 	.word	0x40011000
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020400 	.word	0x40020400
 8002da4:	40020000 	.word	0x40020000
 8002da8:	40011400 	.word	0x40011400
 8002dac:	40020800 	.word	0x40020800

08002db0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002dc4:	4b3a      	ldr	r3, [pc, #232]	; (8002eb0 <HAL_FMC_MspInit+0x100>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d16d      	bne.n	8002ea8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002dcc:	4b38      	ldr	r3, [pc, #224]	; (8002eb0 <HAL_FMC_MspInit+0x100>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_FMC_MspInit+0x104>)
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	4a37      	ldr	r2, [pc, #220]	; (8002eb4 <HAL_FMC_MspInit+0x104>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6393      	str	r3, [r2, #56]	; 0x38
 8002dde:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <HAL_FMC_MspInit+0x104>)
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002dea:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002dee:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	4619      	mov	r1, r3
 8002e04:	482c      	ldr	r0, [pc, #176]	; (8002eb8 <HAL_FMC_MspInit+0x108>)
 8002e06:	f002 fea7 	bl	8005b58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002e0a:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e0e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4825      	ldr	r0, [pc, #148]	; (8002ebc <HAL_FMC_MspInit+0x10c>)
 8002e26:	f002 fe97 	bl	8005b58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002e2a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e2e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e3c:	230c      	movs	r3, #12
 8002e3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	481e      	ldr	r0, [pc, #120]	; (8002ec0 <HAL_FMC_MspInit+0x110>)
 8002e46:	f002 fe87 	bl	8005b58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002e4a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e4e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e50:	2302      	movs	r3, #2
 8002e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e5c:	230c      	movs	r3, #12
 8002e5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	4619      	mov	r1, r3
 8002e64:	4817      	ldr	r0, [pc, #92]	; (8002ec4 <HAL_FMC_MspInit+0x114>)
 8002e66:	f002 fe77 	bl	8005b58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002e6a:	2328      	movs	r3, #40	; 0x28
 8002e6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e76:	2303      	movs	r3, #3
 8002e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e7a:	230c      	movs	r3, #12
 8002e7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4811      	ldr	r0, [pc, #68]	; (8002ec8 <HAL_FMC_MspInit+0x118>)
 8002e84:	f002 fe68 	bl	8005b58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002e88:	2308      	movs	r3, #8
 8002e8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e94:	2303      	movs	r3, #3
 8002e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e98:	230c      	movs	r3, #12
 8002e9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	480a      	ldr	r0, [pc, #40]	; (8002ecc <HAL_FMC_MspInit+0x11c>)
 8002ea2:	f002 fe59 	bl	8005b58 <HAL_GPIO_Init>
 8002ea6:	e000      	b.n	8002eaa <HAL_FMC_MspInit+0xfa>
    return;
 8002ea8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000ecc 	.word	0x20000ecc
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40021800 	.word	0x40021800
 8002ec0:	40020c00 	.word	0x40020c00
 8002ec4:	40021400 	.word	0x40021400
 8002ec8:	40021c00 	.word	0x40021c00
 8002ecc:	40020800 	.word	0x40020800

08002ed0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ed8:	f7ff ff6a 	bl	8002db0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2b      	ldr	r2, [pc, #172]	; (8002fa0 <HAL_SAI_MspInit+0xbc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d124      	bne.n	8002f40 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002ef6:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_SAI_MspInit+0xc0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10b      	bne.n	8002f16 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <HAL_SAI_MspInit+0xc4>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4a29      	ldr	r2, [pc, #164]	; (8002fa8 <HAL_SAI_MspInit+0xc4>)
 8002f04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f08:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0a:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_SAI_MspInit+0xc4>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002f16:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <HAL_SAI_MspInit+0xc0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <HAL_SAI_MspInit+0xc0>)
 8002f1e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002f20:	23f0      	movs	r3, #240	; 0xf0
 8002f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002f30:	230a      	movs	r3, #10
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	4619      	mov	r1, r3
 8002f3a:	481c      	ldr	r0, [pc, #112]	; (8002fac <HAL_SAI_MspInit+0xc8>)
 8002f3c:	f002 fe0c 	bl	8005b58 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_SAI_MspInit+0xcc>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d125      	bne.n	8002f96 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <HAL_SAI_MspInit+0xc0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10b      	bne.n	8002f6a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_SAI_MspInit+0xc4>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <HAL_SAI_MspInit+0xc4>)
 8002f58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_SAI_MspInit+0xc4>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_SAI_MspInit+0xc0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	4a0c      	ldr	r2, [pc, #48]	; (8002fa4 <HAL_SAI_MspInit+0xc0>)
 8002f72:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002f86:	230a      	movs	r3, #10
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002f8a:	f107 0314 	add.w	r3, r7, #20
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4808      	ldr	r0, [pc, #32]	; (8002fb4 <HAL_SAI_MspInit+0xd0>)
 8002f92:	f002 fde1 	bl	8005b58 <HAL_GPIO_Init>

    }
}
 8002f96:	bf00      	nop
 8002f98:	3728      	adds	r7, #40	; 0x28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40015c04 	.word	0x40015c04
 8002fa4:	20000ed0 	.word	0x20000ed0
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40022000 	.word	0x40022000
 8002fb0:	40015c24 	.word	0x40015c24
 8002fb4:	40021800 	.word	0x40021800

08002fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08e      	sub	sp, #56	; 0x38
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fc8:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HAL_InitTick+0xe0>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	4a32      	ldr	r2, [pc, #200]	; (8003098 <HAL_InitTick+0xe0>)
 8002fce:	f043 0310 	orr.w	r3, r3, #16
 8002fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_InitTick+0xe0>)
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fe0:	f107 0210 	add.w	r2, r7, #16
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f005 ff0a 	bl	8008e04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d103      	bne.n	8003002 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ffa:	f005 fedb 	bl	8008db4 <HAL_RCC_GetPCLK1Freq>
 8002ffe:	6378      	str	r0, [r7, #52]	; 0x34
 8003000:	e004      	b.n	800300c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003002:	f005 fed7 	bl	8008db4 <HAL_RCC_GetPCLK1Freq>
 8003006:	4603      	mov	r3, r0
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	4a23      	ldr	r2, [pc, #140]	; (800309c <HAL_InitTick+0xe4>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	0c9b      	lsrs	r3, r3, #18
 8003016:	3b01      	subs	r3, #1
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800301a:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <HAL_InitTick+0xe8>)
 800301c:	4a21      	ldr	r2, [pc, #132]	; (80030a4 <HAL_InitTick+0xec>)
 800301e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003020:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <HAL_InitTick+0xe8>)
 8003022:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003026:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_InitTick+0xe8>)
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800302e:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <HAL_InitTick+0xe8>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <HAL_InitTick+0xe8>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800303a:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_InitTick+0xe8>)
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003040:	4817      	ldr	r0, [pc, #92]	; (80030a0 <HAL_InitTick+0xe8>)
 8003042:	f008 fbaa 	bl	800b79a <HAL_TIM_Base_Init>
 8003046:	4603      	mov	r3, r0
 8003048:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800304c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003050:	2b00      	cmp	r3, #0
 8003052:	d11b      	bne.n	800308c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003054:	4812      	ldr	r0, [pc, #72]	; (80030a0 <HAL_InitTick+0xe8>)
 8003056:	f008 fbf7 	bl	800b848 <HAL_TIM_Base_Start_IT>
 800305a:	4603      	mov	r3, r0
 800305c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003060:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003064:	2b00      	cmp	r3, #0
 8003066:	d111      	bne.n	800308c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003068:	2036      	movs	r0, #54	; 0x36
 800306a:	f000 fe9d 	bl	8003da8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b0f      	cmp	r3, #15
 8003072:	d808      	bhi.n	8003086 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003074:	2200      	movs	r2, #0
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	2036      	movs	r0, #54	; 0x36
 800307a:	f000 fe79 	bl	8003d70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <HAL_InitTick+0xf0>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	e002      	b.n	800308c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800308c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003090:	4618      	mov	r0, r3
 8003092:	3738      	adds	r7, #56	; 0x38
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	431bde83 	.word	0x431bde83
 80030a0:	20000ed4 	.word	0x20000ed4
 80030a4:	40001000 	.word	0x40001000
 80030a8:	20000004 	.word	0x20000004

080030ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <NMI_Handler+0x4>

080030b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <HardFault_Handler+0x4>

080030b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <MemManage_Handler+0x4>

080030be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030c2:	e7fe      	b.n	80030c2 <BusFault_Handler+0x4>

080030c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <UsageFault_Handler+0x4>

080030ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030dc:	4802      	ldr	r0, [pc, #8]	; (80030e8 <USART1_IRQHandler+0x10>)
 80030de:	f009 fd7f 	bl	800cbe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000b68 	.word	0x20000b68

080030ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030f0:	4802      	ldr	r0, [pc, #8]	; (80030fc <TIM6_DAC_IRQHandler+0x10>)
 80030f2:	f008 fc78 	bl	800b9e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000ed4 	.word	0x20000ed4

08003100 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003104:	4802      	ldr	r0, [pc, #8]	; (8003110 <ETH_IRQHandler+0x10>)
 8003106:	f001 fe53 	bl	8004db0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20005914 	.word	0x20005914

08003114 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003118:	4802      	ldr	r0, [pc, #8]	; (8003124 <OTG_FS_IRQHandler+0x10>)
 800311a:	f003 f965 	bl	80063e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20011860 	.word	0x20011860

08003128 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800312c:	4802      	ldr	r0, [pc, #8]	; (8003138 <LTDC_IRQHandler+0x10>)
 800312e:	f004 fe23 	bl	8007d78 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000650 	.word	0x20000650

0800313c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003140:	4802      	ldr	r0, [pc, #8]	; (800314c <DMA2D_IRQHandler+0x10>)
 8003142:	f001 f919 	bl	8004378 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000568 	.word	0x20000568

08003150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return 1;
 8003154:	2301      	movs	r3, #1
}
 8003156:	4618      	mov	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <_kill>:

int _kill(int pid, int sig)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <_kill+0x20>)
 800316c:	2216      	movs	r2, #22
 800316e:	601a      	str	r2, [r3, #0]
  return -1;
 8003170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	20011ca8 	.word	0x20011ca8

08003184 <_exit>:

void _exit (int status)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800318c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ffe5 	bl	8003160 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003196:	e7fe      	b.n	8003196 <_exit+0x12>

08003198 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e00a      	b.n	80031c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031aa:	f3af 8000 	nop.w
 80031ae:	4601      	mov	r1, r0
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	60ba      	str	r2, [r7, #8]
 80031b6:	b2ca      	uxtb	r2, r1
 80031b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3301      	adds	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	dbf0      	blt.n	80031aa <_read+0x12>
  }

  return len;
 80031c8:	687b      	ldr	r3, [r7, #4]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	e009      	b.n	80031f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	60ba      	str	r2, [r7, #8]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	3301      	adds	r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	dbf1      	blt.n	80031e4 <_write+0x12>
  }
  return len;
 8003200:	687b      	ldr	r3, [r7, #4]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <_close>:

int _close(int file)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003232:	605a      	str	r2, [r3, #4]
  return 0;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <_isatty>:

int _isatty(int file)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800324a:	2301      	movs	r3, #1
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <_sbrk+0x5c>)
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <_sbrk+0x60>)
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003288:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <_sbrk+0x64>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <_sbrk+0x64>)
 8003292:	4a12      	ldr	r2, [pc, #72]	; (80032dc <_sbrk+0x68>)
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <_sbrk+0x64>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d205      	bcs.n	80032b0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <_sbrk+0x6c>)
 80032a6:	220c      	movs	r2, #12
 80032a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ae:	e009      	b.n	80032c4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <_sbrk+0x64>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <_sbrk+0x64>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	4a06      	ldr	r2, [pc, #24]	; (80032d8 <_sbrk+0x64>)
 80032c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032c2:	68fb      	ldr	r3, [r7, #12]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	20050000 	.word	0x20050000
 80032d4:	00000400 	.word	0x00000400
 80032d8:	20000f20 	.word	0x20000f20
 80032dc:	20011cb0 	.word	0x20011cb0
 80032e0:	20011ca8 	.word	0x20011ca8

080032e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <SystemInit+0x20>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	4a05      	ldr	r2, [pc, #20]	; (8003304 <SystemInit+0x20>)
 80032f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003340 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800330c:	480d      	ldr	r0, [pc, #52]	; (8003344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800330e:	490e      	ldr	r1, [pc, #56]	; (8003348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003310:	4a0e      	ldr	r2, [pc, #56]	; (800334c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003314:	e002      	b.n	800331c <LoopCopyDataInit>

08003316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800331a:	3304      	adds	r3, #4

0800331c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800331c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800331e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003320:	d3f9      	bcc.n	8003316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003324:	4c0b      	ldr	r4, [pc, #44]	; (8003354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003328:	e001      	b.n	800332e <LoopFillZerobss>

0800332a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800332a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800332c:	3204      	adds	r2, #4

0800332e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800332e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003330:	d3fb      	bcc.n	800332a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003332:	f7ff ffd7 	bl	80032e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003336:	f020 fb57 	bl	80239e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800333a:	f7fd f9a3 	bl	8000684 <main>
  bx  lr    
 800333e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003340:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003348:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800334c:	08028378 	.word	0x08028378
  ldr r2, =_sbss
 8003350:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003354:	20011cb0 	.word	0x20011cb0

08003358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003358:	e7fe      	b.n	8003358 <ADC_IRQHandler>

0800335a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <LAN8742_RegisterBusIO+0x28>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <LAN8742_RegisterBusIO+0x28>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <LAN8742_RegisterBusIO+0x28>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003386:	e014      	b.n	80033b2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80033be:	b580      	push	{r7, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d17c      	bne.n	80034d8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	e01c      	b.n	8003432 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f107 0208 	add.w	r2, r7, #8
 8003400:	2112      	movs	r1, #18
 8003402:	6978      	ldr	r0, [r7, #20]
 8003404:	4798      	blx	r3
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	da03      	bge.n	8003414 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800340c:	f06f 0304 	mvn.w	r3, #4
 8003410:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003412:	e00b      	b.n	800342c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	429a      	cmp	r2, r3
 800341e:	d105      	bne.n	800342c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
         break;
 800342a:	e005      	b.n	8003438 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	3301      	adds	r3, #1
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b1f      	cmp	r3, #31
 8003436:	d9df      	bls.n	80033f8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b1f      	cmp	r3, #31
 800343e:	d902      	bls.n	8003446 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003440:	f06f 0302 	mvn.w	r3, #2
 8003444:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d145      	bne.n	80034d8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6810      	ldr	r0, [r2, #0]
 8003454:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003458:	2100      	movs	r1, #0
 800345a:	4798      	blx	r3
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	db37      	blt.n	80034d2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6810      	ldr	r0, [r2, #0]
 800346a:	f107 0208 	add.w	r2, r7, #8
 800346e:	2100      	movs	r1, #0
 8003470:	4798      	blx	r3
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	db28      	blt.n	80034ca <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	4798      	blx	r3
 800347e:	4603      	mov	r3, r0
 8003480:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003482:	e01c      	b.n	80034be <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	4798      	blx	r3
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003496:	d80e      	bhi.n	80034b6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6810      	ldr	r0, [r2, #0]
 80034a0:	f107 0208 	add.w	r2, r7, #8
 80034a4:	2100      	movs	r1, #0
 80034a6:	4798      	blx	r3
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	da07      	bge.n	80034be <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80034ae:	f06f 0304 	mvn.w	r3, #4
 80034b2:	613b      	str	r3, [r7, #16]
                 break;
 80034b4:	e010      	b.n	80034d8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80034b6:	f06f 0301 	mvn.w	r3, #1
 80034ba:	613b      	str	r3, [r7, #16]
               break;
 80034bc:	e00c      	b.n	80034d8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1dd      	bne.n	8003484 <LAN8742_Init+0xc6>
 80034c8:	e006      	b.n	80034d8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80034ca:	f06f 0304 	mvn.w	r3, #4
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	e002      	b.n	80034d8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80034d2:	f06f 0303 	mvn.w	r3, #3
 80034d6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d112      	bne.n	8003504 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	4798      	blx	r3
 80034e4:	4603      	mov	r3, r0
 80034e6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80034e8:	bf00      	nop
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	4798      	blx	r3
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80034fc:	d9f5      	bls.n	80034ea <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003504:	693b      	ldr	r3, [r7, #16]
 }
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6810      	ldr	r0, [r2, #0]
 8003522:	f107 020c 	add.w	r2, r7, #12
 8003526:	2101      	movs	r1, #1
 8003528:	4798      	blx	r3
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	da02      	bge.n	8003536 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003530:	f06f 0304 	mvn.w	r3, #4
 8003534:	e06e      	b.n	8003614 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6810      	ldr	r0, [r2, #0]
 800353e:	f107 020c 	add.w	r2, r7, #12
 8003542:	2101      	movs	r1, #1
 8003544:	4798      	blx	r3
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	da02      	bge.n	8003552 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800354c:	f06f 0304 	mvn.w	r3, #4
 8003550:	e060      	b.n	8003614 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800355c:	2301      	movs	r3, #1
 800355e:	e059      	b.n	8003614 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6810      	ldr	r0, [r2, #0]
 8003568:	f107 020c 	add.w	r2, r7, #12
 800356c:	2100      	movs	r1, #0
 800356e:	4798      	blx	r3
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	da02      	bge.n	800357c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003576:	f06f 0304 	mvn.w	r3, #4
 800357a:	e04b      	b.n	8003614 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11b      	bne.n	80035be <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d006      	beq.n	800359e <LAN8742_GetLinkState+0x90>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800359a:	2302      	movs	r3, #2
 800359c:	e03a      	b.n	8003614 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e033      	b.n	8003614 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80035b6:	2304      	movs	r3, #4
 80035b8:	e02c      	b.n	8003614 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80035ba:	2305      	movs	r3, #5
 80035bc:	e02a      	b.n	8003614 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6810      	ldr	r0, [r2, #0]
 80035c6:	f107 020c 	add.w	r2, r7, #12
 80035ca:	211f      	movs	r1, #31
 80035cc:	4798      	blx	r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	da02      	bge.n	80035da <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80035d4:	f06f 0304 	mvn.w	r3, #4
 80035d8:	e01c      	b.n	8003614 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80035e4:	2306      	movs	r3, #6
 80035e6:	e015      	b.n	8003614 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 031c 	and.w	r3, r3, #28
 80035ee:	2b18      	cmp	r3, #24
 80035f0:	d101      	bne.n	80035f6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80035f2:	2302      	movs	r3, #2
 80035f4:	e00e      	b.n	8003614 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 031c 	and.w	r3, r3, #28
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d101      	bne.n	8003604 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003600:	2303      	movs	r3, #3
 8003602:	e007      	b.n	8003614 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 031c 	and.w	r3, r3, #28
 800360a:	2b14      	cmp	r3, #20
 800360c:	d101      	bne.n	8003612 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800360e:	2304      	movs	r3, #4
 8003610:	e000      	b.n	8003614 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003612:	2305      	movs	r3, #5
    }				
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003620:	2003      	movs	r0, #3
 8003622:	f000 fb9a 	bl	8003d5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003626:	2000      	movs	r0, #0
 8003628:	f7ff fcc6 	bl	8002fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800362c:	f7fe fcb8 	bl	8001fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x20>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_IncTick+0x24>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4413      	add	r3, r2
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_IncTick+0x24>)
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000008 	.word	0x20000008
 800365c:	20000f24 	.word	0x20000f24

08003660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return uwTick;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_GetTick+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000f24 	.word	0x20000f24

08003678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff ffee 	bl	8003660 <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003690:	d005      	beq.n	800369e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_Delay+0x44>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800369e:	bf00      	nop
 80036a0:	f7ff ffde 	bl	8003660 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d8f7      	bhi.n	80036a0 <HAL_Delay+0x28>
  {
  }
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000008 	.word	0x20000008

080036c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <HAL_GetREVID+0x14>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0c1b      	lsrs	r3, r3, #16
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e0042000 	.word	0xe0042000

080036d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e031      	b.n	8003752 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe fc7a 	bl	8001ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b00      	cmp	r3, #0
 8003714:	d116      	bne.n	8003744 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_ADC_Init+0x84>)
 800371c:	4013      	ands	r3, r2
 800371e:	f043 0202 	orr.w	r2, r3, #2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f970 	bl	8003a0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
 8003742:	e001      	b.n	8003748 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	ffffeefd 	.word	0xffffeefd

08003760 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_ADC_ConfigChannel+0x1c>
 8003778:	2302      	movs	r3, #2
 800377a:	e136      	b.n	80039ea <HAL_ADC_ConfigChannel+0x28a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b09      	cmp	r3, #9
 800378a:	d93a      	bls.n	8003802 <HAL_ADC_ConfigChannel+0xa2>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003794:	d035      	beq.n	8003802 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68d9      	ldr	r1, [r3, #12]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	3b1e      	subs	r3, #30
 80037ac:	2207      	movs	r2, #7
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43da      	mvns	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	400a      	ands	r2, r1
 80037ba:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a8d      	ldr	r2, [pc, #564]	; (80039f8 <HAL_ADC_ConfigChannel+0x298>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d10a      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68d9      	ldr	r1, [r3, #12]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	061a      	lsls	r2, r3, #24
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037da:	e035      	b.n	8003848 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68d9      	ldr	r1, [r3, #12]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	4618      	mov	r0, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4403      	add	r3, r0
 80037f4:	3b1e      	subs	r3, #30
 80037f6:	409a      	lsls	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003800:	e022      	b.n	8003848 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6919      	ldr	r1, [r3, #16]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	4613      	mov	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	2207      	movs	r2, #7
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43da      	mvns	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	400a      	ands	r2, r1
 8003824:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6919      	ldr	r1, [r3, #16]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	b29b      	uxth	r3, r3
 8003836:	4618      	mov	r0, r3
 8003838:	4603      	mov	r3, r0
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4403      	add	r3, r0
 800383e:	409a      	lsls	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b06      	cmp	r3, #6
 800384e:	d824      	bhi.n	800389a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	3b05      	subs	r3, #5
 8003862:	221f      	movs	r2, #31
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43da      	mvns	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	400a      	ands	r2, r1
 8003870:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	4618      	mov	r0, r3
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	3b05      	subs	r3, #5
 800388c:	fa00 f203 	lsl.w	r2, r0, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	635a      	str	r2, [r3, #52]	; 0x34
 8003898:	e04c      	b.n	8003934 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d824      	bhi.n	80038ec <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	3b23      	subs	r3, #35	; 0x23
 80038b4:	221f      	movs	r2, #31
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43da      	mvns	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	400a      	ands	r2, r1
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4618      	mov	r0, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	3b23      	subs	r3, #35	; 0x23
 80038de:	fa00 f203 	lsl.w	r2, r0, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
 80038ea:	e023      	b.n	8003934 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	3b41      	subs	r3, #65	; 0x41
 80038fe:	221f      	movs	r2, #31
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43da      	mvns	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	400a      	ands	r2, r1
 800390c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	4618      	mov	r0, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	3b41      	subs	r3, #65	; 0x41
 8003928:	fa00 f203 	lsl.w	r2, r0, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a30      	ldr	r2, [pc, #192]	; (80039fc <HAL_ADC_ConfigChannel+0x29c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d10a      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x1f4>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003946:	d105      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <HAL_ADC_ConfigChannel+0x2a0>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <HAL_ADC_ConfigChannel+0x2a0>)
 800394e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003952:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a28      	ldr	r2, [pc, #160]	; (80039fc <HAL_ADC_ConfigChannel+0x29c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d10f      	bne.n	800397e <HAL_ADC_ConfigChannel+0x21e>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b12      	cmp	r3, #18
 8003964:	d10b      	bne.n	800397e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003966:	4b26      	ldr	r3, [pc, #152]	; (8003a00 <HAL_ADC_ConfigChannel+0x2a0>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4a25      	ldr	r2, [pc, #148]	; (8003a00 <HAL_ADC_ConfigChannel+0x2a0>)
 800396c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003970:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003972:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <HAL_ADC_ConfigChannel+0x2a0>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <HAL_ADC_ConfigChannel+0x2a0>)
 8003978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800397c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1e      	ldr	r2, [pc, #120]	; (80039fc <HAL_ADC_ConfigChannel+0x29c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d12b      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x280>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1a      	ldr	r2, [pc, #104]	; (80039f8 <HAL_ADC_ConfigChannel+0x298>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <HAL_ADC_ConfigChannel+0x23a>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b11      	cmp	r3, #17
 8003998:	d122      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800399a:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_ADC_ConfigChannel+0x2a0>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4a18      	ldr	r2, [pc, #96]	; (8003a00 <HAL_ADC_ConfigChannel+0x2a0>)
 80039a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80039a4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80039a6:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <HAL_ADC_ConfigChannel+0x2a0>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <HAL_ADC_ConfigChannel+0x2a0>)
 80039ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039b0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <HAL_ADC_ConfigChannel+0x298>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d111      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <HAL_ADC_ConfigChannel+0x2a4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <HAL_ADC_ConfigChannel+0x2a8>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	0c9a      	lsrs	r2, r3, #18
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80039d2:	e002      	b.n	80039da <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1f9      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	10000012 	.word	0x10000012
 80039fc:	40012000 	.word	0x40012000
 8003a00:	40012300 	.word	0x40012300
 8003a04:	20000000 	.word	0x20000000
 8003a08:	431bde83 	.word	0x431bde83

08003a0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003a14:	4b78      	ldr	r3, [pc, #480]	; (8003bf8 <ADC_Init+0x1ec>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4a77      	ldr	r2, [pc, #476]	; (8003bf8 <ADC_Init+0x1ec>)
 8003a1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003a1e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003a20:	4b75      	ldr	r3, [pc, #468]	; (8003bf8 <ADC_Init+0x1ec>)
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4973      	ldr	r1, [pc, #460]	; (8003bf8 <ADC_Init+0x1ec>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	021a      	lsls	r2, r3, #8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6899      	ldr	r1, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	4a58      	ldr	r2, [pc, #352]	; (8003bfc <ADC_Init+0x1f0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6899      	ldr	r1, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6899      	ldr	r1, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	e00f      	b.n	8003b06 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003af4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0202 	bic.w	r2, r2, #2
 8003b14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6899      	ldr	r1, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	005a      	lsls	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01b      	beq.n	8003b6c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	035a      	lsls	r2, r3, #13
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	e007      	b.n	8003b7c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	051a      	lsls	r2, r3, #20
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6899      	ldr	r1, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bbe:	025a      	lsls	r2, r3, #9
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6899      	ldr	r1, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	029a      	lsls	r2, r3, #10
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	40012300 	.word	0x40012300
 8003bfc:	0f000001 	.word	0x0f000001

08003c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <__NVIC_SetPriorityGrouping+0x40>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <__NVIC_SetPriorityGrouping+0x44>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c2e:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <__NVIC_SetPriorityGrouping+0x40>)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	60d3      	str	r3, [r2, #12]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	e000ed00 	.word	0xe000ed00
 8003c44:	05fa0000 	.word	0x05fa0000

08003c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <__NVIC_GetPriorityGrouping+0x18>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	f003 0307 	and.w	r3, r3, #7
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	db0b      	blt.n	8003c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	f003 021f 	and.w	r2, r3, #31
 8003c7c:	4907      	ldr	r1, [pc, #28]	; (8003c9c <__NVIC_EnableIRQ+0x38>)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2001      	movs	r0, #1
 8003c86:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	e000e100 	.word	0xe000e100

08003ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	6039      	str	r1, [r7, #0]
 8003caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	db0a      	blt.n	8003cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	490c      	ldr	r1, [pc, #48]	; (8003cec <__NVIC_SetPriority+0x4c>)
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	0112      	lsls	r2, r2, #4
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cc8:	e00a      	b.n	8003ce0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4908      	ldr	r1, [pc, #32]	; (8003cf0 <__NVIC_SetPriority+0x50>)
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	3b04      	subs	r3, #4
 8003cd8:	0112      	lsls	r2, r2, #4
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	440b      	add	r3, r1
 8003cde:	761a      	strb	r2, [r3, #24]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000e100 	.word	0xe000e100
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f1c3 0307 	rsb	r3, r3, #7
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	bf28      	it	cs
 8003d12:	2304      	movcs	r3, #4
 8003d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2b06      	cmp	r3, #6
 8003d1c:	d902      	bls.n	8003d24 <NVIC_EncodePriority+0x30>
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3b03      	subs	r3, #3
 8003d22:	e000      	b.n	8003d26 <NVIC_EncodePriority+0x32>
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43da      	mvns	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	401a      	ands	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	fa01 f303 	lsl.w	r3, r1, r3
 8003d46:	43d9      	mvns	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d4c:	4313      	orrs	r3, r2
         );
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3724      	adds	r7, #36	; 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff ff4c 	bl	8003c00 <__NVIC_SetPriorityGrouping>
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d82:	f7ff ff61 	bl	8003c48 <__NVIC_GetPriorityGrouping>
 8003d86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	6978      	ldr	r0, [r7, #20]
 8003d8e:	f7ff ffb1 	bl	8003cf4 <NVIC_EncodePriority>
 8003d92:	4602      	mov	r2, r0
 8003d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff ff80 	bl	8003ca0 <__NVIC_SetPriority>
}
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff54 	bl	8003c64 <__NVIC_EnableIRQ>
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e054      	b.n	8003e80 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	7f5b      	ldrb	r3, [r3, #29]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d105      	bne.n	8003dec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fe f95c 	bl	80020a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	791b      	ldrb	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10c      	bne.n	8003e14 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a22      	ldr	r2, [pc, #136]	; (8003e88 <HAL_CRC_Init+0xc4>)
 8003e00:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0218 	bic.w	r2, r2, #24
 8003e10:	609a      	str	r2, [r3, #8]
 8003e12:	e00c      	b.n	8003e2e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6899      	ldr	r1, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f834 	bl	8003e8c <HAL_CRCEx_Polynomial_Set>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e028      	b.n	8003e80 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	795b      	ldrb	r3, [r3, #5]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d105      	bne.n	8003e42 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e3e:	611a      	str	r2, [r3, #16]
 8003e40:	e004      	b.n	8003e4c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6912      	ldr	r2, [r2, #16]
 8003e4a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699a      	ldr	r2, [r3, #24]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	04c11db7 	.word	0x04c11db7

08003e8c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003e9c:	231f      	movs	r3, #31
 8003e9e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003ea0:	bf00      	nop
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1e5a      	subs	r2, r3, #1
 8003ea6:	613a      	str	r2, [r7, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d009      	beq.n	8003ec0 <HAL_CRCEx_Polynomial_Set+0x34>
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b18      	cmp	r3, #24
 8003ec4:	d846      	bhi.n	8003f54 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003ec6:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <HAL_CRCEx_Polynomial_Set+0x40>)
 8003ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ecc:	08003f5b 	.word	0x08003f5b
 8003ed0:	08003f55 	.word	0x08003f55
 8003ed4:	08003f55 	.word	0x08003f55
 8003ed8:	08003f55 	.word	0x08003f55
 8003edc:	08003f55 	.word	0x08003f55
 8003ee0:	08003f55 	.word	0x08003f55
 8003ee4:	08003f55 	.word	0x08003f55
 8003ee8:	08003f55 	.word	0x08003f55
 8003eec:	08003f49 	.word	0x08003f49
 8003ef0:	08003f55 	.word	0x08003f55
 8003ef4:	08003f55 	.word	0x08003f55
 8003ef8:	08003f55 	.word	0x08003f55
 8003efc:	08003f55 	.word	0x08003f55
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	08003f55 	.word	0x08003f55
 8003f08:	08003f55 	.word	0x08003f55
 8003f0c:	08003f3d 	.word	0x08003f3d
 8003f10:	08003f55 	.word	0x08003f55
 8003f14:	08003f55 	.word	0x08003f55
 8003f18:	08003f55 	.word	0x08003f55
 8003f1c:	08003f55 	.word	0x08003f55
 8003f20:	08003f55 	.word	0x08003f55
 8003f24:	08003f55 	.word	0x08003f55
 8003f28:	08003f55 	.word	0x08003f55
 8003f2c:	08003f31 	.word	0x08003f31
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d913      	bls.n	8003f5e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f3a:	e010      	b.n	8003f5e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b07      	cmp	r3, #7
 8003f40:	d90f      	bls.n	8003f62 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f46:	e00c      	b.n	8003f62 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b0f      	cmp	r3, #15
 8003f4c:	d90b      	bls.n	8003f66 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003f52:	e008      	b.n	8003f66 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	75fb      	strb	r3, [r7, #23]
      break;
 8003f58:	e006      	b.n	8003f68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e004      	b.n	8003f68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f5e:	bf00      	nop
 8003f60:	e002      	b.n	8003f68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003f66:	bf00      	nop
  }
  if (status == HAL_OK)
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 0118 	bic.w	r1, r3, #24
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e069      	b.n	800407e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d102      	bne.n	8003fbc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fe f894 	bl	80020e4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6819      	ldr	r1, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <HAL_DCMI_Init+0xf0>)
 8003fde:	400b      	ands	r3, r1
 8003fe0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6819      	ldr	r1, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003ff6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004002:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800400e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800401a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004026:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b10      	cmp	r3, #16
 8004036:	d112      	bne.n	800405e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7f1b      	ldrb	r3, [r3, #28]
 800403c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7f5b      	ldrb	r3, [r3, #29]
 8004042:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004044:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7f9b      	ldrb	r3, [r3, #30]
 800404a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800404c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	7fdb      	ldrb	r3, [r3, #31]
 8004054:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800405a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800405c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 021e 	orr.w	r2, r2, #30
 800406c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	ffe0f007 	.word	0xffe0f007

0800408c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_DMA_Start_IT+0x26>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e048      	b.n	8004144 <HAL_DMA_Start_IT+0xb8>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d137      	bne.n	8004136 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f8d4 	bl	8004288 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e4:	223f      	movs	r2, #63	; 0x3f
 80040e6:	409a      	lsls	r2, r3
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0216 	orr.w	r2, r2, #22
 80040fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800410a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0208 	orr.w	r2, r2, #8
 8004122:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e005      	b.n	8004142 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800413e:	2302      	movs	r3, #2
 8004140:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004142:	7dfb      	ldrb	r3, [r7, #23]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800415a:	f7ff fa81 	bl	8003660 <HAL_GetTick>
 800415e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d008      	beq.n	800417e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2280      	movs	r2, #128	; 0x80
 8004170:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e052      	b.n	8004224 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0216 	bic.w	r2, r2, #22
 800418c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800419c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <HAL_DMA_Abort+0x62>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0208 	bic.w	r2, r2, #8
 80041bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ce:	e013      	b.n	80041f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041d0:	f7ff fa46 	bl	8003660 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b05      	cmp	r3, #5
 80041dc:	d90c      	bls.n	80041f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2203      	movs	r2, #3
 80041e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e015      	b.n	8004224 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e4      	bne.n	80041d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420a:	223f      	movs	r2, #63	; 0x3f
 800420c:	409a      	lsls	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d004      	beq.n	800424a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e00c      	b.n	8004264 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2205      	movs	r2, #5
 800424e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0201 	bic.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b40      	cmp	r3, #64	; 0x40
 80042b4:	d108      	bne.n	80042c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042c6:	e007      	b.n	80042d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	60da      	str	r2, [r3, #12]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e039      	b.n	800436a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd ffa8 	bl	8002260 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004334:	f023 0107 	bic.w	r1, r3, #7
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <HAL_DMA2D_Init+0x90>)
 800434c:	4013      	ands	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68d1      	ldr	r1, [r2, #12]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	430b      	orrs	r3, r1
 8004358:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	ffffc000 	.word	0xffffc000

08004378 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d026      	beq.n	80043e8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d021      	beq.n	80043e8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043b2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	f043 0201 	orr.w	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2201      	movs	r2, #1
 80043c6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2204      	movs	r2, #4
 80043cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d026      	beq.n	8004440 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d021      	beq.n	8004440 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800440a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2220      	movs	r2, #32
 8004412:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	f043 0202 	orr.w	r2, r3, #2
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2204      	movs	r2, #4
 8004424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d026      	beq.n	8004498 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004450:	2b00      	cmp	r3, #0
 8004452:	d021      	beq.n	8004498 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004462:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2208      	movs	r2, #8
 800446a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004470:	f043 0204 	orr.w	r2, r3, #4
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2204      	movs	r2, #4
 800447c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d013      	beq.n	80044ca <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00e      	beq.n	80044ca <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ba:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2204      	movs	r2, #4
 80044c2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f853 	bl	8004570 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d024      	beq.n	800451e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01f      	beq.n	800451e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044ec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2202      	movs	r2, #2
 80044f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01f      	beq.n	8004568 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01a      	beq.n	8004568 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004540:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2210      	movs	r2, #16
 8004548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f80e 	bl	8004584 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_DMA2D_ConfigLayer+0x20>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e079      	b.n	80046ac <HAL_DMA2D_ConfigLayer+0x114>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	3318      	adds	r3, #24
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80045e2:	4b35      	ldr	r3, [pc, #212]	; (80046b8 <HAL_DMA2D_ConfigLayer+0x120>)
 80045e4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b0a      	cmp	r3, #10
 80045ec:	d003      	beq.n	80045f6 <HAL_DMA2D_ConfigLayer+0x5e>
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b09      	cmp	r3, #9
 80045f4:	d107      	bne.n	8004606 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e005      	b.n	8004612 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	061b      	lsls	r3, r3, #24
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d120      	bne.n	800465a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	43db      	mvns	r3, r3
 8004622:	ea02 0103 	and.w	r1, r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	430a      	orrs	r2, r1
 800462e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b0a      	cmp	r3, #10
 8004640:	d003      	beq.n	800464a <HAL_DMA2D_ConfigLayer+0xb2>
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b09      	cmp	r3, #9
 8004648:	d127      	bne.n	800469a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004656:	629a      	str	r2, [r3, #40]	; 0x28
 8004658:	e01f      	b.n	800469a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	43db      	mvns	r3, r3
 8004664:	ea02 0103 	and.w	r1, r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	430a      	orrs	r2, r1
 8004670:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b0a      	cmp	r3, #10
 8004682:	d003      	beq.n	800468c <HAL_DMA2D_ConfigLayer+0xf4>
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b09      	cmp	r3, #9
 800468a:	d106      	bne.n	800469a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004698:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	ff03000f 	.word	0xff03000f

080046bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e06a      	b.n	80047a4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2223      	movs	r2, #35	; 0x23
 80046dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f00c f8df 	bl	80108a4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e6:	4b31      	ldr	r3, [pc, #196]	; (80047ac <HAL_ETH_Init+0xf0>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	4a30      	ldr	r2, [pc, #192]	; (80047ac <HAL_ETH_Init+0xf0>)
 80046ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046f0:	6453      	str	r3, [r2, #68]	; 0x44
 80046f2:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <HAL_ETH_Init+0xf0>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80046fe:	4b2c      	ldr	r3, [pc, #176]	; (80047b0 <HAL_ETH_Init+0xf4>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	4a2b      	ldr	r2, [pc, #172]	; (80047b0 <HAL_ETH_Init+0xf4>)
 8004704:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004708:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800470a:	4b29      	ldr	r3, [pc, #164]	; (80047b0 <HAL_ETH_Init+0xf4>)
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	4927      	ldr	r1, [pc, #156]	; (80047b0 <HAL_ETH_Init+0xf4>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004718:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <HAL_ETH_Init+0xf4>)
 800471a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004732:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004734:	f7fe ff94 	bl	8003660 <HAL_GetTick>
 8004738:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800473a:	e011      	b.n	8004760 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800473c:	f7fe ff90 	bl	8003660 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800474a:	d909      	bls.n	8004760 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2204      	movs	r2, #4
 8004750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	22e0      	movs	r2, #224	; 0xe0
 8004758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e021      	b.n	80047a4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e4      	bne.n	800473c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 ff4c 	bl	8005610 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fff3 	bl	8005764 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f001 f849 	bl	8005816 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	461a      	mov	r2, r3
 800478a:	2100      	movs	r1, #0
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 ffb1 	bl	80056f4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2210      	movs	r2, #16
 800479e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40013800 	.word	0x40013800

080047b4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d17b      	bne.n	80048be <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2223      	movs	r2, #35	; 0x23
 80047ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80047e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4b35      	ldr	r3, [pc, #212]	; (80048c8 <HAL_ETH_Start_IT+0x114>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8004808:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2204      	movs	r2, #4
 8004810:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f9fc 	bl	8004c10 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0208 	orr.w	r2, r2, #8
 8004826:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004830:	2001      	movs	r0, #1
 8004832:	f7fe ff21 	bl	8003678 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0204 	orr.w	r2, r2, #4
 800484c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004856:	2001      	movs	r0, #1
 8004858:	f7fe ff0e 	bl	8003678 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fd74 	bl	8005352 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800487c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004880:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	f043 0302 	orr.w	r3, r3, #2
 8004894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004898:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a2:	69d9      	ldr	r1, [r3, #28]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	4b08      	ldr	r3, [pc, #32]	; (80048cc <HAL_ETH_Start_IT+0x118>)
 80048aa:	430b      	orrs	r3, r1
 80048ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048b0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2223      	movs	r2, #35	; 0x23
 80048b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e000      	b.n	80048c0 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
  }
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	00020060 	.word	0x00020060
 80048cc:	0001a0c1 	.word	0x0001a0c1

080048d0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048de:	2b23      	cmp	r3, #35	; 0x23
 80048e0:	d16e      	bne.n	80049c0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2223      	movs	r2, #35	; 0x23
 80048e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f2:	69d9      	ldr	r1, [r3, #28]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4b34      	ldr	r3, [pc, #208]	; (80049cc <HAL_ETH_Stop_IT+0xfc>)
 80048fa:	400b      	ands	r3, r1
 80048fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004900:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004914:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004918:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	f023 0302 	bic.w	r3, r3, #2
 800492c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004930:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0204 	bic.w	r2, r2, #4
 8004940:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800494a:	2001      	movs	r0, #1
 800494c:	f7fe fe94 	bl	8003678 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fcfa 	bl	8005352 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0208 	bic.w	r2, r2, #8
 800496c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004976:	2001      	movs	r0, #1
 8004978:	f7fe fe7e 	bl	8003678 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	e00e      	b.n	80049a8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	3212      	adds	r2, #18
 8004990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004994:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	3301      	adds	r3, #1
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d9ed      	bls.n	800498a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2210      	movs	r2, #16
 80049b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	e000      	b.n	80049c2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
  }
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	fffe5f3e 	.word	0xfffe5f3e

080049d0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d109      	bne.n	80049f4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	f043 0201 	orr.w	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e045      	b.n	8004a80 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fa:	2b23      	cmp	r3, #35	; 0x23
 80049fc:	d13f      	bne.n	8004a7e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004a06:	2201      	movs	r2, #1
 8004a08:	6839      	ldr	r1, [r7, #0]
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 ff70 	bl	80058f0 <ETH_Prepare_Tx_Descriptors>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f043 0202 	orr.w	r2, r3, #2
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e02a      	b.n	8004a80 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a2a:	f3bf 8f4f 	dsb	sy
}
 8004a2e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	629a      	str	r2, [r3, #40]	; 0x28
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d904      	bls.n	8004a4c <HAL_ETH_Transmit_IT+0x7c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	1f1a      	subs	r2, r3, #4
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00d      	beq.n	8004a7a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a66:	461a      	mov	r2, r3
 8004a68:	2304      	movs	r3, #4
 8004a6a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a74:	461a      	mov	r2, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e000      	b.n	8004a80 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
  }
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa6:	f043 0201 	orr.w	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0a8      	b.n	8004c06 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aba:	2b23      	cmp	r3, #35	; 0x23
 8004abc:	d001      	beq.n	8004ac2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e0a1      	b.n	8004c06 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	3212      	adds	r2, #18
 8004ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ad2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad8:	f1c3 0304 	rsb	r3, r3, #4
 8004adc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004ade:	e06a      	b.n	8004bb6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <HAL_ETH_ReadData+0x88>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d040      	beq.n	8004b92 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00c      	beq.n	8004b54 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	0c1b      	lsrs	r3, r3, #16
 8004b40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004b44:	3b04      	subs	r3, #4
 8004b46:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f00c f845 	bl	8010c00 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3301      	adds	r3, #1
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d902      	bls.n	8004ba4 <HAL_ETH_ReadData+0x11c>
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	3b04      	subs	r3, #4
 8004ba2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	3212      	adds	r2, #18
 8004baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bae:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	db06      	blt.n	8004bcc <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d202      	bcs.n	8004bcc <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d089      	beq.n	8004ae0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	441a      	add	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f815 	bl	8004c10 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d108      	bne.n	8004c04 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e000      	b.n	8004c06 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c24:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	3212      	adds	r2, #18
 8004c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c30:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c36:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004c38:	e040      	b.n	8004cbc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d112      	bne.n	8004c68 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004c42:	f107 030c 	add.w	r3, r7, #12
 8004c46:	4618      	mov	r0, r3
 8004c48:	f00b ffaa 	bl	8010ba0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d102      	bne.n	8004c58 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	74fb      	strb	r3, [r7, #19]
 8004c56:	e007      	b.n	8004c68 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	461a      	mov	r2, r3
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004c68:	7cfb      	ldrb	r3, [r7, #19]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d026      	beq.n	8004cbc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <ETH_UpdateDescriptor+0xe4>)
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	e003      	b.n	8004c86 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004c84:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004c86:	f3bf 8f5f 	dmb	sy
}
 8004c8a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d902      	bls.n	8004caa <ETH_UpdateDescriptor+0x9a>
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	3b04      	subs	r3, #4
 8004ca8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	3212      	adds	r2, #18
 8004cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb4:	617b      	str	r3, [r7, #20]
      desccount--;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <ETH_UpdateDescriptor+0xb8>
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1b8      	bne.n	8004c3a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d00c      	beq.n	8004cec <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cda:	461a      	mov	r2, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004cec:	bf00      	nop
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	80004600 	.word	0x80004600

08004cf8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3318      	adds	r3, #24
 8004d04:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004d16:	e03f      	b.n	8004d98 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	3304      	adds	r3, #4
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	3301      	adds	r3, #1
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004d40:	7bbb      	ldrb	r3, [r7, #14]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d028      	beq.n	8004d98 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68d9      	ldr	r1, [r3, #12]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	440b      	add	r3, r1
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	db1b      	blt.n	8004d94 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	3304      	adds	r3, #4
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f00b ff8b 	bl	8010c84 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	3304      	adds	r3, #4
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	2200      	movs	r2, #0
 8004d7a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d92:	e001      	b.n	8004d98 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_ETH_ReleaseTxPacket+0xac>
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1b9      	bne.n	8004d18 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b40      	cmp	r3, #64	; 0x40
 8004dc8:	d112      	bne.n	8004df0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d109      	bne.n	8004df0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de4:	461a      	mov	r2, r3
 8004de6:	4b50      	ldr	r3, [pc, #320]	; (8004f28 <HAL_ETH_IRQHandler+0x178>)
 8004de8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f00b faa6 	bl	801033c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d113      	bne.n	8004e2a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d10a      	bne.n	8004e2a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004e22:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f00b fa99 	bl	801035c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3c:	d14c      	bne.n	8004ed8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e50:	d142      	bne.n	8004ed8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	f043 0208 	orr.w	r2, r3, #8
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e74:	d11a      	bne.n	8004eac <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <HAL_ETH_IRQHandler+0x17c>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004e9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ea0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	22e0      	movs	r2, #224	; 0xe0
 8004ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004eaa:	e012      	b.n	8004ed2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	f248 6380 	movw	r3, #34432	; 0x8680
 8004eba:	4013      	ands	r3, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f248 6380 	movw	r3, #34432	; 0x8680
 8004ed0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f00b fa52 	bl	801037c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d10e      	bne.n	8004f04 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f81c 	bl	8004f34 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004f04:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_ETH_IRQHandler+0x180>)
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d006      	beq.n	8004f1e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <HAL_ETH_IRQHandler+0x180>)
 8004f12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004f16:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f815 	bl	8004f48 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	00010040 	.word	0x00010040
 8004f2c:	007e2000 	.word	0x007e2000
 8004f30:	40013c00 	.word	0x40013c00

08004f34 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f003 031c 	and.w	r3, r3, #28
 8004f78:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	02db      	lsls	r3, r3, #11
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	019b      	lsls	r3, r3, #6
 8004f8a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0302 	bic.w	r3, r3, #2
 8004f9a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004fac:	f7fe fb58 	bl	8003660 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004fb2:	e00d      	b.n	8004fd0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004fb4:	f7fe fb54 	bl	8003660 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc2:	d301      	bcc.n	8004fc8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e010      	b.n	8004fea <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1ec      	bne.n	8004fb4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f003 031c 	and.w	r3, r3, #28
 800500e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	02db      	lsls	r3, r3, #11
 8005014:	b29b      	uxth	r3, r3
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	019b      	lsls	r3, r3, #6
 8005020:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800504c:	f7fe fb08 	bl	8003660 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005052:	e00d      	b.n	8005070 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8005054:	f7fe fb04 	bl	8003660 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005062:	d301      	bcc.n	8005068 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e009      	b.n	800507c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1ec      	bne.n	8005054 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0d9      	b.n	800524c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0310 	and.w	r3, r3, #16
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bf14      	ite	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	2300      	moveq	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bf0c      	ite	eq
 80050d0:	2301      	moveq	r3, #1
 80050d2:	2300      	movne	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005102:	2b00      	cmp	r3, #0
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800511c:	2b00      	cmp	r3, #0
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	461a      	mov	r2, r3
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005152:	2b00      	cmp	r3, #0
 8005154:	bf0c      	ite	eq
 8005156:	2301      	moveq	r3, #1
 8005158:	2300      	movne	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	461a      	mov	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf0c      	ite	eq
 8005170:	2301      	moveq	r3, #1
 8005172:	2300      	movne	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	bf14      	ite	ne
 800518a:	2301      	movne	r3, #1
 800518c:	2300      	moveq	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf14      	ite	ne
 80051b2:	2301      	movne	r3, #1
 80051b4:	2300      	moveq	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bf0c      	ite	eq
 80051e8:	2301      	moveq	r3, #1
 80051ea:	2300      	movne	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	0c1b      	lsrs	r3, r3, #16
 800520c:	b29a      	uxth	r2, r3
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	bf14      	ite	ne
 8005220:	2301      	movne	r3, #1
 8005222:	2300      	moveq	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8005238:	2b00      	cmp	r3, #0
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e00b      	b.n	8005284 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005272:	2b10      	cmp	r3, #16
 8005274:	d105      	bne.n	8005282 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f88f 	bl	800539c <ETH_SetMACConfig>

    return HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	e000      	b.n	8005284 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
  }
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 031c 	bic.w	r3, r3, #28
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80052a4:	f003 fd7a 	bl	8008d9c <HAL_RCC_GetHCLKFreq>
 80052a8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4a1d      	ldr	r2, [pc, #116]	; (8005324 <HAL_ETH_SetMDIOClockRange+0x98>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d908      	bls.n	80052c4 <HAL_ETH_SetMDIOClockRange+0x38>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4a1c      	ldr	r2, [pc, #112]	; (8005328 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d804      	bhi.n	80052c4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f043 0308 	orr.w	r3, r3, #8
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e027      	b.n	8005314 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4a18      	ldr	r2, [pc, #96]	; (8005328 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d908      	bls.n	80052de <HAL_ETH_SetMDIOClockRange+0x52>
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4a17      	ldr	r2, [pc, #92]	; (800532c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d204      	bcs.n	80052de <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f043 030c 	orr.w	r3, r3, #12
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e01a      	b.n	8005314 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4a12      	ldr	r2, [pc, #72]	; (800532c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d303      	bcc.n	80052ee <HAL_ETH_SetMDIOClockRange+0x62>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4a11      	ldr	r2, [pc, #68]	; (8005330 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d911      	bls.n	8005312 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4a0f      	ldr	r2, [pc, #60]	; (8005330 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d908      	bls.n	8005308 <HAL_ETH_SetMDIOClockRange+0x7c>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4a0e      	ldr	r2, [pc, #56]	; (8005334 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d804      	bhi.n	8005308 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f043 0304 	orr.w	r3, r3, #4
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e005      	b.n	8005314 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f043 0310 	orr.w	r3, r3, #16
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e000      	b.n	8005314 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8005312:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	611a      	str	r2, [r3, #16]
}
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	01312cff 	.word	0x01312cff
 8005328:	02160ebf 	.word	0x02160ebf
 800532c:	03938700 	.word	0x03938700
 8005330:	05f5e0ff 	.word	0x05f5e0ff
 8005334:	08f0d17f 	.word	0x08f0d17f

08005338 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005370:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005374:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005382:	2001      	movs	r0, #1
 8005384:	f7fe f978 	bl	8003678 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005392:	6193      	str	r3, [r2, #24]
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4b51      	ldr	r3, [pc, #324]	; (80054f8 <ETH_SetMACConfig+0x15c>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	7c1b      	ldrb	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <ETH_SetMACConfig+0x28>
 80053be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80053c2:	e000      	b.n	80053c6 <ETH_SetMACConfig+0x2a>
 80053c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	7c5b      	ldrb	r3, [r3, #17]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <ETH_SetMACConfig+0x38>
 80053ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053d2:	e000      	b.n	80053d6 <ETH_SetMACConfig+0x3a>
 80053d4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80053d6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80053dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	7fdb      	ldrb	r3, [r3, #31]
 80053e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80053e4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80053ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	7f92      	ldrb	r2, [r2, #30]
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	d102      	bne.n	80053fa <ETH_SetMACConfig+0x5e>
 80053f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053f8:	e000      	b.n	80053fc <ETH_SetMACConfig+0x60>
 80053fa:	2200      	movs	r2, #0
                        macconf->Speed |
 80053fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	7f1b      	ldrb	r3, [r3, #28]
 8005402:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005404:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800540a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	791b      	ldrb	r3, [r3, #4]
 8005410:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005412:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	f892 2020 	ldrb.w	r2, [r2, #32]
 800541a:	2a00      	cmp	r2, #0
 800541c:	d102      	bne.n	8005424 <ETH_SetMACConfig+0x88>
 800541e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005422:	e000      	b.n	8005426 <ETH_SetMACConfig+0x8a>
 8005424:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005426:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	7bdb      	ldrb	r3, [r3, #15]
 800542c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800542e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005434:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800543c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800543e:	4313      	orrs	r3, r2
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005456:	2001      	movs	r0, #1
 8005458:	f7fe f90e 	bl	8003678 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005472:	4013      	ands	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800547a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005482:	2a00      	cmp	r2, #0
 8005484:	d101      	bne.n	800548a <ETH_SetMACConfig+0xee>
 8005486:	2280      	movs	r2, #128	; 0x80
 8005488:	e000      	b.n	800548c <ETH_SetMACConfig+0xf0>
 800548a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800548c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005492:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800549a:	2a01      	cmp	r2, #1
 800549c:	d101      	bne.n	80054a2 <ETH_SetMACConfig+0x106>
 800549e:	2208      	movs	r2, #8
 80054a0:	e000      	b.n	80054a4 <ETH_SetMACConfig+0x108>
 80054a2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80054a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80054ac:	2a01      	cmp	r2, #1
 80054ae:	d101      	bne.n	80054b4 <ETH_SetMACConfig+0x118>
 80054b0:	2204      	movs	r2, #4
 80054b2:	e000      	b.n	80054b6 <ETH_SetMACConfig+0x11a>
 80054b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80054b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80054be:	2a01      	cmp	r2, #1
 80054c0:	d101      	bne.n	80054c6 <ETH_SetMACConfig+0x12a>
 80054c2:	2202      	movs	r2, #2
 80054c4:	e000      	b.n	80054c8 <ETH_SetMACConfig+0x12c>
 80054c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80054c8:	4313      	orrs	r3, r2
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80054e0:	2001      	movs	r0, #1
 80054e2:	f7fe f8c9 	bl	8003678 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	619a      	str	r2, [r3, #24]
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	ff20810f 	.word	0xff20810f

080054fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4b3d      	ldr	r3, [pc, #244]	; (800560c <ETH_SetDMAConfig+0x110>)
 8005516:	4013      	ands	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	7b1b      	ldrb	r3, [r3, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d102      	bne.n	8005528 <ETH_SetDMAConfig+0x2c>
 8005522:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005526:	e000      	b.n	800552a <ETH_SetDMAConfig+0x2e>
 8005528:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	7b5b      	ldrb	r3, [r3, #13]
 800552e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005530:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	7f52      	ldrb	r2, [r2, #29]
 8005536:	2a00      	cmp	r2, #0
 8005538:	d102      	bne.n	8005540 <ETH_SetDMAConfig+0x44>
 800553a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800553e:	e000      	b.n	8005542 <ETH_SetDMAConfig+0x46>
 8005540:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005542:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	7b9b      	ldrb	r3, [r3, #14]
 8005548:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800554a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005550:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	7f1b      	ldrb	r3, [r3, #28]
 8005556:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005558:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	7f9b      	ldrb	r3, [r3, #30]
 800555e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005560:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005566:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800556e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005570:	4313      	orrs	r3, r2
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005580:	461a      	mov	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005592:	2001      	movs	r0, #1
 8005594:	f7fe f870 	bl	8003678 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a0:	461a      	mov	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	791b      	ldrb	r3, [r3, #4]
 80055aa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80055b0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80055b6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80055bc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055c4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80055c6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80055ce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80055d4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055e2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80055f0:	2001      	movs	r0, #1
 80055f2:	f7fe f841 	bl	8003678 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fe:	461a      	mov	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6013      	str	r3, [r2, #0]
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	f8de3f23 	.word	0xf8de3f23

08005610 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b0a6      	sub	sp, #152	; 0x98
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005624:	2300      	movs	r3, #0
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005628:	2300      	movs	r3, #0
 800562a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005634:	2300      	movs	r3, #0
 8005636:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005646:	2300      	movs	r3, #0
 8005648:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800564c:	2300      	movs	r3, #0
 800564e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005650:	2300      	movs	r3, #0
 8005652:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005656:	2300      	movs	r3, #0
 8005658:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800565a:	2300      	movs	r3, #0
 800565c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005660:	2300      	movs	r3, #0
 8005662:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005666:	2300      	movs	r3, #0
 8005668:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800566c:	2300      	movs	r3, #0
 800566e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005672:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005676:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005678:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800567c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800567e:	2300      	movs	r3, #0
 8005680:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005684:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fe86 	bl	800539c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005690:	2301      	movs	r3, #1
 8005692:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005694:	2301      	movs	r3, #1
 8005696:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005698:	2301      	movs	r3, #1
 800569a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800569e:	2301      	movs	r3, #1
 80056a0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80056b2:	2300      	movs	r3, #0
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80056b6:	2301      	movs	r3, #1
 80056b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80056bc:	2301      	movs	r3, #1
 80056be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80056c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056c4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80056c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80056cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056d0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80056d2:	2301      	movs	r3, #1
 80056d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80056dc:	2300      	movs	r3, #0
 80056de:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80056e0:	f107 0308 	add.w	r3, r7, #8
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff ff08 	bl	80054fc <ETH_SetDMAConfig>
}
 80056ec:	bf00      	nop
 80056ee:	3798      	adds	r7, #152	; 0x98
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3305      	adds	r3, #5
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	021b      	lsls	r3, r3, #8
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	3204      	adds	r2, #4
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	4b11      	ldr	r3, [pc, #68]	; (800575c <ETH_MACAddressConfig+0x68>)
 8005716:	4413      	add	r3, r2
 8005718:	461a      	mov	r2, r3
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3303      	adds	r3, #3
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	061a      	lsls	r2, r3, #24
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3302      	adds	r3, #2
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	041b      	lsls	r3, r3, #16
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3301      	adds	r3, #1
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	4313      	orrs	r3, r2
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	7812      	ldrb	r2, [r2, #0]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <ETH_MACAddressConfig+0x6c>)
 8005746:	4413      	add	r3, r2
 8005748:	461a      	mov	r2, r3
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	6013      	str	r3, [r2, #0]
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40028040 	.word	0x40028040
 8005760:	40028044 	.word	0x40028044

08005764 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e03e      	b.n	80057f0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68d9      	ldr	r1, [r3, #12]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	440b      	add	r3, r1
 8005782:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2200      	movs	r2, #0
 800578e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2200      	movs	r2, #0
 8005794:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2200      	movs	r2, #0
 800579a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	3206      	adds	r2, #6
 80057a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d80c      	bhi.n	80057d4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68d9      	ldr	r1, [r3, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	440b      	add	r3, r1
 80057cc:	461a      	mov	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	60da      	str	r2, [r3, #12]
 80057d2:	e004      	b.n	80057de <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	461a      	mov	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3301      	adds	r3, #1
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d9bd      	bls.n	8005772 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005808:	611a      	str	r2, [r3, #16]
}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005816:	b480      	push	{r7}
 8005818:	b085      	sub	sp, #20
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	e046      	b.n	80058b2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6919      	ldr	r1, [r3, #16]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	440b      	add	r3, r1
 8005834:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2200      	movs	r2, #0
 8005840:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2200      	movs	r2, #0
 8005846:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2200      	movs	r2, #0
 800584c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2200      	movs	r2, #0
 8005852:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2200      	movs	r2, #0
 8005858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005860:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8005868:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	3212      	adds	r2, #18
 800587e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d80c      	bhi.n	80058a2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6919      	ldr	r1, [r3, #16]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	440b      	add	r3, r1
 800589a:	461a      	mov	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	60da      	str	r2, [r3, #12]
 80058a0:	e004      	b.n	80058ac <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	461a      	mov	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3301      	adds	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d9b5      	bls.n	8005824 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e2:	60da      	str	r2, [r3, #12]
}
 80058e4:	bf00      	nop
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b08d      	sub	sp, #52	; 0x34
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3318      	adds	r3, #24
 8005900:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800591a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800592e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005932:	d007      	beq.n	8005944 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	3304      	adds	r3, #4
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005944:	2302      	movs	r3, #2
 8005946:	e0ff      	b.n	8005b48 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	3301      	adds	r3, #1
 800594c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	4b7d      	ldr	r3, [pc, #500]	; (8005b54 <ETH_Prepare_Tx_Descriptors+0x264>)
 800595e:	4013      	ands	r3, r2
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	6852      	ldr	r2, [r2, #4]
 8005964:	431a      	orrs	r2, r3
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d008      	beq.n	8005988 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	431a      	orrs	r2, r3
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	431a      	orrs	r2, r3
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80059ca:	f3bf 8f5f 	dmb	sy
}
 80059ce:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80059dc:	e082      	b.n	8005ae4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d006      	beq.n	80059fe <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e005      	b.n	8005a0a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d902      	bls.n	8005a1c <ETH_Prepare_Tx_Descriptors+0x12c>
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	3b04      	subs	r3, #4
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a24:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a3e:	d007      	beq.n	8005a50 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	3304      	adds	r3, #4
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d029      	beq.n	8005aa4 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a5c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005a5e:	2300      	movs	r3, #0
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a62:	e019      	b.n	8005a98 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8005a64:	f3bf 8f5f 	dmb	sy
}
 8005a68:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	3301      	adds	r3, #1
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d902      	bls.n	8005a88 <ETH_Prepare_Tx_Descriptors+0x198>
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	3b04      	subs	r3, #4
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a90:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	3301      	adds	r3, #1
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d3e1      	bcc.n	8005a64 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e051      	b.n	8005b48 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	4b25      	ldr	r3, [pc, #148]	; (8005b54 <ETH_Prepare_Tx_Descriptors+0x264>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	6852      	ldr	r2, [r2, #4]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005ad2:	f3bf 8f5f 	dmb	sy
}
 8005ad6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f47f af78 	bne.w	80059de <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d006      	beq.n	8005b02 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e005      	b.n	8005b0e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b1e:	6979      	ldr	r1, [r7, #20]
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b22:	3304      	adds	r3, #4
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b2e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b30:	b672      	cpsid	i
}
 8005b32:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005b42:	b662      	cpsie	i
}
 8005b44:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3734      	adds	r7, #52	; 0x34
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	ffffe000 	.word	0xffffe000

08005b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b089      	sub	sp, #36	; 0x24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]
 8005b76:	e175      	b.n	8005e64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005b78:	2201      	movs	r2, #1
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	f040 8164 	bne.w	8005e5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d005      	beq.n	8005bae <HAL_GPIO_Init+0x56>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d130      	bne.n	8005c10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	2203      	movs	r2, #3
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005be4:	2201      	movs	r2, #1
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	091b      	lsrs	r3, r3, #4
 8005bfa:	f003 0201 	and.w	r2, r3, #1
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f003 0303 	and.w	r3, r3, #3
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d017      	beq.n	8005c4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	2203      	movs	r2, #3
 8005c28:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	4013      	ands	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f003 0303 	and.w	r3, r3, #3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d123      	bne.n	8005ca0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	08da      	lsrs	r2, r3, #3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3208      	adds	r2, #8
 8005c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	220f      	movs	r2, #15
 8005c70:	fa02 f303 	lsl.w	r3, r2, r3
 8005c74:	43db      	mvns	r3, r3
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	08da      	lsrs	r2, r3, #3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3208      	adds	r2, #8
 8005c9a:	69b9      	ldr	r1, [r7, #24]
 8005c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	2203      	movs	r2, #3
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f003 0203 	and.w	r2, r3, #3
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 80be 	beq.w	8005e5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ce2:	4b66      	ldr	r3, [pc, #408]	; (8005e7c <HAL_GPIO_Init+0x324>)
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce6:	4a65      	ldr	r2, [pc, #404]	; (8005e7c <HAL_GPIO_Init+0x324>)
 8005ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cec:	6453      	str	r3, [r2, #68]	; 0x44
 8005cee:	4b63      	ldr	r3, [pc, #396]	; (8005e7c <HAL_GPIO_Init+0x324>)
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005cfa:	4a61      	ldr	r2, [pc, #388]	; (8005e80 <HAL_GPIO_Init+0x328>)
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	089b      	lsrs	r3, r3, #2
 8005d00:	3302      	adds	r3, #2
 8005d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	220f      	movs	r2, #15
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	43db      	mvns	r3, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a58      	ldr	r2, [pc, #352]	; (8005e84 <HAL_GPIO_Init+0x32c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d037      	beq.n	8005d96 <HAL_GPIO_Init+0x23e>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a57      	ldr	r2, [pc, #348]	; (8005e88 <HAL_GPIO_Init+0x330>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d031      	beq.n	8005d92 <HAL_GPIO_Init+0x23a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a56      	ldr	r2, [pc, #344]	; (8005e8c <HAL_GPIO_Init+0x334>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d02b      	beq.n	8005d8e <HAL_GPIO_Init+0x236>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a55      	ldr	r2, [pc, #340]	; (8005e90 <HAL_GPIO_Init+0x338>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d025      	beq.n	8005d8a <HAL_GPIO_Init+0x232>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a54      	ldr	r2, [pc, #336]	; (8005e94 <HAL_GPIO_Init+0x33c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01f      	beq.n	8005d86 <HAL_GPIO_Init+0x22e>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a53      	ldr	r2, [pc, #332]	; (8005e98 <HAL_GPIO_Init+0x340>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d019      	beq.n	8005d82 <HAL_GPIO_Init+0x22a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a52      	ldr	r2, [pc, #328]	; (8005e9c <HAL_GPIO_Init+0x344>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <HAL_GPIO_Init+0x226>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a51      	ldr	r2, [pc, #324]	; (8005ea0 <HAL_GPIO_Init+0x348>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00d      	beq.n	8005d7a <HAL_GPIO_Init+0x222>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a50      	ldr	r2, [pc, #320]	; (8005ea4 <HAL_GPIO_Init+0x34c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d007      	beq.n	8005d76 <HAL_GPIO_Init+0x21e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a4f      	ldr	r2, [pc, #316]	; (8005ea8 <HAL_GPIO_Init+0x350>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d101      	bne.n	8005d72 <HAL_GPIO_Init+0x21a>
 8005d6e:	2309      	movs	r3, #9
 8005d70:	e012      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d72:	230a      	movs	r3, #10
 8005d74:	e010      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d76:	2308      	movs	r3, #8
 8005d78:	e00e      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d7a:	2307      	movs	r3, #7
 8005d7c:	e00c      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d7e:	2306      	movs	r3, #6
 8005d80:	e00a      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d82:	2305      	movs	r3, #5
 8005d84:	e008      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d86:	2304      	movs	r3, #4
 8005d88:	e006      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e004      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e002      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <HAL_GPIO_Init+0x240>
 8005d96:	2300      	movs	r3, #0
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	f002 0203 	and.w	r2, r2, #3
 8005d9e:	0092      	lsls	r2, r2, #2
 8005da0:	4093      	lsls	r3, r2
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005da8:	4935      	ldr	r1, [pc, #212]	; (8005e80 <HAL_GPIO_Init+0x328>)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	089b      	lsrs	r3, r3, #2
 8005dae:	3302      	adds	r3, #2
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005db6:	4b3d      	ldr	r3, [pc, #244]	; (8005eac <HAL_GPIO_Init+0x354>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	43db      	mvns	r3, r3
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dda:	4a34      	ldr	r2, [pc, #208]	; (8005eac <HAL_GPIO_Init+0x354>)
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005de0:	4b32      	ldr	r3, [pc, #200]	; (8005eac <HAL_GPIO_Init+0x354>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	43db      	mvns	r3, r3
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	4013      	ands	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e04:	4a29      	ldr	r2, [pc, #164]	; (8005eac <HAL_GPIO_Init+0x354>)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e0a:	4b28      	ldr	r3, [pc, #160]	; (8005eac <HAL_GPIO_Init+0x354>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	43db      	mvns	r3, r3
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	4013      	ands	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e2e:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <HAL_GPIO_Init+0x354>)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e34:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <HAL_GPIO_Init+0x354>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4013      	ands	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e58:	4a14      	ldr	r2, [pc, #80]	; (8005eac <HAL_GPIO_Init+0x354>)
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3301      	adds	r3, #1
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b0f      	cmp	r3, #15
 8005e68:	f67f ae86 	bls.w	8005b78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	3724      	adds	r7, #36	; 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	40013800 	.word	0x40013800
 8005e84:	40020000 	.word	0x40020000
 8005e88:	40020400 	.word	0x40020400
 8005e8c:	40020800 	.word	0x40020800
 8005e90:	40020c00 	.word	0x40020c00
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40021400 	.word	0x40021400
 8005e9c:	40021800 	.word	0x40021800
 8005ea0:	40021c00 	.word	0x40021c00
 8005ea4:	40022000 	.word	0x40022000
 8005ea8:	40022400 	.word	0x40022400
 8005eac:	40013c00 	.word	0x40013c00

08005eb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	887b      	ldrh	r3, [r7, #2]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	73fb      	strb	r3, [r7, #15]
 8005ecc:	e001      	b.n	8005ed2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	807b      	strh	r3, [r7, #2]
 8005eec:	4613      	mov	r3, r2
 8005eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ef0:	787b      	ldrb	r3, [r7, #1]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ef6:	887a      	ldrh	r2, [r7, #2]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005efc:	e003      	b.n	8005f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005efe:	887b      	ldrh	r3, [r7, #2]
 8005f00:	041a      	lsls	r2, r3, #16
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	619a      	str	r2, [r3, #24]
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005f12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f14:	b08f      	sub	sp, #60	; 0x3c
 8005f16:	af0a      	add	r7, sp, #40	; 0x28
 8005f18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e054      	b.n	8005fce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f01d f808 	bl	8022f54 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2203      	movs	r2, #3
 8005f48:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d102      	bne.n	8005f5e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f008 fe97 	bl	800ec96 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	687e      	ldr	r6, [r7, #4]
 8005f70:	466d      	mov	r5, sp
 8005f72:	f106 0410 	add.w	r4, r6, #16
 8005f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f82:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f86:	1d33      	adds	r3, r6, #4
 8005f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f8a:	6838      	ldr	r0, [r7, #0]
 8005f8c:	f008 fe1a 	bl	800ebc4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2101      	movs	r1, #1
 8005f96:	4618      	mov	r0, r3
 8005f98:	f008 fe8e 	bl	800ecb8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	687e      	ldr	r6, [r7, #4]
 8005fa4:	466d      	mov	r5, sp
 8005fa6:	f106 0410 	add.w	r4, r6, #16
 8005faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fba:	1d33      	adds	r3, r6, #4
 8005fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fbe:	6838      	ldr	r0, [r7, #0]
 8005fc0:	f009 f836 	bl	800f030 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fd6 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005fd6:	b590      	push	{r4, r7, lr}
 8005fd8:	b089      	sub	sp, #36	; 0x24
 8005fda:	af04      	add	r7, sp, #16
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	4608      	mov	r0, r1
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	70fb      	strb	r3, [r7, #3]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70bb      	strb	r3, [r7, #2]
 8005fec:	4613      	mov	r3, r2
 8005fee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_HCD_HC_Init+0x28>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e076      	b.n	80060ec <HAL_HCD_HC_Init+0x116>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8006006:	78fb      	ldrb	r3, [r7, #3]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	212c      	movs	r1, #44	; 0x2c
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	4413      	add	r3, r2
 8006012:	333d      	adds	r3, #61	; 0x3d
 8006014:	2200      	movs	r2, #0
 8006016:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	212c      	movs	r1, #44	; 0x2c
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	4413      	add	r3, r2
 8006024:	3338      	adds	r3, #56	; 0x38
 8006026:	787a      	ldrb	r2, [r7, #1]
 8006028:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	212c      	movs	r1, #44	; 0x2c
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	4413      	add	r3, r2
 8006036:	3340      	adds	r3, #64	; 0x40
 8006038:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800603a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	212c      	movs	r1, #44	; 0x2c
 8006042:	fb01 f303 	mul.w	r3, r1, r3
 8006046:	4413      	add	r3, r2
 8006048:	3339      	adds	r3, #57	; 0x39
 800604a:	78fa      	ldrb	r2, [r7, #3]
 800604c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	212c      	movs	r1, #44	; 0x2c
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	4413      	add	r3, r2
 800605a:	333f      	adds	r3, #63	; 0x3f
 800605c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006060:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	78ba      	ldrb	r2, [r7, #2]
 8006066:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800606a:	b2d0      	uxtb	r0, r2
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	212c      	movs	r1, #44	; 0x2c
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	4413      	add	r3, r2
 8006076:	333a      	adds	r3, #58	; 0x3a
 8006078:	4602      	mov	r2, r0
 800607a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800607c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006080:	2b00      	cmp	r3, #0
 8006082:	da09      	bge.n	8006098 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	212c      	movs	r1, #44	; 0x2c
 800608a:	fb01 f303 	mul.w	r3, r1, r3
 800608e:	4413      	add	r3, r2
 8006090:	333b      	adds	r3, #59	; 0x3b
 8006092:	2201      	movs	r2, #1
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	e008      	b.n	80060aa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	212c      	movs	r1, #44	; 0x2c
 800609e:	fb01 f303 	mul.w	r3, r1, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	333b      	adds	r3, #59	; 0x3b
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	212c      	movs	r1, #44	; 0x2c
 80060b0:	fb01 f303 	mul.w	r3, r1, r3
 80060b4:	4413      	add	r3, r2
 80060b6:	333c      	adds	r3, #60	; 0x3c
 80060b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80060bc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	787c      	ldrb	r4, [r7, #1]
 80060c4:	78ba      	ldrb	r2, [r7, #2]
 80060c6:	78f9      	ldrb	r1, [r7, #3]
 80060c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80060ca:	9302      	str	r3, [sp, #8]
 80060cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80060d0:	9301      	str	r3, [sp, #4]
 80060d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	4623      	mov	r3, r4
 80060da:	f009 f923 	bl	800f324 <USB_HC_Init>
 80060de:	4603      	mov	r3, r0
 80060e0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd90      	pop	{r4, r7, pc}

080060f4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_HCD_HC_Halt+0x1e>
 800610e:	2302      	movs	r3, #2
 8006110:	e00f      	b.n	8006132 <HAL_HCD_HC_Halt+0x3e>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	78fa      	ldrb	r2, [r7, #3]
 8006120:	4611      	mov	r1, r2
 8006122:	4618      	mov	r0, r3
 8006124:	f009 fb73 	bl	800f80e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	4608      	mov	r0, r1
 8006146:	4611      	mov	r1, r2
 8006148:	461a      	mov	r2, r3
 800614a:	4603      	mov	r3, r0
 800614c:	70fb      	strb	r3, [r7, #3]
 800614e:	460b      	mov	r3, r1
 8006150:	70bb      	strb	r3, [r7, #2]
 8006152:	4613      	mov	r3, r2
 8006154:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	212c      	movs	r1, #44	; 0x2c
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	4413      	add	r3, r2
 8006162:	333b      	adds	r3, #59	; 0x3b
 8006164:	78ba      	ldrb	r2, [r7, #2]
 8006166:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	212c      	movs	r1, #44	; 0x2c
 800616e:	fb01 f303 	mul.w	r3, r1, r3
 8006172:	4413      	add	r3, r2
 8006174:	333f      	adds	r3, #63	; 0x3f
 8006176:	787a      	ldrb	r2, [r7, #1]
 8006178:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800617a:	7c3b      	ldrb	r3, [r7, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d112      	bne.n	80061a6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	212c      	movs	r1, #44	; 0x2c
 8006186:	fb01 f303 	mul.w	r3, r1, r3
 800618a:	4413      	add	r3, r2
 800618c:	3342      	adds	r3, #66	; 0x42
 800618e:	2203      	movs	r2, #3
 8006190:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	212c      	movs	r1, #44	; 0x2c
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	4413      	add	r3, r2
 800619e:	333d      	adds	r3, #61	; 0x3d
 80061a0:	7f3a      	ldrb	r2, [r7, #28]
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	e008      	b.n	80061b8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	212c      	movs	r1, #44	; 0x2c
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	3342      	adds	r3, #66	; 0x42
 80061b4:	2202      	movs	r2, #2
 80061b6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80061b8:	787b      	ldrb	r3, [r7, #1]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	f200 80c6 	bhi.w	800634c <HAL_HCD_HC_SubmitRequest+0x210>
 80061c0:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	080061d9 	.word	0x080061d9
 80061cc:	08006339 	.word	0x08006339
 80061d0:	0800623d 	.word	0x0800623d
 80061d4:	080062bb 	.word	0x080062bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80061d8:	7c3b      	ldrb	r3, [r7, #16]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	f040 80b8 	bne.w	8006350 <HAL_HCD_HC_SubmitRequest+0x214>
 80061e0:	78bb      	ldrb	r3, [r7, #2]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f040 80b4 	bne.w	8006350 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80061e8:	8b3b      	ldrh	r3, [r7, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d108      	bne.n	8006200 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80061ee:	78fb      	ldrb	r3, [r7, #3]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	212c      	movs	r1, #44	; 0x2c
 80061f4:	fb01 f303 	mul.w	r3, r1, r3
 80061f8:	4413      	add	r3, r2
 80061fa:	3355      	adds	r3, #85	; 0x55
 80061fc:	2201      	movs	r2, #1
 80061fe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	212c      	movs	r1, #44	; 0x2c
 8006206:	fb01 f303 	mul.w	r3, r1, r3
 800620a:	4413      	add	r3, r2
 800620c:	3355      	adds	r3, #85	; 0x55
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d109      	bne.n	8006228 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	212c      	movs	r1, #44	; 0x2c
 800621a:	fb01 f303 	mul.w	r3, r1, r3
 800621e:	4413      	add	r3, r2
 8006220:	3342      	adds	r3, #66	; 0x42
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006226:	e093      	b.n	8006350 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	212c      	movs	r1, #44	; 0x2c
 800622e:	fb01 f303 	mul.w	r3, r1, r3
 8006232:	4413      	add	r3, r2
 8006234:	3342      	adds	r3, #66	; 0x42
 8006236:	2202      	movs	r2, #2
 8006238:	701a      	strb	r2, [r3, #0]
      break;
 800623a:	e089      	b.n	8006350 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800623c:	78bb      	ldrb	r3, [r7, #2]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d11d      	bne.n	800627e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006242:	78fb      	ldrb	r3, [r7, #3]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	212c      	movs	r1, #44	; 0x2c
 8006248:	fb01 f303 	mul.w	r3, r1, r3
 800624c:	4413      	add	r3, r2
 800624e:	3355      	adds	r3, #85	; 0x55
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d109      	bne.n	800626a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	212c      	movs	r1, #44	; 0x2c
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	4413      	add	r3, r2
 8006262:	3342      	adds	r3, #66	; 0x42
 8006264:	2200      	movs	r2, #0
 8006266:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006268:	e073      	b.n	8006352 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	212c      	movs	r1, #44	; 0x2c
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	4413      	add	r3, r2
 8006276:	3342      	adds	r3, #66	; 0x42
 8006278:	2202      	movs	r2, #2
 800627a:	701a      	strb	r2, [r3, #0]
      break;
 800627c:	e069      	b.n	8006352 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	212c      	movs	r1, #44	; 0x2c
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	4413      	add	r3, r2
 800628a:	3354      	adds	r3, #84	; 0x54
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	212c      	movs	r1, #44	; 0x2c
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	4413      	add	r3, r2
 800629e:	3342      	adds	r3, #66	; 0x42
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]
      break;
 80062a4:	e055      	b.n	8006352 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	212c      	movs	r1, #44	; 0x2c
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	4413      	add	r3, r2
 80062b2:	3342      	adds	r3, #66	; 0x42
 80062b4:	2202      	movs	r2, #2
 80062b6:	701a      	strb	r2, [r3, #0]
      break;
 80062b8:	e04b      	b.n	8006352 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80062ba:	78bb      	ldrb	r3, [r7, #2]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d11d      	bne.n	80062fc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80062c0:	78fb      	ldrb	r3, [r7, #3]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	212c      	movs	r1, #44	; 0x2c
 80062c6:	fb01 f303 	mul.w	r3, r1, r3
 80062ca:	4413      	add	r3, r2
 80062cc:	3355      	adds	r3, #85	; 0x55
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d109      	bne.n	80062e8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	212c      	movs	r1, #44	; 0x2c
 80062da:	fb01 f303 	mul.w	r3, r1, r3
 80062de:	4413      	add	r3, r2
 80062e0:	3342      	adds	r3, #66	; 0x42
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80062e6:	e034      	b.n	8006352 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	212c      	movs	r1, #44	; 0x2c
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	4413      	add	r3, r2
 80062f4:	3342      	adds	r3, #66	; 0x42
 80062f6:	2202      	movs	r2, #2
 80062f8:	701a      	strb	r2, [r3, #0]
      break;
 80062fa:	e02a      	b.n	8006352 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	212c      	movs	r1, #44	; 0x2c
 8006302:	fb01 f303 	mul.w	r3, r1, r3
 8006306:	4413      	add	r3, r2
 8006308:	3354      	adds	r3, #84	; 0x54
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d109      	bne.n	8006324 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	212c      	movs	r1, #44	; 0x2c
 8006316:	fb01 f303 	mul.w	r3, r1, r3
 800631a:	4413      	add	r3, r2
 800631c:	3342      	adds	r3, #66	; 0x42
 800631e:	2200      	movs	r2, #0
 8006320:	701a      	strb	r2, [r3, #0]
      break;
 8006322:	e016      	b.n	8006352 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	212c      	movs	r1, #44	; 0x2c
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	4413      	add	r3, r2
 8006330:	3342      	adds	r3, #66	; 0x42
 8006332:	2202      	movs	r2, #2
 8006334:	701a      	strb	r2, [r3, #0]
      break;
 8006336:	e00c      	b.n	8006352 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	212c      	movs	r1, #44	; 0x2c
 800633e:	fb01 f303 	mul.w	r3, r1, r3
 8006342:	4413      	add	r3, r2
 8006344:	3342      	adds	r3, #66	; 0x42
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
      break;
 800634a:	e002      	b.n	8006352 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800634c:	bf00      	nop
 800634e:	e000      	b.n	8006352 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006350:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	212c      	movs	r1, #44	; 0x2c
 8006358:	fb01 f303 	mul.w	r3, r1, r3
 800635c:	4413      	add	r3, r2
 800635e:	3344      	adds	r3, #68	; 0x44
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	8b3a      	ldrh	r2, [r7, #24]
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	202c      	movs	r0, #44	; 0x2c
 800636c:	fb00 f303 	mul.w	r3, r0, r3
 8006370:	440b      	add	r3, r1
 8006372:	334c      	adds	r3, #76	; 0x4c
 8006374:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	212c      	movs	r1, #44	; 0x2c
 800637c:	fb01 f303 	mul.w	r3, r1, r3
 8006380:	4413      	add	r3, r2
 8006382:	3360      	adds	r3, #96	; 0x60
 8006384:	2200      	movs	r2, #0
 8006386:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	212c      	movs	r1, #44	; 0x2c
 800638e:	fb01 f303 	mul.w	r3, r1, r3
 8006392:	4413      	add	r3, r2
 8006394:	3350      	adds	r3, #80	; 0x50
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	212c      	movs	r1, #44	; 0x2c
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	4413      	add	r3, r2
 80063a6:	3339      	adds	r3, #57	; 0x39
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	212c      	movs	r1, #44	; 0x2c
 80063b2:	fb01 f303 	mul.w	r3, r1, r3
 80063b6:	4413      	add	r3, r2
 80063b8:	3361      	adds	r3, #97	; 0x61
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	222c      	movs	r2, #44	; 0x2c
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	3338      	adds	r3, #56	; 0x38
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	18d1      	adds	r1, r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	f009 f8c6 	bl	800f568 <USB_HC_StartXfer>
 80063dc:	4603      	mov	r3, r0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop

080063e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f008 fdd4 	bl	800efac <USB_GetMode>
 8006404:	4603      	mov	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	f040 80f6 	bne.w	80065f8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4618      	mov	r0, r3
 8006412:	f008 fd97 	bl	800ef44 <USB_ReadInterrupts>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 80ec 	beq.w	80065f6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f008 fd8e 	bl	800ef44 <USB_ReadInterrupts>
 8006428:	4603      	mov	r3, r0
 800642a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800642e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006432:	d104      	bne.n	800643e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800643c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f008 fd7e 	bl	800ef44 <USB_ReadInterrupts>
 8006448:	4603      	mov	r3, r0
 800644a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800644e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006452:	d104      	bne.n	800645e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800645c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f008 fd6e 	bl	800ef44 <USB_ReadInterrupts>
 8006468:	4603      	mov	r3, r0
 800646a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800646e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006472:	d104      	bne.n	800647e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800647c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	f008 fd5e 	bl	800ef44 <USB_ReadInterrupts>
 8006488:	4603      	mov	r3, r0
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b02      	cmp	r3, #2
 8006490:	d103      	bne.n	800649a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2202      	movs	r2, #2
 8006498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f008 fd50 	bl	800ef44 <USB_ReadInterrupts>
 80064a4:	4603      	mov	r3, r0
 80064a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ae:	d11c      	bne.n	80064ea <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80064b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10f      	bne.n	80064ea <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80064ca:	2110      	movs	r1, #16
 80064cc:	6938      	ldr	r0, [r7, #16]
 80064ce:	f008 fc3f 	bl	800ed50 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80064d2:	6938      	ldr	r0, [r7, #16]
 80064d4:	f008 fc70 	bl	800edb8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2101      	movs	r1, #1
 80064de:	4618      	mov	r0, r3
 80064e0:	f008 fe5a 	bl	800f198 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f01c fda7 	bl	8023038 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f008 fd28 	bl	800ef44 <USB_ReadInterrupts>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064fe:	d102      	bne.n	8006506 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 f9ce 	bl	80078a2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f008 fd1a 	bl	800ef44 <USB_ReadInterrupts>
 8006510:	4603      	mov	r3, r0
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b08      	cmp	r3, #8
 8006518:	d106      	bne.n	8006528 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f01c fd70 	bl	8023000 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2208      	movs	r2, #8
 8006526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f008 fd09 	bl	800ef44 <USB_ReadInterrupts>
 8006532:	4603      	mov	r3, r0
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b10      	cmp	r3, #16
 800653a:	d101      	bne.n	8006540 <HAL_HCD_IRQHandler+0x158>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <HAL_HCD_IRQHandler+0x15a>
 8006540:	2300      	movs	r3, #0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d012      	beq.n	800656c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699a      	ldr	r2, [r3, #24]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0210 	bic.w	r2, r2, #16
 8006554:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 f8d1 	bl	80076fe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699a      	ldr	r2, [r3, #24]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0210 	orr.w	r2, r2, #16
 800656a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f008 fce7 	bl	800ef44 <USB_ReadInterrupts>
 8006576:	4603      	mov	r3, r0
 8006578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800657c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006580:	d13a      	bne.n	80065f8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f009 f930 	bl	800f7ec <USB_HC_ReadInterrupt>
 800658c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	e025      	b.n	80065e0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	fa22 f303 	lsr.w	r3, r2, r3
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d018      	beq.n	80065da <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065be:	d106      	bne.n	80065ce <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f8ab 	bl	8006722 <HCD_HC_IN_IRQHandler>
 80065cc:	e005      	b.n	80065da <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fcc6 	bl	8006f66 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	3301      	adds	r3, #1
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d3d4      	bcc.n	8006594 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065f2:	615a      	str	r2, [r3, #20]
 80065f4:	e000      	b.n	80065f8 <HAL_HCD_IRQHandler+0x210>
      return;
 80065f6:	bf00      	nop
    }
  }
}
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_HCD_Start+0x16>
 8006610:	2302      	movs	r3, #2
 8006612:	e013      	b.n	800663c <HAL_HCD_Start+0x3e>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2101      	movs	r1, #1
 8006622:	4618      	mov	r0, r3
 8006624:	f008 fe1c 	bl	800f260 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f008 fb21 	bl	800ec74 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_HCD_Stop+0x16>
 8006656:	2302      	movs	r3, #2
 8006658:	e00d      	b.n	8006676 <HAL_HCD_Stop+0x32>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f009 fa0a 	bl	800fa80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f008 fdbe 	bl	800f20c <USB_ResetPort>
 8006690:	4603      	mov	r3, r0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	212c      	movs	r1, #44	; 0x2c
 80066ac:	fb01 f303 	mul.w	r3, r1, r3
 80066b0:	4413      	add	r3, r2
 80066b2:	3360      	adds	r3, #96	; 0x60
 80066b4:	781b      	ldrb	r3, [r3, #0]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	460b      	mov	r3, r1
 80066cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	212c      	movs	r1, #44	; 0x2c
 80066d4:	fb01 f303 	mul.w	r3, r1, r3
 80066d8:	4413      	add	r3, r2
 80066da:	3350      	adds	r3, #80	; 0x50
 80066dc:	681b      	ldr	r3, [r3, #0]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f008 fe02 	bl	800f300 <USB_GetCurrentFrame>
 80066fc:	4603      	mov	r3, r0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f008 fddd 	bl	800f2d2 <USB_GetHostSpeed>
 8006718:	4603      	mov	r3, r0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b086      	sub	sp, #24
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f008 fc0f 	bl	800ef6a <USB_ReadChInterrupts>
 800674c:	4603      	mov	r3, r0
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b04      	cmp	r3, #4
 8006754:	d11a      	bne.n	800678c <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	4413      	add	r3, r2
 800675e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006762:	461a      	mov	r2, r3
 8006764:	2304      	movs	r3, #4
 8006766:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	212c      	movs	r1, #44	; 0x2c
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	4413      	add	r3, r2
 8006774:	3361      	adds	r3, #97	; 0x61
 8006776:	2207      	movs	r2, #7
 8006778:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	4611      	mov	r1, r2
 8006784:	4618      	mov	r0, r3
 8006786:	f009 f842 	bl	800f80e <USB_HC_Halt>
 800678a:	e0a2      	b.n	80068d2 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	4611      	mov	r1, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f008 fbe7 	bl	800ef6a <USB_ReadChInterrupts>
 800679c:	4603      	mov	r3, r0
 800679e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a6:	d11b      	bne.n	80067e0 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b4:	461a      	mov	r2, r3
 80067b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	212c      	movs	r1, #44	; 0x2c
 80067c2:	fb01 f303 	mul.w	r3, r1, r3
 80067c6:	4413      	add	r3, r2
 80067c8:	3361      	adds	r3, #97	; 0x61
 80067ca:	2208      	movs	r2, #8
 80067cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f009 f818 	bl	800f80e <USB_HC_Halt>
 80067de:	e078      	b.n	80068d2 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f008 fbbd 	bl	800ef6a <USB_ReadChInterrupts>
 80067f0:	4603      	mov	r3, r0
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d11a      	bne.n	8006830 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006806:	461a      	mov	r2, r3
 8006808:	2308      	movs	r3, #8
 800680a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	212c      	movs	r1, #44	; 0x2c
 8006812:	fb01 f303 	mul.w	r3, r1, r3
 8006816:	4413      	add	r3, r2
 8006818:	3361      	adds	r3, #97	; 0x61
 800681a:	2206      	movs	r2, #6
 800681c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	4611      	mov	r1, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f008 fff0 	bl	800f80e <USB_HC_Halt>
 800682e:	e050      	b.n	80068d2 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	4611      	mov	r1, r2
 800683a:	4618      	mov	r0, r3
 800683c:	f008 fb95 	bl	800ef6a <USB_ReadChInterrupts>
 8006840:	4603      	mov	r3, r0
 8006842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684a:	d11b      	bne.n	8006884 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4413      	add	r3, r2
 8006854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006858:	461a      	mov	r2, r3
 800685a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800685e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	212c      	movs	r1, #44	; 0x2c
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	4413      	add	r3, r2
 800686c:	3361      	adds	r3, #97	; 0x61
 800686e:	2209      	movs	r2, #9
 8006870:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	4611      	mov	r1, r2
 800687c:	4618      	mov	r0, r3
 800687e:	f008 ffc6 	bl	800f80e <USB_HC_Halt>
 8006882:	e026      	b.n	80068d2 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	4611      	mov	r1, r2
 800688e:	4618      	mov	r0, r3
 8006890:	f008 fb6b 	bl	800ef6a <USB_ReadChInterrupts>
 8006894:	4603      	mov	r3, r0
 8006896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689a:	2b80      	cmp	r3, #128	; 0x80
 800689c:	d119      	bne.n	80068d2 <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068aa:	461a      	mov	r2, r3
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	212c      	movs	r1, #44	; 0x2c
 80068b6:	fb01 f303 	mul.w	r3, r1, r3
 80068ba:	4413      	add	r3, r2
 80068bc:	3361      	adds	r3, #97	; 0x61
 80068be:	2207      	movs	r2, #7
 80068c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	4611      	mov	r1, r2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f008 ff9e 	bl	800f80e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	4611      	mov	r1, r2
 80068dc:	4618      	mov	r0, r3
 80068de:	f008 fb44 	bl	800ef6a <USB_ReadChInterrupts>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ec:	d112      	bne.n	8006914 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f008 ff88 	bl	800f80e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690a:	461a      	mov	r2, r3
 800690c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006910:	6093      	str	r3, [r2, #8]
 8006912:	e325      	b.n	8006f60 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	4611      	mov	r1, r2
 800691e:	4618      	mov	r0, r3
 8006920:	f008 fb23 	bl	800ef6a <USB_ReadChInterrupts>
 8006924:	4603      	mov	r3, r0
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b01      	cmp	r3, #1
 800692c:	f040 80e8 	bne.w	8006b00 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4413      	add	r3, r2
 8006938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693c:	461a      	mov	r2, r3
 800693e:	2320      	movs	r3, #32
 8006940:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d019      	beq.n	800697e <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	212c      	movs	r1, #44	; 0x2c
 8006950:	fb01 f303 	mul.w	r3, r1, r3
 8006954:	4413      	add	r3, r2
 8006956:	3348      	adds	r3, #72	; 0x48
 8006958:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	0159      	lsls	r1, r3, #5
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	440b      	add	r3, r1
 8006962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800696c:	1ad2      	subs	r2, r2, r3
 800696e:	6879      	ldr	r1, [r7, #4]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	202c      	movs	r0, #44	; 0x2c
 8006974:	fb00 f303 	mul.w	r3, r0, r3
 8006978:	440b      	add	r3, r1
 800697a:	3350      	adds	r3, #80	; 0x50
 800697c:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	212c      	movs	r1, #44	; 0x2c
 8006984:	fb01 f303 	mul.w	r3, r1, r3
 8006988:	4413      	add	r3, r2
 800698a:	3361      	adds	r3, #97	; 0x61
 800698c:	2201      	movs	r2, #1
 800698e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	212c      	movs	r1, #44	; 0x2c
 8006996:	fb01 f303 	mul.w	r3, r1, r3
 800699a:	4413      	add	r3, r2
 800699c:	335c      	adds	r3, #92	; 0x5c
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ae:	461a      	mov	r2, r3
 80069b0:	2301      	movs	r3, #1
 80069b2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	212c      	movs	r1, #44	; 0x2c
 80069ba:	fb01 f303 	mul.w	r3, r1, r3
 80069be:	4413      	add	r3, r2
 80069c0:	333f      	adds	r3, #63	; 0x3f
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d009      	beq.n	80069dc <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	212c      	movs	r1, #44	; 0x2c
 80069ce:	fb01 f303 	mul.w	r3, r1, r3
 80069d2:	4413      	add	r3, r2
 80069d4:	333f      	adds	r3, #63	; 0x3f
 80069d6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d111      	bne.n	8006a00 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	4611      	mov	r1, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f008 ff11 	bl	800f80e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f8:	461a      	mov	r2, r3
 80069fa:	2310      	movs	r3, #16
 80069fc:	6093      	str	r3, [r2, #8]
 80069fe:	e03a      	b.n	8006a76 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	212c      	movs	r1, #44	; 0x2c
 8006a06:	fb01 f303 	mul.w	r3, r1, r3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	333f      	adds	r3, #63	; 0x3f
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d009      	beq.n	8006a28 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	212c      	movs	r1, #44	; 0x2c
 8006a1a:	fb01 f303 	mul.w	r3, r1, r3
 8006a1e:	4413      	add	r3, r2
 8006a20:	333f      	adds	r3, #63	; 0x3f
 8006a22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d126      	bne.n	8006a76 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a46:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	212c      	movs	r1, #44	; 0x2c
 8006a4e:	fb01 f303 	mul.w	r3, r1, r3
 8006a52:	4413      	add	r3, r2
 8006a54:	3360      	adds	r3, #96	; 0x60
 8006a56:	2201      	movs	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	b2d9      	uxtb	r1, r3
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	202c      	movs	r0, #44	; 0x2c
 8006a64:	fb00 f303 	mul.w	r3, r0, r3
 8006a68:	4413      	add	r3, r2
 8006a6a:	3360      	adds	r3, #96	; 0x60
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f01c faef 	bl	8023054 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d12b      	bne.n	8006ad6 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	212c      	movs	r1, #44	; 0x2c
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	3348      	adds	r3, #72	; 0x48
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	202c      	movs	r0, #44	; 0x2c
 8006a94:	fb00 f202 	mul.w	r2, r0, r2
 8006a98:	440a      	add	r2, r1
 8006a9a:	3240      	adds	r2, #64	; 0x40
 8006a9c:	8812      	ldrh	r2, [r2, #0]
 8006a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 825a 	beq.w	8006f60 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	212c      	movs	r1, #44	; 0x2c
 8006ab2:	fb01 f303 	mul.w	r3, r1, r3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	3354      	adds	r3, #84	; 0x54
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	f083 0301 	eor.w	r3, r3, #1
 8006ac0:	b2d8      	uxtb	r0, r3
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	212c      	movs	r1, #44	; 0x2c
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	3354      	adds	r3, #84	; 0x54
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	e244      	b.n	8006f60 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	212c      	movs	r1, #44	; 0x2c
 8006adc:	fb01 f303 	mul.w	r3, r1, r3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3354      	adds	r3, #84	; 0x54
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	f083 0301 	eor.w	r3, r3, #1
 8006aea:	b2d8      	uxtb	r0, r3
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	212c      	movs	r1, #44	; 0x2c
 8006af2:	fb01 f303 	mul.w	r3, r1, r3
 8006af6:	4413      	add	r3, r2
 8006af8:	3354      	adds	r3, #84	; 0x54
 8006afa:	4602      	mov	r2, r0
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	e22f      	b.n	8006f60 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	4611      	mov	r1, r2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f008 fa2d 	bl	800ef6a <USB_ReadChInterrupts>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d109      	bne.n	8006b2e <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b26:	461a      	mov	r2, r3
 8006b28:	2320      	movs	r3, #32
 8006b2a:	6093      	str	r3, [r2, #8]
 8006b2c:	e218      	b.n	8006f60 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	4611      	mov	r1, r2
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f008 fa16 	bl	800ef6a <USB_ReadChInterrupts>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	f040 816b 	bne.w	8006e20 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b56:	461a      	mov	r2, r3
 8006b58:	2302      	movs	r3, #2
 8006b5a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	212c      	movs	r1, #44	; 0x2c
 8006b62:	fb01 f303 	mul.w	r3, r1, r3
 8006b66:	4413      	add	r3, r2
 8006b68:	3361      	adds	r3, #97	; 0x61
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d112      	bne.n	8006b96 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	212c      	movs	r1, #44	; 0x2c
 8006b76:	fb01 f303 	mul.w	r3, r1, r3
 8006b7a:	4413      	add	r3, r2
 8006b7c:	3361      	adds	r3, #97	; 0x61
 8006b7e:	2202      	movs	r2, #2
 8006b80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	212c      	movs	r1, #44	; 0x2c
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	4413      	add	r3, r2
 8006b8e:	3360      	adds	r3, #96	; 0x60
 8006b90:	2201      	movs	r2, #1
 8006b92:	701a      	strb	r2, [r3, #0]
 8006b94:	e135      	b.n	8006e02 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	212c      	movs	r1, #44	; 0x2c
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3361      	adds	r3, #97	; 0x61
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b06      	cmp	r3, #6
 8006ba8:	d112      	bne.n	8006bd0 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	212c      	movs	r1, #44	; 0x2c
 8006bb0:	fb01 f303 	mul.w	r3, r1, r3
 8006bb4:	4413      	add	r3, r2
 8006bb6:	3361      	adds	r3, #97	; 0x61
 8006bb8:	2202      	movs	r2, #2
 8006bba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	212c      	movs	r1, #44	; 0x2c
 8006bc2:	fb01 f303 	mul.w	r3, r1, r3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3360      	adds	r3, #96	; 0x60
 8006bca:	2205      	movs	r2, #5
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	e118      	b.n	8006e02 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	212c      	movs	r1, #44	; 0x2c
 8006bd6:	fb01 f303 	mul.w	r3, r1, r3
 8006bda:	4413      	add	r3, r2
 8006bdc:	3361      	adds	r3, #97	; 0x61
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b07      	cmp	r3, #7
 8006be2:	d009      	beq.n	8006bf8 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	212c      	movs	r1, #44	; 0x2c
 8006bea:	fb01 f303 	mul.w	r3, r1, r3
 8006bee:	4413      	add	r3, r2
 8006bf0:	3361      	adds	r3, #97	; 0x61
 8006bf2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006bf4:	2b09      	cmp	r3, #9
 8006bf6:	d159      	bne.n	8006cac <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	212c      	movs	r1, #44	; 0x2c
 8006bfe:	fb01 f303 	mul.w	r3, r1, r3
 8006c02:	4413      	add	r3, r2
 8006c04:	3361      	adds	r3, #97	; 0x61
 8006c06:	2202      	movs	r2, #2
 8006c08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	212c      	movs	r1, #44	; 0x2c
 8006c10:	fb01 f303 	mul.w	r3, r1, r3
 8006c14:	4413      	add	r3, r2
 8006c16:	335c      	adds	r3, #92	; 0x5c
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	202c      	movs	r0, #44	; 0x2c
 8006c22:	fb00 f303 	mul.w	r3, r0, r3
 8006c26:	440b      	add	r3, r1
 8006c28:	335c      	adds	r3, #92	; 0x5c
 8006c2a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	212c      	movs	r1, #44	; 0x2c
 8006c32:	fb01 f303 	mul.w	r3, r1, r3
 8006c36:	4413      	add	r3, r2
 8006c38:	335c      	adds	r3, #92	; 0x5c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d912      	bls.n	8006c66 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	212c      	movs	r1, #44	; 0x2c
 8006c46:	fb01 f303 	mul.w	r3, r1, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	335c      	adds	r3, #92	; 0x5c
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	212c      	movs	r1, #44	; 0x2c
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	3360      	adds	r3, #96	; 0x60
 8006c60:	2204      	movs	r2, #4
 8006c62:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006c64:	e0cd      	b.n	8006e02 <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	212c      	movs	r1, #44	; 0x2c
 8006c6c:	fb01 f303 	mul.w	r3, r1, r3
 8006c70:	4413      	add	r3, r2
 8006c72:	3360      	adds	r3, #96	; 0x60
 8006c74:	2202      	movs	r2, #2
 8006c76:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c8e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c96:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006caa:	e0aa      	b.n	8006e02 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	212c      	movs	r1, #44	; 0x2c
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3361      	adds	r3, #97	; 0x61
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b05      	cmp	r3, #5
 8006cbe:	d109      	bne.n	8006cd4 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	212c      	movs	r1, #44	; 0x2c
 8006cc6:	fb01 f303 	mul.w	r3, r1, r3
 8006cca:	4413      	add	r3, r2
 8006ccc:	3361      	adds	r3, #97	; 0x61
 8006cce:	2202      	movs	r2, #2
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	e096      	b.n	8006e02 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	212c      	movs	r1, #44	; 0x2c
 8006cda:	fb01 f303 	mul.w	r3, r1, r3
 8006cde:	4413      	add	r3, r2
 8006ce0:	3361      	adds	r3, #97	; 0x61
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d109      	bne.n	8006cfc <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	212c      	movs	r1, #44	; 0x2c
 8006cee:	fb01 f303 	mul.w	r3, r1, r3
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3361      	adds	r3, #97	; 0x61
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	e082      	b.n	8006e02 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	212c      	movs	r1, #44	; 0x2c
 8006d02:	fb01 f303 	mul.w	r3, r1, r3
 8006d06:	4413      	add	r3, r2
 8006d08:	3361      	adds	r3, #97	; 0x61
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d13f      	bne.n	8006d90 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	212c      	movs	r1, #44	; 0x2c
 8006d16:	fb01 f303 	mul.w	r3, r1, r3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3361      	adds	r3, #97	; 0x61
 8006d1e:	2202      	movs	r2, #2
 8006d20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	212c      	movs	r1, #44	; 0x2c
 8006d28:	fb01 f303 	mul.w	r3, r1, r3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3360      	adds	r3, #96	; 0x60
 8006d30:	2202      	movs	r2, #2
 8006d32:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	212c      	movs	r1, #44	; 0x2c
 8006d3a:	fb01 f303 	mul.w	r3, r1, r3
 8006d3e:	4413      	add	r3, r2
 8006d40:	333f      	adds	r3, #63	; 0x3f
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d009      	beq.n	8006d5c <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	212c      	movs	r1, #44	; 0x2c
 8006d4e:	fb01 f303 	mul.w	r3, r1, r3
 8006d52:	4413      	add	r3, r2
 8006d54:	333f      	adds	r3, #63	; 0x3f
 8006d56:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d152      	bne.n	8006e02 <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d72:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d7a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d88:	461a      	mov	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	e038      	b.n	8006e02 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	212c      	movs	r1, #44	; 0x2c
 8006d96:	fb01 f303 	mul.w	r3, r1, r3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	3361      	adds	r3, #97	; 0x61
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d123      	bne.n	8006dec <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	212c      	movs	r1, #44	; 0x2c
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	3361      	adds	r3, #97	; 0x61
 8006db2:	2202      	movs	r2, #2
 8006db4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	212c      	movs	r1, #44	; 0x2c
 8006dbc:	fb01 f303 	mul.w	r3, r1, r3
 8006dc0:	4413      	add	r3, r2
 8006dc2:	335c      	adds	r3, #92	; 0x5c
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	202c      	movs	r0, #44	; 0x2c
 8006dce:	fb00 f303 	mul.w	r3, r0, r3
 8006dd2:	440b      	add	r3, r1
 8006dd4:	335c      	adds	r3, #92	; 0x5c
 8006dd6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	212c      	movs	r1, #44	; 0x2c
 8006dde:	fb01 f303 	mul.w	r3, r1, r3
 8006de2:	4413      	add	r3, r2
 8006de4:	3360      	adds	r3, #96	; 0x60
 8006de6:	2204      	movs	r2, #4
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	e00a      	b.n	8006e02 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	212c      	movs	r1, #44	; 0x2c
 8006df2:	fb01 f303 	mul.w	r3, r1, r3
 8006df6:	4413      	add	r3, r2
 8006df8:	3361      	adds	r3, #97	; 0x61
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	f000 80ae 	beq.w	8006f5e <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	b2d9      	uxtb	r1, r3
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	202c      	movs	r0, #44	; 0x2c
 8006e0c:	fb00 f303 	mul.w	r3, r0, r3
 8006e10:	4413      	add	r3, r2
 8006e12:	3360      	adds	r3, #96	; 0x60
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f01c f91b 	bl	8023054 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006e1e:	e09f      	b.n	8006f60 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f008 f89d 	bl	800ef6a <USB_ReadChInterrupts>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e36:	2b40      	cmp	r3, #64	; 0x40
 8006e38:	d123      	bne.n	8006e82 <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e46:	461a      	mov	r2, r3
 8006e48:	2340      	movs	r3, #64	; 0x40
 8006e4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	212c      	movs	r1, #44	; 0x2c
 8006e52:	fb01 f303 	mul.w	r3, r1, r3
 8006e56:	4413      	add	r3, r2
 8006e58:	3361      	adds	r3, #97	; 0x61
 8006e5a:	2205      	movs	r2, #5
 8006e5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	212c      	movs	r1, #44	; 0x2c
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	4413      	add	r3, r2
 8006e6a:	335c      	adds	r3, #92	; 0x5c
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f008 fcc7 	bl	800f80e <USB_HC_Halt>
 8006e80:	e06e      	b.n	8006f60 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	b2d2      	uxtb	r2, r2
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f008 f86c 	bl	800ef6a <USB_ReadChInterrupts>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b10      	cmp	r3, #16
 8006e9a:	d161      	bne.n	8006f60 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	212c      	movs	r1, #44	; 0x2c
 8006ea2:	fb01 f303 	mul.w	r3, r1, r3
 8006ea6:	4413      	add	r3, r2
 8006ea8:	333f      	adds	r3, #63	; 0x3f
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d11a      	bne.n	8006ee6 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	212c      	movs	r1, #44	; 0x2c
 8006eb6:	fb01 f303 	mul.w	r3, r1, r3
 8006eba:	4413      	add	r3, r2
 8006ebc:	335c      	adds	r3, #92	; 0x5c
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	212c      	movs	r1, #44	; 0x2c
 8006ec8:	fb01 f303 	mul.w	r3, r1, r3
 8006ecc:	4413      	add	r3, r2
 8006ece:	3361      	adds	r3, #97	; 0x61
 8006ed0:	2204      	movs	r2, #4
 8006ed2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	4611      	mov	r1, r2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f008 fc95 	bl	800f80e <USB_HC_Halt>
 8006ee4:	e031      	b.n	8006f4a <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	212c      	movs	r1, #44	; 0x2c
 8006eec:	fb01 f303 	mul.w	r3, r1, r3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	333f      	adds	r3, #63	; 0x3f
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d009      	beq.n	8006f0e <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	212c      	movs	r1, #44	; 0x2c
 8006f00:	fb01 f303 	mul.w	r3, r1, r3
 8006f04:	4413      	add	r3, r2
 8006f06:	333f      	adds	r3, #63	; 0x3f
 8006f08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d11d      	bne.n	8006f4a <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	212c      	movs	r1, #44	; 0x2c
 8006f14:	fb01 f303 	mul.w	r3, r1, r3
 8006f18:	4413      	add	r3, r2
 8006f1a:	335c      	adds	r3, #92	; 0x5c
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d110      	bne.n	8006f4a <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	212c      	movs	r1, #44	; 0x2c
 8006f2e:	fb01 f303 	mul.w	r3, r1, r3
 8006f32:	4413      	add	r3, r2
 8006f34:	3361      	adds	r3, #97	; 0x61
 8006f36:	2204      	movs	r2, #4
 8006f38:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f008 fc62 	bl	800f80e <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f56:	461a      	mov	r2, r3
 8006f58:	2310      	movs	r3, #16
 8006f5a:	6093      	str	r3, [r2, #8]
 8006f5c:	e000      	b.n	8006f60 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8006f5e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b088      	sub	sp, #32
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f007 ffed 	bl	800ef6a <USB_ReadChInterrupts>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d11a      	bne.n	8006fd0 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	2304      	movs	r3, #4
 8006faa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	212c      	movs	r1, #44	; 0x2c
 8006fb2:	fb01 f303 	mul.w	r3, r1, r3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3361      	adds	r3, #97	; 0x61
 8006fba:	2207      	movs	r2, #7
 8006fbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f008 fc20 	bl	800f80e <USB_HC_Halt>
 8006fce:	e393      	b.n	80076f8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f007 ffc5 	bl	800ef6a <USB_ReadChInterrupts>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d137      	bne.n	800705a <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	2320      	movs	r3, #32
 8006ffa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	212c      	movs	r1, #44	; 0x2c
 8007002:	fb01 f303 	mul.w	r3, r1, r3
 8007006:	4413      	add	r3, r2
 8007008:	333d      	adds	r3, #61	; 0x3d
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b01      	cmp	r3, #1
 800700e:	f040 8373 	bne.w	80076f8 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	212c      	movs	r1, #44	; 0x2c
 8007018:	fb01 f303 	mul.w	r3, r1, r3
 800701c:	4413      	add	r3, r2
 800701e:	333d      	adds	r3, #61	; 0x3d
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	212c      	movs	r1, #44	; 0x2c
 800702a:	fb01 f303 	mul.w	r3, r1, r3
 800702e:	4413      	add	r3, r2
 8007030:	3360      	adds	r3, #96	; 0x60
 8007032:	2202      	movs	r2, #2
 8007034:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	212c      	movs	r1, #44	; 0x2c
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	4413      	add	r3, r2
 8007042:	3361      	adds	r3, #97	; 0x61
 8007044:	2203      	movs	r2, #3
 8007046:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	4611      	mov	r1, r2
 8007052:	4618      	mov	r0, r3
 8007054:	f008 fbdb 	bl	800f80e <USB_HC_Halt>
 8007058:	e34e      	b.n	80076f8 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	4611      	mov	r1, r2
 8007064:	4618      	mov	r0, r3
 8007066:	f007 ff80 	bl	800ef6a <USB_ReadChInterrupts>
 800706a:	4603      	mov	r3, r0
 800706c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007074:	d112      	bne.n	800709c <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	4413      	add	r3, r2
 800707e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007082:	461a      	mov	r2, r3
 8007084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007088:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f008 fbba 	bl	800f80e <USB_HC_Halt>
 800709a:	e32d      	b.n	80076f8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	4611      	mov	r1, r2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f007 ff5f 	bl	800ef6a <USB_ReadChInterrupts>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d142      	bne.n	800713c <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	212c      	movs	r1, #44	; 0x2c
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	4413      	add	r3, r2
 80070c2:	335c      	adds	r3, #92	; 0x5c
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	4611      	mov	r1, r2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f007 ff49 	bl	800ef6a <USB_ReadChInterrupts>
 80070d8:	4603      	mov	r3, r0
 80070da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070de:	2b40      	cmp	r3, #64	; 0x40
 80070e0:	d111      	bne.n	8007106 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	212c      	movs	r1, #44	; 0x2c
 80070e8:	fb01 f303 	mul.w	r3, r1, r3
 80070ec:	4413      	add	r3, r2
 80070ee:	333d      	adds	r3, #61	; 0x3d
 80070f0:	2201      	movs	r2, #1
 80070f2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007100:	461a      	mov	r2, r3
 8007102:	2340      	movs	r3, #64	; 0x40
 8007104:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	4413      	add	r3, r2
 800710e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007112:	461a      	mov	r2, r3
 8007114:	2301      	movs	r3, #1
 8007116:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	212c      	movs	r1, #44	; 0x2c
 800711e:	fb01 f303 	mul.w	r3, r1, r3
 8007122:	4413      	add	r3, r2
 8007124:	3361      	adds	r3, #97	; 0x61
 8007126:	2201      	movs	r2, #1
 8007128:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	b2d2      	uxtb	r2, r2
 8007132:	4611      	mov	r1, r2
 8007134:	4618      	mov	r0, r3
 8007136:	f008 fb6a 	bl	800f80e <USB_HC_Halt>
 800713a:	e2dd      	b.n	80076f8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	4611      	mov	r1, r2
 8007146:	4618      	mov	r0, r3
 8007148:	f007 ff0f 	bl	800ef6a <USB_ReadChInterrupts>
 800714c:	4603      	mov	r3, r0
 800714e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007152:	2b40      	cmp	r3, #64	; 0x40
 8007154:	d12c      	bne.n	80071b0 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	212c      	movs	r1, #44	; 0x2c
 800715c:	fb01 f303 	mul.w	r3, r1, r3
 8007160:	4413      	add	r3, r2
 8007162:	3361      	adds	r3, #97	; 0x61
 8007164:	2205      	movs	r2, #5
 8007166:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	212c      	movs	r1, #44	; 0x2c
 800716e:	fb01 f303 	mul.w	r3, r1, r3
 8007172:	4413      	add	r3, r2
 8007174:	333d      	adds	r3, #61	; 0x3d
 8007176:	2201      	movs	r2, #1
 8007178:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	212c      	movs	r1, #44	; 0x2c
 8007180:	fb01 f303 	mul.w	r3, r1, r3
 8007184:	4413      	add	r3, r2
 8007186:	335c      	adds	r3, #92	; 0x5c
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	4611      	mov	r1, r2
 8007196:	4618      	mov	r0, r3
 8007198:	f008 fb39 	bl	800f80e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a8:	461a      	mov	r2, r3
 80071aa:	2340      	movs	r3, #64	; 0x40
 80071ac:	6093      	str	r3, [r2, #8]
 80071ae:	e2a3      	b.n	80076f8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	4611      	mov	r1, r2
 80071ba:	4618      	mov	r0, r3
 80071bc:	f007 fed5 	bl	800ef6a <USB_ReadChInterrupts>
 80071c0:	4603      	mov	r3, r0
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d11a      	bne.n	8007200 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d6:	461a      	mov	r2, r3
 80071d8:	2308      	movs	r3, #8
 80071da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	212c      	movs	r1, #44	; 0x2c
 80071e2:	fb01 f303 	mul.w	r3, r1, r3
 80071e6:	4413      	add	r3, r2
 80071e8:	3361      	adds	r3, #97	; 0x61
 80071ea:	2206      	movs	r2, #6
 80071ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	4611      	mov	r1, r2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f008 fb08 	bl	800f80e <USB_HC_Halt>
 80071fe:	e27b      	b.n	80076f8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	4611      	mov	r1, r2
 800720a:	4618      	mov	r0, r3
 800720c:	f007 fead 	bl	800ef6a <USB_ReadChInterrupts>
 8007210:	4603      	mov	r3, r0
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	2b10      	cmp	r3, #16
 8007218:	d140      	bne.n	800729c <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	212c      	movs	r1, #44	; 0x2c
 8007220:	fb01 f303 	mul.w	r3, r1, r3
 8007224:	4413      	add	r3, r2
 8007226:	335c      	adds	r3, #92	; 0x5c
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	212c      	movs	r1, #44	; 0x2c
 8007232:	fb01 f303 	mul.w	r3, r1, r3
 8007236:	4413      	add	r3, r2
 8007238:	3361      	adds	r3, #97	; 0x61
 800723a:	2204      	movs	r2, #4
 800723c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	212c      	movs	r1, #44	; 0x2c
 8007244:	fb01 f303 	mul.w	r3, r1, r3
 8007248:	4413      	add	r3, r2
 800724a:	333d      	adds	r3, #61	; 0x3d
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d112      	bne.n	8007278 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	212c      	movs	r1, #44	; 0x2c
 8007258:	fb01 f303 	mul.w	r3, r1, r3
 800725c:	4413      	add	r3, r2
 800725e:	333c      	adds	r3, #60	; 0x3c
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d108      	bne.n	8007278 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	212c      	movs	r1, #44	; 0x2c
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	4413      	add	r3, r2
 8007272:	333d      	adds	r3, #61	; 0x3d
 8007274:	2201      	movs	r2, #1
 8007276:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	4611      	mov	r1, r2
 8007282:	4618      	mov	r0, r3
 8007284:	f008 fac3 	bl	800f80e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	4413      	add	r3, r2
 8007290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007294:	461a      	mov	r2, r3
 8007296:	2310      	movs	r3, #16
 8007298:	6093      	str	r3, [r2, #8]
 800729a:	e22d      	b.n	80076f8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	4611      	mov	r1, r2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f007 fe5f 	bl	800ef6a <USB_ReadChInterrupts>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b2:	2b80      	cmp	r3, #128	; 0x80
 80072b4:	d164      	bne.n	8007380 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d111      	bne.n	80072e2 <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	212c      	movs	r1, #44	; 0x2c
 80072c4:	fb01 f303 	mul.w	r3, r1, r3
 80072c8:	4413      	add	r3, r2
 80072ca:	3361      	adds	r3, #97	; 0x61
 80072cc:	2207      	movs	r2, #7
 80072ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	4611      	mov	r1, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f008 fa97 	bl	800f80e <USB_HC_Halt>
 80072e0:	e044      	b.n	800736c <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	212c      	movs	r1, #44	; 0x2c
 80072e8:	fb01 f303 	mul.w	r3, r1, r3
 80072ec:	4413      	add	r3, r2
 80072ee:	335c      	adds	r3, #92	; 0x5c
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	202c      	movs	r0, #44	; 0x2c
 80072fa:	fb00 f303 	mul.w	r3, r0, r3
 80072fe:	440b      	add	r3, r1
 8007300:	335c      	adds	r3, #92	; 0x5c
 8007302:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	212c      	movs	r1, #44	; 0x2c
 800730a:	fb01 f303 	mul.w	r3, r1, r3
 800730e:	4413      	add	r3, r2
 8007310:	335c      	adds	r3, #92	; 0x5c
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b02      	cmp	r3, #2
 8007316:	d920      	bls.n	800735a <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	212c      	movs	r1, #44	; 0x2c
 800731e:	fb01 f303 	mul.w	r3, r1, r3
 8007322:	4413      	add	r3, r2
 8007324:	335c      	adds	r3, #92	; 0x5c
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	212c      	movs	r1, #44	; 0x2c
 8007330:	fb01 f303 	mul.w	r3, r1, r3
 8007334:	4413      	add	r3, r2
 8007336:	3360      	adds	r3, #96	; 0x60
 8007338:	2204      	movs	r2, #4
 800733a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	b2d9      	uxtb	r1, r3
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	202c      	movs	r0, #44	; 0x2c
 8007346:	fb00 f303 	mul.w	r3, r0, r3
 800734a:	4413      	add	r3, r2
 800734c:	3360      	adds	r3, #96	; 0x60
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f01b fe7e 	bl	8023054 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007358:	e008      	b.n	800736c <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	212c      	movs	r1, #44	; 0x2c
 8007360:	fb01 f303 	mul.w	r3, r1, r3
 8007364:	4413      	add	r3, r2
 8007366:	3360      	adds	r3, #96	; 0x60
 8007368:	2202      	movs	r2, #2
 800736a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	4413      	add	r3, r2
 8007374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007378:	461a      	mov	r2, r3
 800737a:	2380      	movs	r3, #128	; 0x80
 800737c:	6093      	str	r3, [r2, #8]
 800737e:	e1bb      	b.n	80076f8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	4611      	mov	r1, r2
 800738a:	4618      	mov	r0, r3
 800738c:	f007 fded 	bl	800ef6a <USB_ReadChInterrupts>
 8007390:	4603      	mov	r3, r0
 8007392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800739a:	d11b      	bne.n	80073d4 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	212c      	movs	r1, #44	; 0x2c
 80073a2:	fb01 f303 	mul.w	r3, r1, r3
 80073a6:	4413      	add	r3, r2
 80073a8:	3361      	adds	r3, #97	; 0x61
 80073aa:	2209      	movs	r2, #9
 80073ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	b2d2      	uxtb	r2, r2
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f008 fa28 	bl	800f80e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ca:	461a      	mov	r2, r3
 80073cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d0:	6093      	str	r3, [r2, #8]
 80073d2:	e191      	b.n	80076f8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	4611      	mov	r1, r2
 80073de:	4618      	mov	r0, r3
 80073e0:	f007 fdc3 	bl	800ef6a <USB_ReadChInterrupts>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	f040 8184 	bne.w	80076f8 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073fc:	461a      	mov	r2, r3
 80073fe:	2302      	movs	r3, #2
 8007400:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	212c      	movs	r1, #44	; 0x2c
 8007408:	fb01 f303 	mul.w	r3, r1, r3
 800740c:	4413      	add	r3, r2
 800740e:	3361      	adds	r3, #97	; 0x61
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b01      	cmp	r3, #1
 8007414:	f040 8087 	bne.w	8007526 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	212c      	movs	r1, #44	; 0x2c
 800741e:	fb01 f303 	mul.w	r3, r1, r3
 8007422:	4413      	add	r3, r2
 8007424:	3361      	adds	r3, #97	; 0x61
 8007426:	2202      	movs	r2, #2
 8007428:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	212c      	movs	r1, #44	; 0x2c
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	4413      	add	r3, r2
 8007436:	3360      	adds	r3, #96	; 0x60
 8007438:	2201      	movs	r2, #1
 800743a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	212c      	movs	r1, #44	; 0x2c
 8007442:	fb01 f303 	mul.w	r3, r1, r3
 8007446:	4413      	add	r3, r2
 8007448:	333f      	adds	r3, #63	; 0x3f
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b02      	cmp	r3, #2
 800744e:	d00a      	beq.n	8007466 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	212c      	movs	r1, #44	; 0x2c
 8007456:	fb01 f303 	mul.w	r3, r1, r3
 800745a:	4413      	add	r3, r2
 800745c:	333f      	adds	r3, #63	; 0x3f
 800745e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007460:	2b03      	cmp	r3, #3
 8007462:	f040 8139 	bne.w	80076d8 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d113      	bne.n	8007496 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	212c      	movs	r1, #44	; 0x2c
 8007474:	fb01 f303 	mul.w	r3, r1, r3
 8007478:	4413      	add	r3, r2
 800747a:	3355      	adds	r3, #85	; 0x55
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	f083 0301 	eor.w	r3, r3, #1
 8007482:	b2d8      	uxtb	r0, r3
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	212c      	movs	r1, #44	; 0x2c
 800748a:	fb01 f303 	mul.w	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	3355      	adds	r3, #85	; 0x55
 8007492:	4602      	mov	r2, r0
 8007494:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b01      	cmp	r3, #1
 800749c:	f040 811c 	bne.w	80076d8 <HCD_HC_OUT_IRQHandler+0x772>
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	212c      	movs	r1, #44	; 0x2c
 80074a6:	fb01 f303 	mul.w	r3, r1, r3
 80074aa:	4413      	add	r3, r2
 80074ac:	334c      	adds	r3, #76	; 0x4c
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8111 	beq.w	80076d8 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	212c      	movs	r1, #44	; 0x2c
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	4413      	add	r3, r2
 80074c2:	334c      	adds	r3, #76	; 0x4c
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6879      	ldr	r1, [r7, #4]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	202c      	movs	r0, #44	; 0x2c
 80074cc:	fb00 f202 	mul.w	r2, r0, r2
 80074d0:	440a      	add	r2, r1
 80074d2:	3240      	adds	r2, #64	; 0x40
 80074d4:	8812      	ldrh	r2, [r2, #0]
 80074d6:	4413      	add	r3, r2
 80074d8:	3b01      	subs	r3, #1
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	202c      	movs	r0, #44	; 0x2c
 80074e0:	fb00 f202 	mul.w	r2, r0, r2
 80074e4:	440a      	add	r2, r1
 80074e6:	3240      	adds	r2, #64	; 0x40
 80074e8:	8812      	ldrh	r2, [r2, #0]
 80074ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 80ee 	beq.w	80076d8 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	212c      	movs	r1, #44	; 0x2c
 8007502:	fb01 f303 	mul.w	r3, r1, r3
 8007506:	4413      	add	r3, r2
 8007508:	3355      	adds	r3, #85	; 0x55
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	f083 0301 	eor.w	r3, r3, #1
 8007510:	b2d8      	uxtb	r0, r3
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	212c      	movs	r1, #44	; 0x2c
 8007518:	fb01 f303 	mul.w	r3, r1, r3
 800751c:	4413      	add	r3, r2
 800751e:	3355      	adds	r3, #85	; 0x55
 8007520:	4602      	mov	r2, r0
 8007522:	701a      	strb	r2, [r3, #0]
 8007524:	e0d8      	b.n	80076d8 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	212c      	movs	r1, #44	; 0x2c
 800752c:	fb01 f303 	mul.w	r3, r1, r3
 8007530:	4413      	add	r3, r2
 8007532:	3361      	adds	r3, #97	; 0x61
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b03      	cmp	r3, #3
 8007538:	d109      	bne.n	800754e <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	212c      	movs	r1, #44	; 0x2c
 8007540:	fb01 f303 	mul.w	r3, r1, r3
 8007544:	4413      	add	r3, r2
 8007546:	3361      	adds	r3, #97	; 0x61
 8007548:	2202      	movs	r2, #2
 800754a:	701a      	strb	r2, [r3, #0]
 800754c:	e0c4      	b.n	80076d8 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	212c      	movs	r1, #44	; 0x2c
 8007554:	fb01 f303 	mul.w	r3, r1, r3
 8007558:	4413      	add	r3, r2
 800755a:	3361      	adds	r3, #97	; 0x61
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b04      	cmp	r3, #4
 8007560:	d112      	bne.n	8007588 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	212c      	movs	r1, #44	; 0x2c
 8007568:	fb01 f303 	mul.w	r3, r1, r3
 800756c:	4413      	add	r3, r2
 800756e:	3361      	adds	r3, #97	; 0x61
 8007570:	2202      	movs	r2, #2
 8007572:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	212c      	movs	r1, #44	; 0x2c
 800757a:	fb01 f303 	mul.w	r3, r1, r3
 800757e:	4413      	add	r3, r2
 8007580:	3360      	adds	r3, #96	; 0x60
 8007582:	2202      	movs	r2, #2
 8007584:	701a      	strb	r2, [r3, #0]
 8007586:	e0a7      	b.n	80076d8 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	212c      	movs	r1, #44	; 0x2c
 800758e:	fb01 f303 	mul.w	r3, r1, r3
 8007592:	4413      	add	r3, r2
 8007594:	3361      	adds	r3, #97	; 0x61
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	2b05      	cmp	r3, #5
 800759a:	d112      	bne.n	80075c2 <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	212c      	movs	r1, #44	; 0x2c
 80075a2:	fb01 f303 	mul.w	r3, r1, r3
 80075a6:	4413      	add	r3, r2
 80075a8:	3361      	adds	r3, #97	; 0x61
 80075aa:	2202      	movs	r2, #2
 80075ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	212c      	movs	r1, #44	; 0x2c
 80075b4:	fb01 f303 	mul.w	r3, r1, r3
 80075b8:	4413      	add	r3, r2
 80075ba:	3360      	adds	r3, #96	; 0x60
 80075bc:	2202      	movs	r2, #2
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	e08a      	b.n	80076d8 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	212c      	movs	r1, #44	; 0x2c
 80075c8:	fb01 f303 	mul.w	r3, r1, r3
 80075cc:	4413      	add	r3, r2
 80075ce:	3361      	adds	r3, #97	; 0x61
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b06      	cmp	r3, #6
 80075d4:	d112      	bne.n	80075fc <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	212c      	movs	r1, #44	; 0x2c
 80075dc:	fb01 f303 	mul.w	r3, r1, r3
 80075e0:	4413      	add	r3, r2
 80075e2:	3361      	adds	r3, #97	; 0x61
 80075e4:	2202      	movs	r2, #2
 80075e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	212c      	movs	r1, #44	; 0x2c
 80075ee:	fb01 f303 	mul.w	r3, r1, r3
 80075f2:	4413      	add	r3, r2
 80075f4:	3360      	adds	r3, #96	; 0x60
 80075f6:	2205      	movs	r2, #5
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e06d      	b.n	80076d8 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	212c      	movs	r1, #44	; 0x2c
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	4413      	add	r3, r2
 8007608:	3361      	adds	r3, #97	; 0x61
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b07      	cmp	r3, #7
 800760e:	d009      	beq.n	8007624 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	212c      	movs	r1, #44	; 0x2c
 8007616:	fb01 f303 	mul.w	r3, r1, r3
 800761a:	4413      	add	r3, r2
 800761c:	3361      	adds	r3, #97	; 0x61
 800761e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007620:	2b09      	cmp	r3, #9
 8007622:	d168      	bne.n	80076f6 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	212c      	movs	r1, #44	; 0x2c
 800762a:	fb01 f303 	mul.w	r3, r1, r3
 800762e:	4413      	add	r3, r2
 8007630:	3361      	adds	r3, #97	; 0x61
 8007632:	2202      	movs	r2, #2
 8007634:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	212c      	movs	r1, #44	; 0x2c
 800763c:	fb01 f303 	mul.w	r3, r1, r3
 8007640:	4413      	add	r3, r2
 8007642:	335c      	adds	r3, #92	; 0x5c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	202c      	movs	r0, #44	; 0x2c
 800764e:	fb00 f303 	mul.w	r3, r0, r3
 8007652:	440b      	add	r3, r1
 8007654:	335c      	adds	r3, #92	; 0x5c
 8007656:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	212c      	movs	r1, #44	; 0x2c
 800765e:	fb01 f303 	mul.w	r3, r1, r3
 8007662:	4413      	add	r3, r2
 8007664:	335c      	adds	r3, #92	; 0x5c
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d912      	bls.n	8007692 <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	212c      	movs	r1, #44	; 0x2c
 8007672:	fb01 f303 	mul.w	r3, r1, r3
 8007676:	4413      	add	r3, r2
 8007678:	335c      	adds	r3, #92	; 0x5c
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	212c      	movs	r1, #44	; 0x2c
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	4413      	add	r3, r2
 800768a:	3360      	adds	r3, #96	; 0x60
 800768c:	2204      	movs	r2, #4
 800768e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007690:	e021      	b.n	80076d6 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	212c      	movs	r1, #44	; 0x2c
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	4413      	add	r3, r2
 800769e:	3360      	adds	r3, #96	; 0x60
 80076a0:	2202      	movs	r2, #2
 80076a2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076ba:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076c2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d0:	461a      	mov	r2, r3
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80076d6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	b2d9      	uxtb	r1, r3
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	202c      	movs	r0, #44	; 0x2c
 80076e2:	fb00 f303 	mul.w	r3, r0, r3
 80076e6:	4413      	add	r3, r2
 80076e8:	3360      	adds	r3, #96	; 0x60
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f01b fcb0 	bl	8023054 <HAL_HCD_HC_NotifyURBChange_Callback>
 80076f4:	e000      	b.n	80076f8 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 80076f6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80076f8:	3720      	adds	r7, #32
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b08a      	sub	sp, #40	; 0x28
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	0c5b      	lsrs	r3, r3, #17
 8007724:	f003 030f 	and.w	r3, r3, #15
 8007728:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	091b      	lsrs	r3, r3, #4
 800772e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007732:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2b02      	cmp	r3, #2
 8007738:	d004      	beq.n	8007744 <HCD_RXQLVL_IRQHandler+0x46>
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b05      	cmp	r3, #5
 800773e:	f000 80a9 	beq.w	8007894 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007742:	e0aa      	b.n	800789a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 80a6 	beq.w	8007898 <HCD_RXQLVL_IRQHandler+0x19a>
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	212c      	movs	r1, #44	; 0x2c
 8007752:	fb01 f303 	mul.w	r3, r1, r3
 8007756:	4413      	add	r3, r2
 8007758:	3344      	adds	r3, #68	; 0x44
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 809b 	beq.w	8007898 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	212c      	movs	r1, #44	; 0x2c
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	4413      	add	r3, r2
 800776e:	3350      	adds	r3, #80	; 0x50
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	441a      	add	r2, r3
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	202c      	movs	r0, #44	; 0x2c
 800777c:	fb00 f303 	mul.w	r3, r0, r3
 8007780:	440b      	add	r3, r1
 8007782:	334c      	adds	r3, #76	; 0x4c
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d87a      	bhi.n	8007880 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	212c      	movs	r1, #44	; 0x2c
 8007794:	fb01 f303 	mul.w	r3, r1, r3
 8007798:	4413      	add	r3, r2
 800779a:	3344      	adds	r3, #68	; 0x44
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	b292      	uxth	r2, r2
 80077a2:	4619      	mov	r1, r3
 80077a4:	f007 fb76 	bl	800ee94 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	212c      	movs	r1, #44	; 0x2c
 80077ae:	fb01 f303 	mul.w	r3, r1, r3
 80077b2:	4413      	add	r3, r2
 80077b4:	3344      	adds	r3, #68	; 0x44
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	441a      	add	r2, r3
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	202c      	movs	r0, #44	; 0x2c
 80077c2:	fb00 f303 	mul.w	r3, r0, r3
 80077c6:	440b      	add	r3, r1
 80077c8:	3344      	adds	r3, #68	; 0x44
 80077ca:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	212c      	movs	r1, #44	; 0x2c
 80077d2:	fb01 f303 	mul.w	r3, r1, r3
 80077d6:	4413      	add	r3, r2
 80077d8:	3350      	adds	r3, #80	; 0x50
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	441a      	add	r2, r3
 80077e0:	6879      	ldr	r1, [r7, #4]
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	202c      	movs	r0, #44	; 0x2c
 80077e6:	fb00 f303 	mul.w	r3, r0, r3
 80077ea:	440b      	add	r3, r1
 80077ec:	3350      	adds	r3, #80	; 0x50
 80077ee:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	0cdb      	lsrs	r3, r3, #19
 8007800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007804:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	212c      	movs	r1, #44	; 0x2c
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	4413      	add	r3, r2
 8007812:	3340      	adds	r3, #64	; 0x40
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	4293      	cmp	r3, r2
 800781c:	d13c      	bne.n	8007898 <HCD_RXQLVL_IRQHandler+0x19a>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d039      	beq.n	8007898 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	4413      	add	r3, r2
 800782c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800783a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007842:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	4413      	add	r3, r2
 800784c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007850:	461a      	mov	r2, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	212c      	movs	r1, #44	; 0x2c
 800785c:	fb01 f303 	mul.w	r3, r1, r3
 8007860:	4413      	add	r3, r2
 8007862:	3354      	adds	r3, #84	; 0x54
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	f083 0301 	eor.w	r3, r3, #1
 800786a:	b2d8      	uxtb	r0, r3
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	212c      	movs	r1, #44	; 0x2c
 8007872:	fb01 f303 	mul.w	r3, r1, r3
 8007876:	4413      	add	r3, r2
 8007878:	3354      	adds	r3, #84	; 0x54
 800787a:	4602      	mov	r2, r0
 800787c:	701a      	strb	r2, [r3, #0]
      break;
 800787e:	e00b      	b.n	8007898 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	212c      	movs	r1, #44	; 0x2c
 8007886:	fb01 f303 	mul.w	r3, r1, r3
 800788a:	4413      	add	r3, r2
 800788c:	3360      	adds	r3, #96	; 0x60
 800788e:	2204      	movs	r2, #4
 8007890:	701a      	strb	r2, [r3, #0]
      break;
 8007892:	e001      	b.n	8007898 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007894:	bf00      	nop
 8007896:	e000      	b.n	800789a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007898:	bf00      	nop
  }
}
 800789a:	bf00      	nop
 800789c:	3728      	adds	r7, #40	; 0x28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b086      	sub	sp, #24
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078ce:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d10b      	bne.n	80078f2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d102      	bne.n	80078ea <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f01b fb99 	bl	802301c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f043 0302 	orr.w	r3, r3, #2
 80078f0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d132      	bne.n	8007962 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f043 0308 	orr.w	r3, r3, #8
 8007902:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b04      	cmp	r3, #4
 800790c:	d126      	bne.n	800795c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d113      	bne.n	800793e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800791c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007920:	d106      	bne.n	8007930 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2102      	movs	r1, #2
 8007928:	4618      	mov	r0, r3
 800792a:	f007 fc35 	bl	800f198 <USB_InitFSLSPClkSel>
 800792e:	e011      	b.n	8007954 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2101      	movs	r1, #1
 8007936:	4618      	mov	r0, r3
 8007938:	f007 fc2e 	bl	800f198 <USB_InitFSLSPClkSel>
 800793c:	e00a      	b.n	8007954 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d106      	bne.n	8007954 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800794c:	461a      	mov	r2, r3
 800794e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007952:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f01b fb8f 	bl	8023078 <HAL_HCD_PortEnabled_Callback>
 800795a:	e002      	b.n	8007962 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f01b fb99 	bl	8023094 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b20      	cmp	r3, #32
 800796a:	d103      	bne.n	8007974 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f043 0320 	orr.w	r3, r3, #32
 8007972:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800797a:	461a      	mov	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	6013      	str	r3, [r2, #0]
}
 8007980:	bf00      	nop
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e07f      	b.n	8007a9a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d106      	bne.n	80079b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7fa fc7c 	bl	80022ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2224      	movs	r2, #36	; 0x24
 80079b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0201 	bic.w	r2, r2, #1
 80079ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80079d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d107      	bne.n	8007a02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079fe:	609a      	str	r2, [r3, #8]
 8007a00:	e006      	b.n	8007a10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007a0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d104      	bne.n	8007a22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6859      	ldr	r1, [r3, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	4b1d      	ldr	r3, [pc, #116]	; (8007aa4 <HAL_I2C_Init+0x11c>)
 8007a2e:	430b      	orrs	r3, r1
 8007a30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691a      	ldr	r2, [r3, #16]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	69d9      	ldr	r1, [r3, #28]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a1a      	ldr	r2, [r3, #32]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0201 	orr.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	02008000 	.word	0x02008000

08007aa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	d138      	bne.n	8007b30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e032      	b.n	8007b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2224      	movs	r2, #36	; 0x24
 8007ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007afa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6819      	ldr	r1, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0201 	orr.w	r2, r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	e000      	b.n	8007b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b30:	2302      	movs	r3, #2
  }
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b085      	sub	sp, #20
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d139      	bne.n	8007bc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d101      	bne.n	8007b62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	e033      	b.n	8007bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2224      	movs	r2, #36	; 0x24
 8007b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0201 	bic.w	r2, r2, #1
 8007b80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	021b      	lsls	r3, r3, #8
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0201 	orr.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e000      	b.n	8007bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007bc8:	2302      	movs	r3, #2
  }
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
	...

08007bd8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e0bf      	b.n	8007d6a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fa fbfc 	bl	80023fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007c1a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6999      	ldr	r1, [r3, #24]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c30:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6899      	ldr	r1, [r3, #8]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	4b4a      	ldr	r3, [pc, #296]	; (8007d74 <HAL_LTDC_Init+0x19c>)
 8007c4c:	400b      	ands	r3, r1
 8007c4e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	041b      	lsls	r3, r3, #16
 8007c56:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6899      	ldr	r1, [r3, #8]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	431a      	orrs	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68d9      	ldr	r1, [r3, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	4b3e      	ldr	r3, [pc, #248]	; (8007d74 <HAL_LTDC_Init+0x19c>)
 8007c7a:	400b      	ands	r3, r1
 8007c7c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	041b      	lsls	r3, r3, #16
 8007c84:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68d9      	ldr	r1, [r3, #12]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a1a      	ldr	r2, [r3, #32]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6919      	ldr	r1, [r3, #16]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	4b33      	ldr	r3, [pc, #204]	; (8007d74 <HAL_LTDC_Init+0x19c>)
 8007ca8:	400b      	ands	r3, r1
 8007caa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	041b      	lsls	r3, r3, #16
 8007cb2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6919      	ldr	r1, [r3, #16]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6959      	ldr	r1, [r3, #20]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	4b27      	ldr	r3, [pc, #156]	; (8007d74 <HAL_LTDC_Init+0x19c>)
 8007cd6:	400b      	ands	r3, r1
 8007cd8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cde:	041b      	lsls	r3, r3, #16
 8007ce0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6959      	ldr	r1, [r3, #20]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cfe:	021b      	lsls	r3, r3, #8
 8007d00:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007d08:	041b      	lsls	r3, r3, #16
 8007d0a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	430a      	orrs	r2, r1
 8007d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f042 0206 	orr.w	r2, r2, #6
 8007d46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	699a      	ldr	r2, [r3, #24]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0201 	orr.w	r2, r2, #1
 8007d56:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	f000f800 	.word	0xf000f800

08007d78 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f003 0304 	and.w	r3, r3, #4
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d023      	beq.n	8007de2 <HAL_LTDC_IRQHandler+0x6a>
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01e      	beq.n	8007de2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0204 	bic.w	r2, r2, #4
 8007db2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2204      	movs	r2, #4
 8007dba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007dc2:	f043 0201 	orr.w	r2, r3, #1
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2204      	movs	r2, #4
 8007dd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f86f 	bl	8007ec0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d023      	beq.n	8007e34 <HAL_LTDC_IRQHandler+0xbc>
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d01e      	beq.n	8007e34 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0202 	bic.w	r2, r2, #2
 8007e04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e14:	f043 0202 	orr.w	r2, r3, #2
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2204      	movs	r2, #4
 8007e22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f846 	bl	8007ec0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d01b      	beq.n	8007e76 <HAL_LTDC_IRQHandler+0xfe>
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d016      	beq.n	8007e76 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 0201 	bic.w	r2, r2, #1
 8007e56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f82f 	bl	8007ed4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f003 0308 	and.w	r3, r3, #8
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01b      	beq.n	8007eb8 <HAL_LTDC_IRQHandler+0x140>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f003 0308 	and.w	r3, r3, #8
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d016      	beq.n	8007eb8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0208 	bic.w	r2, r2, #8
 8007e98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2208      	movs	r2, #8
 8007ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f818 	bl	8007ee8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007efc:	b5b0      	push	{r4, r5, r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d101      	bne.n	8007f16 <HAL_LTDC_ConfigLayer+0x1a>
 8007f12:	2302      	movs	r3, #2
 8007f14:	e02c      	b.n	8007f70 <HAL_LTDC_ConfigLayer+0x74>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2202      	movs	r2, #2
 8007f22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2134      	movs	r1, #52	; 0x34
 8007f2c:	fb01 f303 	mul.w	r3, r1, r3
 8007f30:	4413      	add	r3, r2
 8007f32:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	4614      	mov	r4, r2
 8007f3a:	461d      	mov	r5, r3
 8007f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	68b9      	ldr	r1, [r7, #8]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f811 	bl	8007f78 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bdb0      	pop	{r4, r5, r7, pc}

08007f78 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b089      	sub	sp, #36	; 0x24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	0c1b      	lsrs	r3, r3, #16
 8007f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f94:	4413      	add	r3, r2
 8007f96:	041b      	lsls	r3, r3, #16
 8007f98:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	01db      	lsls	r3, r3, #7
 8007fa4:	4413      	add	r3, r2
 8007fa6:	3384      	adds	r3, #132	; 0x84
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	6812      	ldr	r2, [r2, #0]
 8007fae:	4611      	mov	r1, r2
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	01d2      	lsls	r2, r2, #7
 8007fb4:	440a      	add	r2, r1
 8007fb6:	3284      	adds	r2, #132	; 0x84
 8007fb8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007fbc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	0c1b      	lsrs	r3, r3, #16
 8007fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fce:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007fd0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	01db      	lsls	r3, r3, #7
 8007fdc:	440b      	add	r3, r1
 8007fde:	3384      	adds	r3, #132	; 0x84
 8007fe0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fe6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ff6:	4413      	add	r3, r2
 8007ff8:	041b      	lsls	r3, r3, #16
 8007ffa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	01db      	lsls	r3, r3, #7
 8008006:	4413      	add	r3, r2
 8008008:	3384      	adds	r3, #132	; 0x84
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	6812      	ldr	r2, [r2, #0]
 8008010:	4611      	mov	r1, r2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	01d2      	lsls	r2, r2, #7
 8008016:	440a      	add	r2, r1
 8008018:	3284      	adds	r2, #132	; 0x84
 800801a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800801e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800802e:	4413      	add	r3, r2
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4619      	mov	r1, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	01db      	lsls	r3, r3, #7
 800803c:	440b      	add	r3, r1
 800803e:	3384      	adds	r3, #132	; 0x84
 8008040:	4619      	mov	r1, r3
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	4313      	orrs	r3, r2
 8008046:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	01db      	lsls	r3, r3, #7
 8008052:	4413      	add	r3, r2
 8008054:	3384      	adds	r3, #132	; 0x84
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	6812      	ldr	r2, [r2, #0]
 800805c:	4611      	mov	r1, r2
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	01d2      	lsls	r2, r2, #7
 8008062:	440a      	add	r2, r1
 8008064:	3284      	adds	r2, #132	; 0x84
 8008066:	f023 0307 	bic.w	r3, r3, #7
 800806a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	461a      	mov	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	01db      	lsls	r3, r3, #7
 8008076:	4413      	add	r3, r2
 8008078:	3384      	adds	r3, #132	; 0x84
 800807a:	461a      	mov	r2, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008088:	021b      	lsls	r3, r3, #8
 800808a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008092:	041b      	lsls	r3, r3, #16
 8008094:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	061b      	lsls	r3, r3, #24
 800809c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	01db      	lsls	r3, r3, #7
 80080a8:	4413      	add	r3, r2
 80080aa:	3384      	adds	r3, #132	; 0x84
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	01db      	lsls	r3, r3, #7
 80080b8:	4413      	add	r3, r2
 80080ba:	3384      	adds	r3, #132	; 0x84
 80080bc:	461a      	mov	r2, r3
 80080be:	2300      	movs	r3, #0
 80080c0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080c8:	461a      	mov	r2, r3
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	431a      	orrs	r2, r3
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	431a      	orrs	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4619      	mov	r1, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	01db      	lsls	r3, r3, #7
 80080dc:	440b      	add	r3, r1
 80080de:	3384      	adds	r3, #132	; 0x84
 80080e0:	4619      	mov	r1, r3
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	01db      	lsls	r3, r3, #7
 80080f2:	4413      	add	r3, r2
 80080f4:	3384      	adds	r3, #132	; 0x84
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	6812      	ldr	r2, [r2, #0]
 80080fc:	4611      	mov	r1, r2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	01d2      	lsls	r2, r2, #7
 8008102:	440a      	add	r2, r1
 8008104:	3284      	adds	r2, #132	; 0x84
 8008106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800810a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	01db      	lsls	r3, r3, #7
 8008116:	4413      	add	r3, r2
 8008118:	3384      	adds	r3, #132	; 0x84
 800811a:	461a      	mov	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	01db      	lsls	r3, r3, #7
 800812c:	4413      	add	r3, r2
 800812e:	3384      	adds	r3, #132	; 0x84
 8008130:	69da      	ldr	r2, [r3, #28]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4619      	mov	r1, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	01db      	lsls	r3, r3, #7
 800813c:	440b      	add	r3, r1
 800813e:	3384      	adds	r3, #132	; 0x84
 8008140:	4619      	mov	r1, r3
 8008142:	4b58      	ldr	r3, [pc, #352]	; (80082a4 <LTDC_SetConfig+0x32c>)
 8008144:	4013      	ands	r3, r2
 8008146:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	69da      	ldr	r2, [r3, #28]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	68f9      	ldr	r1, [r7, #12]
 8008152:	6809      	ldr	r1, [r1, #0]
 8008154:	4608      	mov	r0, r1
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	01c9      	lsls	r1, r1, #7
 800815a:	4401      	add	r1, r0
 800815c:	3184      	adds	r1, #132	; 0x84
 800815e:	4313      	orrs	r3, r2
 8008160:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	01db      	lsls	r3, r3, #7
 800816c:	4413      	add	r3, r2
 800816e:	3384      	adds	r3, #132	; 0x84
 8008170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	01db      	lsls	r3, r3, #7
 800817c:	4413      	add	r3, r2
 800817e:	3384      	adds	r3, #132	; 0x84
 8008180:	461a      	mov	r2, r3
 8008182:	2300      	movs	r3, #0
 8008184:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	01db      	lsls	r3, r3, #7
 8008190:	4413      	add	r3, r2
 8008192:	3384      	adds	r3, #132	; 0x84
 8008194:	461a      	mov	r2, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80081a4:	2304      	movs	r3, #4
 80081a6:	61fb      	str	r3, [r7, #28]
 80081a8:	e01b      	b.n	80081e2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d102      	bne.n	80081b8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80081b2:	2303      	movs	r3, #3
 80081b4:	61fb      	str	r3, [r7, #28]
 80081b6:	e014      	b.n	80081e2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d00b      	beq.n	80081d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d007      	beq.n	80081d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d003      	beq.n	80081d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80081d4:	2b07      	cmp	r3, #7
 80081d6:	d102      	bne.n	80081de <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80081d8:	2302      	movs	r3, #2
 80081da:	61fb      	str	r3, [r7, #28]
 80081dc:	e001      	b.n	80081e2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80081de:	2301      	movs	r3, #1
 80081e0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	01db      	lsls	r3, r3, #7
 80081ec:	4413      	add	r3, r2
 80081ee:	3384      	adds	r3, #132	; 0x84
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	6812      	ldr	r2, [r2, #0]
 80081f6:	4611      	mov	r1, r2
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	01d2      	lsls	r2, r2, #7
 80081fc:	440a      	add	r2, r1
 80081fe:	3284      	adds	r2, #132	; 0x84
 8008200:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008204:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820a:	69fa      	ldr	r2, [r7, #28]
 800820c:	fb02 f303 	mul.w	r3, r2, r3
 8008210:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	6859      	ldr	r1, [r3, #4]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	1acb      	subs	r3, r1, r3
 800821c:	69f9      	ldr	r1, [r7, #28]
 800821e:	fb01 f303 	mul.w	r3, r1, r3
 8008222:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008224:	68f9      	ldr	r1, [r7, #12]
 8008226:	6809      	ldr	r1, [r1, #0]
 8008228:	4608      	mov	r0, r1
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	01c9      	lsls	r1, r1, #7
 800822e:	4401      	add	r1, r0
 8008230:	3184      	adds	r1, #132	; 0x84
 8008232:	4313      	orrs	r3, r2
 8008234:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	01db      	lsls	r3, r3, #7
 8008240:	4413      	add	r3, r2
 8008242:	3384      	adds	r3, #132	; 0x84
 8008244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4619      	mov	r1, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	01db      	lsls	r3, r3, #7
 8008250:	440b      	add	r3, r1
 8008252:	3384      	adds	r3, #132	; 0x84
 8008254:	4619      	mov	r1, r3
 8008256:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <LTDC_SetConfig+0x330>)
 8008258:	4013      	ands	r3, r2
 800825a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	461a      	mov	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	01db      	lsls	r3, r3, #7
 8008266:	4413      	add	r3, r2
 8008268:	3384      	adds	r3, #132	; 0x84
 800826a:	461a      	mov	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	01db      	lsls	r3, r3, #7
 800827c:	4413      	add	r3, r2
 800827e:	3384      	adds	r3, #132	; 0x84
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	6812      	ldr	r2, [r2, #0]
 8008286:	4611      	mov	r1, r2
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	01d2      	lsls	r2, r2, #7
 800828c:	440a      	add	r2, r1
 800828e:	3284      	adds	r2, #132	; 0x84
 8008290:	f043 0301 	orr.w	r3, r3, #1
 8008294:	6013      	str	r3, [r2, #0]
}
 8008296:	bf00      	nop
 8008298:	3724      	adds	r7, #36	; 0x24
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	fffff8f8 	.word	0xfffff8f8
 80082a8:	fffff800 	.word	0xfffff800

080082ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082b0:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a04      	ldr	r2, [pc, #16]	; (80082c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80082b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ba:	6013      	str	r3, [r2, #0]
}
 80082bc:	bf00      	nop
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	40007000 	.word	0x40007000

080082cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80082d2:	2300      	movs	r3, #0
 80082d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80082d6:	4b23      	ldr	r3, [pc, #140]	; (8008364 <HAL_PWREx_EnableOverDrive+0x98>)
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	4a22      	ldr	r2, [pc, #136]	; (8008364 <HAL_PWREx_EnableOverDrive+0x98>)
 80082dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082e0:	6413      	str	r3, [r2, #64]	; 0x40
 80082e2:	4b20      	ldr	r3, [pc, #128]	; (8008364 <HAL_PWREx_EnableOverDrive+0x98>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80082ee:	4b1e      	ldr	r3, [pc, #120]	; (8008368 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a1d      	ldr	r2, [pc, #116]	; (8008368 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082fa:	f7fb f9b1 	bl	8003660 <HAL_GetTick>
 80082fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008300:	e009      	b.n	8008316 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008302:	f7fb f9ad 	bl	8003660 <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008310:	d901      	bls.n	8008316 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e022      	b.n	800835c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008316:	4b14      	ldr	r3, [pc, #80]	; (8008368 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800831e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008322:	d1ee      	bne.n	8008302 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008324:	4b10      	ldr	r3, [pc, #64]	; (8008368 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a0f      	ldr	r2, [pc, #60]	; (8008368 <HAL_PWREx_EnableOverDrive+0x9c>)
 800832a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800832e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008330:	f7fb f996 	bl	8003660 <HAL_GetTick>
 8008334:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008336:	e009      	b.n	800834c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008338:	f7fb f992 	bl	8003660 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008346:	d901      	bls.n	800834c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e007      	b.n	800835c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800834c:	4b06      	ldr	r3, [pc, #24]	; (8008368 <HAL_PWREx_EnableOverDrive+0x9c>)
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008358:	d1ee      	bne.n	8008338 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	40023800 	.word	0x40023800
 8008368:	40007000 	.word	0x40007000

0800836c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af02      	add	r7, sp, #8
 8008372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008374:	f7fb f974 	bl	8003660 <HAL_GetTick>
 8008378:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e067      	b.n	8008454 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10b      	bne.n	80083a8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7fa f8f7 	bl	800258c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800839e:	f241 3188 	movw	r1, #5000	; 0x1388
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f85e 	bl	8008464 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	021a      	lsls	r2, r3, #8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	2120      	movs	r1, #32
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f856 	bl	8008480 <QSPI_WaitFlagStateUntilTimeout>
 80083d4:	4603      	mov	r3, r0
 80083d6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80083d8:	7afb      	ldrb	r3, [r7, #11]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d135      	bne.n	800844a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	4b1d      	ldr	r3, [pc, #116]	; (800845c <HAL_QSPI_Init+0xf0>)
 80083e6:	4013      	ands	r3, r2
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	6852      	ldr	r2, [r2, #4]
 80083ec:	0611      	lsls	r1, r2, #24
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	68d2      	ldr	r2, [r2, #12]
 80083f2:	4311      	orrs	r1, r2
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	69d2      	ldr	r2, [r2, #28]
 80083f8:	4311      	orrs	r1, r2
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	6a12      	ldr	r2, [r2, #32]
 80083fe:	4311      	orrs	r1, r2
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6812      	ldr	r2, [r2, #0]
 8008404:	430b      	orrs	r3, r1
 8008406:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	4b14      	ldr	r3, [pc, #80]	; (8008460 <HAL_QSPI_Init+0xf4>)
 8008410:	4013      	ands	r3, r2
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	6912      	ldr	r2, [r2, #16]
 8008416:	0411      	lsls	r1, r2, #16
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	6952      	ldr	r2, [r2, #20]
 800841c:	4311      	orrs	r1, r2
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	6992      	ldr	r2, [r2, #24]
 8008422:	4311      	orrs	r1, r2
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	6812      	ldr	r2, [r2, #0]
 8008428:	430b      	orrs	r3, r1
 800842a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008452:	7afb      	ldrb	r3, [r7, #11]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	00ffff2f 	.word	0x00ffff2f
 8008460:	ffe0f8fe 	.word	0xffe0f8fe

08008464 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	603b      	str	r3, [r7, #0]
 800848c:	4613      	mov	r3, r2
 800848e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008490:	e01a      	b.n	80084c8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008498:	d016      	beq.n	80084c8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800849a:	f7fb f8e1 	bl	8003660 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d302      	bcc.n	80084b0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10b      	bne.n	80084c8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2204      	movs	r2, #4
 80084b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084bc:	f043 0201 	orr.w	r2, r3, #1
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e00e      	b.n	80084e6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	4013      	ands	r3, r2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	bf14      	ite	ne
 80084d6:	2301      	movne	r3, #1
 80084d8:	2300      	moveq	r3, #0
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	461a      	mov	r2, r3
 80084de:	79fb      	ldrb	r3, [r7, #7]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d1d6      	bne.n	8008492 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80084f8:	2300      	movs	r3, #0
 80084fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e291      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 8087 	beq.w	8008622 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008514:	4b96      	ldr	r3, [pc, #600]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f003 030c 	and.w	r3, r3, #12
 800851c:	2b04      	cmp	r3, #4
 800851e:	d00c      	beq.n	800853a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008520:	4b93      	ldr	r3, [pc, #588]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f003 030c 	and.w	r3, r3, #12
 8008528:	2b08      	cmp	r3, #8
 800852a:	d112      	bne.n	8008552 <HAL_RCC_OscConfig+0x62>
 800852c:	4b90      	ldr	r3, [pc, #576]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008538:	d10b      	bne.n	8008552 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800853a:	4b8d      	ldr	r3, [pc, #564]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d06c      	beq.n	8008620 <HAL_RCC_OscConfig+0x130>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d168      	bne.n	8008620 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e26b      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800855a:	d106      	bne.n	800856a <HAL_RCC_OscConfig+0x7a>
 800855c:	4b84      	ldr	r3, [pc, #528]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a83      	ldr	r2, [pc, #524]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	e02e      	b.n	80085c8 <HAL_RCC_OscConfig+0xd8>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10c      	bne.n	800858c <HAL_RCC_OscConfig+0x9c>
 8008572:	4b7f      	ldr	r3, [pc, #508]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a7e      	ldr	r2, [pc, #504]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	4b7c      	ldr	r3, [pc, #496]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a7b      	ldr	r2, [pc, #492]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	e01d      	b.n	80085c8 <HAL_RCC_OscConfig+0xd8>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008594:	d10c      	bne.n	80085b0 <HAL_RCC_OscConfig+0xc0>
 8008596:	4b76      	ldr	r3, [pc, #472]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a75      	ldr	r2, [pc, #468]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 800859c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	4b73      	ldr	r3, [pc, #460]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a72      	ldr	r2, [pc, #456]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80085a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	e00b      	b.n	80085c8 <HAL_RCC_OscConfig+0xd8>
 80085b0:	4b6f      	ldr	r3, [pc, #444]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a6e      	ldr	r2, [pc, #440]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80085b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	4b6c      	ldr	r3, [pc, #432]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a6b      	ldr	r2, [pc, #428]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80085c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d013      	beq.n	80085f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d0:	f7fb f846 	bl	8003660 <HAL_GetTick>
 80085d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085d6:	e008      	b.n	80085ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085d8:	f7fb f842 	bl	8003660 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b64      	cmp	r3, #100	; 0x64
 80085e4:	d901      	bls.n	80085ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e21f      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085ea:	4b61      	ldr	r3, [pc, #388]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0f0      	beq.n	80085d8 <HAL_RCC_OscConfig+0xe8>
 80085f6:	e014      	b.n	8008622 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f8:	f7fb f832 	bl	8003660 <HAL_GetTick>
 80085fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085fe:	e008      	b.n	8008612 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008600:	f7fb f82e 	bl	8003660 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	2b64      	cmp	r3, #100	; 0x64
 800860c:	d901      	bls.n	8008612 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e20b      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008612:	4b57      	ldr	r3, [pc, #348]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1f0      	bne.n	8008600 <HAL_RCC_OscConfig+0x110>
 800861e:	e000      	b.n	8008622 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0302 	and.w	r3, r3, #2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d069      	beq.n	8008702 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800862e:	4b50      	ldr	r3, [pc, #320]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f003 030c 	and.w	r3, r3, #12
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00b      	beq.n	8008652 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800863a:	4b4d      	ldr	r3, [pc, #308]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f003 030c 	and.w	r3, r3, #12
 8008642:	2b08      	cmp	r3, #8
 8008644:	d11c      	bne.n	8008680 <HAL_RCC_OscConfig+0x190>
 8008646:	4b4a      	ldr	r3, [pc, #296]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d116      	bne.n	8008680 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008652:	4b47      	ldr	r3, [pc, #284]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <HAL_RCC_OscConfig+0x17a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d001      	beq.n	800866a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e1df      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800866a:	4b41      	ldr	r3, [pc, #260]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	00db      	lsls	r3, r3, #3
 8008678:	493d      	ldr	r1, [pc, #244]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 800867a:	4313      	orrs	r3, r2
 800867c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800867e:	e040      	b.n	8008702 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d023      	beq.n	80086d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008688:	4b39      	ldr	r3, [pc, #228]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a38      	ldr	r2, [pc, #224]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 800868e:	f043 0301 	orr.w	r3, r3, #1
 8008692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008694:	f7fa ffe4 	bl	8003660 <HAL_GetTick>
 8008698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800869a:	e008      	b.n	80086ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800869c:	f7fa ffe0 	bl	8003660 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e1bd      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086ae:	4b30      	ldr	r3, [pc, #192]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0f0      	beq.n	800869c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086ba:	4b2d      	ldr	r3, [pc, #180]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	4929      	ldr	r1, [pc, #164]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	600b      	str	r3, [r1, #0]
 80086ce:	e018      	b.n	8008702 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086d0:	4b27      	ldr	r3, [pc, #156]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a26      	ldr	r2, [pc, #152]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80086d6:	f023 0301 	bic.w	r3, r3, #1
 80086da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086dc:	f7fa ffc0 	bl	8003660 <HAL_GetTick>
 80086e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086e4:	f7fa ffbc 	bl	8003660 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e199      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086f6:	4b1e      	ldr	r3, [pc, #120]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1f0      	bne.n	80086e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0308 	and.w	r3, r3, #8
 800870a:	2b00      	cmp	r3, #0
 800870c:	d038      	beq.n	8008780 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d019      	beq.n	800874a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008716:	4b16      	ldr	r3, [pc, #88]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800871a:	4a15      	ldr	r2, [pc, #84]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 800871c:	f043 0301 	orr.w	r3, r3, #1
 8008720:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008722:	f7fa ff9d 	bl	8003660 <HAL_GetTick>
 8008726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008728:	e008      	b.n	800873c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800872a:	f7fa ff99 	bl	8003660 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b02      	cmp	r3, #2
 8008736:	d901      	bls.n	800873c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e176      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800873c:	4b0c      	ldr	r3, [pc, #48]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 800873e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d0f0      	beq.n	800872a <HAL_RCC_OscConfig+0x23a>
 8008748:	e01a      	b.n	8008780 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800874a:	4b09      	ldr	r3, [pc, #36]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 800874c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800874e:	4a08      	ldr	r2, [pc, #32]	; (8008770 <HAL_RCC_OscConfig+0x280>)
 8008750:	f023 0301 	bic.w	r3, r3, #1
 8008754:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008756:	f7fa ff83 	bl	8003660 <HAL_GetTick>
 800875a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800875c:	e00a      	b.n	8008774 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800875e:	f7fa ff7f 	bl	8003660 <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	2b02      	cmp	r3, #2
 800876a:	d903      	bls.n	8008774 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e15c      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
 8008770:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008774:	4b91      	ldr	r3, [pc, #580]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008778:	f003 0302 	and.w	r3, r3, #2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1ee      	bne.n	800875e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0304 	and.w	r3, r3, #4
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 80a4 	beq.w	80088d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800878e:	4b8b      	ldr	r3, [pc, #556]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10d      	bne.n	80087b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800879a:	4b88      	ldr	r3, [pc, #544]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	4a87      	ldr	r2, [pc, #540]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 80087a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087a4:	6413      	str	r3, [r2, #64]	; 0x40
 80087a6:	4b85      	ldr	r3, [pc, #532]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ae:	60bb      	str	r3, [r7, #8]
 80087b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087b2:	2301      	movs	r3, #1
 80087b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087b6:	4b82      	ldr	r3, [pc, #520]	; (80089c0 <HAL_RCC_OscConfig+0x4d0>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d118      	bne.n	80087f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80087c2:	4b7f      	ldr	r3, [pc, #508]	; (80089c0 <HAL_RCC_OscConfig+0x4d0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a7e      	ldr	r2, [pc, #504]	; (80089c0 <HAL_RCC_OscConfig+0x4d0>)
 80087c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087ce:	f7fa ff47 	bl	8003660 <HAL_GetTick>
 80087d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087d4:	e008      	b.n	80087e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087d6:	f7fa ff43 	bl	8003660 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b64      	cmp	r3, #100	; 0x64
 80087e2:	d901      	bls.n	80087e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e120      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087e8:	4b75      	ldr	r3, [pc, #468]	; (80089c0 <HAL_RCC_OscConfig+0x4d0>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0f0      	beq.n	80087d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d106      	bne.n	800880a <HAL_RCC_OscConfig+0x31a>
 80087fc:	4b6f      	ldr	r3, [pc, #444]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 80087fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008800:	4a6e      	ldr	r2, [pc, #440]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008802:	f043 0301 	orr.w	r3, r3, #1
 8008806:	6713      	str	r3, [r2, #112]	; 0x70
 8008808:	e02d      	b.n	8008866 <HAL_RCC_OscConfig+0x376>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10c      	bne.n	800882c <HAL_RCC_OscConfig+0x33c>
 8008812:	4b6a      	ldr	r3, [pc, #424]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008816:	4a69      	ldr	r2, [pc, #420]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008818:	f023 0301 	bic.w	r3, r3, #1
 800881c:	6713      	str	r3, [r2, #112]	; 0x70
 800881e:	4b67      	ldr	r3, [pc, #412]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008822:	4a66      	ldr	r2, [pc, #408]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008824:	f023 0304 	bic.w	r3, r3, #4
 8008828:	6713      	str	r3, [r2, #112]	; 0x70
 800882a:	e01c      	b.n	8008866 <HAL_RCC_OscConfig+0x376>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	2b05      	cmp	r3, #5
 8008832:	d10c      	bne.n	800884e <HAL_RCC_OscConfig+0x35e>
 8008834:	4b61      	ldr	r3, [pc, #388]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008838:	4a60      	ldr	r2, [pc, #384]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 800883a:	f043 0304 	orr.w	r3, r3, #4
 800883e:	6713      	str	r3, [r2, #112]	; 0x70
 8008840:	4b5e      	ldr	r3, [pc, #376]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008844:	4a5d      	ldr	r2, [pc, #372]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008846:	f043 0301 	orr.w	r3, r3, #1
 800884a:	6713      	str	r3, [r2, #112]	; 0x70
 800884c:	e00b      	b.n	8008866 <HAL_RCC_OscConfig+0x376>
 800884e:	4b5b      	ldr	r3, [pc, #364]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008852:	4a5a      	ldr	r2, [pc, #360]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008854:	f023 0301 	bic.w	r3, r3, #1
 8008858:	6713      	str	r3, [r2, #112]	; 0x70
 800885a:	4b58      	ldr	r3, [pc, #352]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 800885c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885e:	4a57      	ldr	r2, [pc, #348]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008860:	f023 0304 	bic.w	r3, r3, #4
 8008864:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d015      	beq.n	800889a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800886e:	f7fa fef7 	bl	8003660 <HAL_GetTick>
 8008872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008874:	e00a      	b.n	800888c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008876:	f7fa fef3 	bl	8003660 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	f241 3288 	movw	r2, #5000	; 0x1388
 8008884:	4293      	cmp	r3, r2
 8008886:	d901      	bls.n	800888c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e0ce      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800888c:	4b4b      	ldr	r3, [pc, #300]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 800888e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0ee      	beq.n	8008876 <HAL_RCC_OscConfig+0x386>
 8008898:	e014      	b.n	80088c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800889a:	f7fa fee1 	bl	8003660 <HAL_GetTick>
 800889e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088a0:	e00a      	b.n	80088b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088a2:	f7fa fedd 	bl	8003660 <HAL_GetTick>
 80088a6:	4602      	mov	r2, r0
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d901      	bls.n	80088b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e0b8      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088b8:	4b40      	ldr	r3, [pc, #256]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 80088ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088bc:	f003 0302 	and.w	r3, r3, #2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1ee      	bne.n	80088a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d105      	bne.n	80088d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088ca:	4b3c      	ldr	r3, [pc, #240]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 80088cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ce:	4a3b      	ldr	r2, [pc, #236]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 80088d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 80a4 	beq.w	8008a28 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088e0:	4b36      	ldr	r3, [pc, #216]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 030c 	and.w	r3, r3, #12
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d06b      	beq.n	80089c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d149      	bne.n	8008988 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f4:	4b31      	ldr	r3, [pc, #196]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a30      	ldr	r2, [pc, #192]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 80088fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008900:	f7fa feae 	bl	8003660 <HAL_GetTick>
 8008904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008906:	e008      	b.n	800891a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008908:	f7fa feaa 	bl	8003660 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b02      	cmp	r3, #2
 8008914:	d901      	bls.n	800891a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e087      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800891a:	4b28      	ldr	r3, [pc, #160]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1f0      	bne.n	8008908 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	69da      	ldr	r2, [r3, #28]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	019b      	lsls	r3, r3, #6
 8008936:	431a      	orrs	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893c:	085b      	lsrs	r3, r3, #1
 800893e:	3b01      	subs	r3, #1
 8008940:	041b      	lsls	r3, r3, #16
 8008942:	431a      	orrs	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	061b      	lsls	r3, r3, #24
 800894a:	4313      	orrs	r3, r2
 800894c:	4a1b      	ldr	r2, [pc, #108]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 800894e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008952:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008954:	4b19      	ldr	r3, [pc, #100]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a18      	ldr	r2, [pc, #96]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 800895a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800895e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008960:	f7fa fe7e 	bl	8003660 <HAL_GetTick>
 8008964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008966:	e008      	b.n	800897a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008968:	f7fa fe7a 	bl	8003660 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	2b02      	cmp	r3, #2
 8008974:	d901      	bls.n	800897a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e057      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800897a:	4b10      	ldr	r3, [pc, #64]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0f0      	beq.n	8008968 <HAL_RCC_OscConfig+0x478>
 8008986:	e04f      	b.n	8008a28 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008988:	4b0c      	ldr	r3, [pc, #48]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a0b      	ldr	r2, [pc, #44]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 800898e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008994:	f7fa fe64 	bl	8003660 <HAL_GetTick>
 8008998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800899a:	e008      	b.n	80089ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800899c:	f7fa fe60 	bl	8003660 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d901      	bls.n	80089ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e03d      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ae:	4b03      	ldr	r3, [pc, #12]	; (80089bc <HAL_RCC_OscConfig+0x4cc>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1f0      	bne.n	800899c <HAL_RCC_OscConfig+0x4ac>
 80089ba:	e035      	b.n	8008a28 <HAL_RCC_OscConfig+0x538>
 80089bc:	40023800 	.word	0x40023800
 80089c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80089c4:	4b1b      	ldr	r3, [pc, #108]	; (8008a34 <HAL_RCC_OscConfig+0x544>)
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d028      	beq.n	8008a24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089dc:	429a      	cmp	r2, r3
 80089de:	d121      	bne.n	8008a24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d11a      	bne.n	8008a24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80089f4:	4013      	ands	r3, r2
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d111      	bne.n	8008a24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0a:	085b      	lsrs	r3, r3, #1
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d107      	bne.n	8008a24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d001      	beq.n	8008a28 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e000      	b.n	8008a2a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	40023800 	.word	0x40023800

08008a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e0d0      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a50:	4b6a      	ldr	r3, [pc, #424]	; (8008bfc <HAL_RCC_ClockConfig+0x1c4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 030f 	and.w	r3, r3, #15
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d910      	bls.n	8008a80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a5e:	4b67      	ldr	r3, [pc, #412]	; (8008bfc <HAL_RCC_ClockConfig+0x1c4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f023 020f 	bic.w	r2, r3, #15
 8008a66:	4965      	ldr	r1, [pc, #404]	; (8008bfc <HAL_RCC_ClockConfig+0x1c4>)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a6e:	4b63      	ldr	r3, [pc, #396]	; (8008bfc <HAL_RCC_ClockConfig+0x1c4>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 030f 	and.w	r3, r3, #15
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d001      	beq.n	8008a80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e0b8      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0302 	and.w	r3, r3, #2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d020      	beq.n	8008ace <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d005      	beq.n	8008aa4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a98:	4b59      	ldr	r3, [pc, #356]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	4a58      	ldr	r2, [pc, #352]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008aa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0308 	and.w	r3, r3, #8
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d005      	beq.n	8008abc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ab0:	4b53      	ldr	r3, [pc, #332]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	4a52      	ldr	r2, [pc, #328]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008aba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008abc:	4b50      	ldr	r3, [pc, #320]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	494d      	ldr	r1, [pc, #308]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d040      	beq.n	8008b5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d107      	bne.n	8008af2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ae2:	4b47      	ldr	r3, [pc, #284]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d115      	bne.n	8008b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e07f      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d107      	bne.n	8008b0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008afa:	4b41      	ldr	r3, [pc, #260]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e073      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b0a:	4b3d      	ldr	r3, [pc, #244]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0302 	and.w	r3, r3, #2
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e06b      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b1a:	4b39      	ldr	r3, [pc, #228]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f023 0203 	bic.w	r2, r3, #3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	4936      	ldr	r1, [pc, #216]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b2c:	f7fa fd98 	bl	8003660 <HAL_GetTick>
 8008b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b32:	e00a      	b.n	8008b4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b34:	f7fa fd94 	bl	8003660 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e053      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b4a:	4b2d      	ldr	r3, [pc, #180]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 020c 	and.w	r2, r3, #12
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d1eb      	bne.n	8008b34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b5c:	4b27      	ldr	r3, [pc, #156]	; (8008bfc <HAL_RCC_ClockConfig+0x1c4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d210      	bcs.n	8008b8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b6a:	4b24      	ldr	r3, [pc, #144]	; (8008bfc <HAL_RCC_ClockConfig+0x1c4>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f023 020f 	bic.w	r2, r3, #15
 8008b72:	4922      	ldr	r1, [pc, #136]	; (8008bfc <HAL_RCC_ClockConfig+0x1c4>)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b7a:	4b20      	ldr	r3, [pc, #128]	; (8008bfc <HAL_RCC_ClockConfig+0x1c4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 030f 	and.w	r3, r3, #15
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d001      	beq.n	8008b8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e032      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d008      	beq.n	8008baa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b98:	4b19      	ldr	r3, [pc, #100]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	4916      	ldr	r1, [pc, #88]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0308 	and.w	r3, r3, #8
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d009      	beq.n	8008bca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008bb6:	4b12      	ldr	r3, [pc, #72]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	490e      	ldr	r1, [pc, #56]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008bca:	f000 f821 	bl	8008c10 <HAL_RCC_GetSysClockFreq>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	091b      	lsrs	r3, r3, #4
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	490a      	ldr	r1, [pc, #40]	; (8008c04 <HAL_RCC_ClockConfig+0x1cc>)
 8008bdc:	5ccb      	ldrb	r3, [r1, r3]
 8008bde:	fa22 f303 	lsr.w	r3, r2, r3
 8008be2:	4a09      	ldr	r2, [pc, #36]	; (8008c08 <HAL_RCC_ClockConfig+0x1d0>)
 8008be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008be6:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <HAL_RCC_ClockConfig+0x1d4>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fa f9e4 	bl	8002fb8 <HAL_InitTick>

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	40023c00 	.word	0x40023c00
 8008c00:	40023800 	.word	0x40023800
 8008c04:	08028120 	.word	0x08028120
 8008c08:	20000000 	.word	0x20000000
 8008c0c:	20000004 	.word	0x20000004

08008c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c14:	b090      	sub	sp, #64	; 0x40
 8008c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c20:	2300      	movs	r3, #0
 8008c22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c28:	4b59      	ldr	r3, [pc, #356]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	f003 030c 	and.w	r3, r3, #12
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d00d      	beq.n	8008c50 <HAL_RCC_GetSysClockFreq+0x40>
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	f200 80a1 	bhi.w	8008d7c <HAL_RCC_GetSysClockFreq+0x16c>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <HAL_RCC_GetSysClockFreq+0x34>
 8008c3e:	2b04      	cmp	r3, #4
 8008c40:	d003      	beq.n	8008c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8008c42:	e09b      	b.n	8008d7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c44:	4b53      	ldr	r3, [pc, #332]	; (8008d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8008c46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008c48:	e09b      	b.n	8008d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c4a:	4b53      	ldr	r3, [pc, #332]	; (8008d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8008c4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008c4e:	e098      	b.n	8008d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c50:	4b4f      	ldr	r3, [pc, #316]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c58:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008c5a:	4b4d      	ldr	r3, [pc, #308]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d028      	beq.n	8008cb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c66:	4b4a      	ldr	r3, [pc, #296]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	099b      	lsrs	r3, r3, #6
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	623b      	str	r3, [r7, #32]
 8008c70:	627a      	str	r2, [r7, #36]	; 0x24
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008c78:	2100      	movs	r1, #0
 8008c7a:	4b47      	ldr	r3, [pc, #284]	; (8008d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8008c7c:	fb03 f201 	mul.w	r2, r3, r1
 8008c80:	2300      	movs	r3, #0
 8008c82:	fb00 f303 	mul.w	r3, r0, r3
 8008c86:	4413      	add	r3, r2
 8008c88:	4a43      	ldr	r2, [pc, #268]	; (8008d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8008c8a:	fba0 1202 	umull	r1, r2, r0, r2
 8008c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c90:	460a      	mov	r2, r1
 8008c92:	62ba      	str	r2, [r7, #40]	; 0x28
 8008c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c96:	4413      	add	r3, r2
 8008c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	61bb      	str	r3, [r7, #24]
 8008ca0:	61fa      	str	r2, [r7, #28]
 8008ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ca6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008caa:	f7f7 fb09 	bl	80002c0 <__aeabi_uldivmod>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb6:	e053      	b.n	8008d60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cb8:	4b35      	ldr	r3, [pc, #212]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	099b      	lsrs	r3, r3, #6
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	617a      	str	r2, [r7, #20]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008cca:	f04f 0b00 	mov.w	fp, #0
 8008cce:	4652      	mov	r2, sl
 8008cd0:	465b      	mov	r3, fp
 8008cd2:	f04f 0000 	mov.w	r0, #0
 8008cd6:	f04f 0100 	mov.w	r1, #0
 8008cda:	0159      	lsls	r1, r3, #5
 8008cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ce0:	0150      	lsls	r0, r2, #5
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	ebb2 080a 	subs.w	r8, r2, sl
 8008cea:	eb63 090b 	sbc.w	r9, r3, fp
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008cfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008cfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008d02:	ebb2 0408 	subs.w	r4, r2, r8
 8008d06:	eb63 0509 	sbc.w	r5, r3, r9
 8008d0a:	f04f 0200 	mov.w	r2, #0
 8008d0e:	f04f 0300 	mov.w	r3, #0
 8008d12:	00eb      	lsls	r3, r5, #3
 8008d14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d18:	00e2      	lsls	r2, r4, #3
 8008d1a:	4614      	mov	r4, r2
 8008d1c:	461d      	mov	r5, r3
 8008d1e:	eb14 030a 	adds.w	r3, r4, sl
 8008d22:	603b      	str	r3, [r7, #0]
 8008d24:	eb45 030b 	adc.w	r3, r5, fp
 8008d28:	607b      	str	r3, [r7, #4]
 8008d2a:	f04f 0200 	mov.w	r2, #0
 8008d2e:	f04f 0300 	mov.w	r3, #0
 8008d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d36:	4629      	mov	r1, r5
 8008d38:	028b      	lsls	r3, r1, #10
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d40:	4621      	mov	r1, r4
 8008d42:	028a      	lsls	r2, r1, #10
 8008d44:	4610      	mov	r0, r2
 8008d46:	4619      	mov	r1, r3
 8008d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	60bb      	str	r3, [r7, #8]
 8008d4e:	60fa      	str	r2, [r7, #12]
 8008d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d54:	f7f7 fab4 	bl	80002c0 <__aeabi_uldivmod>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	0c1b      	lsrs	r3, r3, #16
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008d7a:	e002      	b.n	8008d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d7c:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8008d7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3740      	adds	r7, #64	; 0x40
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d8e:	bf00      	nop
 8008d90:	40023800 	.word	0x40023800
 8008d94:	00f42400 	.word	0x00f42400
 8008d98:	017d7840 	.word	0x017d7840

08008d9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008da0:	4b03      	ldr	r3, [pc, #12]	; (8008db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008da2:	681b      	ldr	r3, [r3, #0]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	20000000 	.word	0x20000000

08008db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008db8:	f7ff fff0 	bl	8008d9c <HAL_RCC_GetHCLKFreq>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	0a9b      	lsrs	r3, r3, #10
 8008dc4:	f003 0307 	and.w	r3, r3, #7
 8008dc8:	4903      	ldr	r1, [pc, #12]	; (8008dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008dca:	5ccb      	ldrb	r3, [r1, r3]
 8008dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	40023800 	.word	0x40023800
 8008dd8:	08028130 	.word	0x08028130

08008ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008de0:	f7ff ffdc 	bl	8008d9c <HAL_RCC_GetHCLKFreq>
 8008de4:	4602      	mov	r2, r0
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	0b5b      	lsrs	r3, r3, #13
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	4903      	ldr	r1, [pc, #12]	; (8008e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008df2:	5ccb      	ldrb	r3, [r1, r3]
 8008df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	08028130 	.word	0x08028130

08008e04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	220f      	movs	r2, #15
 8008e12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e14:	4b12      	ldr	r3, [pc, #72]	; (8008e60 <HAL_RCC_GetClockConfig+0x5c>)
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f003 0203 	and.w	r2, r3, #3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008e20:	4b0f      	ldr	r3, [pc, #60]	; (8008e60 <HAL_RCC_GetClockConfig+0x5c>)
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008e2c:	4b0c      	ldr	r3, [pc, #48]	; (8008e60 <HAL_RCC_GetClockConfig+0x5c>)
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008e38:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <HAL_RCC_GetClockConfig+0x5c>)
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	08db      	lsrs	r3, r3, #3
 8008e3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e46:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <HAL_RCC_GetClockConfig+0x60>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 020f 	and.w	r2, r3, #15
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	601a      	str	r2, [r3, #0]
}
 8008e52:	bf00      	nop
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	40023800 	.word	0x40023800
 8008e64:	40023c00 	.word	0x40023c00

08008e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d012      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008e90:	4b69      	ldr	r3, [pc, #420]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	4a68      	ldr	r2, [pc, #416]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008e9a:	6093      	str	r3, [r2, #8]
 8008e9c:	4b66      	ldr	r3, [pc, #408]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea4:	4964      	ldr	r1, [pc, #400]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d017      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ec2:	4b5d      	ldr	r3, [pc, #372]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed0:	4959      	ldr	r1, [pc, #356]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ee0:	d101      	bne.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d017      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008efe:	4b4e      	ldr	r3, [pc, #312]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0c:	494a      	ldr	r1, [pc, #296]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f1c:	d101      	bne.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 808b 	beq.w	8009062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f4c:	4b3a      	ldr	r3, [pc, #232]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f50:	4a39      	ldr	r2, [pc, #228]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f56:	6413      	str	r3, [r2, #64]	; 0x40
 8008f58:	4b37      	ldr	r3, [pc, #220]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f60:	60bb      	str	r3, [r7, #8]
 8008f62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008f64:	4b35      	ldr	r3, [pc, #212]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a34      	ldr	r2, [pc, #208]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f70:	f7fa fb76 	bl	8003660 <HAL_GetTick>
 8008f74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008f76:	e008      	b.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f78:	f7fa fb72 	bl	8003660 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	2b64      	cmp	r3, #100	; 0x64
 8008f84:	d901      	bls.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e357      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008f8a:	4b2c      	ldr	r3, [pc, #176]	; (800903c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0f0      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f96:	4b28      	ldr	r3, [pc, #160]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d035      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d02e      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008fb4:	4b20      	ldr	r3, [pc, #128]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fbc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008fbe:	4b1e      	ldr	r3, [pc, #120]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc2:	4a1d      	ldr	r2, [pc, #116]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fc8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008fca:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fce:	4a1a      	ldr	r2, [pc, #104]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008fd6:	4a18      	ldr	r2, [pc, #96]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008fdc:	4b16      	ldr	r3, [pc, #88]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d114      	bne.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe8:	f7fa fb3a 	bl	8003660 <HAL_GetTick>
 8008fec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fee:	e00a      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ff0:	f7fa fb36 	bl	8003660 <HAL_GetTick>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d901      	bls.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e319      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009006:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d0ee      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800901a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800901e:	d111      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009020:	4b05      	ldr	r3, [pc, #20]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800902c:	4b04      	ldr	r3, [pc, #16]	; (8009040 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800902e:	400b      	ands	r3, r1
 8009030:	4901      	ldr	r1, [pc, #4]	; (8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009032:	4313      	orrs	r3, r2
 8009034:	608b      	str	r3, [r1, #8]
 8009036:	e00b      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009038:	40023800 	.word	0x40023800
 800903c:	40007000 	.word	0x40007000
 8009040:	0ffffcff 	.word	0x0ffffcff
 8009044:	4baa      	ldr	r3, [pc, #680]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	4aa9      	ldr	r2, [pc, #676]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800904a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800904e:	6093      	str	r3, [r2, #8]
 8009050:	4ba7      	ldr	r3, [pc, #668]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009052:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800905c:	49a4      	ldr	r1, [pc, #656]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800905e:	4313      	orrs	r3, r2
 8009060:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0310 	and.w	r3, r3, #16
 800906a:	2b00      	cmp	r3, #0
 800906c:	d010      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800906e:	4ba0      	ldr	r3, [pc, #640]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009074:	4a9e      	ldr	r2, [pc, #632]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800907a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800907e:	4b9c      	ldr	r3, [pc, #624]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009080:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	4999      	ldr	r1, [pc, #612]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800908a:	4313      	orrs	r3, r2
 800908c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800909c:	4b94      	ldr	r3, [pc, #592]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800909e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090aa:	4991      	ldr	r1, [pc, #580]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80090be:	4b8c      	ldr	r3, [pc, #560]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090cc:	4988      	ldr	r1, [pc, #544]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80090e0:	4b83      	ldr	r3, [pc, #524]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ee:	4980      	ldr	r1, [pc, #512]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009102:	4b7b      	ldr	r3, [pc, #492]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009108:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009110:	4977      	ldr	r1, [pc, #476]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009112:	4313      	orrs	r3, r2
 8009114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00a      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009124:	4b72      	ldr	r3, [pc, #456]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800912a:	f023 0203 	bic.w	r2, r3, #3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009132:	496f      	ldr	r1, [pc, #444]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009134:	4313      	orrs	r3, r2
 8009136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009146:	4b6a      	ldr	r3, [pc, #424]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800914c:	f023 020c 	bic.w	r2, r3, #12
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009154:	4966      	ldr	r1, [pc, #408]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009156:	4313      	orrs	r3, r2
 8009158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00a      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009168:	4b61      	ldr	r3, [pc, #388]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800916a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800916e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009176:	495e      	ldr	r1, [pc, #376]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009178:	4313      	orrs	r3, r2
 800917a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00a      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800918a:	4b59      	ldr	r3, [pc, #356]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800918c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009190:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009198:	4955      	ldr	r1, [pc, #340]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800919a:	4313      	orrs	r3, r2
 800919c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00a      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80091ac:	4b50      	ldr	r3, [pc, #320]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ba:	494d      	ldr	r1, [pc, #308]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091bc:	4313      	orrs	r3, r2
 80091be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00a      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80091ce:	4b48      	ldr	r3, [pc, #288]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091dc:	4944      	ldr	r1, [pc, #272]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091de:	4313      	orrs	r3, r2
 80091e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00a      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80091f0:	4b3f      	ldr	r3, [pc, #252]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091fe:	493c      	ldr	r1, [pc, #240]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009200:	4313      	orrs	r3, r2
 8009202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00a      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009212:	4b37      	ldr	r3, [pc, #220]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009218:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009220:	4933      	ldr	r1, [pc, #204]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009222:	4313      	orrs	r3, r2
 8009224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00a      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009234:	4b2e      	ldr	r3, [pc, #184]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800923a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009242:	492b      	ldr	r1, [pc, #172]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009244:	4313      	orrs	r3, r2
 8009246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d011      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009256:	4b26      	ldr	r3, [pc, #152]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800925c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009264:	4922      	ldr	r1, [pc, #136]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009266:	4313      	orrs	r3, r2
 8009268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009274:	d101      	bne.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009276:	2301      	movs	r3, #1
 8009278:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0308 	and.w	r3, r3, #8
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009286:	2301      	movs	r3, #1
 8009288:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00a      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009296:	4b16      	ldr	r3, [pc, #88]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800929c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092a4:	4912      	ldr	r1, [pc, #72]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00b      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80092b8:	4b0d      	ldr	r3, [pc, #52]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092c8:	4909      	ldr	r1, [pc, #36]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d006      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 80d9 	beq.w	8009496 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80092e4:	4b02      	ldr	r3, [pc, #8]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a01      	ldr	r2, [pc, #4]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80092ee:	e001      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80092f0:	40023800 	.word	0x40023800
 80092f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092f6:	f7fa f9b3 	bl	8003660 <HAL_GetTick>
 80092fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80092fc:	e008      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80092fe:	f7fa f9af 	bl	8003660 <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	2b64      	cmp	r3, #100	; 0x64
 800930a:	d901      	bls.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e194      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009310:	4b6c      	ldr	r3, [pc, #432]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1f0      	bne.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d021      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932c:	2b00      	cmp	r3, #0
 800932e:	d11d      	bne.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009330:	4b64      	ldr	r3, [pc, #400]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009336:	0c1b      	lsrs	r3, r3, #16
 8009338:	f003 0303 	and.w	r3, r3, #3
 800933c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800933e:	4b61      	ldr	r3, [pc, #388]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009344:	0e1b      	lsrs	r3, r3, #24
 8009346:	f003 030f 	and.w	r3, r3, #15
 800934a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	019a      	lsls	r2, r3, #6
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	041b      	lsls	r3, r3, #16
 8009356:	431a      	orrs	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	061b      	lsls	r3, r3, #24
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	071b      	lsls	r3, r3, #28
 8009364:	4957      	ldr	r1, [pc, #348]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009366:	4313      	orrs	r3, r2
 8009368:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d004      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009380:	d00a      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800938a:	2b00      	cmp	r3, #0
 800938c:	d02e      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009396:	d129      	bne.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009398:	4b4a      	ldr	r3, [pc, #296]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800939a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800939e:	0c1b      	lsrs	r3, r3, #16
 80093a0:	f003 0303 	and.w	r3, r3, #3
 80093a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80093a6:	4b47      	ldr	r3, [pc, #284]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ac:	0f1b      	lsrs	r3, r3, #28
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	019a      	lsls	r2, r3, #6
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	041b      	lsls	r3, r3, #16
 80093be:	431a      	orrs	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	061b      	lsls	r3, r3, #24
 80093c6:	431a      	orrs	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	071b      	lsls	r3, r3, #28
 80093cc:	493d      	ldr	r1, [pc, #244]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093ce:	4313      	orrs	r3, r2
 80093d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80093d4:	4b3b      	ldr	r3, [pc, #236]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093da:	f023 021f 	bic.w	r2, r3, #31
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	3b01      	subs	r3, #1
 80093e4:	4937      	ldr	r1, [pc, #220]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01d      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80093f8:	4b32      	ldr	r3, [pc, #200]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093fe:	0e1b      	lsrs	r3, r3, #24
 8009400:	f003 030f 	and.w	r3, r3, #15
 8009404:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009406:	4b2f      	ldr	r3, [pc, #188]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800940c:	0f1b      	lsrs	r3, r3, #28
 800940e:	f003 0307 	and.w	r3, r3, #7
 8009412:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	019a      	lsls	r2, r3, #6
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	041b      	lsls	r3, r3, #16
 8009420:	431a      	orrs	r2, r3
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	061b      	lsls	r3, r3, #24
 8009426:	431a      	orrs	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	071b      	lsls	r3, r3, #28
 800942c:	4925      	ldr	r1, [pc, #148]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800942e:	4313      	orrs	r3, r2
 8009430:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d011      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	019a      	lsls	r2, r3, #6
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	041b      	lsls	r3, r3, #16
 800944c:	431a      	orrs	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	061b      	lsls	r3, r3, #24
 8009454:	431a      	orrs	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	071b      	lsls	r3, r3, #28
 800945c:	4919      	ldr	r1, [pc, #100]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800945e:	4313      	orrs	r3, r2
 8009460:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009464:	4b17      	ldr	r3, [pc, #92]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a16      	ldr	r2, [pc, #88]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800946a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800946e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009470:	f7fa f8f6 	bl	8003660 <HAL_GetTick>
 8009474:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009476:	e008      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009478:	f7fa f8f2 	bl	8003660 <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	2b64      	cmp	r3, #100	; 0x64
 8009484:	d901      	bls.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e0d7      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800948a:	4b0e      	ldr	r3, [pc, #56]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0f0      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b01      	cmp	r3, #1
 800949a:	f040 80cd 	bne.w	8009638 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800949e:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a08      	ldr	r2, [pc, #32]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094aa:	f7fa f8d9 	bl	8003660 <HAL_GetTick>
 80094ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80094b0:	e00a      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80094b2:	f7fa f8d5 	bl	8003660 <HAL_GetTick>
 80094b6:	4602      	mov	r2, r0
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	2b64      	cmp	r3, #100	; 0x64
 80094be:	d903      	bls.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e0ba      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80094c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80094c8:	4b5e      	ldr	r3, [pc, #376]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094d4:	d0ed      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x682>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d009      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d02e      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d12a      	bne.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80094fe:	4b51      	ldr	r3, [pc, #324]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009504:	0c1b      	lsrs	r3, r3, #16
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800950c:	4b4d      	ldr	r3, [pc, #308]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800950e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009512:	0f1b      	lsrs	r3, r3, #28
 8009514:	f003 0307 	and.w	r3, r3, #7
 8009518:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	019a      	lsls	r2, r3, #6
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	041b      	lsls	r3, r3, #16
 8009524:	431a      	orrs	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	061b      	lsls	r3, r3, #24
 800952c:	431a      	orrs	r2, r3
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	071b      	lsls	r3, r3, #28
 8009532:	4944      	ldr	r1, [pc, #272]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009534:	4313      	orrs	r3, r2
 8009536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800953a:	4b42      	ldr	r3, [pc, #264]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800953c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009540:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009548:	3b01      	subs	r3, #1
 800954a:	021b      	lsls	r3, r3, #8
 800954c:	493d      	ldr	r1, [pc, #244]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800954e:	4313      	orrs	r3, r2
 8009550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d022      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009568:	d11d      	bne.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800956a:	4b36      	ldr	r3, [pc, #216]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800956c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009570:	0e1b      	lsrs	r3, r3, #24
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009578:	4b32      	ldr	r3, [pc, #200]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800957a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800957e:	0f1b      	lsrs	r3, r3, #28
 8009580:	f003 0307 	and.w	r3, r3, #7
 8009584:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	019a      	lsls	r2, r3, #6
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	041b      	lsls	r3, r3, #16
 8009592:	431a      	orrs	r2, r3
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	061b      	lsls	r3, r3, #24
 8009598:	431a      	orrs	r2, r3
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	071b      	lsls	r3, r3, #28
 800959e:	4929      	ldr	r1, [pc, #164]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0308 	and.w	r3, r3, #8
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d028      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80095b2:	4b24      	ldr	r3, [pc, #144]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095b8:	0e1b      	lsrs	r3, r3, #24
 80095ba:	f003 030f 	and.w	r3, r3, #15
 80095be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80095c0:	4b20      	ldr	r3, [pc, #128]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095c6:	0c1b      	lsrs	r3, r3, #16
 80095c8:	f003 0303 	and.w	r3, r3, #3
 80095cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	019a      	lsls	r2, r3, #6
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	041b      	lsls	r3, r3, #16
 80095d8:	431a      	orrs	r2, r3
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	061b      	lsls	r3, r3, #24
 80095de:	431a      	orrs	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	071b      	lsls	r3, r3, #28
 80095e6:	4917      	ldr	r1, [pc, #92]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095e8:	4313      	orrs	r3, r2
 80095ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80095ee:	4b15      	ldr	r3, [pc, #84]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	4911      	ldr	r1, [pc, #68]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009604:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a0e      	ldr	r2, [pc, #56]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800960a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800960e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009610:	f7fa f826 	bl	8003660 <HAL_GetTick>
 8009614:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009616:	e008      	b.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009618:	f7fa f822 	bl	8003660 <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b64      	cmp	r3, #100	; 0x64
 8009624:	d901      	bls.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e007      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800962a:	4b06      	ldr	r3, [pc, #24]	; (8009644 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009636:	d1ef      	bne.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3720      	adds	r7, #32
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	40023800 	.word	0x40023800

08009648 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009648:	b480      	push	{r7}
 800964a:	b087      	sub	sp, #28
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009666:	f040 808d 	bne.w	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800966a:	4b93      	ldr	r3, [pc, #588]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800966c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009670:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009678:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009680:	d07c      	beq.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009688:	d87b      	bhi.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d004      	beq.n	800969a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009696:	d039      	beq.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009698:	e073      	b.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800969a:	4b87      	ldr	r3, [pc, #540]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d108      	bne.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80096a6:	4b84      	ldr	r3, [pc, #528]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096ae:	4a83      	ldr	r2, [pc, #524]	; (80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80096b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b4:	613b      	str	r3, [r7, #16]
 80096b6:	e007      	b.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80096b8:	4b7f      	ldr	r3, [pc, #508]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096c0:	4a7f      	ldr	r2, [pc, #508]	; (80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80096c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80096c8:	4b7b      	ldr	r3, [pc, #492]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80096ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ce:	0e1b      	lsrs	r3, r3, #24
 80096d0:	f003 030f 	and.w	r3, r3, #15
 80096d4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80096d6:	4b78      	ldr	r3, [pc, #480]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80096d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096dc:	099b      	lsrs	r3, r3, #6
 80096de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	fb03 f202 	mul.w	r2, r3, r2
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ee:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80096f0:	4b71      	ldr	r3, [pc, #452]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80096f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096f6:	0a1b      	lsrs	r3, r3, #8
 80096f8:	f003 031f 	and.w	r3, r3, #31
 80096fc:	3301      	adds	r3, #1
 80096fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	fbb2 f3f3 	udiv	r3, r2, r3
 8009708:	617b      	str	r3, [r7, #20]
        break;
 800970a:	e03b      	b.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800970c:	4b6a      	ldr	r3, [pc, #424]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d108      	bne.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009718:	4b67      	ldr	r3, [pc, #412]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009720:	4a66      	ldr	r2, [pc, #408]	; (80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009722:	fbb2 f3f3 	udiv	r3, r2, r3
 8009726:	613b      	str	r3, [r7, #16]
 8009728:	e007      	b.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800972a:	4b63      	ldr	r3, [pc, #396]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009732:	4a63      	ldr	r2, [pc, #396]	; (80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009734:	fbb2 f3f3 	udiv	r3, r2, r3
 8009738:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800973a:	4b5f      	ldr	r3, [pc, #380]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800973c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009740:	0e1b      	lsrs	r3, r3, #24
 8009742:	f003 030f 	and.w	r3, r3, #15
 8009746:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009748:	4b5b      	ldr	r3, [pc, #364]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800974a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800974e:	099b      	lsrs	r3, r3, #6
 8009750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	fb03 f202 	mul.w	r2, r3, r2
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009760:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009762:	4b55      	ldr	r3, [pc, #340]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009768:	f003 031f 	and.w	r3, r3, #31
 800976c:	3301      	adds	r3, #1
 800976e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	fbb2 f3f3 	udiv	r3, r2, r3
 8009778:	617b      	str	r3, [r7, #20]
        break;
 800977a:	e003      	b.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800977c:	4b51      	ldr	r3, [pc, #324]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800977e:	617b      	str	r3, [r7, #20]
        break;
 8009780:	e000      	b.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8009782:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800978a:	f040 808d 	bne.w	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800978e:	4b4a      	ldr	r3, [pc, #296]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009794:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800979c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097a4:	d07c      	beq.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097ac:	d87b      	bhi.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d004      	beq.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097ba:	d039      	beq.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80097bc:	e073      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80097be:	4b3e      	ldr	r3, [pc, #248]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d108      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80097ca:	4b3b      	ldr	r3, [pc, #236]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097d2:	4a3a      	ldr	r2, [pc, #232]	; (80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80097d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	e007      	b.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80097dc:	4b36      	ldr	r3, [pc, #216]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097e4:	4a36      	ldr	r2, [pc, #216]	; (80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ea:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80097ec:	4b32      	ldr	r3, [pc, #200]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80097ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f2:	0e1b      	lsrs	r3, r3, #24
 80097f4:	f003 030f 	and.w	r3, r3, #15
 80097f8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80097fa:	4b2f      	ldr	r3, [pc, #188]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80097fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009800:	099b      	lsrs	r3, r3, #6
 8009802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	fb03 f202 	mul.w	r2, r3, r2
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009812:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009814:	4b28      	ldr	r3, [pc, #160]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800981a:	0a1b      	lsrs	r3, r3, #8
 800981c:	f003 031f 	and.w	r3, r3, #31
 8009820:	3301      	adds	r3, #1
 8009822:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	fbb2 f3f3 	udiv	r3, r2, r3
 800982c:	617b      	str	r3, [r7, #20]
        break;
 800982e:	e03b      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009830:	4b21      	ldr	r3, [pc, #132]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d108      	bne.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800983c:	4b1e      	ldr	r3, [pc, #120]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009844:	4a1d      	ldr	r2, [pc, #116]	; (80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009846:	fbb2 f3f3 	udiv	r3, r2, r3
 800984a:	613b      	str	r3, [r7, #16]
 800984c:	e007      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800984e:	4b1a      	ldr	r3, [pc, #104]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009856:	4a1a      	ldr	r2, [pc, #104]	; (80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009858:	fbb2 f3f3 	udiv	r3, r2, r3
 800985c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800985e:	4b16      	ldr	r3, [pc, #88]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009864:	0e1b      	lsrs	r3, r3, #24
 8009866:	f003 030f 	and.w	r3, r3, #15
 800986a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800986c:	4b12      	ldr	r3, [pc, #72]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800986e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009872:	099b      	lsrs	r3, r3, #6
 8009874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	fb03 f202 	mul.w	r2, r3, r2
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	fbb2 f3f3 	udiv	r3, r2, r3
 8009884:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009886:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800988c:	f003 031f 	and.w	r3, r3, #31
 8009890:	3301      	adds	r3, #1
 8009892:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	fbb2 f3f3 	udiv	r3, r2, r3
 800989c:	617b      	str	r3, [r7, #20]
        break;
 800989e:	e003      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 80098a0:	4b08      	ldr	r3, [pc, #32]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80098a2:	617b      	str	r3, [r7, #20]
        break;
 80098a4:	e000      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 80098a6:	bf00      	nop
      }
    }
  }

  return frequency;
 80098a8:	697b      	ldr	r3, [r7, #20]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	40023800 	.word	0x40023800
 80098bc:	00f42400 	.word	0x00f42400
 80098c0:	017d7840 	.word	0x017d7840
 80098c4:	00bb8000 	.word	0x00bb8000

080098c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e071      	b.n	80099c2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	7f5b      	ldrb	r3, [r3, #29]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d105      	bne.n	80098f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7f8 fedc 	bl	80026ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2202      	movs	r2, #2
 80098f8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f003 0310 	and.w	r3, r3, #16
 8009904:	2b10      	cmp	r3, #16
 8009906:	d053      	beq.n	80099b0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	22ca      	movs	r2, #202	; 0xca
 800990e:	625a      	str	r2, [r3, #36]	; 0x24
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2253      	movs	r2, #83	; 0x53
 8009916:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fac9 	bl	8009eb0 <RTC_EnterInitMode>
 800991e:	4603      	mov	r3, r0
 8009920:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d12a      	bne.n	800997e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6899      	ldr	r1, [r3, #8]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	4b26      	ldr	r3, [pc, #152]	; (80099cc <HAL_RTC_Init+0x104>)
 8009934:	400b      	ands	r3, r1
 8009936:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6899      	ldr	r1, [r3, #8]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	431a      	orrs	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	695b      	ldr	r3, [r3, #20]
 800994c:	431a      	orrs	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	430a      	orrs	r2, r1
 8009954:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	68d2      	ldr	r2, [r2, #12]
 800995e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6919      	ldr	r1, [r3, #16]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	041a      	lsls	r2, r3, #16
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	430a      	orrs	r2, r1
 8009972:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fad2 	bl	8009f1e <RTC_ExitInitMode>
 800997a:	4603      	mov	r3, r0
 800997c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d110      	bne.n	80099a6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f022 0208 	bic.w	r2, r2, #8
 8009992:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	699a      	ldr	r2, [r3, #24]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	430a      	orrs	r2, r1
 80099a4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	22ff      	movs	r2, #255	; 0xff
 80099ac:	625a      	str	r2, [r3, #36]	; 0x24
 80099ae:	e001      	b.n	80099b4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d102      	bne.n	80099c0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	ff8fffbf 	.word	0xff8fffbf

080099d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80099d0:	b590      	push	{r4, r7, lr}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80099dc:	2300      	movs	r3, #0
 80099de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	7f1b      	ldrb	r3, [r3, #28]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d101      	bne.n	80099ec <HAL_RTC_SetTime+0x1c>
 80099e8:	2302      	movs	r3, #2
 80099ea:	e085      	b.n	8009af8 <HAL_RTC_SetTime+0x128>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2201      	movs	r2, #1
 80099f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2202      	movs	r2, #2
 80099f6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d126      	bne.n	8009a4c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d102      	bne.n	8009a12 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 faa6 	bl	8009f68 <RTC_ByteToBcd2>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	785b      	ldrb	r3, [r3, #1]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 fa9f 	bl	8009f68 <RTC_ByteToBcd2>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009a2e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	789b      	ldrb	r3, [r3, #2]
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 fa97 	bl	8009f68 <RTC_ByteToBcd2>
 8009a3a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009a3c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	78db      	ldrb	r3, [r3, #3]
 8009a44:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009a46:	4313      	orrs	r3, r2
 8009a48:	617b      	str	r3, [r7, #20]
 8009a4a:	e018      	b.n	8009a7e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d102      	bne.n	8009a60 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	785b      	ldrb	r3, [r3, #1]
 8009a6a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009a6c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009a72:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	78db      	ldrb	r3, [r3, #3]
 8009a78:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	22ca      	movs	r2, #202	; 0xca
 8009a84:	625a      	str	r2, [r3, #36]	; 0x24
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2253      	movs	r2, #83	; 0x53
 8009a8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 fa0e 	bl	8009eb0 <RTC_EnterInitMode>
 8009a94:	4603      	mov	r3, r0
 8009a96:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009a98:	7cfb      	ldrb	r3, [r7, #19]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d11e      	bne.n	8009adc <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	6979      	ldr	r1, [r7, #20]
 8009aa4:	4b16      	ldr	r3, [pc, #88]	; (8009b00 <HAL_RTC_SetTime+0x130>)
 8009aa6:	400b      	ands	r3, r1
 8009aa8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689a      	ldr	r2, [r3, #8]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009ab8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6899      	ldr	r1, [r3, #8]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	431a      	orrs	r2, r3
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 fa23 	bl	8009f1e <RTC_ExitInitMode>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009adc:	7cfb      	ldrb	r3, [r7, #19]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	22ff      	movs	r2, #255	; 0xff
 8009aee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	771a      	strb	r2, [r3, #28]

  return status;
 8009af6:	7cfb      	ldrb	r3, [r7, #19]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	371c      	adds	r7, #28
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd90      	pop	{r4, r7, pc}
 8009b00:	007f7f7f 	.word	0x007f7f7f

08009b04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b04:	b590      	push	{r4, r7, lr}
 8009b06:	b087      	sub	sp, #28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	7f1b      	ldrb	r3, [r3, #28]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d101      	bne.n	8009b20 <HAL_RTC_SetDate+0x1c>
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e06f      	b.n	8009c00 <HAL_RTC_SetDate+0xfc>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2201      	movs	r2, #1
 8009b24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2202      	movs	r2, #2
 8009b2a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10e      	bne.n	8009b50 <HAL_RTC_SetDate+0x4c>
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	785b      	ldrb	r3, [r3, #1]
 8009b36:	f003 0310 	and.w	r3, r3, #16
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d008      	beq.n	8009b50 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	785b      	ldrb	r3, [r3, #1]
 8009b42:	f023 0310 	bic.w	r3, r3, #16
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	330a      	adds	r3, #10
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d11c      	bne.n	8009b90 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	78db      	ldrb	r3, [r3, #3]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 fa04 	bl	8009f68 <RTC_ByteToBcd2>
 8009b60:	4603      	mov	r3, r0
 8009b62:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	785b      	ldrb	r3, [r3, #1]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f000 f9fd 	bl	8009f68 <RTC_ByteToBcd2>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009b72:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	789b      	ldrb	r3, [r3, #2]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 f9f5 	bl	8009f68 <RTC_ByteToBcd2>
 8009b7e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009b80:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	617b      	str	r3, [r7, #20]
 8009b8e:	e00e      	b.n	8009bae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	78db      	ldrb	r3, [r3, #3]
 8009b94:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	785b      	ldrb	r3, [r3, #1]
 8009b9a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b9c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ba2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009baa:	4313      	orrs	r3, r2
 8009bac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	22ca      	movs	r2, #202	; 0xca
 8009bb4:	625a      	str	r2, [r3, #36]	; 0x24
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2253      	movs	r2, #83	; 0x53
 8009bbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 f976 	bl	8009eb0 <RTC_EnterInitMode>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009bc8:	7cfb      	ldrb	r3, [r7, #19]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10a      	bne.n	8009be4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	6979      	ldr	r1, [r7, #20]
 8009bd4:	4b0c      	ldr	r3, [pc, #48]	; (8009c08 <HAL_RTC_SetDate+0x104>)
 8009bd6:	400b      	ands	r3, r1
 8009bd8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 f99f 	bl	8009f1e <RTC_ExitInitMode>
 8009be0:	4603      	mov	r3, r0
 8009be2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009be4:	7cfb      	ldrb	r3, [r7, #19]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d102      	bne.n	8009bf0 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2201      	movs	r2, #1
 8009bee:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	22ff      	movs	r2, #255	; 0xff
 8009bf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	771a      	strb	r2, [r3, #28]

  return status;
 8009bfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd90      	pop	{r4, r7, pc}
 8009c08:	00ffff3f 	.word	0x00ffff3f

08009c0c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009c0c:	b590      	push	{r4, r7, lr}
 8009c0e:	b089      	sub	sp, #36	; 0x24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009c20:	2300      	movs	r3, #0
 8009c22:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	7f1b      	ldrb	r3, [r3, #28]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d101      	bne.n	8009c30 <HAL_RTC_SetAlarm+0x24>
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	e113      	b.n	8009e58 <HAL_RTC_SetAlarm+0x24c>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2201      	movs	r2, #1
 8009c34:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2202      	movs	r2, #2
 8009c3a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d137      	bne.n	8009cb2 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	2200      	movs	r2, #0
 8009c54:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f000 f984 	bl	8009f68 <RTC_ByteToBcd2>
 8009c60:	4603      	mov	r3, r0
 8009c62:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	785b      	ldrb	r3, [r3, #1]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 f97d 	bl	8009f68 <RTC_ByteToBcd2>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c72:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	789b      	ldrb	r3, [r3, #2]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 f975 	bl	8009f68 <RTC_ByteToBcd2>
 8009c7e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c80:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	78db      	ldrb	r3, [r3, #3]
 8009c88:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c8a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 f967 	bl	8009f68 <RTC_ByteToBcd2>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009c9e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009ca6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009cac:	4313      	orrs	r3, r2
 8009cae:	61fb      	str	r3, [r7, #28]
 8009cb0:	e023      	b.n	8009cfa <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d102      	bne.n	8009cc6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	785b      	ldrb	r3, [r3, #1]
 8009cd0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cd2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009cd8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	78db      	ldrb	r3, [r3, #3]
 8009cde:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009ce0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ce8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009cea:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009cf0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009d02:	4313      	orrs	r3, r2
 8009d04:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	22ca      	movs	r2, #202	; 0xca
 8009d0c:	625a      	str	r2, [r3, #36]	; 0x24
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2253      	movs	r2, #83	; 0x53
 8009d14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d1e:	d148      	bne.n	8009db2 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689a      	ldr	r2, [r3, #8]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d2e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689a      	ldr	r2, [r3, #8]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d3e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009d50:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d52:	f7f9 fc85 	bl	8003660 <HAL_GetTick>
 8009d56:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009d58:	e013      	b.n	8009d82 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009d5a:	f7f9 fc81 	bl	8003660 <HAL_GetTick>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d68:	d90b      	bls.n	8009d82 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	22ff      	movs	r2, #255	; 0xff
 8009d70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2203      	movs	r2, #3
 8009d76:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e06a      	b.n	8009e58 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0e4      	beq.n	8009d5a <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	69fa      	ldr	r2, [r7, #28]
 8009d96:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	689a      	ldr	r2, [r3, #8]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dae:	609a      	str	r2, [r3, #8]
 8009db0:	e047      	b.n	8009e42 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689a      	ldr	r2, [r3, #8]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009dc0:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689a      	ldr	r2, [r3, #8]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dd0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009de2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009de4:	f7f9 fc3c 	bl	8003660 <HAL_GetTick>
 8009de8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009dea:	e013      	b.n	8009e14 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009dec:	f7f9 fc38 	bl	8003660 <HAL_GetTick>
 8009df0:	4602      	mov	r2, r0
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dfa:	d90b      	bls.n	8009e14 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	22ff      	movs	r2, #255	; 0xff
 8009e02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2203      	movs	r2, #3
 8009e08:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e021      	b.n	8009e58 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	f003 0302 	and.w	r3, r3, #2
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0e4      	beq.n	8009dec <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	69fa      	ldr	r2, [r7, #28]
 8009e28:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	689a      	ldr	r2, [r3, #8]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e40:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	22ff      	movs	r2, #255	; 0xff
 8009e48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3724      	adds	r7, #36	; 0x24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd90      	pop	{r4, r7, pc}

08009e60 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68da      	ldr	r2, [r3, #12]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009e7a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e7c:	f7f9 fbf0 	bl	8003660 <HAL_GetTick>
 8009e80:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e82:	e009      	b.n	8009e98 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e84:	f7f9 fbec 	bl	8003660 <HAL_GetTick>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e92:	d901      	bls.n	8009e98 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e007      	b.n	8009ea8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	f003 0320 	and.w	r3, r3, #32
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0ee      	beq.n	8009e84 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d122      	bne.n	8009f14 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68da      	ldr	r2, [r3, #12]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009edc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ede:	f7f9 fbbf 	bl	8003660 <HAL_GetTick>
 8009ee2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009ee4:	e00c      	b.n	8009f00 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009ee6:	f7f9 fbbb 	bl	8003660 <HAL_GetTick>
 8009eea:	4602      	mov	r2, r0
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ef4:	d904      	bls.n	8009f00 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2204      	movs	r2, #4
 8009efa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d102      	bne.n	8009f14 <RTC_EnterInitMode+0x64>
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d1e8      	bne.n	8009ee6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68da      	ldr	r2, [r3, #12]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f38:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f003 0320 	and.w	r3, r3, #32
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10a      	bne.n	8009f5e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff ff89 	bl	8009e60 <HAL_RTC_WaitForSynchro>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d004      	beq.n	8009f5e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2204      	movs	r2, #4
 8009f58:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009f76:	e005      	b.n	8009f84 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	3b0a      	subs	r3, #10
 8009f82:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009f84:	79fb      	ldrb	r3, [r7, #7]
 8009f86:	2b09      	cmp	r3, #9
 8009f88:	d8f6      	bhi.n	8009f78 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	b2db      	uxtb	r3, r3
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b087      	sub	sp, #28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	7f1b      	ldrb	r3, [r3, #28]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d101      	bne.n	8009fc0 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	e050      	b.n	800a062 <HAL_RTCEx_SetTimeStamp+0xbe>
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2202      	movs	r2, #2
 8009fca:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f022 0206 	bic.w	r2, r2, #6
 8009fda:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	430a      	orrs	r2, r1
 8009fea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689a      	ldr	r2, [r3, #8]
 8009ff2:	4b1f      	ldr	r3, [pc, #124]	; (800a070 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	22ca      	movs	r2, #202	; 0xca
 800a006:	625a      	str	r2, [r3, #36]	; 0x24
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2253      	movs	r2, #83	; 0x53
 800a00e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f462 6208 	orn	r2, r2, #2176	; 0x880
 800a028:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	b2da      	uxtb	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800a03a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	689a      	ldr	r2, [r3, #8]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a04a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	22ff      	movs	r2, #255	; 0xff
 800a052:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2201      	movs	r2, #1
 800a058:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	371c      	adds	r7, #28
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	fffff7f7 	.word	0xfffff7f7

0800a074 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b088      	sub	sp, #32
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e156      	b.n	800a340 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d106      	bne.n	800a0ac <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7f8 ff1c 	bl	8002ee4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2202      	movs	r2, #2
 800a0b0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f95b 	bl	800a370 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d00c      	beq.n	800a0dc <HAL_SAI_Init+0x68>
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d80d      	bhi.n	800a0e2 <HAL_SAI_Init+0x6e>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <HAL_SAI_Init+0x5c>
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d003      	beq.n	800a0d6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a0ce:	e008      	b.n	800a0e2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61fb      	str	r3, [r7, #28]
      break;
 800a0d4:	e006      	b.n	800a0e4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a0d6:	2310      	movs	r3, #16
 800a0d8:	61fb      	str	r3, [r7, #28]
      break;
 800a0da:	e003      	b.n	800a0e4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a0dc:	2320      	movs	r3, #32
 800a0de:	61fb      	str	r3, [r7, #28]
      break;
 800a0e0:	e000      	b.n	800a0e4 <HAL_SAI_Init+0x70>
      break;
 800a0e2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d81e      	bhi.n	800a12a <HAL_SAI_Init+0xb6>
 800a0ec:	a201      	add	r2, pc, #4	; (adr r2, 800a0f4 <HAL_SAI_Init+0x80>)
 800a0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f2:	bf00      	nop
 800a0f4:	0800a105 	.word	0x0800a105
 800a0f8:	0800a10b 	.word	0x0800a10b
 800a0fc:	0800a113 	.word	0x0800a113
 800a100:	0800a11b 	.word	0x0800a11b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	617b      	str	r3, [r7, #20]
    }
    break;
 800a108:	e010      	b.n	800a12c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a10a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a10e:	617b      	str	r3, [r7, #20]
    }
    break;
 800a110:	e00c      	b.n	800a12c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a116:	617b      	str	r3, [r7, #20]
    }
    break;
 800a118:	e008      	b.n	800a12c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a11a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a11e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	f043 0301 	orr.w	r3, r3, #1
 800a126:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a128:	e000      	b.n	800a12c <HAL_SAI_Init+0xb8>
    default:
      break;
 800a12a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a85      	ldr	r2, [pc, #532]	; (800a348 <HAL_SAI_Init+0x2d4>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d004      	beq.n	800a140 <HAL_SAI_Init+0xcc>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a84      	ldr	r2, [pc, #528]	; (800a34c <HAL_SAI_Init+0x2d8>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d103      	bne.n	800a148 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800a140:	4a83      	ldr	r2, [pc, #524]	; (800a350 <HAL_SAI_Init+0x2dc>)
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	e002      	b.n	800a14e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a148:	4a82      	ldr	r2, [pc, #520]	; (800a354 <HAL_SAI_Init+0x2e0>)
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	69db      	ldr	r3, [r3, #28]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d04c      	beq.n	800a1f0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800a156:	2300      	movs	r3, #0
 800a158:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a7a      	ldr	r2, [pc, #488]	; (800a348 <HAL_SAI_Init+0x2d4>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d004      	beq.n	800a16e <HAL_SAI_Init+0xfa>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a78      	ldr	r2, [pc, #480]	; (800a34c <HAL_SAI_Init+0x2d8>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d104      	bne.n	800a178 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a16e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a172:	f7ff fa69 	bl	8009648 <HAL_RCCEx_GetPeriphCLKFreq>
 800a176:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a76      	ldr	r2, [pc, #472]	; (800a358 <HAL_SAI_Init+0x2e4>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d004      	beq.n	800a18c <HAL_SAI_Init+0x118>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a75      	ldr	r2, [pc, #468]	; (800a35c <HAL_SAI_Init+0x2e8>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d104      	bne.n	800a196 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a18c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a190:	f7ff fa5a 	bl	8009648 <HAL_RCCEx_GetPeriphCLKFreq>
 800a194:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	4613      	mov	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	005b      	lsls	r3, r3, #1
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	025b      	lsls	r3, r3, #9
 800a1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ac:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	4a6b      	ldr	r2, [pc, #428]	; (800a360 <HAL_SAI_Init+0x2ec>)
 800a1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b6:	08da      	lsrs	r2, r3, #3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a1bc:	68f9      	ldr	r1, [r7, #12]
 800a1be:	4b68      	ldr	r3, [pc, #416]	; (800a360 <HAL_SAI_Init+0x2ec>)
 800a1c0:	fba3 2301 	umull	r2, r3, r3, r1
 800a1c4:	08da      	lsrs	r2, r3, #3
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	1aca      	subs	r2, r1, r3
 800a1d0:	2a08      	cmp	r2, #8
 800a1d2:	d904      	bls.n	800a1de <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	1c5a      	adds	r2, r3, #1
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e2:	2b04      	cmp	r3, #4
 800a1e4:	d104      	bne.n	800a1f0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	085a      	lsrs	r2, r3, #1
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d003      	beq.n	800a200 <HAL_SAI_Init+0x18c>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d109      	bne.n	800a214 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a204:	2b01      	cmp	r3, #1
 800a206:	d101      	bne.n	800a20c <HAL_SAI_Init+0x198>
 800a208:	2300      	movs	r3, #0
 800a20a:	e001      	b.n	800a210 <HAL_SAI_Init+0x19c>
 800a20c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a210:	61bb      	str	r3, [r7, #24]
 800a212:	e008      	b.n	800a226 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d102      	bne.n	800a222 <HAL_SAI_Init+0x1ae>
 800a21c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a220:	e000      	b.n	800a224 <HAL_SAI_Init+0x1b0>
 800a222:	2300      	movs	r3, #0
 800a224:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	6819      	ldr	r1, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	4b4c      	ldr	r3, [pc, #304]	; (800a364 <HAL_SAI_Init+0x2f0>)
 800a232:	400b      	ands	r3, r1
 800a234:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6819      	ldr	r1, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a244:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a24a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a250:	431a      	orrs	r2, r3
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800a25e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a26a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	051b      	lsls	r3, r3, #20
 800a272:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6859      	ldr	r1, [r3, #4]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	4b38      	ldr	r3, [pc, #224]	; (800a368 <HAL_SAI_Init+0x2f4>)
 800a288:	400b      	ands	r3, r1
 800a28a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6859      	ldr	r1, [r3, #4]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	699a      	ldr	r2, [r3, #24]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29a:	431a      	orrs	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a0:	431a      	orrs	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6899      	ldr	r1, [r3, #8]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	4b2d      	ldr	r3, [pc, #180]	; (800a36c <HAL_SAI_Init+0x2f8>)
 800a2b6:	400b      	ands	r3, r1
 800a2b8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6899      	ldr	r1, [r3, #8]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a2ca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a2d0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a2d6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a2e0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	430a      	orrs	r2, r1
 800a2e8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68d9      	ldr	r1, [r3, #12]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a2f8:	400b      	ands	r3, r1
 800a2fa:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68d9      	ldr	r1, [r3, #12]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a30a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a310:	041b      	lsls	r3, r3, #16
 800a312:	431a      	orrs	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a318:	3b01      	subs	r3, #1
 800a31a:	021b      	lsls	r3, r3, #8
 800a31c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3720      	adds	r7, #32
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	40015804 	.word	0x40015804
 800a34c:	40015824 	.word	0x40015824
 800a350:	40015800 	.word	0x40015800
 800a354:	40015c00 	.word	0x40015c00
 800a358:	40015c04 	.word	0x40015c04
 800a35c:	40015c24 	.word	0x40015c24
 800a360:	cccccccd 	.word	0xcccccccd
 800a364:	ff05c010 	.word	0xff05c010
 800a368:	ffff1ff0 	.word	0xffff1ff0
 800a36c:	fff88000 	.word	0xfff88000

0800a370 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a378:	4b17      	ldr	r3, [pc, #92]	; (800a3d8 <SAI_Disable+0x68>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a17      	ldr	r2, [pc, #92]	; (800a3dc <SAI_Disable+0x6c>)
 800a37e:	fba2 2303 	umull	r2, r3, r2, r3
 800a382:	0b1b      	lsrs	r3, r3, #12
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a39a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	1e5a      	subs	r2, r3, #1
 800a3a0:	60fa      	str	r2, [r7, #12]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10a      	bne.n	800a3bc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	72fb      	strb	r3, [r7, #11]
      break;
 800a3ba:	e006      	b.n	800a3ca <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1e8      	bne.n	800a39c <SAI_Disable+0x2c>

  return status;
 800a3ca:	7afb      	ldrb	r3, [r7, #11]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	20000000 	.word	0x20000000
 800a3dc:	95cbec1b 	.word	0x95cbec1b

0800a3e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e022      	b.n	800a438 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d105      	bne.n	800a40a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7f8 f97f 	bl	8002708 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2203      	movs	r2, #3
 800a40e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f814 	bl	800a440 <HAL_SD_InitCard>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d001      	beq.n	800a422 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e00a      	b.n	800a438 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2201      	movs	r2, #1
 800a432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a440:	b5b0      	push	{r4, r5, r7, lr}
 800a442:	b08e      	sub	sp, #56	; 0x38
 800a444:	af04      	add	r7, sp, #16
 800a446:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a448:	2300      	movs	r3, #0
 800a44a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a450:	2300      	movs	r3, #0
 800a452:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a454:	2300      	movs	r3, #0
 800a456:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a458:	2300      	movs	r3, #0
 800a45a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a45c:	2376      	movs	r3, #118	; 0x76
 800a45e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681d      	ldr	r5, [r3, #0]
 800a464:	466c      	mov	r4, sp
 800a466:	f107 0314 	add.w	r3, r7, #20
 800a46a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a46e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a472:	f107 0308 	add.w	r3, r7, #8
 800a476:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a478:	4628      	mov	r0, r5
 800a47a:	f003 fe3d 	bl	800e0f8 <SDMMC_Init>
 800a47e:	4603      	mov	r3, r0
 800a480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e059      	b.n	800a544 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	685a      	ldr	r2, [r3, #4]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a49e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f003 fe60 	bl	800e16a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4b8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a4ba:	2002      	movs	r0, #2
 800a4bc:	f7f9 f8dc 	bl	8003678 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fe0f 	bl	800b0e4 <SD_PowerON>
 800a4c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00b      	beq.n	800a4e6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4da:	6a3b      	ldr	r3, [r7, #32]
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e02e      	b.n	800a544 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fd2e 	bl	800af48 <SD_InitCard>
 800a4ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00b      	beq.n	800a50c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	431a      	orrs	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	e01b      	b.n	800a544 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a514:	4618      	mov	r0, r3
 800a516:	f003 febb 	bl	800e290 <SDMMC_CmdBlockLength>
 800a51a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a51c:	6a3b      	ldr	r3, [r7, #32]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00f      	beq.n	800a542 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a09      	ldr	r2, [pc, #36]	; (800a54c <HAL_SD_InitCard+0x10c>)
 800a528:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a52e:	6a3b      	ldr	r3, [r7, #32]
 800a530:	431a      	orrs	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e000      	b.n	800a544 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3728      	adds	r7, #40	; 0x28
 800a548:	46bd      	mov	sp, r7
 800a54a:	bdb0      	pop	{r4, r5, r7, pc}
 800a54c:	004005ff 	.word	0x004005ff

0800a550 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b08c      	sub	sp, #48	; 0x30
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d107      	bne.n	800a578 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e0c3      	b.n	800a700 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b01      	cmp	r3, #1
 800a582:	f040 80bc 	bne.w	800a6fe <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a58c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	441a      	add	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a596:	429a      	cmp	r2, r3
 800a598:	d907      	bls.n	800a5aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e0aa      	b.n	800a700 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2203      	movs	r2, #3
 800a5ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a5c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	4a4e      	ldr	r2, [pc, #312]	; (800a708 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a5d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d6:	4a4d      	ldr	r2, [pc, #308]	; (800a70c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a5d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5de:	2200      	movs	r2, #0
 800a5e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fa:	689a      	ldr	r2, [r3, #8]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	3380      	adds	r3, #128	; 0x80
 800a610:	4619      	mov	r1, r3
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	025b      	lsls	r3, r3, #9
 800a618:	089b      	lsrs	r3, r3, #2
 800a61a:	f7f9 fd37 	bl	800408c <HAL_DMA_Start_IT>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d017      	beq.n	800a654 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a632:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a35      	ldr	r2, [pc, #212]	; (800a710 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a63a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a640:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e055      	b.n	800a700 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f042 0208 	orr.w	r2, r2, #8
 800a662:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d002      	beq.n	800a672 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	025b      	lsls	r3, r3, #9
 800a670:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a676:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	025b      	lsls	r3, r3, #9
 800a67c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a67e:	2390      	movs	r3, #144	; 0x90
 800a680:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a682:	2302      	movs	r3, #2
 800a684:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a686:	2300      	movs	r3, #0
 800a688:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a68a:	2301      	movs	r3, #1
 800a68c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f107 0210 	add.w	r2, r7, #16
 800a696:	4611      	mov	r1, r2
 800a698:	4618      	mov	r0, r3
 800a69a:	f003 fdcd 	bl	800e238 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d90a      	bls.n	800a6ba <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2282      	movs	r2, #130	; 0x82
 800a6a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f003 fe31 	bl	800e318 <SDMMC_CmdReadMultiBlock>
 800a6b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a6b8:	e009      	b.n	800a6ce <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2281      	movs	r2, #129	; 0x81
 800a6be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f003 fe04 	bl	800e2d4 <SDMMC_CmdReadSingleBlock>
 800a6cc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d012      	beq.n	800a6fa <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a0d      	ldr	r2, [pc, #52]	; (800a710 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a6da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e002      	b.n	800a700 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	e000      	b.n	800a700 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a6fe:	2302      	movs	r3, #2
  }
}
 800a700:	4618      	mov	r0, r3
 800a702:	3730      	adds	r7, #48	; 0x30
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	0800ae33 	.word	0x0800ae33
 800a70c:	0800aea5 	.word	0x0800aea5
 800a710:	004005ff 	.word	0x004005ff

0800a714 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08c      	sub	sp, #48	; 0x30
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d107      	bne.n	800a73c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a730:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e0c6      	b.n	800a8ca <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b01      	cmp	r3, #1
 800a746:	f040 80bf 	bne.w	800a8c8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	441a      	add	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d907      	bls.n	800a76e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	e0ad      	b.n	800a8ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2203      	movs	r2, #3
 800a772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2200      	movs	r2, #0
 800a77c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f042 021a 	orr.w	r2, r2, #26
 800a78c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a792:	4a50      	ldr	r2, [pc, #320]	; (800a8d4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79a:	4a4f      	ldr	r2, [pc, #316]	; (800a8d8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a79c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d002      	beq.n	800a7b4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	025b      	lsls	r3, r3, #9
 800a7b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d90a      	bls.n	800a7d0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	22a0      	movs	r2, #160	; 0xa0
 800a7be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f003 fdea 	bl	800e3a0 <SDMMC_CmdWriteMultiBlock>
 800a7cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a7ce:	e009      	b.n	800a7e4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2290      	movs	r2, #144	; 0x90
 800a7d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f003 fdbd 	bl	800e35c <SDMMC_CmdWriteSingleBlock>
 800a7e2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d012      	beq.n	800a810 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a3b      	ldr	r2, [pc, #236]	; (800a8dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a7f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e05c      	b.n	800a8ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0208 	orr.w	r2, r2, #8
 800a81e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a824:	2240      	movs	r2, #64	; 0x40
 800a826:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a838:	689a      	ldr	r2, [r3, #8]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	430a      	orrs	r2, r1
 800a842:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a848:	68b9      	ldr	r1, [r7, #8]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3380      	adds	r3, #128	; 0x80
 800a850:	461a      	mov	r2, r3
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	025b      	lsls	r3, r3, #9
 800a856:	089b      	lsrs	r3, r3, #2
 800a858:	f7f9 fc18 	bl	800408c <HAL_DMA_Start_IT>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d01a      	beq.n	800a898 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f022 021a 	bic.w	r2, r2, #26
 800a870:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a19      	ldr	r2, [pc, #100]	; (800a8dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a878:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e018      	b.n	800a8ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a89c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	025b      	lsls	r3, r3, #9
 800a8a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a8a4:	2390      	movs	r3, #144	; 0x90
 800a8a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f107 0210 	add.w	r2, r7, #16
 800a8bc:	4611      	mov	r1, r2
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f003 fcba 	bl	800e238 <SDMMC_ConfigData>

      return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e000      	b.n	800a8ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a8c8:	2302      	movs	r3, #2
  }
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3730      	adds	r7, #48	; 0x30
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	0800ae09 	.word	0x0800ae09
 800a8d8:	0800aea5 	.word	0x0800aea5
 800a8dc:	004005ff 	.word	0x004005ff

0800a8e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a902:	0f9b      	lsrs	r3, r3, #30
 800a904:	b2da      	uxtb	r2, r3
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a90e:	0e9b      	lsrs	r3, r3, #26
 800a910:	b2db      	uxtb	r3, r3
 800a912:	f003 030f 	and.w	r3, r3, #15
 800a916:	b2da      	uxtb	r2, r3
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a920:	0e1b      	lsrs	r3, r3, #24
 800a922:	b2db      	uxtb	r3, r3
 800a924:	f003 0303 	and.w	r3, r3, #3
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a932:	0c1b      	lsrs	r3, r3, #16
 800a934:	b2da      	uxtb	r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a93e:	0a1b      	lsrs	r3, r3, #8
 800a940:	b2da      	uxtb	r2, r3
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a954:	0d1b      	lsrs	r3, r3, #20
 800a956:	b29a      	uxth	r2, r3
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a960:	0c1b      	lsrs	r3, r3, #16
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f003 030f 	and.w	r3, r3, #15
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a972:	0bdb      	lsrs	r3, r3, #15
 800a974:	b2db      	uxtb	r3, r3
 800a976:	f003 0301 	and.w	r3, r3, #1
 800a97a:	b2da      	uxtb	r2, r3
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a984:	0b9b      	lsrs	r3, r3, #14
 800a986:	b2db      	uxtb	r3, r3
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a996:	0b5b      	lsrs	r3, r3, #13
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	b2da      	uxtb	r2, r3
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9a8:	0b1b      	lsrs	r3, r3, #12
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d163      	bne.n	800aa8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9c8:	009a      	lsls	r2, r3, #2
 800a9ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a9d4:	0f92      	lsrs	r2, r2, #30
 800a9d6:	431a      	orrs	r2, r3
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9e0:	0edb      	lsrs	r3, r3, #27
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9f2:	0e1b      	lsrs	r3, r3, #24
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	f003 0307 	and.w	r3, r3, #7
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa04:	0d5b      	lsrs	r3, r3, #21
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 0307 	and.w	r3, r3, #7
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa16:	0c9b      	lsrs	r3, r3, #18
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	f003 0307 	and.w	r3, r3, #7
 800aa1e:	b2da      	uxtb	r2, r3
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa28:	0bdb      	lsrs	r3, r3, #15
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	f003 0307 	and.w	r3, r3, #7
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	1c5a      	adds	r2, r3, #1
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	7e1b      	ldrb	r3, [r3, #24]
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	3302      	adds	r3, #2
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800aa56:	fb03 f202 	mul.w	r2, r3, r2
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	7a1b      	ldrb	r3, [r3, #8]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 030f 	and.w	r3, r3, #15
 800aa68:	2201      	movs	r2, #1
 800aa6a:	409a      	lsls	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800aa78:	0a52      	lsrs	r2, r2, #9
 800aa7a:	fb03 f202 	mul.w	r2, r3, r2
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa88:	661a      	str	r2, [r3, #96]	; 0x60
 800aa8a:	e031      	b.n	800aaf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d11d      	bne.n	800aad0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa98:	041b      	lsls	r3, r3, #16
 800aa9a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaa2:	0c1b      	lsrs	r3, r3, #16
 800aaa4:	431a      	orrs	r2, r3
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	3301      	adds	r3, #1
 800aab0:	029a      	lsls	r2, r3, #10
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aac4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	661a      	str	r2, [r3, #96]	; 0x60
 800aace:	e00f      	b.n	800aaf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a58      	ldr	r2, [pc, #352]	; (800ac38 <HAL_SD_GetCardCSD+0x344>)
 800aad6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aadc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e09d      	b.n	800ac2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaf4:	0b9b      	lsrs	r3, r3, #14
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	b2da      	uxtb	r2, r3
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab06:	09db      	lsrs	r3, r3, #7
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab28:	0fdb      	lsrs	r3, r3, #31
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab34:	0f5b      	lsrs	r3, r3, #29
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	f003 0303 	and.w	r3, r3, #3
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab46:	0e9b      	lsrs	r3, r3, #26
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	f003 0307 	and.w	r3, r3, #7
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab58:	0d9b      	lsrs	r3, r3, #22
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	f003 030f 	and.w	r3, r3, #15
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab6a:	0d5b      	lsrs	r3, r3, #21
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	f003 0301 	and.w	r3, r3, #1
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab86:	0c1b      	lsrs	r3, r3, #16
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9a:	0bdb      	lsrs	r3, r3, #15
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abae:	0b9b      	lsrs	r3, r3, #14
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc2:	0b5b      	lsrs	r3, r3, #13
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd6:	0b1b      	lsrs	r3, r3, #12
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abea:	0a9b      	lsrs	r3, r3, #10
 800abec:	b2db      	uxtb	r3, r3
 800abee:	f003 0303 	and.w	r3, r3, #3
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abfe:	0a1b      	lsrs	r3, r3, #8
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	f003 0303 	and.w	r3, r3, #3
 800ac06:	b2da      	uxtb	r2, r3
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac12:	085b      	lsrs	r3, r3, #1
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr
 800ac38:	004005ff 	.word	0x004005ff

0800ac3c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ac94:	b5b0      	push	{r4, r5, r7, lr}
 800ac96:	b08e      	sub	sp, #56	; 0x38
 800ac98:	af04      	add	r7, sp, #16
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2203      	movs	r2, #3
 800aca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acb0:	2b03      	cmp	r3, #3
 800acb2:	d02e      	beq.n	800ad12 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acba:	d106      	bne.n	800acca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	639a      	str	r2, [r3, #56]	; 0x38
 800acc8:	e029      	b.n	800ad1e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acd0:	d10a      	bne.n	800ace8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fabc 	bl	800b250 <SD_WideBus_Enable>
 800acd8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acde:	6a3b      	ldr	r3, [r7, #32]
 800ace0:	431a      	orrs	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	639a      	str	r2, [r3, #56]	; 0x38
 800ace6:	e01a      	b.n	800ad1e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10a      	bne.n	800ad04 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 faf9 	bl	800b2e6 <SD_WideBus_Disable>
 800acf4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	431a      	orrs	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	639a      	str	r2, [r3, #56]	; 0x38
 800ad02:	e00c      	b.n	800ad1e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad08:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	639a      	str	r2, [r3, #56]	; 0x38
 800ad10:	e005      	b.n	800ad1e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad16:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00b      	beq.n	800ad3e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a26      	ldr	r2, [pc, #152]	; (800adc4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ad2c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad3c:	e01f      	b.n	800ad7e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681d      	ldr	r5, [r3, #0]
 800ad64:	466c      	mov	r4, sp
 800ad66:	f107 0314 	add.w	r3, r7, #20
 800ad6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad72:	f107 0308 	add.w	r3, r7, #8
 800ad76:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad78:	4628      	mov	r0, r5
 800ad7a:	f003 f9bd 	bl	800e0f8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad86:	4618      	mov	r0, r3
 800ad88:	f003 fa82 	bl	800e290 <SDMMC_CmdBlockLength>
 800ad8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad8e:	6a3b      	ldr	r3, [r7, #32]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00c      	beq.n	800adae <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a0a      	ldr	r2, [pc, #40]	; (800adc4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ad9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ada0:	6a3b      	ldr	r3, [r7, #32]
 800ada2:	431a      	orrs	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2201      	movs	r2, #1
 800adb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800adb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3728      	adds	r7, #40	; 0x28
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bdb0      	pop	{r4, r5, r7, pc}
 800adc2:	bf00      	nop
 800adc4:	004005ff 	.word	0x004005ff

0800adc8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800add4:	f107 030c 	add.w	r3, r7, #12
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fa10 	bl	800b200 <SD_SendStatus>
 800ade0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d005      	beq.n	800adf4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	431a      	orrs	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	0a5b      	lsrs	r3, r3, #9
 800adf8:	f003 030f 	and.w	r3, r3, #15
 800adfc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800adfe:	693b      	ldr	r3, [r7, #16]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae14:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae24:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ae26:	bf00      	nop
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b084      	sub	sp, #16
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae44:	2b82      	cmp	r3, #130	; 0x82
 800ae46:	d111      	bne.n	800ae6c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f003 fac9 	bl	800e3e4 <SDMMC_CmdStopTransfer>
 800ae52:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d008      	beq.n	800ae6c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	431a      	orrs	r2, r3
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f7ff fd3a 	bl	800a8e0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0208 	bic.w	r2, r2, #8
 800ae7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f240 523a 	movw	r2, #1338	; 0x53a
 800ae84:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f004 ff0f 	bl	800fcb8 <HAL_SD_RxCpltCallback>
#endif
}
 800ae9a:	bf00      	nop
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
	...

0800aea4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7f9 f9dc 	bl	8004270 <HAL_DMA_GetError>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d03e      	beq.n	800af3c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aec4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aecc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d002      	beq.n	800aeda <SD_DMAError+0x36>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d12d      	bne.n	800af36 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a19      	ldr	r2, [pc, #100]	; (800af44 <SD_DMAError+0xa0>)
 800aee0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800aef0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800aefe:	6978      	ldr	r0, [r7, #20]
 800af00:	f7ff ff62 	bl	800adc8 <HAL_SD_GetCardState>
 800af04:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b06      	cmp	r3, #6
 800af0a:	d002      	beq.n	800af12 <SD_DMAError+0x6e>
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	2b05      	cmp	r3, #5
 800af10:	d10a      	bne.n	800af28 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4618      	mov	r0, r3
 800af18:	f003 fa64 	bl	800e3e4 <SDMMC_CmdStopTransfer>
 800af1c:	4602      	mov	r2, r0
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af22:	431a      	orrs	r2, r3
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	2200      	movs	r2, #0
 800af34:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800af36:	6978      	ldr	r0, [r7, #20]
 800af38:	f7ff fcd2 	bl	800a8e0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800af3c:	bf00      	nop
 800af3e:	3718      	adds	r7, #24
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	004005ff 	.word	0x004005ff

0800af48 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800af48:	b5b0      	push	{r4, r5, r7, lr}
 800af4a:	b094      	sub	sp, #80	; 0x50
 800af4c:	af04      	add	r7, sp, #16
 800af4e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800af50:	2301      	movs	r3, #1
 800af52:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4618      	mov	r0, r3
 800af5a:	f003 f914 	bl	800e186 <SDMMC_GetPowerState>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d102      	bne.n	800af6a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800af68:	e0b8      	b.n	800b0dc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d02f      	beq.n	800afd2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4618      	mov	r0, r3
 800af78:	f003 fb3f 	bl	800e5fa <SDMMC_CmdSendCID>
 800af7c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <SD_InitCard+0x40>
    {
      return errorstate;
 800af84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af86:	e0a9      	b.n	800b0dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2100      	movs	r1, #0
 800af8e:	4618      	mov	r0, r3
 800af90:	f003 f93f 	bl	800e212 <SDMMC_GetResponse>
 800af94:	4602      	mov	r2, r0
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2104      	movs	r1, #4
 800afa0:	4618      	mov	r0, r3
 800afa2:	f003 f936 	bl	800e212 <SDMMC_GetResponse>
 800afa6:	4602      	mov	r2, r0
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2108      	movs	r1, #8
 800afb2:	4618      	mov	r0, r3
 800afb4:	f003 f92d 	bl	800e212 <SDMMC_GetResponse>
 800afb8:	4602      	mov	r2, r0
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	210c      	movs	r1, #12
 800afc4:	4618      	mov	r0, r3
 800afc6:	f003 f924 	bl	800e212 <SDMMC_GetResponse>
 800afca:	4602      	mov	r2, r0
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	d00d      	beq.n	800aff6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f107 020e 	add.w	r2, r7, #14
 800afe2:	4611      	mov	r1, r2
 800afe4:	4618      	mov	r0, r3
 800afe6:	f003 fb45 	bl	800e674 <SDMMC_CmdSetRelAdd>
 800afea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800afec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <SD_InitCard+0xae>
    {
      return errorstate;
 800aff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff4:	e072      	b.n	800b0dc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800affa:	2b03      	cmp	r3, #3
 800affc:	d036      	beq.n	800b06c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800affe:	89fb      	ldrh	r3, [r7, #14]
 800b000:	461a      	mov	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b00e:	041b      	lsls	r3, r3, #16
 800b010:	4619      	mov	r1, r3
 800b012:	4610      	mov	r0, r2
 800b014:	f003 fb0f 	bl	800e636 <SDMMC_CmdSendCSD>
 800b018:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b022:	e05b      	b.n	800b0dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2100      	movs	r1, #0
 800b02a:	4618      	mov	r0, r3
 800b02c:	f003 f8f1 	bl	800e212 <SDMMC_GetResponse>
 800b030:	4602      	mov	r2, r0
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2104      	movs	r1, #4
 800b03c:	4618      	mov	r0, r3
 800b03e:	f003 f8e8 	bl	800e212 <SDMMC_GetResponse>
 800b042:	4602      	mov	r2, r0
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2108      	movs	r1, #8
 800b04e:	4618      	mov	r0, r3
 800b050:	f003 f8df 	bl	800e212 <SDMMC_GetResponse>
 800b054:	4602      	mov	r2, r0
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	210c      	movs	r1, #12
 800b060:	4618      	mov	r0, r3
 800b062:	f003 f8d6 	bl	800e212 <SDMMC_GetResponse>
 800b066:	4602      	mov	r2, r0
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2104      	movs	r1, #4
 800b072:	4618      	mov	r0, r3
 800b074:	f003 f8cd 	bl	800e212 <SDMMC_GetResponse>
 800b078:	4603      	mov	r3, r0
 800b07a:	0d1a      	lsrs	r2, r3, #20
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b080:	f107 0310 	add.w	r3, r7, #16
 800b084:	4619      	mov	r1, r3
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff fc34 	bl	800a8f4 <HAL_SD_GetCardCSD>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b092:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b096:	e021      	b.n	800b0dc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6819      	ldr	r1, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0a0:	041b      	lsls	r3, r3, #16
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	461c      	mov	r4, r3
 800b0a6:	4615      	mov	r5, r2
 800b0a8:	4622      	mov	r2, r4
 800b0aa:	462b      	mov	r3, r5
 800b0ac:	4608      	mov	r0, r1
 800b0ae:	f003 f9bb 	bl	800e428 <SDMMC_CmdSelDesel>
 800b0b2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d001      	beq.n	800b0be <SD_InitCard+0x176>
  {
    return errorstate;
 800b0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0bc:	e00e      	b.n	800b0dc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681d      	ldr	r5, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	466c      	mov	r4, sp
 800b0c6:	f103 0210 	add.w	r2, r3, #16
 800b0ca:	ca07      	ldmia	r2, {r0, r1, r2}
 800b0cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	f003 f80f 	bl	800e0f8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3740      	adds	r7, #64	; 0x40
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bdb0      	pop	{r4, r5, r7, pc}

0800b0e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	617b      	str	r3, [r7, #20]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f003 f9b6 	bl	800e46e <SDMMC_CmdGoIdleState>
 800b102:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <SD_PowerON+0x2a>
  {
    return errorstate;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	e072      	b.n	800b1f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4618      	mov	r0, r3
 800b114:	f003 f9c9 	bl	800e4aa <SDMMC_CmdOperCond>
 800b118:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00d      	beq.n	800b13c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f003 f99f 	bl	800e46e <SDMMC_CmdGoIdleState>
 800b130:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d004      	beq.n	800b142 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	e05b      	b.n	800b1f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b146:	2b01      	cmp	r3, #1
 800b148:	d137      	bne.n	800b1ba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2100      	movs	r1, #0
 800b150:	4618      	mov	r0, r3
 800b152:	f003 f9c9 	bl	800e4e8 <SDMMC_CmdAppCommand>
 800b156:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d02d      	beq.n	800b1ba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b15e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b162:	e047      	b.n	800b1f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2100      	movs	r1, #0
 800b16a:	4618      	mov	r0, r3
 800b16c:	f003 f9bc 	bl	800e4e8 <SDMMC_CmdAppCommand>
 800b170:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d001      	beq.n	800b17c <SD_PowerON+0x98>
    {
      return errorstate;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	e03b      	b.n	800b1f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	491e      	ldr	r1, [pc, #120]	; (800b1fc <SD_PowerON+0x118>)
 800b182:	4618      	mov	r0, r3
 800b184:	f003 f9d2 	bl	800e52c <SDMMC_CmdAppOperCommand>
 800b188:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b190:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b194:	e02e      	b.n	800b1f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2100      	movs	r1, #0
 800b19c:	4618      	mov	r0, r3
 800b19e:	f003 f838 	bl	800e212 <SDMMC_GetResponse>
 800b1a2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	0fdb      	lsrs	r3, r3, #31
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d101      	bne.n	800b1b0 <SD_PowerON+0xcc>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e000      	b.n	800b1b2 <SD_PowerON+0xce>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	613b      	str	r3, [r7, #16]

    count++;
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d802      	bhi.n	800b1ca <SD_PowerON+0xe6>
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d0cc      	beq.n	800b164 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d902      	bls.n	800b1da <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b1d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1d8:	e00c      	b.n	800b1f4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d003      	beq.n	800b1ec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	645a      	str	r2, [r3, #68]	; 0x44
 800b1ea:	e002      	b.n	800b1f2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3718      	adds	r7, #24
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	c1100000 	.word	0xc1100000

0800b200 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d102      	bne.n	800b216 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b210:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b214:	e018      	b.n	800b248 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b21e:	041b      	lsls	r3, r3, #16
 800b220:	4619      	mov	r1, r3
 800b222:	4610      	mov	r0, r2
 800b224:	f003 fa47 	bl	800e6b6 <SDMMC_CmdSendStatus>
 800b228:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	e009      	b.n	800b248 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2100      	movs	r1, #0
 800b23a:	4618      	mov	r0, r3
 800b23c:	f002 ffe9 	bl	800e212 <SDMMC_GetResponse>
 800b240:	4602      	mov	r2, r0
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b258:	2300      	movs	r3, #0
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	2300      	movs	r3, #0
 800b25e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2100      	movs	r1, #0
 800b266:	4618      	mov	r0, r3
 800b268:	f002 ffd3 	bl	800e212 <SDMMC_GetResponse>
 800b26c:	4603      	mov	r3, r0
 800b26e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b276:	d102      	bne.n	800b27e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b27c:	e02f      	b.n	800b2de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b27e:	f107 030c 	add.w	r3, r7, #12
 800b282:	4619      	mov	r1, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f879 	bl	800b37c <SD_FindSCR>
 800b28a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	e023      	b.n	800b2de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d01c      	beq.n	800b2da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a8:	041b      	lsls	r3, r3, #16
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	f003 f91b 	bl	800e4e8 <SDMMC_CmdAppCommand>
 800b2b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	e00f      	b.n	800b2de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2102      	movs	r1, #2
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f003 f955 	bl	800e574 <SDMMC_CmdBusWidth>
 800b2ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	e003      	b.n	800b2de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	e001      	b.n	800b2de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b2da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b086      	sub	sp, #24
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60fb      	str	r3, [r7, #12]
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f002 ff88 	bl	800e212 <SDMMC_GetResponse>
 800b302:	4603      	mov	r3, r0
 800b304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b30c:	d102      	bne.n	800b314 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b30e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b312:	e02f      	b.n	800b374 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b314:	f107 030c 	add.w	r3, r7, #12
 800b318:	4619      	mov	r1, r3
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f82e 	bl	800b37c <SD_FindSCR>
 800b320:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	e023      	b.n	800b374 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b332:	2b00      	cmp	r3, #0
 800b334:	d01c      	beq.n	800b370 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b33e:	041b      	lsls	r3, r3, #16
 800b340:	4619      	mov	r1, r3
 800b342:	4610      	mov	r0, r2
 800b344:	f003 f8d0 	bl	800e4e8 <SDMMC_CmdAppCommand>
 800b348:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	e00f      	b.n	800b374 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2100      	movs	r1, #0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f003 f90a 	bl	800e574 <SDMMC_CmdBusWidth>
 800b360:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	e003      	b.n	800b374 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b36c:	2300      	movs	r3, #0
 800b36e:	e001      	b.n	800b374 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b370:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b374:	4618      	mov	r0, r3
 800b376:	3718      	adds	r7, #24
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b37c:	b590      	push	{r4, r7, lr}
 800b37e:	b08f      	sub	sp, #60	; 0x3c
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b386:	f7f8 f96b 	bl	8003660 <HAL_GetTick>
 800b38a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b38c:	2300      	movs	r3, #0
 800b38e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b390:	2300      	movs	r3, #0
 800b392:	60bb      	str	r3, [r7, #8]
 800b394:	2300      	movs	r3, #0
 800b396:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2108      	movs	r1, #8
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f002 ff74 	bl	800e290 <SDMMC_CmdBlockLength>
 800b3a8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d001      	beq.n	800b3b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b2:	e0b2      	b.n	800b51a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3bc:	041b      	lsls	r3, r3, #16
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	f003 f891 	bl	800e4e8 <SDMMC_CmdAppCommand>
 800b3c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d0:	e0a3      	b.n	800b51a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b3d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b3d8:	2308      	movs	r3, #8
 800b3da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b3dc:	2330      	movs	r3, #48	; 0x30
 800b3de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f107 0210 	add.w	r2, r7, #16
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f002 ff1e 	bl	800e238 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4618      	mov	r0, r3
 800b402:	f003 f8d9 	bl	800e5b8 <SDMMC_CmdSendSCR>
 800b406:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d02a      	beq.n	800b464 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b410:	e083      	b.n	800b51a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00f      	beq.n	800b440 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6819      	ldr	r1, [r3, #0]
 800b424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	f107 0208 	add.w	r2, r7, #8
 800b42c:	18d4      	adds	r4, r2, r3
 800b42e:	4608      	mov	r0, r1
 800b430:	f002 fe8e 	bl	800e150 <SDMMC_ReadFIFO>
 800b434:	4603      	mov	r3, r0
 800b436:	6023      	str	r3, [r4, #0]
      index++;
 800b438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b43a:	3301      	adds	r3, #1
 800b43c:	637b      	str	r3, [r7, #52]	; 0x34
 800b43e:	e006      	b.n	800b44e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d012      	beq.n	800b474 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b44e:	f7f8 f907 	bl	8003660 <HAL_GetTick>
 800b452:	4602      	mov	r2, r0
 800b454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b45c:	d102      	bne.n	800b464 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b45e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b462:	e05a      	b.n	800b51a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b46a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d0cf      	beq.n	800b412 <SD_FindSCR+0x96>
 800b472:	e000      	b.n	800b476 <SD_FindSCR+0xfa>
      break;
 800b474:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47c:	f003 0308 	and.w	r3, r3, #8
 800b480:	2b00      	cmp	r3, #0
 800b482:	d005      	beq.n	800b490 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2208      	movs	r2, #8
 800b48a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b48c:	2308      	movs	r3, #8
 800b48e:	e044      	b.n	800b51a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b496:	f003 0302 	and.w	r3, r3, #2
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d005      	beq.n	800b4aa <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	e037      	b.n	800b51a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b0:	f003 0320 	and.w	r3, r3, #32
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d005      	beq.n	800b4c4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2220      	movs	r2, #32
 800b4be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b4c0:	2320      	movs	r3, #32
 800b4c2:	e02a      	b.n	800b51a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b4cc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	061a      	lsls	r2, r3, #24
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	021b      	lsls	r3, r3, #8
 800b4d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b4da:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	0a1b      	lsrs	r3, r3, #8
 800b4e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b4e4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	0e1b      	lsrs	r3, r3, #24
 800b4ea:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ee:	601a      	str	r2, [r3, #0]
    scr++;
 800b4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	061a      	lsls	r2, r3, #24
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	021b      	lsls	r3, r3, #8
 800b4fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b502:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	0a1b      	lsrs	r3, r3, #8
 800b508:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b50c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	0e1b      	lsrs	r3, r3, #24
 800b512:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b516:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	373c      	adds	r7, #60	; 0x3c
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd90      	pop	{r4, r7, pc}

0800b522 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b082      	sub	sp, #8
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e025      	b.n	800b582 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d106      	bne.n	800b550 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7f7 fcc0 	bl	8002ed0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2202      	movs	r2, #2
 800b554:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	3304      	adds	r3, #4
 800b560:	4619      	mov	r1, r3
 800b562:	4610      	mov	r0, r2
 800b564:	f002 fd02 	bl	800df6c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	461a      	mov	r2, r3
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	f002 fd56 	bl	800e024 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e04c      	b.n	800b638 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d106      	bne.n	800b5b8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7f7 f90a 	bl	80027cc <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f022 0203 	bic.w	r2, r2, #3
 800b5ce:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	4b19      	ldr	r3, [pc, #100]	; (800b640 <HAL_SPDIFRX_Init+0xb4>)
 800b5dc:	4013      	ands	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800b5e8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800b5ee:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800b5f4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800b5fa:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800b600:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800b606:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800b60c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800b612:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800b618:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	4313      	orrs	r3, r2
 800b61e:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3710      	adds	r7, #16
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	fff88407 	.word	0xfff88407

0800b644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d101      	bne.n	800b656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	e09d      	b.n	800b792 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d108      	bne.n	800b670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b666:	d009      	beq.n	800b67c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	61da      	str	r2, [r3, #28]
 800b66e:	e005      	b.n	800b67c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d106      	bne.n	800b69c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7f7 f8fc 	bl	8002894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b6bc:	d902      	bls.n	800b6c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	60fb      	str	r3, [r7, #12]
 800b6c2:	e002      	b.n	800b6ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b6d2:	d007      	beq.n	800b6e4 <HAL_SPI_Init+0xa0>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b6dc:	d002      	beq.n	800b6e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b6f4:	431a      	orrs	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	f003 0302 	and.w	r3, r3, #2
 800b6fe:	431a      	orrs	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	695b      	ldr	r3, [r3, #20]
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	431a      	orrs	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b712:	431a      	orrs	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	69db      	ldr	r3, [r3, #28]
 800b718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b71c:	431a      	orrs	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b726:	ea42 0103 	orr.w	r1, r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b72e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	430a      	orrs	r2, r1
 800b738:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	0c1b      	lsrs	r3, r3, #16
 800b740:	f003 0204 	and.w	r2, r3, #4
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b748:	f003 0310 	and.w	r3, r3, #16
 800b74c:	431a      	orrs	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b752:	f003 0308 	and.w	r3, r3, #8
 800b756:	431a      	orrs	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b760:	ea42 0103 	orr.w	r1, r2, r3
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	430a      	orrs	r2, r1
 800b770:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	69da      	ldr	r2, [r3, #28]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b780:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d101      	bne.n	800b7ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e049      	b.n	800b840 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d106      	bne.n	800b7c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7f7 f8c9 	bl	8002958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2202      	movs	r2, #2
 800b7ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	3304      	adds	r3, #4
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	4610      	mov	r0, r2
 800b7da:	f000 fc29 	bl	800c030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2201      	movs	r2, #1
 800b80a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2201      	movs	r2, #1
 800b81a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2201      	movs	r2, #1
 800b822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2201      	movs	r2, #1
 800b82a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2201      	movs	r2, #1
 800b83a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b856:	b2db      	uxtb	r3, r3
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d001      	beq.n	800b860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e054      	b.n	800b90a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2202      	movs	r2, #2
 800b864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68da      	ldr	r2, [r3, #12]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 0201 	orr.w	r2, r2, #1
 800b876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a26      	ldr	r2, [pc, #152]	; (800b918 <HAL_TIM_Base_Start_IT+0xd0>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d022      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b88a:	d01d      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a22      	ldr	r2, [pc, #136]	; (800b91c <HAL_TIM_Base_Start_IT+0xd4>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d018      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a21      	ldr	r2, [pc, #132]	; (800b920 <HAL_TIM_Base_Start_IT+0xd8>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d013      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a1f      	ldr	r2, [pc, #124]	; (800b924 <HAL_TIM_Base_Start_IT+0xdc>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d00e      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a1e      	ldr	r2, [pc, #120]	; (800b928 <HAL_TIM_Base_Start_IT+0xe0>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d009      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a1c      	ldr	r2, [pc, #112]	; (800b92c <HAL_TIM_Base_Start_IT+0xe4>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d004      	beq.n	800b8c8 <HAL_TIM_Base_Start_IT+0x80>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a1b      	ldr	r2, [pc, #108]	; (800b930 <HAL_TIM_Base_Start_IT+0xe8>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d115      	bne.n	800b8f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	689a      	ldr	r2, [r3, #8]
 800b8ce:	4b19      	ldr	r3, [pc, #100]	; (800b934 <HAL_TIM_Base_Start_IT+0xec>)
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2b06      	cmp	r3, #6
 800b8d8:	d015      	beq.n	800b906 <HAL_TIM_Base_Start_IT+0xbe>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8e0:	d011      	beq.n	800b906 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f042 0201 	orr.w	r2, r2, #1
 800b8f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8f2:	e008      	b.n	800b906 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f042 0201 	orr.w	r2, r2, #1
 800b902:	601a      	str	r2, [r3, #0]
 800b904:	e000      	b.n	800b908 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b906:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	40010000 	.word	0x40010000
 800b91c:	40000400 	.word	0x40000400
 800b920:	40000800 	.word	0x40000800
 800b924:	40000c00 	.word	0x40000c00
 800b928:	40010400 	.word	0x40010400
 800b92c:	40014000 	.word	0x40014000
 800b930:	40001800 	.word	0x40001800
 800b934:	00010007 	.word	0x00010007

0800b938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e049      	b.n	800b9de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b950:	b2db      	uxtb	r3, r3
 800b952:	2b00      	cmp	r3, #0
 800b954:	d106      	bne.n	800b964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7f7 f868 	bl	8002a34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2202      	movs	r2, #2
 800b968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3304      	adds	r3, #4
 800b974:	4619      	mov	r1, r3
 800b976:	4610      	mov	r0, r2
 800b978:	f000 fb5a 	bl	800c030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3708      	adds	r7, #8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b082      	sub	sp, #8
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	f003 0302 	and.w	r3, r3, #2
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d122      	bne.n	800ba42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	f003 0302 	and.w	r3, r3, #2
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d11b      	bne.n	800ba42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f06f 0202 	mvn.w	r2, #2
 800ba12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	699b      	ldr	r3, [r3, #24]
 800ba20:	f003 0303 	and.w	r3, r3, #3
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d003      	beq.n	800ba30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 fae3 	bl	800bff4 <HAL_TIM_IC_CaptureCallback>
 800ba2e:	e005      	b.n	800ba3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fad5 	bl	800bfe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fae6 	bl	800c008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	f003 0304 	and.w	r3, r3, #4
 800ba4c:	2b04      	cmp	r3, #4
 800ba4e:	d122      	bne.n	800ba96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	f003 0304 	and.w	r3, r3, #4
 800ba5a:	2b04      	cmp	r3, #4
 800ba5c:	d11b      	bne.n	800ba96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f06f 0204 	mvn.w	r2, #4
 800ba66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fab9 	bl	800bff4 <HAL_TIM_IC_CaptureCallback>
 800ba82:	e005      	b.n	800ba90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 faab 	bl	800bfe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 fabc 	bl	800c008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	f003 0308 	and.w	r3, r3, #8
 800baa0:	2b08      	cmp	r3, #8
 800baa2:	d122      	bne.n	800baea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	f003 0308 	and.w	r3, r3, #8
 800baae:	2b08      	cmp	r3, #8
 800bab0:	d11b      	bne.n	800baea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f06f 0208 	mvn.w	r2, #8
 800baba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2204      	movs	r2, #4
 800bac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	69db      	ldr	r3, [r3, #28]
 800bac8:	f003 0303 	and.w	r3, r3, #3
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d003      	beq.n	800bad8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fa8f 	bl	800bff4 <HAL_TIM_IC_CaptureCallback>
 800bad6:	e005      	b.n	800bae4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 fa81 	bl	800bfe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fa92 	bl	800c008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	f003 0310 	and.w	r3, r3, #16
 800baf4:	2b10      	cmp	r3, #16
 800baf6:	d122      	bne.n	800bb3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	f003 0310 	and.w	r3, r3, #16
 800bb02:	2b10      	cmp	r3, #16
 800bb04:	d11b      	bne.n	800bb3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f06f 0210 	mvn.w	r2, #16
 800bb0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2208      	movs	r2, #8
 800bb14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d003      	beq.n	800bb2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fa65 	bl	800bff4 <HAL_TIM_IC_CaptureCallback>
 800bb2a:	e005      	b.n	800bb38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fa57 	bl	800bfe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 fa68 	bl	800c008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	f003 0301 	and.w	r3, r3, #1
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d10e      	bne.n	800bb6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	f003 0301 	and.w	r3, r3, #1
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d107      	bne.n	800bb6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f06f 0201 	mvn.w	r2, #1
 800bb62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f7f6 fa03 	bl	8001f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb74:	2b80      	cmp	r3, #128	; 0x80
 800bb76:	d10e      	bne.n	800bb96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb82:	2b80      	cmp	r3, #128	; 0x80
 800bb84:	d107      	bne.n	800bb96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fefb 	bl	800c98c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bba4:	d10e      	bne.n	800bbc4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbb0:	2b80      	cmp	r3, #128	; 0x80
 800bbb2:	d107      	bne.n	800bbc4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bbbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 feee 	bl	800c9a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbce:	2b40      	cmp	r3, #64	; 0x40
 800bbd0:	d10e      	bne.n	800bbf0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbdc:	2b40      	cmp	r3, #64	; 0x40
 800bbde:	d107      	bne.n	800bbf0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bbe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 fa16 	bl	800c01c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	f003 0320 	and.w	r3, r3, #32
 800bbfa:	2b20      	cmp	r3, #32
 800bbfc:	d10e      	bne.n	800bc1c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	f003 0320 	and.w	r3, r3, #32
 800bc08:	2b20      	cmp	r3, #32
 800bc0a:	d107      	bne.n	800bc1c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f06f 0220 	mvn.w	r2, #32
 800bc14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 feae 	bl	800c978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d101      	bne.n	800bc42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bc3e:	2302      	movs	r3, #2
 800bc40:	e0ff      	b.n	800be42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b14      	cmp	r3, #20
 800bc4e:	f200 80f0 	bhi.w	800be32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bc52:	a201      	add	r2, pc, #4	; (adr r2, 800bc58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc58:	0800bcad 	.word	0x0800bcad
 800bc5c:	0800be33 	.word	0x0800be33
 800bc60:	0800be33 	.word	0x0800be33
 800bc64:	0800be33 	.word	0x0800be33
 800bc68:	0800bced 	.word	0x0800bced
 800bc6c:	0800be33 	.word	0x0800be33
 800bc70:	0800be33 	.word	0x0800be33
 800bc74:	0800be33 	.word	0x0800be33
 800bc78:	0800bd2f 	.word	0x0800bd2f
 800bc7c:	0800be33 	.word	0x0800be33
 800bc80:	0800be33 	.word	0x0800be33
 800bc84:	0800be33 	.word	0x0800be33
 800bc88:	0800bd6f 	.word	0x0800bd6f
 800bc8c:	0800be33 	.word	0x0800be33
 800bc90:	0800be33 	.word	0x0800be33
 800bc94:	0800be33 	.word	0x0800be33
 800bc98:	0800bdb1 	.word	0x0800bdb1
 800bc9c:	0800be33 	.word	0x0800be33
 800bca0:	0800be33 	.word	0x0800be33
 800bca4:	0800be33 	.word	0x0800be33
 800bca8:	0800bdf1 	.word	0x0800bdf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f000 fa5c 	bl	800c170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	699a      	ldr	r2, [r3, #24]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f042 0208 	orr.w	r2, r2, #8
 800bcc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	699a      	ldr	r2, [r3, #24]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f022 0204 	bic.w	r2, r2, #4
 800bcd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6999      	ldr	r1, [r3, #24]
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	691a      	ldr	r2, [r3, #16]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	430a      	orrs	r2, r1
 800bce8:	619a      	str	r2, [r3, #24]
      break;
 800bcea:	e0a5      	b.n	800be38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68b9      	ldr	r1, [r7, #8]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 faae 	bl	800c254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	699a      	ldr	r2, [r3, #24]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	699a      	ldr	r2, [r3, #24]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	6999      	ldr	r1, [r3, #24]
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	021a      	lsls	r2, r3, #8
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	430a      	orrs	r2, r1
 800bd2a:	619a      	str	r2, [r3, #24]
      break;
 800bd2c:	e084      	b.n	800be38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	68b9      	ldr	r1, [r7, #8]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f000 fb05 	bl	800c344 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	69da      	ldr	r2, [r3, #28]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f042 0208 	orr.w	r2, r2, #8
 800bd48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	69da      	ldr	r2, [r3, #28]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f022 0204 	bic.w	r2, r2, #4
 800bd58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	69d9      	ldr	r1, [r3, #28]
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	691a      	ldr	r2, [r3, #16]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	430a      	orrs	r2, r1
 800bd6a:	61da      	str	r2, [r3, #28]
      break;
 800bd6c:	e064      	b.n	800be38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68b9      	ldr	r1, [r7, #8]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f000 fb5b 	bl	800c430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	69da      	ldr	r2, [r3, #28]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	69da      	ldr	r2, [r3, #28]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	69d9      	ldr	r1, [r3, #28]
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	021a      	lsls	r2, r3, #8
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	430a      	orrs	r2, r1
 800bdac:	61da      	str	r2, [r3, #28]
      break;
 800bdae:	e043      	b.n	800be38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68b9      	ldr	r1, [r7, #8]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f000 fb92 	bl	800c4e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f042 0208 	orr.w	r2, r2, #8
 800bdca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f022 0204 	bic.w	r2, r2, #4
 800bdda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	691a      	ldr	r2, [r3, #16]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	430a      	orrs	r2, r1
 800bdec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bdee:	e023      	b.n	800be38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68b9      	ldr	r1, [r7, #8]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f000 fbc4 	bl	800c584 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	021a      	lsls	r2, r3, #8
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	430a      	orrs	r2, r1
 800be2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be30:	e002      	b.n	800be38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	75fb      	strb	r3, [r7, #23]
      break;
 800be36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be40:	7dfb      	ldrb	r3, [r7, #23]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3718      	adds	r7, #24
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop

0800be4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be60:	2b01      	cmp	r3, #1
 800be62:	d101      	bne.n	800be68 <HAL_TIM_ConfigClockSource+0x1c>
 800be64:	2302      	movs	r3, #2
 800be66:	e0b4      	b.n	800bfd2 <HAL_TIM_ConfigClockSource+0x186>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2201      	movs	r2, #1
 800be6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2202      	movs	r2, #2
 800be74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	4b56      	ldr	r3, [pc, #344]	; (800bfdc <HAL_TIM_ConfigClockSource+0x190>)
 800be84:	4013      	ands	r3, r2
 800be86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bea0:	d03e      	beq.n	800bf20 <HAL_TIM_ConfigClockSource+0xd4>
 800bea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bea6:	f200 8087 	bhi.w	800bfb8 <HAL_TIM_ConfigClockSource+0x16c>
 800beaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beae:	f000 8086 	beq.w	800bfbe <HAL_TIM_ConfigClockSource+0x172>
 800beb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beb6:	d87f      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x16c>
 800beb8:	2b70      	cmp	r3, #112	; 0x70
 800beba:	d01a      	beq.n	800bef2 <HAL_TIM_ConfigClockSource+0xa6>
 800bebc:	2b70      	cmp	r3, #112	; 0x70
 800bebe:	d87b      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x16c>
 800bec0:	2b60      	cmp	r3, #96	; 0x60
 800bec2:	d050      	beq.n	800bf66 <HAL_TIM_ConfigClockSource+0x11a>
 800bec4:	2b60      	cmp	r3, #96	; 0x60
 800bec6:	d877      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x16c>
 800bec8:	2b50      	cmp	r3, #80	; 0x50
 800beca:	d03c      	beq.n	800bf46 <HAL_TIM_ConfigClockSource+0xfa>
 800becc:	2b50      	cmp	r3, #80	; 0x50
 800bece:	d873      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x16c>
 800bed0:	2b40      	cmp	r3, #64	; 0x40
 800bed2:	d058      	beq.n	800bf86 <HAL_TIM_ConfigClockSource+0x13a>
 800bed4:	2b40      	cmp	r3, #64	; 0x40
 800bed6:	d86f      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x16c>
 800bed8:	2b30      	cmp	r3, #48	; 0x30
 800beda:	d064      	beq.n	800bfa6 <HAL_TIM_ConfigClockSource+0x15a>
 800bedc:	2b30      	cmp	r3, #48	; 0x30
 800bede:	d86b      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x16c>
 800bee0:	2b20      	cmp	r3, #32
 800bee2:	d060      	beq.n	800bfa6 <HAL_TIM_ConfigClockSource+0x15a>
 800bee4:	2b20      	cmp	r3, #32
 800bee6:	d867      	bhi.n	800bfb8 <HAL_TIM_ConfigClockSource+0x16c>
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d05c      	beq.n	800bfa6 <HAL_TIM_ConfigClockSource+0x15a>
 800beec:	2b10      	cmp	r3, #16
 800beee:	d05a      	beq.n	800bfa6 <HAL_TIM_ConfigClockSource+0x15a>
 800bef0:	e062      	b.n	800bfb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf02:	f000 fc0d 	bl	800c720 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bf14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	609a      	str	r2, [r3, #8]
      break;
 800bf1e:	e04f      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf30:	f000 fbf6 	bl	800c720 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689a      	ldr	r2, [r3, #8]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf42:	609a      	str	r2, [r3, #8]
      break;
 800bf44:	e03c      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf52:	461a      	mov	r2, r3
 800bf54:	f000 fb6a 	bl	800c62c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2150      	movs	r1, #80	; 0x50
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 fbc3 	bl	800c6ea <TIM_ITRx_SetConfig>
      break;
 800bf64:	e02c      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf72:	461a      	mov	r2, r3
 800bf74:	f000 fb89 	bl	800c68a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2160      	movs	r1, #96	; 0x60
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f000 fbb3 	bl	800c6ea <TIM_ITRx_SetConfig>
      break;
 800bf84:	e01c      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf92:	461a      	mov	r2, r3
 800bf94:	f000 fb4a 	bl	800c62c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2140      	movs	r1, #64	; 0x40
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 fba3 	bl	800c6ea <TIM_ITRx_SetConfig>
      break;
 800bfa4:	e00c      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4619      	mov	r1, r3
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	f000 fb9a 	bl	800c6ea <TIM_ITRx_SetConfig>
      break;
 800bfb6:	e003      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	73fb      	strb	r3, [r7, #15]
      break;
 800bfbc:	e000      	b.n	800bfc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bfbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	fffeff88 	.word	0xfffeff88

0800bfe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bfe8:	bf00      	nop
 800bfea:	370c      	adds	r7, #12
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bffc:	bf00      	nop
 800bffe:	370c      	adds	r7, #12
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c010:	bf00      	nop
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a40      	ldr	r2, [pc, #256]	; (800c144 <TIM_Base_SetConfig+0x114>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d013      	beq.n	800c070 <TIM_Base_SetConfig+0x40>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c04e:	d00f      	beq.n	800c070 <TIM_Base_SetConfig+0x40>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a3d      	ldr	r2, [pc, #244]	; (800c148 <TIM_Base_SetConfig+0x118>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d00b      	beq.n	800c070 <TIM_Base_SetConfig+0x40>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4a3c      	ldr	r2, [pc, #240]	; (800c14c <TIM_Base_SetConfig+0x11c>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d007      	beq.n	800c070 <TIM_Base_SetConfig+0x40>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a3b      	ldr	r2, [pc, #236]	; (800c150 <TIM_Base_SetConfig+0x120>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d003      	beq.n	800c070 <TIM_Base_SetConfig+0x40>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4a3a      	ldr	r2, [pc, #232]	; (800c154 <TIM_Base_SetConfig+0x124>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d108      	bne.n	800c082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	4313      	orrs	r3, r2
 800c080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4a2f      	ldr	r2, [pc, #188]	; (800c144 <TIM_Base_SetConfig+0x114>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d02b      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c090:	d027      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4a2c      	ldr	r2, [pc, #176]	; (800c148 <TIM_Base_SetConfig+0x118>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d023      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a2b      	ldr	r2, [pc, #172]	; (800c14c <TIM_Base_SetConfig+0x11c>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d01f      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a2a      	ldr	r2, [pc, #168]	; (800c150 <TIM_Base_SetConfig+0x120>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d01b      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a29      	ldr	r2, [pc, #164]	; (800c154 <TIM_Base_SetConfig+0x124>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d017      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a28      	ldr	r2, [pc, #160]	; (800c158 <TIM_Base_SetConfig+0x128>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d013      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a27      	ldr	r2, [pc, #156]	; (800c15c <TIM_Base_SetConfig+0x12c>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d00f      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4a26      	ldr	r2, [pc, #152]	; (800c160 <TIM_Base_SetConfig+0x130>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d00b      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4a25      	ldr	r2, [pc, #148]	; (800c164 <TIM_Base_SetConfig+0x134>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d007      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4a24      	ldr	r2, [pc, #144]	; (800c168 <TIM_Base_SetConfig+0x138>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d003      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4a23      	ldr	r2, [pc, #140]	; (800c16c <TIM_Base_SetConfig+0x13c>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d108      	bne.n	800c0f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	695b      	ldr	r3, [r3, #20]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	689a      	ldr	r2, [r3, #8]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4a0a      	ldr	r2, [pc, #40]	; (800c144 <TIM_Base_SetConfig+0x114>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d003      	beq.n	800c128 <TIM_Base_SetConfig+0xf8>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a0c      	ldr	r2, [pc, #48]	; (800c154 <TIM_Base_SetConfig+0x124>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d103      	bne.n	800c130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	691a      	ldr	r2, [r3, #16]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	615a      	str	r2, [r3, #20]
}
 800c136:	bf00      	nop
 800c138:	3714      	adds	r7, #20
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	40010000 	.word	0x40010000
 800c148:	40000400 	.word	0x40000400
 800c14c:	40000800 	.word	0x40000800
 800c150:	40000c00 	.word	0x40000c00
 800c154:	40010400 	.word	0x40010400
 800c158:	40014000 	.word	0x40014000
 800c15c:	40014400 	.word	0x40014400
 800c160:	40014800 	.word	0x40014800
 800c164:	40001800 	.word	0x40001800
 800c168:	40001c00 	.word	0x40001c00
 800c16c:	40002000 	.word	0x40002000

0800c170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c170:	b480      	push	{r7}
 800c172:	b087      	sub	sp, #28
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a1b      	ldr	r3, [r3, #32]
 800c17e:	f023 0201 	bic.w	r2, r3, #1
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a1b      	ldr	r3, [r3, #32]
 800c18a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	699b      	ldr	r3, [r3, #24]
 800c196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	4b2b      	ldr	r3, [pc, #172]	; (800c248 <TIM_OC1_SetConfig+0xd8>)
 800c19c:	4013      	ands	r3, r2
 800c19e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f023 0303 	bic.w	r3, r3, #3
 800c1a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f023 0302 	bic.w	r3, r3, #2
 800c1b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a21      	ldr	r2, [pc, #132]	; (800c24c <TIM_OC1_SetConfig+0xdc>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d003      	beq.n	800c1d4 <TIM_OC1_SetConfig+0x64>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a20      	ldr	r2, [pc, #128]	; (800c250 <TIM_OC1_SetConfig+0xe0>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d10c      	bne.n	800c1ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	f023 0308 	bic.w	r3, r3, #8
 800c1da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	697a      	ldr	r2, [r7, #20]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	f023 0304 	bic.w	r3, r3, #4
 800c1ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a16      	ldr	r2, [pc, #88]	; (800c24c <TIM_OC1_SetConfig+0xdc>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d003      	beq.n	800c1fe <TIM_OC1_SetConfig+0x8e>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a15      	ldr	r2, [pc, #84]	; (800c250 <TIM_OC1_SetConfig+0xe0>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d111      	bne.n	800c222 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c20c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	693a      	ldr	r2, [r7, #16]
 800c214:	4313      	orrs	r3, r2
 800c216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	699b      	ldr	r3, [r3, #24]
 800c21c:	693a      	ldr	r2, [r7, #16]
 800c21e:	4313      	orrs	r3, r2
 800c220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	693a      	ldr	r2, [r7, #16]
 800c226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	685a      	ldr	r2, [r3, #4]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	697a      	ldr	r2, [r7, #20]
 800c23a:	621a      	str	r2, [r3, #32]
}
 800c23c:	bf00      	nop
 800c23e:	371c      	adds	r7, #28
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	fffeff8f 	.word	0xfffeff8f
 800c24c:	40010000 	.word	0x40010000
 800c250:	40010400 	.word	0x40010400

0800c254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c254:	b480      	push	{r7}
 800c256:	b087      	sub	sp, #28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	f023 0210 	bic.w	r2, r3, #16
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	4b2e      	ldr	r3, [pc, #184]	; (800c338 <TIM_OC2_SetConfig+0xe4>)
 800c280:	4013      	ands	r3, r2
 800c282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c28a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	021b      	lsls	r3, r3, #8
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	4313      	orrs	r3, r2
 800c296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	f023 0320 	bic.w	r3, r3, #32
 800c29e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	011b      	lsls	r3, r3, #4
 800c2a6:	697a      	ldr	r2, [r7, #20]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4a23      	ldr	r2, [pc, #140]	; (800c33c <TIM_OC2_SetConfig+0xe8>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d003      	beq.n	800c2bc <TIM_OC2_SetConfig+0x68>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	4a22      	ldr	r2, [pc, #136]	; (800c340 <TIM_OC2_SetConfig+0xec>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d10d      	bne.n	800c2d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	011b      	lsls	r3, r3, #4
 800c2ca:	697a      	ldr	r2, [r7, #20]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a18      	ldr	r2, [pc, #96]	; (800c33c <TIM_OC2_SetConfig+0xe8>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d003      	beq.n	800c2e8 <TIM_OC2_SetConfig+0x94>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a17      	ldr	r2, [pc, #92]	; (800c340 <TIM_OC2_SetConfig+0xec>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d113      	bne.n	800c310 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	693a      	ldr	r2, [r7, #16]
 800c300:	4313      	orrs	r3, r2
 800c302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	693a      	ldr	r2, [r7, #16]
 800c30c:	4313      	orrs	r3, r2
 800c30e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	693a      	ldr	r2, [r7, #16]
 800c314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	697a      	ldr	r2, [r7, #20]
 800c328:	621a      	str	r2, [r3, #32]
}
 800c32a:	bf00      	nop
 800c32c:	371c      	adds	r7, #28
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	feff8fff 	.word	0xfeff8fff
 800c33c:	40010000 	.word	0x40010000
 800c340:	40010400 	.word	0x40010400

0800c344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c344:	b480      	push	{r7}
 800c346:	b087      	sub	sp, #28
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6a1b      	ldr	r3, [r3, #32]
 800c352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6a1b      	ldr	r3, [r3, #32]
 800c35e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	69db      	ldr	r3, [r3, #28]
 800c36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	4b2d      	ldr	r3, [pc, #180]	; (800c424 <TIM_OC3_SetConfig+0xe0>)
 800c370:	4013      	ands	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f023 0303 	bic.w	r3, r3, #3
 800c37a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	4313      	orrs	r3, r2
 800c384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c38c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	021b      	lsls	r3, r3, #8
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	4313      	orrs	r3, r2
 800c398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4a22      	ldr	r2, [pc, #136]	; (800c428 <TIM_OC3_SetConfig+0xe4>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d003      	beq.n	800c3aa <TIM_OC3_SetConfig+0x66>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4a21      	ldr	r2, [pc, #132]	; (800c42c <TIM_OC3_SetConfig+0xe8>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d10d      	bne.n	800c3c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	021b      	lsls	r3, r3, #8
 800c3b8:	697a      	ldr	r2, [r7, #20]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a17      	ldr	r2, [pc, #92]	; (800c428 <TIM_OC3_SetConfig+0xe4>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d003      	beq.n	800c3d6 <TIM_OC3_SetConfig+0x92>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4a16      	ldr	r2, [pc, #88]	; (800c42c <TIM_OC3_SetConfig+0xe8>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d113      	bne.n	800c3fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c3e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	011b      	lsls	r3, r3, #4
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	699b      	ldr	r3, [r3, #24]
 800c3f6:	011b      	lsls	r3, r3, #4
 800c3f8:	693a      	ldr	r2, [r7, #16]
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	693a      	ldr	r2, [r7, #16]
 800c402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	621a      	str	r2, [r3, #32]
}
 800c418:	bf00      	nop
 800c41a:	371c      	adds	r7, #28
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	fffeff8f 	.word	0xfffeff8f
 800c428:	40010000 	.word	0x40010000
 800c42c:	40010400 	.word	0x40010400

0800c430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c430:	b480      	push	{r7}
 800c432:	b087      	sub	sp, #28
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a1b      	ldr	r3, [r3, #32]
 800c43e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6a1b      	ldr	r3, [r3, #32]
 800c44a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	69db      	ldr	r3, [r3, #28]
 800c456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	4b1e      	ldr	r3, [pc, #120]	; (800c4d4 <TIM_OC4_SetConfig+0xa4>)
 800c45c:	4013      	ands	r3, r2
 800c45e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	021b      	lsls	r3, r3, #8
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	4313      	orrs	r3, r2
 800c472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c47a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	031b      	lsls	r3, r3, #12
 800c482:	693a      	ldr	r2, [r7, #16]
 800c484:	4313      	orrs	r3, r2
 800c486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4a13      	ldr	r2, [pc, #76]	; (800c4d8 <TIM_OC4_SetConfig+0xa8>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d003      	beq.n	800c498 <TIM_OC4_SetConfig+0x68>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4a12      	ldr	r2, [pc, #72]	; (800c4dc <TIM_OC4_SetConfig+0xac>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d109      	bne.n	800c4ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c49e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	695b      	ldr	r3, [r3, #20]
 800c4a4:	019b      	lsls	r3, r3, #6
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	697a      	ldr	r2, [r7, #20]
 800c4b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	685a      	ldr	r2, [r3, #4]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	693a      	ldr	r2, [r7, #16]
 800c4c4:	621a      	str	r2, [r3, #32]
}
 800c4c6:	bf00      	nop
 800c4c8:	371c      	adds	r7, #28
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	feff8fff 	.word	0xfeff8fff
 800c4d8:	40010000 	.word	0x40010000
 800c4dc:	40010400 	.word	0x40010400

0800c4e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b087      	sub	sp, #28
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a1b      	ldr	r3, [r3, #32]
 800c4fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	4b1b      	ldr	r3, [pc, #108]	; (800c578 <TIM_OC5_SetConfig+0x98>)
 800c50c:	4013      	ands	r3, r2
 800c50e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	4313      	orrs	r3, r2
 800c518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c520:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	041b      	lsls	r3, r3, #16
 800c528:	693a      	ldr	r2, [r7, #16]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a12      	ldr	r2, [pc, #72]	; (800c57c <TIM_OC5_SetConfig+0x9c>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d003      	beq.n	800c53e <TIM_OC5_SetConfig+0x5e>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a11      	ldr	r2, [pc, #68]	; (800c580 <TIM_OC5_SetConfig+0xa0>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d109      	bne.n	800c552 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c544:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	695b      	ldr	r3, [r3, #20]
 800c54a:	021b      	lsls	r3, r3, #8
 800c54c:	697a      	ldr	r2, [r7, #20]
 800c54e:	4313      	orrs	r3, r2
 800c550:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	697a      	ldr	r2, [r7, #20]
 800c556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	685a      	ldr	r2, [r3, #4]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	693a      	ldr	r2, [r7, #16]
 800c56a:	621a      	str	r2, [r3, #32]
}
 800c56c:	bf00      	nop
 800c56e:	371c      	adds	r7, #28
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr
 800c578:	fffeff8f 	.word	0xfffeff8f
 800c57c:	40010000 	.word	0x40010000
 800c580:	40010400 	.word	0x40010400

0800c584 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c584:	b480      	push	{r7}
 800c586:	b087      	sub	sp, #28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a1b      	ldr	r3, [r3, #32]
 800c59e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	4b1c      	ldr	r3, [pc, #112]	; (800c620 <TIM_OC6_SetConfig+0x9c>)
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	021b      	lsls	r3, r3, #8
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c5c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	051b      	lsls	r3, r3, #20
 800c5ce:	693a      	ldr	r2, [r7, #16]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a13      	ldr	r2, [pc, #76]	; (800c624 <TIM_OC6_SetConfig+0xa0>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d003      	beq.n	800c5e4 <TIM_OC6_SetConfig+0x60>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	4a12      	ldr	r2, [pc, #72]	; (800c628 <TIM_OC6_SetConfig+0xa4>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d109      	bne.n	800c5f8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	695b      	ldr	r3, [r3, #20]
 800c5f0:	029b      	lsls	r3, r3, #10
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	685a      	ldr	r2, [r3, #4]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	621a      	str	r2, [r3, #32]
}
 800c612:	bf00      	nop
 800c614:	371c      	adds	r7, #28
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	feff8fff 	.word	0xfeff8fff
 800c624:	40010000 	.word	0x40010000
 800c628:	40010400 	.word	0x40010400

0800c62c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b087      	sub	sp, #28
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6a1b      	ldr	r3, [r3, #32]
 800c63c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	6a1b      	ldr	r3, [r3, #32]
 800c642:	f023 0201 	bic.w	r2, r3, #1
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	011b      	lsls	r3, r3, #4
 800c65c:	693a      	ldr	r2, [r7, #16]
 800c65e:	4313      	orrs	r3, r2
 800c660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	f023 030a 	bic.w	r3, r3, #10
 800c668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	4313      	orrs	r3, r2
 800c670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	621a      	str	r2, [r3, #32]
}
 800c67e:	bf00      	nop
 800c680:	371c      	adds	r7, #28
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr

0800c68a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c68a:	b480      	push	{r7}
 800c68c:	b087      	sub	sp, #28
 800c68e:	af00      	add	r7, sp, #0
 800c690:	60f8      	str	r0, [r7, #12]
 800c692:	60b9      	str	r1, [r7, #8]
 800c694:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6a1b      	ldr	r3, [r3, #32]
 800c69a:	f023 0210 	bic.w	r2, r3, #16
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	699b      	ldr	r3, [r3, #24]
 800c6a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6a1b      	ldr	r3, [r3, #32]
 800c6ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c6b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	031b      	lsls	r3, r3, #12
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c6c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	011b      	lsls	r3, r3, #4
 800c6cc:	693a      	ldr	r2, [r7, #16]
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	621a      	str	r2, [r3, #32]
}
 800c6de:	bf00      	nop
 800c6e0:	371c      	adds	r7, #28
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b085      	sub	sp, #20
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c702:	683a      	ldr	r2, [r7, #0]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	4313      	orrs	r3, r2
 800c708:	f043 0307 	orr.w	r3, r3, #7
 800c70c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	609a      	str	r2, [r3, #8]
}
 800c714:	bf00      	nop
 800c716:	3714      	adds	r7, #20
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c720:	b480      	push	{r7}
 800c722:	b087      	sub	sp, #28
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
 800c72c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c73a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	021a      	lsls	r2, r3, #8
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	431a      	orrs	r2, r3
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	4313      	orrs	r3, r2
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	697a      	ldr	r2, [r7, #20]
 800c752:	609a      	str	r2, [r3, #8]
}
 800c754:	bf00      	nop
 800c756:	371c      	adds	r7, #28
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c770:	2b01      	cmp	r3, #1
 800c772:	d101      	bne.n	800c778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c774:	2302      	movs	r3, #2
 800c776:	e06d      	b.n	800c854 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2202      	movs	r2, #2
 800c784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a30      	ldr	r2, [pc, #192]	; (800c860 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d004      	beq.n	800c7ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a2f      	ldr	r2, [pc, #188]	; (800c864 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d108      	bne.n	800c7be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c7b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a20      	ldr	r2, [pc, #128]	; (800c860 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d022      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ea:	d01d      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a1d      	ldr	r2, [pc, #116]	; (800c868 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d018      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a1c      	ldr	r2, [pc, #112]	; (800c86c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d013      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a1a      	ldr	r2, [pc, #104]	; (800c870 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d00e      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a15      	ldr	r2, [pc, #84]	; (800c864 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d009      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a16      	ldr	r2, [pc, #88]	; (800c874 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d004      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a15      	ldr	r2, [pc, #84]	; (800c878 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d10c      	bne.n	800c842 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c82e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	4313      	orrs	r3, r2
 800c838:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3714      	adds	r7, #20
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	40010000 	.word	0x40010000
 800c864:	40010400 	.word	0x40010400
 800c868:	40000400 	.word	0x40000400
 800c86c:	40000800 	.word	0x40000800
 800c870:	40000c00 	.word	0x40000c00
 800c874:	40014000 	.word	0x40014000
 800c878:	40001800 	.word	0x40001800

0800c87c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c886:	2300      	movs	r3, #0
 800c888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c890:	2b01      	cmp	r3, #1
 800c892:	d101      	bne.n	800c898 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c894:	2302      	movs	r3, #2
 800c896:	e065      	b.n	800c964 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	695b      	ldr	r3, [r3, #20]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fe:	4313      	orrs	r3, r2
 800c900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	041b      	lsls	r3, r3, #16
 800c90e:	4313      	orrs	r3, r2
 800c910:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a16      	ldr	r2, [pc, #88]	; (800c970 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d004      	beq.n	800c926 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a14      	ldr	r2, [pc, #80]	; (800c974 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d115      	bne.n	800c952 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c930:	051b      	lsls	r3, r3, #20
 800c932:	4313      	orrs	r3, r2
 800c934:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	69db      	ldr	r3, [r3, #28]
 800c940:	4313      	orrs	r3, r2
 800c942:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	4313      	orrs	r3, r2
 800c950:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3714      	adds	r7, #20
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	40010000 	.word	0x40010000
 800c974:	40010400 	.word	0x40010400

0800c978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c994:	bf00      	nop
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c9a8:	bf00      	nop
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d101      	bne.n	800c9c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e040      	b.n	800ca48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7f6 f91a 	bl	8002c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2224      	movs	r2, #36	; 0x24
 800c9e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f022 0201 	bic.w	r2, r2, #1
 800c9f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 fbe6 	bl	800d1c4 <UART_SetConfig>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d101      	bne.n	800ca02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e022      	b.n	800ca48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d002      	beq.n	800ca10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fe3e 	bl	800d68c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	685a      	ldr	r2, [r3, #4]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ca1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	689a      	ldr	r2, [r3, #8]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ca2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f042 0201 	orr.w	r2, r2, #1
 800ca3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 fec5 	bl	800d7d0 <UART_CheckIdleState>
 800ca46:	4603      	mov	r3, r0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08a      	sub	sp, #40	; 0x28
 800ca54:	af02      	add	r7, sp, #8
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	603b      	str	r3, [r7, #0]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca64:	2b20      	cmp	r3, #32
 800ca66:	d171      	bne.n	800cb4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d002      	beq.n	800ca74 <HAL_UART_Transmit+0x24>
 800ca6e:	88fb      	ldrh	r3, [r7, #6]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d101      	bne.n	800ca78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e06a      	b.n	800cb4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2221      	movs	r2, #33	; 0x21
 800ca84:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca86:	f7f6 fdeb 	bl	8003660 <HAL_GetTick>
 800ca8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	88fa      	ldrh	r2, [r7, #6]
 800ca90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	88fa      	ldrh	r2, [r7, #6]
 800ca98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caa4:	d108      	bne.n	800cab8 <HAL_UART_Transmit+0x68>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d104      	bne.n	800cab8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800caae:	2300      	movs	r3, #0
 800cab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	61bb      	str	r3, [r7, #24]
 800cab6:	e003      	b.n	800cac0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cabc:	2300      	movs	r3, #0
 800cabe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cac0:	e02c      	b.n	800cb1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	2200      	movs	r2, #0
 800caca:	2180      	movs	r1, #128	; 0x80
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	f000 feb6 	bl	800d83e <UART_WaitOnFlagUntilTimeout>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d001      	beq.n	800cadc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800cad8:	2303      	movs	r3, #3
 800cada:	e038      	b.n	800cb4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10b      	bne.n	800cafa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	881b      	ldrh	r3, [r3, #0]
 800cae6:	461a      	mov	r2, r3
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800caf0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	3302      	adds	r3, #2
 800caf6:	61bb      	str	r3, [r7, #24]
 800caf8:	e007      	b.n	800cb0a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	781a      	ldrb	r2, [r3, #0]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	3301      	adds	r3, #1
 800cb08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	3b01      	subs	r3, #1
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1cc      	bne.n	800cac2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	2140      	movs	r1, #64	; 0x40
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f000 fe83 	bl	800d83e <UART_WaitOnFlagUntilTimeout>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d001      	beq.n	800cb42 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800cb3e:	2303      	movs	r3, #3
 800cb40:	e005      	b.n	800cb4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2220      	movs	r2, #32
 800cb46:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	e000      	b.n	800cb4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800cb4c:	2302      	movs	r3, #2
  }
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3720      	adds	r7, #32
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b08a      	sub	sp, #40	; 0x28
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	60f8      	str	r0, [r7, #12]
 800cb5e:	60b9      	str	r1, [r7, #8]
 800cb60:	4613      	mov	r3, r2
 800cb62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb6a:	2b20      	cmp	r3, #32
 800cb6c:	d132      	bne.n	800cbd4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d002      	beq.n	800cb7a <HAL_UART_Receive_IT+0x24>
 800cb74:	88fb      	ldrh	r3, [r7, #6]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e02b      	b.n	800cbd6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2200      	movs	r2, #0
 800cb82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d018      	beq.n	800cbc4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	e853 3f00 	ldrex	r3, [r3]
 800cb9e:	613b      	str	r3, [r7, #16]
   return(result);
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cba6:	627b      	str	r3, [r7, #36]	; 0x24
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	461a      	mov	r2, r3
 800cbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb0:	623b      	str	r3, [r7, #32]
 800cbb2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb4:	69f9      	ldr	r1, [r7, #28]
 800cbb6:	6a3a      	ldr	r2, [r7, #32]
 800cbb8:	e841 2300 	strex	r3, r2, [r1]
 800cbbc:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1e6      	bne.n	800cb92 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cbc4:	88fb      	ldrh	r3, [r7, #6]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	68b9      	ldr	r1, [r7, #8]
 800cbca:	68f8      	ldr	r0, [r7, #12]
 800cbcc:	f000 fefe 	bl	800d9cc <UART_Start_Receive_IT>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	e000      	b.n	800cbd6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800cbd4:	2302      	movs	r3, #2
  }
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3728      	adds	r7, #40	; 0x28
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
	...

0800cbe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b0ba      	sub	sp, #232	; 0xe8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	69db      	ldr	r3, [r3, #28]
 800cbee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cc06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cc0a:	f640 030f 	movw	r3, #2063	; 0x80f
 800cc0e:	4013      	ands	r3, r2
 800cc10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cc14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d115      	bne.n	800cc48 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cc1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc20:	f003 0320 	and.w	r3, r3, #32
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00f      	beq.n	800cc48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cc28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc2c:	f003 0320 	and.w	r3, r3, #32
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d009      	beq.n	800cc48 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	f000 8297 	beq.w	800d16c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	4798      	blx	r3
      }
      return;
 800cc46:	e291      	b.n	800d16c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cc48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f000 8117 	beq.w	800ce80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cc52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc56:	f003 0301 	and.w	r3, r3, #1
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d106      	bne.n	800cc6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800cc5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cc62:	4b85      	ldr	r3, [pc, #532]	; (800ce78 <HAL_UART_IRQHandler+0x298>)
 800cc64:	4013      	ands	r3, r2
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	f000 810a 	beq.w	800ce80 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d011      	beq.n	800cc9c <HAL_UART_IRQHandler+0xbc>
 800cc78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d00b      	beq.n	800cc9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc92:	f043 0201 	orr.w	r2, r3, #1
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cca0:	f003 0302 	and.w	r3, r3, #2
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d011      	beq.n	800cccc <HAL_UART_IRQHandler+0xec>
 800cca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccac:	f003 0301 	and.w	r3, r3, #1
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00b      	beq.n	800cccc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2202      	movs	r2, #2
 800ccba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccc2:	f043 0204 	orr.w	r2, r3, #4
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccd0:	f003 0304 	and.w	r3, r3, #4
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d011      	beq.n	800ccfc <HAL_UART_IRQHandler+0x11c>
 800ccd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00b      	beq.n	800ccfc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2204      	movs	r2, #4
 800ccea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccf2:	f043 0202 	orr.w	r2, r3, #2
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ccfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd00:	f003 0308 	and.w	r3, r3, #8
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d017      	beq.n	800cd38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cd08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd0c:	f003 0320 	and.w	r3, r3, #32
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d105      	bne.n	800cd20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cd14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d00b      	beq.n	800cd38 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2208      	movs	r2, #8
 800cd26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd2e:	f043 0208 	orr.w	r2, r3, #8
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cd38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d012      	beq.n	800cd6a <HAL_UART_IRQHandler+0x18a>
 800cd44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00c      	beq.n	800cd6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd60:	f043 0220 	orr.w	r2, r3, #32
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	f000 81fd 	beq.w	800d170 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cd76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd7a:	f003 0320 	and.w	r3, r3, #32
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d00d      	beq.n	800cd9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cd82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd86:	f003 0320 	and.w	r3, r3, #32
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d007      	beq.n	800cd9e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d003      	beq.n	800cd9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cda4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb2:	2b40      	cmp	r3, #64	; 0x40
 800cdb4:	d005      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cdb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cdba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d04f      	beq.n	800ce62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fec8 	bl	800db58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdd2:	2b40      	cmp	r3, #64	; 0x40
 800cdd4:	d141      	bne.n	800ce5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3308      	adds	r3, #8
 800cddc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cde4:	e853 3f00 	ldrex	r3, [r3]
 800cde8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cdec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cdf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	3308      	adds	r3, #8
 800cdfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ce02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ce06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ce0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ce12:	e841 2300 	strex	r3, r2, [r1]
 800ce16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ce1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1d9      	bne.n	800cdd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d013      	beq.n	800ce52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce2e:	4a13      	ldr	r2, [pc, #76]	; (800ce7c <HAL_UART_IRQHandler+0x29c>)
 800ce30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7f7 f9f8 	bl	800422c <HAL_DMA_Abort_IT>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d017      	beq.n	800ce72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce50:	e00f      	b.n	800ce72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 f9a0 	bl	800d198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce58:	e00b      	b.n	800ce72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f99c 	bl	800d198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce60:	e007      	b.n	800ce72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 f998 	bl	800d198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800ce70:	e17e      	b.n	800d170 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce72:	bf00      	nop
    return;
 800ce74:	e17c      	b.n	800d170 <HAL_UART_IRQHandler+0x590>
 800ce76:	bf00      	nop
 800ce78:	04000120 	.word	0x04000120
 800ce7c:	0800dc21 	.word	0x0800dc21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	f040 814c 	bne.w	800d122 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ce8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce8e:	f003 0310 	and.w	r3, r3, #16
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	f000 8145 	beq.w	800d122 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ce98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce9c:	f003 0310 	and.w	r3, r3, #16
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 813e 	beq.w	800d122 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2210      	movs	r2, #16
 800ceac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceb8:	2b40      	cmp	r3, #64	; 0x40
 800ceba:	f040 80b6 	bne.w	800d02a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ceca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cece:	2b00      	cmp	r3, #0
 800ced0:	f000 8150 	beq.w	800d174 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ceda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cede:	429a      	cmp	r2, r3
 800cee0:	f080 8148 	bcs.w	800d174 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ceea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cef2:	69db      	ldr	r3, [r3, #28]
 800cef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cef8:	f000 8086 	beq.w	800d008 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf08:	e853 3f00 	ldrex	r3, [r3]
 800cf0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cf10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	461a      	mov	r2, r3
 800cf22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cf26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cf32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cf36:	e841 2300 	strex	r3, r2, [r1]
 800cf3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cf3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1da      	bne.n	800cefc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf50:	e853 3f00 	ldrex	r3, [r3]
 800cf54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cf56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf58:	f023 0301 	bic.w	r3, r3, #1
 800cf5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	3308      	adds	r3, #8
 800cf66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cf6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cf6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cf72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cf76:	e841 2300 	strex	r3, r2, [r1]
 800cf7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cf7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1e1      	bne.n	800cf46 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	3308      	adds	r3, #8
 800cf88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf8c:	e853 3f00 	ldrex	r3, [r3]
 800cf90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cf92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	3308      	adds	r3, #8
 800cfa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cfa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cfa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cfac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cfae:	e841 2300 	strex	r3, r2, [r1]
 800cfb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cfb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1e3      	bne.n	800cf82 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2220      	movs	r2, #32
 800cfbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfd0:	e853 3f00 	ldrex	r3, [r3]
 800cfd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cfd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfd8:	f023 0310 	bic.w	r3, r3, #16
 800cfdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cfea:	65bb      	str	r3, [r7, #88]	; 0x58
 800cfec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cff2:	e841 2300 	strex	r3, r2, [r1]
 800cff6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1e4      	bne.n	800cfc8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d002:	4618      	mov	r0, r3
 800d004:	f7f7 f8a2 	bl	800414c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2202      	movs	r2, #2
 800d00c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	b29b      	uxth	r3, r3
 800d020:	4619      	mov	r1, r3
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 f8c2 	bl	800d1ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d028:	e0a4      	b.n	800d174 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d036:	b29b      	uxth	r3, r3
 800d038:	1ad3      	subs	r3, r2, r3
 800d03a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d044:	b29b      	uxth	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	f000 8096 	beq.w	800d178 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800d04c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d050:	2b00      	cmp	r3, #0
 800d052:	f000 8091 	beq.w	800d178 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05e:	e853 3f00 	ldrex	r3, [r3]
 800d062:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d066:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d06a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	461a      	mov	r2, r3
 800d074:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d078:	647b      	str	r3, [r7, #68]	; 0x44
 800d07a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d07e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d080:	e841 2300 	strex	r3, r2, [r1]
 800d084:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1e4      	bne.n	800d056 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	3308      	adds	r3, #8
 800d092:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	e853 3f00 	ldrex	r3, [r3]
 800d09a:	623b      	str	r3, [r7, #32]
   return(result);
 800d09c:	6a3b      	ldr	r3, [r7, #32]
 800d09e:	f023 0301 	bic.w	r3, r3, #1
 800d0a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	3308      	adds	r3, #8
 800d0ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d0b0:	633a      	str	r2, [r7, #48]	; 0x30
 800d0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0b8:	e841 2300 	strex	r3, r2, [r1]
 800d0bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d1e3      	bne.n	800d08c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2220      	movs	r2, #32
 800d0c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	e853 3f00 	ldrex	r3, [r3]
 800d0e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f023 0310 	bic.w	r3, r3, #16
 800d0ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d0fa:	61fb      	str	r3, [r7, #28]
 800d0fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0fe:	69b9      	ldr	r1, [r7, #24]
 800d100:	69fa      	ldr	r2, [r7, #28]
 800d102:	e841 2300 	strex	r3, r2, [r1]
 800d106:	617b      	str	r3, [r7, #20]
   return(result);
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d1e4      	bne.n	800d0d8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2202      	movs	r2, #2
 800d112:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d118:	4619      	mov	r1, r3
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f846 	bl	800d1ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d120:	e02a      	b.n	800d178 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00e      	beq.n	800d14c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d12e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d136:	2b00      	cmp	r3, #0
 800d138:	d008      	beq.n	800d14c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d01c      	beq.n	800d17c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	4798      	blx	r3
    }
    return;
 800d14a:	e017      	b.n	800d17c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d154:	2b00      	cmp	r3, #0
 800d156:	d012      	beq.n	800d17e <HAL_UART_IRQHandler+0x59e>
 800d158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00c      	beq.n	800d17e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 fd71 	bl	800dc4c <UART_EndTransmit_IT>
    return;
 800d16a:	e008      	b.n	800d17e <HAL_UART_IRQHandler+0x59e>
      return;
 800d16c:	bf00      	nop
 800d16e:	e006      	b.n	800d17e <HAL_UART_IRQHandler+0x59e>
    return;
 800d170:	bf00      	nop
 800d172:	e004      	b.n	800d17e <HAL_UART_IRQHandler+0x59e>
      return;
 800d174:	bf00      	nop
 800d176:	e002      	b.n	800d17e <HAL_UART_IRQHandler+0x59e>
      return;
 800d178:	bf00      	nop
 800d17a:	e000      	b.n	800d17e <HAL_UART_IRQHandler+0x59e>
    return;
 800d17c:	bf00      	nop
  }

}
 800d17e:	37e8      	adds	r7, #232	; 0xe8
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d18c:	bf00      	nop
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1b8:	bf00      	nop
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b088      	sub	sp, #32
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	689a      	ldr	r2, [r3, #8]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	691b      	ldr	r3, [r3, #16]
 800d1d8:	431a      	orrs	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	695b      	ldr	r3, [r3, #20]
 800d1de:	431a      	orrs	r2, r3
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	69db      	ldr	r3, [r3, #28]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	4ba6      	ldr	r3, [pc, #664]	; (800d488 <UART_SetConfig+0x2c4>)
 800d1f0:	4013      	ands	r3, r2
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	6812      	ldr	r2, [r2, #0]
 800d1f6:	6979      	ldr	r1, [r7, #20]
 800d1f8:	430b      	orrs	r3, r1
 800d1fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	68da      	ldr	r2, [r3, #12]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	430a      	orrs	r2, r1
 800d210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	699b      	ldr	r3, [r3, #24]
 800d216:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6a1b      	ldr	r3, [r3, #32]
 800d21c:	697a      	ldr	r2, [r7, #20]
 800d21e:	4313      	orrs	r3, r2
 800d220:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	430a      	orrs	r2, r1
 800d234:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a94      	ldr	r2, [pc, #592]	; (800d48c <UART_SetConfig+0x2c8>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d120      	bne.n	800d282 <UART_SetConfig+0xbe>
 800d240:	4b93      	ldr	r3, [pc, #588]	; (800d490 <UART_SetConfig+0x2cc>)
 800d242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d246:	f003 0303 	and.w	r3, r3, #3
 800d24a:	2b03      	cmp	r3, #3
 800d24c:	d816      	bhi.n	800d27c <UART_SetConfig+0xb8>
 800d24e:	a201      	add	r2, pc, #4	; (adr r2, 800d254 <UART_SetConfig+0x90>)
 800d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d254:	0800d265 	.word	0x0800d265
 800d258:	0800d271 	.word	0x0800d271
 800d25c:	0800d26b 	.word	0x0800d26b
 800d260:	0800d277 	.word	0x0800d277
 800d264:	2301      	movs	r3, #1
 800d266:	77fb      	strb	r3, [r7, #31]
 800d268:	e150      	b.n	800d50c <UART_SetConfig+0x348>
 800d26a:	2302      	movs	r3, #2
 800d26c:	77fb      	strb	r3, [r7, #31]
 800d26e:	e14d      	b.n	800d50c <UART_SetConfig+0x348>
 800d270:	2304      	movs	r3, #4
 800d272:	77fb      	strb	r3, [r7, #31]
 800d274:	e14a      	b.n	800d50c <UART_SetConfig+0x348>
 800d276:	2308      	movs	r3, #8
 800d278:	77fb      	strb	r3, [r7, #31]
 800d27a:	e147      	b.n	800d50c <UART_SetConfig+0x348>
 800d27c:	2310      	movs	r3, #16
 800d27e:	77fb      	strb	r3, [r7, #31]
 800d280:	e144      	b.n	800d50c <UART_SetConfig+0x348>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a83      	ldr	r2, [pc, #524]	; (800d494 <UART_SetConfig+0x2d0>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d132      	bne.n	800d2f2 <UART_SetConfig+0x12e>
 800d28c:	4b80      	ldr	r3, [pc, #512]	; (800d490 <UART_SetConfig+0x2cc>)
 800d28e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d292:	f003 030c 	and.w	r3, r3, #12
 800d296:	2b0c      	cmp	r3, #12
 800d298:	d828      	bhi.n	800d2ec <UART_SetConfig+0x128>
 800d29a:	a201      	add	r2, pc, #4	; (adr r2, 800d2a0 <UART_SetConfig+0xdc>)
 800d29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a0:	0800d2d5 	.word	0x0800d2d5
 800d2a4:	0800d2ed 	.word	0x0800d2ed
 800d2a8:	0800d2ed 	.word	0x0800d2ed
 800d2ac:	0800d2ed 	.word	0x0800d2ed
 800d2b0:	0800d2e1 	.word	0x0800d2e1
 800d2b4:	0800d2ed 	.word	0x0800d2ed
 800d2b8:	0800d2ed 	.word	0x0800d2ed
 800d2bc:	0800d2ed 	.word	0x0800d2ed
 800d2c0:	0800d2db 	.word	0x0800d2db
 800d2c4:	0800d2ed 	.word	0x0800d2ed
 800d2c8:	0800d2ed 	.word	0x0800d2ed
 800d2cc:	0800d2ed 	.word	0x0800d2ed
 800d2d0:	0800d2e7 	.word	0x0800d2e7
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	77fb      	strb	r3, [r7, #31]
 800d2d8:	e118      	b.n	800d50c <UART_SetConfig+0x348>
 800d2da:	2302      	movs	r3, #2
 800d2dc:	77fb      	strb	r3, [r7, #31]
 800d2de:	e115      	b.n	800d50c <UART_SetConfig+0x348>
 800d2e0:	2304      	movs	r3, #4
 800d2e2:	77fb      	strb	r3, [r7, #31]
 800d2e4:	e112      	b.n	800d50c <UART_SetConfig+0x348>
 800d2e6:	2308      	movs	r3, #8
 800d2e8:	77fb      	strb	r3, [r7, #31]
 800d2ea:	e10f      	b.n	800d50c <UART_SetConfig+0x348>
 800d2ec:	2310      	movs	r3, #16
 800d2ee:	77fb      	strb	r3, [r7, #31]
 800d2f0:	e10c      	b.n	800d50c <UART_SetConfig+0x348>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a68      	ldr	r2, [pc, #416]	; (800d498 <UART_SetConfig+0x2d4>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d120      	bne.n	800d33e <UART_SetConfig+0x17a>
 800d2fc:	4b64      	ldr	r3, [pc, #400]	; (800d490 <UART_SetConfig+0x2cc>)
 800d2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d302:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d306:	2b30      	cmp	r3, #48	; 0x30
 800d308:	d013      	beq.n	800d332 <UART_SetConfig+0x16e>
 800d30a:	2b30      	cmp	r3, #48	; 0x30
 800d30c:	d814      	bhi.n	800d338 <UART_SetConfig+0x174>
 800d30e:	2b20      	cmp	r3, #32
 800d310:	d009      	beq.n	800d326 <UART_SetConfig+0x162>
 800d312:	2b20      	cmp	r3, #32
 800d314:	d810      	bhi.n	800d338 <UART_SetConfig+0x174>
 800d316:	2b00      	cmp	r3, #0
 800d318:	d002      	beq.n	800d320 <UART_SetConfig+0x15c>
 800d31a:	2b10      	cmp	r3, #16
 800d31c:	d006      	beq.n	800d32c <UART_SetConfig+0x168>
 800d31e:	e00b      	b.n	800d338 <UART_SetConfig+0x174>
 800d320:	2300      	movs	r3, #0
 800d322:	77fb      	strb	r3, [r7, #31]
 800d324:	e0f2      	b.n	800d50c <UART_SetConfig+0x348>
 800d326:	2302      	movs	r3, #2
 800d328:	77fb      	strb	r3, [r7, #31]
 800d32a:	e0ef      	b.n	800d50c <UART_SetConfig+0x348>
 800d32c:	2304      	movs	r3, #4
 800d32e:	77fb      	strb	r3, [r7, #31]
 800d330:	e0ec      	b.n	800d50c <UART_SetConfig+0x348>
 800d332:	2308      	movs	r3, #8
 800d334:	77fb      	strb	r3, [r7, #31]
 800d336:	e0e9      	b.n	800d50c <UART_SetConfig+0x348>
 800d338:	2310      	movs	r3, #16
 800d33a:	77fb      	strb	r3, [r7, #31]
 800d33c:	e0e6      	b.n	800d50c <UART_SetConfig+0x348>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a56      	ldr	r2, [pc, #344]	; (800d49c <UART_SetConfig+0x2d8>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d120      	bne.n	800d38a <UART_SetConfig+0x1c6>
 800d348:	4b51      	ldr	r3, [pc, #324]	; (800d490 <UART_SetConfig+0x2cc>)
 800d34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d34e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d352:	2bc0      	cmp	r3, #192	; 0xc0
 800d354:	d013      	beq.n	800d37e <UART_SetConfig+0x1ba>
 800d356:	2bc0      	cmp	r3, #192	; 0xc0
 800d358:	d814      	bhi.n	800d384 <UART_SetConfig+0x1c0>
 800d35a:	2b80      	cmp	r3, #128	; 0x80
 800d35c:	d009      	beq.n	800d372 <UART_SetConfig+0x1ae>
 800d35e:	2b80      	cmp	r3, #128	; 0x80
 800d360:	d810      	bhi.n	800d384 <UART_SetConfig+0x1c0>
 800d362:	2b00      	cmp	r3, #0
 800d364:	d002      	beq.n	800d36c <UART_SetConfig+0x1a8>
 800d366:	2b40      	cmp	r3, #64	; 0x40
 800d368:	d006      	beq.n	800d378 <UART_SetConfig+0x1b4>
 800d36a:	e00b      	b.n	800d384 <UART_SetConfig+0x1c0>
 800d36c:	2300      	movs	r3, #0
 800d36e:	77fb      	strb	r3, [r7, #31]
 800d370:	e0cc      	b.n	800d50c <UART_SetConfig+0x348>
 800d372:	2302      	movs	r3, #2
 800d374:	77fb      	strb	r3, [r7, #31]
 800d376:	e0c9      	b.n	800d50c <UART_SetConfig+0x348>
 800d378:	2304      	movs	r3, #4
 800d37a:	77fb      	strb	r3, [r7, #31]
 800d37c:	e0c6      	b.n	800d50c <UART_SetConfig+0x348>
 800d37e:	2308      	movs	r3, #8
 800d380:	77fb      	strb	r3, [r7, #31]
 800d382:	e0c3      	b.n	800d50c <UART_SetConfig+0x348>
 800d384:	2310      	movs	r3, #16
 800d386:	77fb      	strb	r3, [r7, #31]
 800d388:	e0c0      	b.n	800d50c <UART_SetConfig+0x348>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a44      	ldr	r2, [pc, #272]	; (800d4a0 <UART_SetConfig+0x2dc>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d125      	bne.n	800d3e0 <UART_SetConfig+0x21c>
 800d394:	4b3e      	ldr	r3, [pc, #248]	; (800d490 <UART_SetConfig+0x2cc>)
 800d396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d39a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d39e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d3a2:	d017      	beq.n	800d3d4 <UART_SetConfig+0x210>
 800d3a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d3a8:	d817      	bhi.n	800d3da <UART_SetConfig+0x216>
 800d3aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3ae:	d00b      	beq.n	800d3c8 <UART_SetConfig+0x204>
 800d3b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3b4:	d811      	bhi.n	800d3da <UART_SetConfig+0x216>
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d003      	beq.n	800d3c2 <UART_SetConfig+0x1fe>
 800d3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3be:	d006      	beq.n	800d3ce <UART_SetConfig+0x20a>
 800d3c0:	e00b      	b.n	800d3da <UART_SetConfig+0x216>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	77fb      	strb	r3, [r7, #31]
 800d3c6:	e0a1      	b.n	800d50c <UART_SetConfig+0x348>
 800d3c8:	2302      	movs	r3, #2
 800d3ca:	77fb      	strb	r3, [r7, #31]
 800d3cc:	e09e      	b.n	800d50c <UART_SetConfig+0x348>
 800d3ce:	2304      	movs	r3, #4
 800d3d0:	77fb      	strb	r3, [r7, #31]
 800d3d2:	e09b      	b.n	800d50c <UART_SetConfig+0x348>
 800d3d4:	2308      	movs	r3, #8
 800d3d6:	77fb      	strb	r3, [r7, #31]
 800d3d8:	e098      	b.n	800d50c <UART_SetConfig+0x348>
 800d3da:	2310      	movs	r3, #16
 800d3dc:	77fb      	strb	r3, [r7, #31]
 800d3de:	e095      	b.n	800d50c <UART_SetConfig+0x348>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a2f      	ldr	r2, [pc, #188]	; (800d4a4 <UART_SetConfig+0x2e0>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d125      	bne.n	800d436 <UART_SetConfig+0x272>
 800d3ea:	4b29      	ldr	r3, [pc, #164]	; (800d490 <UART_SetConfig+0x2cc>)
 800d3ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d3f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d3f8:	d017      	beq.n	800d42a <UART_SetConfig+0x266>
 800d3fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d3fe:	d817      	bhi.n	800d430 <UART_SetConfig+0x26c>
 800d400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d404:	d00b      	beq.n	800d41e <UART_SetConfig+0x25a>
 800d406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d40a:	d811      	bhi.n	800d430 <UART_SetConfig+0x26c>
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d003      	beq.n	800d418 <UART_SetConfig+0x254>
 800d410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d414:	d006      	beq.n	800d424 <UART_SetConfig+0x260>
 800d416:	e00b      	b.n	800d430 <UART_SetConfig+0x26c>
 800d418:	2301      	movs	r3, #1
 800d41a:	77fb      	strb	r3, [r7, #31]
 800d41c:	e076      	b.n	800d50c <UART_SetConfig+0x348>
 800d41e:	2302      	movs	r3, #2
 800d420:	77fb      	strb	r3, [r7, #31]
 800d422:	e073      	b.n	800d50c <UART_SetConfig+0x348>
 800d424:	2304      	movs	r3, #4
 800d426:	77fb      	strb	r3, [r7, #31]
 800d428:	e070      	b.n	800d50c <UART_SetConfig+0x348>
 800d42a:	2308      	movs	r3, #8
 800d42c:	77fb      	strb	r3, [r7, #31]
 800d42e:	e06d      	b.n	800d50c <UART_SetConfig+0x348>
 800d430:	2310      	movs	r3, #16
 800d432:	77fb      	strb	r3, [r7, #31]
 800d434:	e06a      	b.n	800d50c <UART_SetConfig+0x348>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a1b      	ldr	r2, [pc, #108]	; (800d4a8 <UART_SetConfig+0x2e4>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d138      	bne.n	800d4b2 <UART_SetConfig+0x2ee>
 800d440:	4b13      	ldr	r3, [pc, #76]	; (800d490 <UART_SetConfig+0x2cc>)
 800d442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d446:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d44a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d44e:	d017      	beq.n	800d480 <UART_SetConfig+0x2bc>
 800d450:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d454:	d82a      	bhi.n	800d4ac <UART_SetConfig+0x2e8>
 800d456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d45a:	d00b      	beq.n	800d474 <UART_SetConfig+0x2b0>
 800d45c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d460:	d824      	bhi.n	800d4ac <UART_SetConfig+0x2e8>
 800d462:	2b00      	cmp	r3, #0
 800d464:	d003      	beq.n	800d46e <UART_SetConfig+0x2aa>
 800d466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d46a:	d006      	beq.n	800d47a <UART_SetConfig+0x2b6>
 800d46c:	e01e      	b.n	800d4ac <UART_SetConfig+0x2e8>
 800d46e:	2300      	movs	r3, #0
 800d470:	77fb      	strb	r3, [r7, #31]
 800d472:	e04b      	b.n	800d50c <UART_SetConfig+0x348>
 800d474:	2302      	movs	r3, #2
 800d476:	77fb      	strb	r3, [r7, #31]
 800d478:	e048      	b.n	800d50c <UART_SetConfig+0x348>
 800d47a:	2304      	movs	r3, #4
 800d47c:	77fb      	strb	r3, [r7, #31]
 800d47e:	e045      	b.n	800d50c <UART_SetConfig+0x348>
 800d480:	2308      	movs	r3, #8
 800d482:	77fb      	strb	r3, [r7, #31]
 800d484:	e042      	b.n	800d50c <UART_SetConfig+0x348>
 800d486:	bf00      	nop
 800d488:	efff69f3 	.word	0xefff69f3
 800d48c:	40011000 	.word	0x40011000
 800d490:	40023800 	.word	0x40023800
 800d494:	40004400 	.word	0x40004400
 800d498:	40004800 	.word	0x40004800
 800d49c:	40004c00 	.word	0x40004c00
 800d4a0:	40005000 	.word	0x40005000
 800d4a4:	40011400 	.word	0x40011400
 800d4a8:	40007800 	.word	0x40007800
 800d4ac:	2310      	movs	r3, #16
 800d4ae:	77fb      	strb	r3, [r7, #31]
 800d4b0:	e02c      	b.n	800d50c <UART_SetConfig+0x348>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a72      	ldr	r2, [pc, #456]	; (800d680 <UART_SetConfig+0x4bc>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d125      	bne.n	800d508 <UART_SetConfig+0x344>
 800d4bc:	4b71      	ldr	r3, [pc, #452]	; (800d684 <UART_SetConfig+0x4c0>)
 800d4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d4c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d4ca:	d017      	beq.n	800d4fc <UART_SetConfig+0x338>
 800d4cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d4d0:	d817      	bhi.n	800d502 <UART_SetConfig+0x33e>
 800d4d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4d6:	d00b      	beq.n	800d4f0 <UART_SetConfig+0x32c>
 800d4d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4dc:	d811      	bhi.n	800d502 <UART_SetConfig+0x33e>
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d003      	beq.n	800d4ea <UART_SetConfig+0x326>
 800d4e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4e6:	d006      	beq.n	800d4f6 <UART_SetConfig+0x332>
 800d4e8:	e00b      	b.n	800d502 <UART_SetConfig+0x33e>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	77fb      	strb	r3, [r7, #31]
 800d4ee:	e00d      	b.n	800d50c <UART_SetConfig+0x348>
 800d4f0:	2302      	movs	r3, #2
 800d4f2:	77fb      	strb	r3, [r7, #31]
 800d4f4:	e00a      	b.n	800d50c <UART_SetConfig+0x348>
 800d4f6:	2304      	movs	r3, #4
 800d4f8:	77fb      	strb	r3, [r7, #31]
 800d4fa:	e007      	b.n	800d50c <UART_SetConfig+0x348>
 800d4fc:	2308      	movs	r3, #8
 800d4fe:	77fb      	strb	r3, [r7, #31]
 800d500:	e004      	b.n	800d50c <UART_SetConfig+0x348>
 800d502:	2310      	movs	r3, #16
 800d504:	77fb      	strb	r3, [r7, #31]
 800d506:	e001      	b.n	800d50c <UART_SetConfig+0x348>
 800d508:	2310      	movs	r3, #16
 800d50a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	69db      	ldr	r3, [r3, #28]
 800d510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d514:	d15b      	bne.n	800d5ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d516:	7ffb      	ldrb	r3, [r7, #31]
 800d518:	2b08      	cmp	r3, #8
 800d51a:	d828      	bhi.n	800d56e <UART_SetConfig+0x3aa>
 800d51c:	a201      	add	r2, pc, #4	; (adr r2, 800d524 <UART_SetConfig+0x360>)
 800d51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d522:	bf00      	nop
 800d524:	0800d549 	.word	0x0800d549
 800d528:	0800d551 	.word	0x0800d551
 800d52c:	0800d559 	.word	0x0800d559
 800d530:	0800d56f 	.word	0x0800d56f
 800d534:	0800d55f 	.word	0x0800d55f
 800d538:	0800d56f 	.word	0x0800d56f
 800d53c:	0800d56f 	.word	0x0800d56f
 800d540:	0800d56f 	.word	0x0800d56f
 800d544:	0800d567 	.word	0x0800d567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d548:	f7fb fc34 	bl	8008db4 <HAL_RCC_GetPCLK1Freq>
 800d54c:	61b8      	str	r0, [r7, #24]
        break;
 800d54e:	e013      	b.n	800d578 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d550:	f7fb fc44 	bl	8008ddc <HAL_RCC_GetPCLK2Freq>
 800d554:	61b8      	str	r0, [r7, #24]
        break;
 800d556:	e00f      	b.n	800d578 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d558:	4b4b      	ldr	r3, [pc, #300]	; (800d688 <UART_SetConfig+0x4c4>)
 800d55a:	61bb      	str	r3, [r7, #24]
        break;
 800d55c:	e00c      	b.n	800d578 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d55e:	f7fb fb57 	bl	8008c10 <HAL_RCC_GetSysClockFreq>
 800d562:	61b8      	str	r0, [r7, #24]
        break;
 800d564:	e008      	b.n	800d578 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d56a:	61bb      	str	r3, [r7, #24]
        break;
 800d56c:	e004      	b.n	800d578 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d56e:	2300      	movs	r3, #0
 800d570:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	77bb      	strb	r3, [r7, #30]
        break;
 800d576:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d074      	beq.n	800d668 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	005a      	lsls	r2, r3, #1
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	085b      	lsrs	r3, r3, #1
 800d588:	441a      	add	r2, r3
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d592:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	2b0f      	cmp	r3, #15
 800d598:	d916      	bls.n	800d5c8 <UART_SetConfig+0x404>
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5a0:	d212      	bcs.n	800d5c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	f023 030f 	bic.w	r3, r3, #15
 800d5aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	085b      	lsrs	r3, r3, #1
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	f003 0307 	and.w	r3, r3, #7
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	89fb      	ldrh	r3, [r7, #14]
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	89fa      	ldrh	r2, [r7, #14]
 800d5c4:	60da      	str	r2, [r3, #12]
 800d5c6:	e04f      	b.n	800d668 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	77bb      	strb	r3, [r7, #30]
 800d5cc:	e04c      	b.n	800d668 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d5ce:	7ffb      	ldrb	r3, [r7, #31]
 800d5d0:	2b08      	cmp	r3, #8
 800d5d2:	d828      	bhi.n	800d626 <UART_SetConfig+0x462>
 800d5d4:	a201      	add	r2, pc, #4	; (adr r2, 800d5dc <UART_SetConfig+0x418>)
 800d5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5da:	bf00      	nop
 800d5dc:	0800d601 	.word	0x0800d601
 800d5e0:	0800d609 	.word	0x0800d609
 800d5e4:	0800d611 	.word	0x0800d611
 800d5e8:	0800d627 	.word	0x0800d627
 800d5ec:	0800d617 	.word	0x0800d617
 800d5f0:	0800d627 	.word	0x0800d627
 800d5f4:	0800d627 	.word	0x0800d627
 800d5f8:	0800d627 	.word	0x0800d627
 800d5fc:	0800d61f 	.word	0x0800d61f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d600:	f7fb fbd8 	bl	8008db4 <HAL_RCC_GetPCLK1Freq>
 800d604:	61b8      	str	r0, [r7, #24]
        break;
 800d606:	e013      	b.n	800d630 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d608:	f7fb fbe8 	bl	8008ddc <HAL_RCC_GetPCLK2Freq>
 800d60c:	61b8      	str	r0, [r7, #24]
        break;
 800d60e:	e00f      	b.n	800d630 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d610:	4b1d      	ldr	r3, [pc, #116]	; (800d688 <UART_SetConfig+0x4c4>)
 800d612:	61bb      	str	r3, [r7, #24]
        break;
 800d614:	e00c      	b.n	800d630 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d616:	f7fb fafb 	bl	8008c10 <HAL_RCC_GetSysClockFreq>
 800d61a:	61b8      	str	r0, [r7, #24]
        break;
 800d61c:	e008      	b.n	800d630 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d61e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d622:	61bb      	str	r3, [r7, #24]
        break;
 800d624:	e004      	b.n	800d630 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d626:	2300      	movs	r3, #0
 800d628:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d62a:	2301      	movs	r3, #1
 800d62c:	77bb      	strb	r3, [r7, #30]
        break;
 800d62e:	bf00      	nop
    }

    if (pclk != 0U)
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d018      	beq.n	800d668 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	085a      	lsrs	r2, r3, #1
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	441a      	add	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	fbb2 f3f3 	udiv	r3, r2, r3
 800d648:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	2b0f      	cmp	r3, #15
 800d64e:	d909      	bls.n	800d664 <UART_SetConfig+0x4a0>
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d656:	d205      	bcs.n	800d664 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	b29a      	uxth	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	60da      	str	r2, [r3, #12]
 800d662:	e001      	b.n	800d668 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800d674:	7fbb      	ldrb	r3, [r7, #30]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3720      	adds	r7, #32
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	40007c00 	.word	0x40007c00
 800d684:	40023800 	.word	0x40023800
 800d688:	00f42400 	.word	0x00f42400

0800d68c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d698:	f003 0301 	and.w	r3, r3, #1
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00a      	beq.n	800d6b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	685b      	ldr	r3, [r3, #4]
 800d6a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	430a      	orrs	r2, r1
 800d6b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ba:	f003 0302 	and.w	r3, r3, #2
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00a      	beq.n	800d6d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	430a      	orrs	r2, r1
 800d6d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6dc:	f003 0304 	and.w	r3, r3, #4
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d00a      	beq.n	800d6fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	430a      	orrs	r2, r1
 800d6f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fe:	f003 0308 	and.w	r3, r3, #8
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00a      	beq.n	800d71c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	430a      	orrs	r2, r1
 800d71a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d720:	f003 0310 	and.w	r3, r3, #16
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00a      	beq.n	800d73e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	430a      	orrs	r2, r1
 800d73c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d742:	f003 0320 	and.w	r3, r3, #32
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00a      	beq.n	800d760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	689b      	ldr	r3, [r3, #8]
 800d750:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	430a      	orrs	r2, r1
 800d75e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d01a      	beq.n	800d7a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	430a      	orrs	r2, r1
 800d780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d78a:	d10a      	bne.n	800d7a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	430a      	orrs	r2, r1
 800d7a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00a      	beq.n	800d7c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	430a      	orrs	r2, r1
 800d7c2:	605a      	str	r2, [r3, #4]
  }
}
 800d7c4:	bf00      	nop
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr

0800d7d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af02      	add	r7, sp, #8
 800d7d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d7e0:	f7f5 ff3e 	bl	8003660 <HAL_GetTick>
 800d7e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f003 0308 	and.w	r3, r3, #8
 800d7f0:	2b08      	cmp	r3, #8
 800d7f2:	d10e      	bne.n	800d812 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f81b 	bl	800d83e <UART_WaitOnFlagUntilTimeout>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d001      	beq.n	800d812 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d80e:	2303      	movs	r3, #3
 800d810:	e011      	b.n	800d836 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2220      	movs	r2, #32
 800d816:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2220      	movs	r2, #32
 800d81c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b09c      	sub	sp, #112	; 0x70
 800d842:	af00      	add	r7, sp, #0
 800d844:	60f8      	str	r0, [r7, #12]
 800d846:	60b9      	str	r1, [r7, #8]
 800d848:	603b      	str	r3, [r7, #0]
 800d84a:	4613      	mov	r3, r2
 800d84c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d84e:	e0a7      	b.n	800d9a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d856:	f000 80a3 	beq.w	800d9a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d85a:	f7f5 ff01 	bl	8003660 <HAL_GetTick>
 800d85e:	4602      	mov	r2, r0
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	1ad3      	subs	r3, r2, r3
 800d864:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d866:	429a      	cmp	r2, r3
 800d868:	d302      	bcc.n	800d870 <UART_WaitOnFlagUntilTimeout+0x32>
 800d86a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d13f      	bne.n	800d8f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d878:	e853 3f00 	ldrex	r3, [r3]
 800d87c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d880:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d884:	667b      	str	r3, [r7, #100]	; 0x64
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	461a      	mov	r2, r3
 800d88c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d88e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d890:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d892:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d894:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d896:	e841 2300 	strex	r3, r2, [r1]
 800d89a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d89c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1e6      	bne.n	800d870 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	3308      	adds	r3, #8
 800d8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ac:	e853 3f00 	ldrex	r3, [r3]
 800d8b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b4:	f023 0301 	bic.w	r3, r3, #1
 800d8b8:	663b      	str	r3, [r7, #96]	; 0x60
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	3308      	adds	r3, #8
 800d8c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d8c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800d8c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d8c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8ca:	e841 2300 	strex	r3, r2, [r1]
 800d8ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d1e5      	bne.n	800d8a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2220      	movs	r2, #32
 800d8da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2220      	movs	r2, #32
 800d8e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800d8ec:	2303      	movs	r3, #3
 800d8ee:	e068      	b.n	800d9c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f003 0304 	and.w	r3, r3, #4
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d050      	beq.n	800d9a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	69db      	ldr	r3, [r3, #28]
 800d904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d90c:	d148      	bne.n	800d9a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d916:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d920:	e853 3f00 	ldrex	r3, [r3]
 800d924:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d928:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d92c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	461a      	mov	r2, r3
 800d934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d936:	637b      	str	r3, [r7, #52]	; 0x34
 800d938:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d93a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d93c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d93e:	e841 2300 	strex	r3, r2, [r1]
 800d942:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d946:	2b00      	cmp	r3, #0
 800d948:	d1e6      	bne.n	800d918 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	3308      	adds	r3, #8
 800d950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	e853 3f00 	ldrex	r3, [r3]
 800d958:	613b      	str	r3, [r7, #16]
   return(result);
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	f023 0301 	bic.w	r3, r3, #1
 800d960:	66bb      	str	r3, [r7, #104]	; 0x68
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	3308      	adds	r3, #8
 800d968:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d96a:	623a      	str	r2, [r7, #32]
 800d96c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d96e:	69f9      	ldr	r1, [r7, #28]
 800d970:	6a3a      	ldr	r2, [r7, #32]
 800d972:	e841 2300 	strex	r3, r2, [r1]
 800d976:	61bb      	str	r3, [r7, #24]
   return(result);
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d1e5      	bne.n	800d94a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2220      	movs	r2, #32
 800d982:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2220      	movs	r2, #32
 800d988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2220      	movs	r2, #32
 800d990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2200      	movs	r2, #0
 800d998:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d99c:	2303      	movs	r3, #3
 800d99e:	e010      	b.n	800d9c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	69da      	ldr	r2, [r3, #28]
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	bf0c      	ite	eq
 800d9b0:	2301      	moveq	r3, #1
 800d9b2:	2300      	movne	r3, #0
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	79fb      	ldrb	r3, [r7, #7]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	f43f af48 	beq.w	800d850 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3770      	adds	r7, #112	; 0x70
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
	...

0800d9cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b097      	sub	sp, #92	; 0x5c
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	68ba      	ldr	r2, [r7, #8]
 800d9de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	88fa      	ldrh	r2, [r7, #6]
 800d9e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	88fa      	ldrh	r2, [r7, #6]
 800d9ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9fe:	d10e      	bne.n	800da1e <UART_Start_Receive_IT+0x52>
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d105      	bne.n	800da14 <UART_Start_Receive_IT+0x48>
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800da0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800da12:	e02d      	b.n	800da70 <UART_Start_Receive_IT+0xa4>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	22ff      	movs	r2, #255	; 0xff
 800da18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800da1c:	e028      	b.n	800da70 <UART_Start_Receive_IT+0xa4>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d10d      	bne.n	800da42 <UART_Start_Receive_IT+0x76>
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	691b      	ldr	r3, [r3, #16]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d104      	bne.n	800da38 <UART_Start_Receive_IT+0x6c>
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	22ff      	movs	r2, #255	; 0xff
 800da32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800da36:	e01b      	b.n	800da70 <UART_Start_Receive_IT+0xa4>
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	227f      	movs	r2, #127	; 0x7f
 800da3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800da40:	e016      	b.n	800da70 <UART_Start_Receive_IT+0xa4>
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da4a:	d10d      	bne.n	800da68 <UART_Start_Receive_IT+0x9c>
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d104      	bne.n	800da5e <UART_Start_Receive_IT+0x92>
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	227f      	movs	r2, #127	; 0x7f
 800da58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800da5c:	e008      	b.n	800da70 <UART_Start_Receive_IT+0xa4>
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	223f      	movs	r2, #63	; 0x3f
 800da62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800da66:	e003      	b.n	800da70 <UART_Start_Receive_IT+0xa4>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2200      	movs	r2, #0
 800da74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2222      	movs	r2, #34	; 0x22
 800da7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	3308      	adds	r3, #8
 800da86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da8a:	e853 3f00 	ldrex	r3, [r3]
 800da8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da92:	f043 0301 	orr.w	r3, r3, #1
 800da96:	657b      	str	r3, [r7, #84]	; 0x54
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3308      	adds	r3, #8
 800da9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800daa0:	64ba      	str	r2, [r7, #72]	; 0x48
 800daa2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800daa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800daa8:	e841 2300 	strex	r3, r2, [r1]
 800daac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800daae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d1e5      	bne.n	800da80 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dabc:	d107      	bne.n	800dace <UART_Start_Receive_IT+0x102>
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	691b      	ldr	r3, [r3, #16]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d103      	bne.n	800dace <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	4a21      	ldr	r2, [pc, #132]	; (800db50 <UART_Start_Receive_IT+0x184>)
 800daca:	669a      	str	r2, [r3, #104]	; 0x68
 800dacc:	e002      	b.n	800dad4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	4a20      	ldr	r2, [pc, #128]	; (800db54 <UART_Start_Receive_IT+0x188>)
 800dad2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	691b      	ldr	r3, [r3, #16]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d019      	beq.n	800db10 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae4:	e853 3f00 	ldrex	r3, [r3]
 800dae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800daf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	461a      	mov	r2, r3
 800daf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dafa:	637b      	str	r3, [r7, #52]	; 0x34
 800dafc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db02:	e841 2300 	strex	r3, r2, [r1]
 800db06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800db08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1e6      	bne.n	800dadc <UART_Start_Receive_IT+0x110>
 800db0e:	e018      	b.n	800db42 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	e853 3f00 	ldrex	r3, [r3]
 800db1c:	613b      	str	r3, [r7, #16]
   return(result);
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	f043 0320 	orr.w	r3, r3, #32
 800db24:	653b      	str	r3, [r7, #80]	; 0x50
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	461a      	mov	r2, r3
 800db2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db2e:	623b      	str	r3, [r7, #32]
 800db30:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db32:	69f9      	ldr	r1, [r7, #28]
 800db34:	6a3a      	ldr	r2, [r7, #32]
 800db36:	e841 2300 	strex	r3, r2, [r1]
 800db3a:	61bb      	str	r3, [r7, #24]
   return(result);
 800db3c:	69bb      	ldr	r3, [r7, #24]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1e6      	bne.n	800db10 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800db42:	2300      	movs	r3, #0
}
 800db44:	4618      	mov	r0, r3
 800db46:	375c      	adds	r7, #92	; 0x5c
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr
 800db50:	0800de07 	.word	0x0800de07
 800db54:	0800dca1 	.word	0x0800dca1

0800db58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db58:	b480      	push	{r7}
 800db5a:	b095      	sub	sp, #84	; 0x54
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db68:	e853 3f00 	ldrex	r3, [r3]
 800db6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800db74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	461a      	mov	r2, r3
 800db7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db7e:	643b      	str	r3, [r7, #64]	; 0x40
 800db80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800db84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db86:	e841 2300 	strex	r3, r2, [r1]
 800db8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800db8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d1e6      	bne.n	800db60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	3308      	adds	r3, #8
 800db98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db9a:	6a3b      	ldr	r3, [r7, #32]
 800db9c:	e853 3f00 	ldrex	r3, [r3]
 800dba0:	61fb      	str	r3, [r7, #28]
   return(result);
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	f023 0301 	bic.w	r3, r3, #1
 800dba8:	64bb      	str	r3, [r7, #72]	; 0x48
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	3308      	adds	r3, #8
 800dbb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dbb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dbb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbba:	e841 2300 	strex	r3, r2, [r1]
 800dbbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d1e5      	bne.n	800db92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d118      	bne.n	800dc00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	e853 3f00 	ldrex	r3, [r3]
 800dbda:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	f023 0310 	bic.w	r3, r3, #16
 800dbe2:	647b      	str	r3, [r7, #68]	; 0x44
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	461a      	mov	r2, r3
 800dbea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbec:	61bb      	str	r3, [r7, #24]
 800dbee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf0:	6979      	ldr	r1, [r7, #20]
 800dbf2:	69ba      	ldr	r2, [r7, #24]
 800dbf4:	e841 2300 	strex	r3, r2, [r1]
 800dbf8:	613b      	str	r3, [r7, #16]
   return(result);
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d1e6      	bne.n	800dbce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2220      	movs	r2, #32
 800dc04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	669a      	str	r2, [r3, #104]	; 0x68
}
 800dc14:	bf00      	nop
 800dc16:	3754      	adds	r7, #84	; 0x54
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f7ff faaa 	bl	800d198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc44:	bf00      	nop
 800dc46:	3710      	adds	r7, #16
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b088      	sub	sp, #32
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	e853 3f00 	ldrex	r3, [r3]
 800dc60:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc68:	61fb      	str	r3, [r7, #28]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	61bb      	str	r3, [r7, #24]
 800dc74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc76:	6979      	ldr	r1, [r7, #20]
 800dc78:	69ba      	ldr	r2, [r7, #24]
 800dc7a:	e841 2300 	strex	r3, r2, [r1]
 800dc7e:	613b      	str	r3, [r7, #16]
   return(result);
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1e6      	bne.n	800dc54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2220      	movs	r2, #32
 800dc8a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7ff fa76 	bl	800d184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc98:	bf00      	nop
 800dc9a:	3720      	adds	r7, #32
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b096      	sub	sp, #88	; 0x58
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dcae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcb8:	2b22      	cmp	r3, #34	; 0x22
 800dcba:	f040 8098 	bne.w	800ddee <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dcc8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800dccc:	b2d9      	uxtb	r1, r3
 800dcce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcd8:	400a      	ands	r2, r1
 800dcda:	b2d2      	uxtb	r2, r2
 800dcdc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d17b      	bne.n	800ddfe <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0e:	e853 3f00 	ldrex	r3, [r3]
 800dd12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd1a:	653b      	str	r3, [r7, #80]	; 0x50
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	461a      	mov	r2, r3
 800dd22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd24:	647b      	str	r3, [r7, #68]	; 0x44
 800dd26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd2c:	e841 2300 	strex	r3, r2, [r1]
 800dd30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d1e6      	bne.n	800dd06 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	3308      	adds	r3, #8
 800dd3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd42:	e853 3f00 	ldrex	r3, [r3]
 800dd46:	623b      	str	r3, [r7, #32]
   return(result);
 800dd48:	6a3b      	ldr	r3, [r7, #32]
 800dd4a:	f023 0301 	bic.w	r3, r3, #1
 800dd4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	3308      	adds	r3, #8
 800dd56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd58:	633a      	str	r2, [r7, #48]	; 0x30
 800dd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd60:	e841 2300 	strex	r3, r2, [r1]
 800dd64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d1e5      	bne.n	800dd38 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2220      	movs	r2, #32
 800dd70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d12e      	bne.n	800dde6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	e853 3f00 	ldrex	r3, [r3]
 800dd9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f023 0310 	bic.w	r3, r3, #16
 800dda2:	64bb      	str	r3, [r7, #72]	; 0x48
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	461a      	mov	r2, r3
 800ddaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddac:	61fb      	str	r3, [r7, #28]
 800ddae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb0:	69b9      	ldr	r1, [r7, #24]
 800ddb2:	69fa      	ldr	r2, [r7, #28]
 800ddb4:	e841 2300 	strex	r3, r2, [r1]
 800ddb8:	617b      	str	r3, [r7, #20]
   return(result);
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1e6      	bne.n	800dd8e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	69db      	ldr	r3, [r3, #28]
 800ddc6:	f003 0310 	and.w	r3, r3, #16
 800ddca:	2b10      	cmp	r3, #16
 800ddcc:	d103      	bne.n	800ddd6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2210      	movs	r2, #16
 800ddd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dddc:	4619      	mov	r1, r3
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f7ff f9e4 	bl	800d1ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dde4:	e00b      	b.n	800ddfe <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7f2 fc1c 	bl	8000624 <HAL_UART_RxCpltCallback>
}
 800ddec:	e007      	b.n	800ddfe <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	699a      	ldr	r2, [r3, #24]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f042 0208 	orr.w	r2, r2, #8
 800ddfc:	619a      	str	r2, [r3, #24]
}
 800ddfe:	bf00      	nop
 800de00:	3758      	adds	r7, #88	; 0x58
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}

0800de06 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800de06:	b580      	push	{r7, lr}
 800de08:	b096      	sub	sp, #88	; 0x58
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800de14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de1e:	2b22      	cmp	r3, #34	; 0x22
 800de20:	f040 8098 	bne.w	800df54 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de32:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800de34:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800de38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800de3c:	4013      	ands	r3, r2
 800de3e:	b29a      	uxth	r2, r3
 800de40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de42:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de48:	1c9a      	adds	r2, r3, #2
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de54:	b29b      	uxth	r3, r3
 800de56:	3b01      	subs	r3, #1
 800de58:	b29a      	uxth	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de66:	b29b      	uxth	r3, r3
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d17b      	bne.n	800df64 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de74:	e853 3f00 	ldrex	r3, [r3]
 800de78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800de7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	461a      	mov	r2, r3
 800de88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de8a:	643b      	str	r3, [r7, #64]	; 0x40
 800de8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800de90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de92:	e841 2300 	strex	r3, r2, [r1]
 800de96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800de98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1e6      	bne.n	800de6c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	3308      	adds	r3, #8
 800dea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	e853 3f00 	ldrex	r3, [r3]
 800deac:	61fb      	str	r3, [r7, #28]
   return(result);
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	f023 0301 	bic.w	r3, r3, #1
 800deb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	3308      	adds	r3, #8
 800debc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800debe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dec0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dec6:	e841 2300 	strex	r3, r2, [r1]
 800deca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800decc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1e5      	bne.n	800de9e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2220      	movs	r2, #32
 800ded6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2200      	movs	r2, #0
 800dede:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800deea:	2b01      	cmp	r3, #1
 800deec:	d12e      	bne.n	800df4c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	e853 3f00 	ldrex	r3, [r3]
 800df00:	60bb      	str	r3, [r7, #8]
   return(result);
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	f023 0310 	bic.w	r3, r3, #16
 800df08:	647b      	str	r3, [r7, #68]	; 0x44
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	461a      	mov	r2, r3
 800df10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df12:	61bb      	str	r3, [r7, #24]
 800df14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df16:	6979      	ldr	r1, [r7, #20]
 800df18:	69ba      	ldr	r2, [r7, #24]
 800df1a:	e841 2300 	strex	r3, r2, [r1]
 800df1e:	613b      	str	r3, [r7, #16]
   return(result);
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d1e6      	bne.n	800def4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	69db      	ldr	r3, [r3, #28]
 800df2c:	f003 0310 	and.w	r3, r3, #16
 800df30:	2b10      	cmp	r3, #16
 800df32:	d103      	bne.n	800df3c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2210      	movs	r2, #16
 800df3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800df42:	4619      	mov	r1, r3
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f7ff f931 	bl	800d1ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df4a:	e00b      	b.n	800df64 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f7f2 fb69 	bl	8000624 <HAL_UART_RxCpltCallback>
}
 800df52:	e007      	b.n	800df64 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	699a      	ldr	r2, [r3, #24]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f042 0208 	orr.w	r2, r2, #8
 800df62:	619a      	str	r2, [r3, #24]
}
 800df64:	bf00      	nop
 800df66:	3758      	adds	r7, #88	; 0x58
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d121      	bne.n	800dfc2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	4b27      	ldr	r3, [pc, #156]	; (800e020 <FMC_SDRAM_Init+0xb4>)
 800df84:	4013      	ands	r3, r2
 800df86:	683a      	ldr	r2, [r7, #0]
 800df88:	6851      	ldr	r1, [r2, #4]
 800df8a:	683a      	ldr	r2, [r7, #0]
 800df8c:	6892      	ldr	r2, [r2, #8]
 800df8e:	4311      	orrs	r1, r2
 800df90:	683a      	ldr	r2, [r7, #0]
 800df92:	68d2      	ldr	r2, [r2, #12]
 800df94:	4311      	orrs	r1, r2
 800df96:	683a      	ldr	r2, [r7, #0]
 800df98:	6912      	ldr	r2, [r2, #16]
 800df9a:	4311      	orrs	r1, r2
 800df9c:	683a      	ldr	r2, [r7, #0]
 800df9e:	6952      	ldr	r2, [r2, #20]
 800dfa0:	4311      	orrs	r1, r2
 800dfa2:	683a      	ldr	r2, [r7, #0]
 800dfa4:	6992      	ldr	r2, [r2, #24]
 800dfa6:	4311      	orrs	r1, r2
 800dfa8:	683a      	ldr	r2, [r7, #0]
 800dfaa:	69d2      	ldr	r2, [r2, #28]
 800dfac:	4311      	orrs	r1, r2
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	6a12      	ldr	r2, [r2, #32]
 800dfb2:	4311      	orrs	r1, r2
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dfb8:	430a      	orrs	r2, r1
 800dfba:	431a      	orrs	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	601a      	str	r2, [r3, #0]
 800dfc0:	e026      	b.n	800e010 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	69d9      	ldr	r1, [r3, #28]
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	6a1b      	ldr	r3, [r3, #32]
 800dfd2:	4319      	orrs	r1, r3
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd8:	430b      	orrs	r3, r1
 800dfda:	431a      	orrs	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685a      	ldr	r2, [r3, #4]
 800dfe4:	4b0e      	ldr	r3, [pc, #56]	; (800e020 <FMC_SDRAM_Init+0xb4>)
 800dfe6:	4013      	ands	r3, r2
 800dfe8:	683a      	ldr	r2, [r7, #0]
 800dfea:	6851      	ldr	r1, [r2, #4]
 800dfec:	683a      	ldr	r2, [r7, #0]
 800dfee:	6892      	ldr	r2, [r2, #8]
 800dff0:	4311      	orrs	r1, r2
 800dff2:	683a      	ldr	r2, [r7, #0]
 800dff4:	68d2      	ldr	r2, [r2, #12]
 800dff6:	4311      	orrs	r1, r2
 800dff8:	683a      	ldr	r2, [r7, #0]
 800dffa:	6912      	ldr	r2, [r2, #16]
 800dffc:	4311      	orrs	r1, r2
 800dffe:	683a      	ldr	r2, [r7, #0]
 800e000:	6952      	ldr	r2, [r2, #20]
 800e002:	4311      	orrs	r1, r2
 800e004:	683a      	ldr	r2, [r7, #0]
 800e006:	6992      	ldr	r2, [r2, #24]
 800e008:	430a      	orrs	r2, r1
 800e00a:	431a      	orrs	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e010:	2300      	movs	r3, #0
}
 800e012:	4618      	mov	r0, r3
 800e014:	370c      	adds	r7, #12
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr
 800e01e:	bf00      	nop
 800e020:	ffff8000 	.word	0xffff8000

0800e024 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e024:	b480      	push	{r7}
 800e026:	b085      	sub	sp, #20
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d128      	bne.n	800e088 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	1e59      	subs	r1, r3, #1
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	3b01      	subs	r3, #1
 800e04a:	011b      	lsls	r3, r3, #4
 800e04c:	4319      	orrs	r1, r3
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	3b01      	subs	r3, #1
 800e054:	021b      	lsls	r3, r3, #8
 800e056:	4319      	orrs	r1, r3
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	3b01      	subs	r3, #1
 800e05e:	031b      	lsls	r3, r3, #12
 800e060:	4319      	orrs	r1, r3
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	691b      	ldr	r3, [r3, #16]
 800e066:	3b01      	subs	r3, #1
 800e068:	041b      	lsls	r3, r3, #16
 800e06a:	4319      	orrs	r1, r3
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	695b      	ldr	r3, [r3, #20]
 800e070:	3b01      	subs	r3, #1
 800e072:	051b      	lsls	r3, r3, #20
 800e074:	4319      	orrs	r1, r3
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	699b      	ldr	r3, [r3, #24]
 800e07a:	3b01      	subs	r3, #1
 800e07c:	061b      	lsls	r3, r3, #24
 800e07e:	430b      	orrs	r3, r1
 800e080:	431a      	orrs	r2, r3
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	609a      	str	r2, [r3, #8]
 800e086:	e02d      	b.n	800e0e4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	689a      	ldr	r2, [r3, #8]
 800e08c:	4b19      	ldr	r3, [pc, #100]	; (800e0f4 <FMC_SDRAM_Timing_Init+0xd0>)
 800e08e:	4013      	ands	r3, r2
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	68d2      	ldr	r2, [r2, #12]
 800e094:	3a01      	subs	r2, #1
 800e096:	0311      	lsls	r1, r2, #12
 800e098:	68ba      	ldr	r2, [r7, #8]
 800e09a:	6952      	ldr	r2, [r2, #20]
 800e09c:	3a01      	subs	r2, #1
 800e09e:	0512      	lsls	r2, r2, #20
 800e0a0:	430a      	orrs	r2, r1
 800e0a2:	431a      	orrs	r2, r3
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	1e59      	subs	r1, r3, #1
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	3b01      	subs	r3, #1
 800e0bc:	011b      	lsls	r3, r3, #4
 800e0be:	4319      	orrs	r1, r3
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	021b      	lsls	r3, r3, #8
 800e0c8:	4319      	orrs	r1, r3
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	691b      	ldr	r3, [r3, #16]
 800e0ce:	3b01      	subs	r3, #1
 800e0d0:	041b      	lsls	r3, r3, #16
 800e0d2:	4319      	orrs	r1, r3
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	699b      	ldr	r3, [r3, #24]
 800e0d8:	3b01      	subs	r3, #1
 800e0da:	061b      	lsls	r3, r3, #24
 800e0dc:	430b      	orrs	r3, r1
 800e0de:	431a      	orrs	r2, r3
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800e0e4:	2300      	movs	r3, #0
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	ff0f0fff 	.word	0xff0f0fff

0800e0f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e0f8:	b084      	sub	sp, #16
 800e0fa:	b480      	push	{r7}
 800e0fc:	b085      	sub	sp, #20
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
 800e102:	f107 001c 	add.w	r0, r7, #28
 800e106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e10e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e110:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e112:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e116:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e11a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e11e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e122:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e124:	68fa      	ldr	r2, [r7, #12]
 800e126:	4313      	orrs	r3, r2
 800e128:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	685a      	ldr	r2, [r3, #4]
 800e12e:	4b07      	ldr	r3, [pc, #28]	; (800e14c <SDMMC_Init+0x54>)
 800e130:	4013      	ands	r3, r2
 800e132:	68fa      	ldr	r2, [r7, #12]
 800e134:	431a      	orrs	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e13a:	2300      	movs	r3, #0
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3714      	adds	r7, #20
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	b004      	add	sp, #16
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	ffff8100 	.word	0xffff8100

0800e150 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e15e:	4618      	mov	r0, r3
 800e160:	370c      	adds	r7, #12
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr

0800e16a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800e16a:	b480      	push	{r7}
 800e16c:	b083      	sub	sp, #12
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2203      	movs	r2, #3
 800e176:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e178:	2300      	movs	r3, #0
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	370c      	adds	r7, #12
 800e17e:	46bd      	mov	sp, r7
 800e180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e184:	4770      	bx	lr

0800e186 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800e186:	b480      	push	{r7}
 800e188:	b083      	sub	sp, #12
 800e18a:	af00      	add	r7, sp, #0
 800e18c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f003 0303 	and.w	r3, r3, #3
}
 800e196:	4618      	mov	r0, r3
 800e198:	370c      	adds	r7, #12
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr
	...

0800e1a4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e1c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e1c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e1ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	68da      	ldr	r2, [r3, #12]
 800e1da:	4b06      	ldr	r3, [pc, #24]	; (800e1f4 <SDMMC_SendCommand+0x50>)
 800e1dc:	4013      	ands	r3, r2
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	431a      	orrs	r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e1e6:	2300      	movs	r3, #0
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3714      	adds	r7, #20
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr
 800e1f4:	fffff000 	.word	0xfffff000

0800e1f8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	691b      	ldr	r3, [r3, #16]
 800e204:	b2db      	uxtb	r3, r3
}
 800e206:	4618      	mov	r0, r3
 800e208:	370c      	adds	r7, #12
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr

0800e212 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e212:	b480      	push	{r7}
 800e214:	b085      	sub	sp, #20
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
 800e21a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	3314      	adds	r3, #20
 800e220:	461a      	mov	r2, r3
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	4413      	add	r3, r2
 800e226:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
}  
 800e22c:	4618      	mov	r0, r3
 800e22e:	3714      	adds	r7, #20
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e238:	b480      	push	{r7}
 800e23a:	b085      	sub	sp, #20
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e242:	2300      	movs	r3, #0
 800e244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	685a      	ldr	r2, [r3, #4]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e25e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e264:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e26a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e26c:	68fa      	ldr	r2, [r7, #12]
 800e26e:	4313      	orrs	r3, r2
 800e270:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e276:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	431a      	orrs	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e282:	2300      	movs	r3, #0

}
 800e284:	4618      	mov	r0, r3
 800e286:	3714      	adds	r7, #20
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr

0800e290 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b088      	sub	sp, #32
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e29e:	2310      	movs	r3, #16
 800e2a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2a2:	2340      	movs	r3, #64	; 0x40
 800e2a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2b0:	f107 0308 	add.w	r3, r7, #8
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f7ff ff74 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e2bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2c0:	2110      	movs	r1, #16
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 fa1a 	bl	800e6fc <SDMMC_GetCmdResp1>
 800e2c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2ca:	69fb      	ldr	r3, [r7, #28]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3720      	adds	r7, #32
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b088      	sub	sp, #32
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e2e2:	2311      	movs	r3, #17
 800e2e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2e6:	2340      	movs	r3, #64	; 0x40
 800e2e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2f4:	f107 0308 	add.w	r3, r7, #8
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7ff ff52 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e300:	f241 3288 	movw	r2, #5000	; 0x1388
 800e304:	2111      	movs	r1, #17
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 f9f8 	bl	800e6fc <SDMMC_GetCmdResp1>
 800e30c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e30e:	69fb      	ldr	r3, [r7, #28]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3720      	adds	r7, #32
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b088      	sub	sp, #32
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e326:	2312      	movs	r3, #18
 800e328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e32a:	2340      	movs	r3, #64	; 0x40
 800e32c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e32e:	2300      	movs	r3, #0
 800e330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e336:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e338:	f107 0308 	add.w	r3, r7, #8
 800e33c:	4619      	mov	r1, r3
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7ff ff30 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e344:	f241 3288 	movw	r2, #5000	; 0x1388
 800e348:	2112      	movs	r1, #18
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 f9d6 	bl	800e6fc <SDMMC_GetCmdResp1>
 800e350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e352:	69fb      	ldr	r3, [r7, #28]
}
 800e354:	4618      	mov	r0, r3
 800e356:	3720      	adds	r7, #32
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b088      	sub	sp, #32
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e36a:	2318      	movs	r3, #24
 800e36c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e36e:	2340      	movs	r3, #64	; 0x40
 800e370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e372:	2300      	movs	r3, #0
 800e374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e37a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e37c:	f107 0308 	add.w	r3, r7, #8
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7ff ff0e 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e388:	f241 3288 	movw	r2, #5000	; 0x1388
 800e38c:	2118      	movs	r1, #24
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 f9b4 	bl	800e6fc <SDMMC_GetCmdResp1>
 800e394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e396:	69fb      	ldr	r3, [r7, #28]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3720      	adds	r7, #32
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b088      	sub	sp, #32
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e3ae:	2319      	movs	r3, #25
 800e3b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3b2:	2340      	movs	r3, #64	; 0x40
 800e3b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3c0:	f107 0308 	add.w	r3, r7, #8
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7ff feec 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e3cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3d0:	2119      	movs	r1, #25
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 f992 	bl	800e6fc <SDMMC_GetCmdResp1>
 800e3d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3da:	69fb      	ldr	r3, [r7, #28]
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3720      	adds	r7, #32
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b088      	sub	sp, #32
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e3f0:	230c      	movs	r3, #12
 800e3f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3f4:	2340      	movs	r3, #64	; 0x40
 800e3f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e400:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e402:	f107 0308 	add.w	r3, r7, #8
 800e406:	4619      	mov	r1, r3
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7ff fecb 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e40e:	4a05      	ldr	r2, [pc, #20]	; (800e424 <SDMMC_CmdStopTransfer+0x40>)
 800e410:	210c      	movs	r1, #12
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 f972 	bl	800e6fc <SDMMC_GetCmdResp1>
 800e418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e41a:	69fb      	ldr	r3, [r7, #28]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3720      	adds	r7, #32
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	05f5e100 	.word	0x05f5e100

0800e428 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b08a      	sub	sp, #40	; 0x28
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	60f8      	str	r0, [r7, #12]
 800e430:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e438:	2307      	movs	r3, #7
 800e43a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e43c:	2340      	movs	r3, #64	; 0x40
 800e43e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e440:	2300      	movs	r3, #0
 800e442:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e448:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e44a:	f107 0310 	add.w	r3, r7, #16
 800e44e:	4619      	mov	r1, r3
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f7ff fea7 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e456:	f241 3288 	movw	r2, #5000	; 0x1388
 800e45a:	2107      	movs	r1, #7
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f000 f94d 	bl	800e6fc <SDMMC_GetCmdResp1>
 800e462:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e466:	4618      	mov	r0, r3
 800e468:	3728      	adds	r7, #40	; 0x28
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b088      	sub	sp, #32
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e476:	2300      	movs	r3, #0
 800e478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e47a:	2300      	movs	r3, #0
 800e47c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e47e:	2300      	movs	r3, #0
 800e480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e482:	2300      	movs	r3, #0
 800e484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e48a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e48c:	f107 0308 	add.w	r3, r7, #8
 800e490:	4619      	mov	r1, r3
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7ff fe86 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 fb67 	bl	800eb6c <SDMMC_GetCmdError>
 800e49e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4a0:	69fb      	ldr	r3, [r7, #28]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3720      	adds	r7, #32
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b088      	sub	sp, #32
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e4b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e4b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e4b8:	2308      	movs	r3, #8
 800e4ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4bc:	2340      	movs	r3, #64	; 0x40
 800e4be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4ca:	f107 0308 	add.w	r3, r7, #8
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f7ff fe67 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 fafa 	bl	800ead0 <SDMMC_GetCmdResp7>
 800e4dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4de:	69fb      	ldr	r3, [r7, #28]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3720      	adds	r7, #32
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b088      	sub	sp, #32
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e4f6:	2337      	movs	r3, #55	; 0x37
 800e4f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4fa:	2340      	movs	r3, #64	; 0x40
 800e4fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4fe:	2300      	movs	r3, #0
 800e500:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e506:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e508:	f107 0308 	add.w	r3, r7, #8
 800e50c:	4619      	mov	r1, r3
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7ff fe48 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e514:	f241 3288 	movw	r2, #5000	; 0x1388
 800e518:	2137      	movs	r1, #55	; 0x37
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 f8ee 	bl	800e6fc <SDMMC_GetCmdResp1>
 800e520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e522:	69fb      	ldr	r3, [r7, #28]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3720      	adds	r7, #32
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b088      	sub	sp, #32
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e536:	683a      	ldr	r2, [r7, #0]
 800e538:	4b0d      	ldr	r3, [pc, #52]	; (800e570 <SDMMC_CmdAppOperCommand+0x44>)
 800e53a:	4313      	orrs	r3, r2
 800e53c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e53e:	2329      	movs	r3, #41	; 0x29
 800e540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e542:	2340      	movs	r3, #64	; 0x40
 800e544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e546:	2300      	movs	r3, #0
 800e548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e54a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e54e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e550:	f107 0308 	add.w	r3, r7, #8
 800e554:	4619      	mov	r1, r3
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7ff fe24 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 fa03 	bl	800e968 <SDMMC_GetCmdResp3>
 800e562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e564:	69fb      	ldr	r3, [r7, #28]
}
 800e566:	4618      	mov	r0, r3
 800e568:	3720      	adds	r7, #32
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	80100000 	.word	0x80100000

0800e574 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b088      	sub	sp, #32
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e582:	2306      	movs	r3, #6
 800e584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e586:	2340      	movs	r3, #64	; 0x40
 800e588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e58a:	2300      	movs	r3, #0
 800e58c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e58e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e592:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e594:	f107 0308 	add.w	r3, r7, #8
 800e598:	4619      	mov	r1, r3
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7ff fe02 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e5a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5a4:	2106      	movs	r1, #6
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f8a8 	bl	800e6fc <SDMMC_GetCmdResp1>
 800e5ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5ae:	69fb      	ldr	r3, [r7, #28]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3720      	adds	r7, #32
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b088      	sub	sp, #32
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e5c4:	2333      	movs	r3, #51	; 0x33
 800e5c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5c8:	2340      	movs	r3, #64	; 0x40
 800e5ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5d6:	f107 0308 	add.w	r3, r7, #8
 800e5da:	4619      	mov	r1, r3
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f7ff fde1 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e5e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5e6:	2133      	movs	r1, #51	; 0x33
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 f887 	bl	800e6fc <SDMMC_GetCmdResp1>
 800e5ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5f0:	69fb      	ldr	r3, [r7, #28]
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3720      	adds	r7, #32
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b088      	sub	sp, #32
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e602:	2300      	movs	r3, #0
 800e604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e606:	2302      	movs	r3, #2
 800e608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e60a:	23c0      	movs	r3, #192	; 0xc0
 800e60c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e60e:	2300      	movs	r3, #0
 800e610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e616:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e618:	f107 0308 	add.w	r3, r7, #8
 800e61c:	4619      	mov	r1, r3
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7ff fdc0 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 f957 	bl	800e8d8 <SDMMC_GetCmdResp2>
 800e62a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e62c:	69fb      	ldr	r3, [r7, #28]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3720      	adds	r7, #32
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b088      	sub	sp, #32
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e644:	2309      	movs	r3, #9
 800e646:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e648:	23c0      	movs	r3, #192	; 0xc0
 800e64a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e64c:	2300      	movs	r3, #0
 800e64e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e654:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e656:	f107 0308 	add.w	r3, r7, #8
 800e65a:	4619      	mov	r1, r3
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f7ff fda1 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f000 f938 	bl	800e8d8 <SDMMC_GetCmdResp2>
 800e668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e66a:	69fb      	ldr	r3, [r7, #28]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3720      	adds	r7, #32
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b088      	sub	sp, #32
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e67e:	2300      	movs	r3, #0
 800e680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e682:	2303      	movs	r3, #3
 800e684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e686:	2340      	movs	r3, #64	; 0x40
 800e688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e68a:	2300      	movs	r3, #0
 800e68c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e68e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e692:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e694:	f107 0308 	add.w	r3, r7, #8
 800e698:	4619      	mov	r1, r3
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f7ff fd82 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e6a0:	683a      	ldr	r2, [r7, #0]
 800e6a2:	2103      	movs	r1, #3
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f000 f99d 	bl	800e9e4 <SDMMC_GetCmdResp6>
 800e6aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6ac:	69fb      	ldr	r3, [r7, #28]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3720      	adds	r7, #32
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e6b6:	b580      	push	{r7, lr}
 800e6b8:	b088      	sub	sp, #32
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
 800e6be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e6c4:	230d      	movs	r3, #13
 800e6c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6c8:	2340      	movs	r3, #64	; 0x40
 800e6ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6d6:	f107 0308 	add.w	r3, r7, #8
 800e6da:	4619      	mov	r1, r3
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7ff fd61 	bl	800e1a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e6e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6e6:	210d      	movs	r1, #13
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 f807 	bl	800e6fc <SDMMC_GetCmdResp1>
 800e6ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6f0:	69fb      	ldr	r3, [r7, #28]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3720      	adds	r7, #32
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
	...

0800e6fc <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b088      	sub	sp, #32
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	460b      	mov	r3, r1
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e70a:	4b70      	ldr	r3, [pc, #448]	; (800e8cc <SDMMC_GetCmdResp1+0x1d0>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	4a70      	ldr	r2, [pc, #448]	; (800e8d0 <SDMMC_GetCmdResp1+0x1d4>)
 800e710:	fba2 2303 	umull	r2, r3, r2, r3
 800e714:	0a5a      	lsrs	r2, r3, #9
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	fb02 f303 	mul.w	r3, r2, r3
 800e71c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	1e5a      	subs	r2, r3, #1
 800e722:	61fa      	str	r2, [r7, #28]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d102      	bne.n	800e72e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e728:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e72c:	e0c9      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e732:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d0ef      	beq.n	800e71e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e744:	2b00      	cmp	r3, #0
 800e746:	d1ea      	bne.n	800e71e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e74c:	f003 0304 	and.w	r3, r3, #4
 800e750:	2b00      	cmp	r3, #0
 800e752:	d004      	beq.n	800e75e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2204      	movs	r2, #4
 800e758:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e75a:	2304      	movs	r3, #4
 800e75c:	e0b1      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e762:	f003 0301 	and.w	r3, r3, #1
 800e766:	2b00      	cmp	r3, #0
 800e768:	d004      	beq.n	800e774 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2201      	movs	r2, #1
 800e76e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e770:	2301      	movs	r3, #1
 800e772:	e0a6      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	22c5      	movs	r2, #197	; 0xc5
 800e778:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e77a:	68f8      	ldr	r0, [r7, #12]
 800e77c:	f7ff fd3c 	bl	800e1f8 <SDMMC_GetCommandResponse>
 800e780:	4603      	mov	r3, r0
 800e782:	461a      	mov	r2, r3
 800e784:	7afb      	ldrb	r3, [r7, #11]
 800e786:	4293      	cmp	r3, r2
 800e788:	d001      	beq.n	800e78e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e78a:	2301      	movs	r3, #1
 800e78c:	e099      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e78e:	2100      	movs	r1, #0
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f7ff fd3e 	bl	800e212 <SDMMC_GetResponse>
 800e796:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e798:	697a      	ldr	r2, [r7, #20]
 800e79a:	4b4e      	ldr	r3, [pc, #312]	; (800e8d4 <SDMMC_GetCmdResp1+0x1d8>)
 800e79c:	4013      	ands	r3, r2
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d101      	bne.n	800e7a6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	e08d      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	da02      	bge.n	800e7b2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e7ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e7b0:	e087      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d001      	beq.n	800e7c0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e7bc:	2340      	movs	r3, #64	; 0x40
 800e7be:	e080      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d001      	beq.n	800e7ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e7ca:	2380      	movs	r3, #128	; 0x80
 800e7cc:	e079      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d002      	beq.n	800e7de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e7d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e7dc:	e071      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d002      	beq.n	800e7ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e7e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7ec:	e069      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e7f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7fc:	e061      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e804:	2b00      	cmp	r3, #0
 800e806:	d002      	beq.n	800e80e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e808:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e80c:	e059      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e814:	2b00      	cmp	r3, #0
 800e816:	d002      	beq.n	800e81e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e81c:	e051      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e824:	2b00      	cmp	r3, #0
 800e826:	d002      	beq.n	800e82e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e82c:	e049      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e834:	2b00      	cmp	r3, #0
 800e836:	d002      	beq.n	800e83e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e838:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e83c:	e041      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e844:	2b00      	cmp	r3, #0
 800e846:	d002      	beq.n	800e84e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e84c:	e039      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e854:	2b00      	cmp	r3, #0
 800e856:	d002      	beq.n	800e85e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e858:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e85c:	e031      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e864:	2b00      	cmp	r3, #0
 800e866:	d002      	beq.n	800e86e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e868:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e86c:	e029      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e874:	2b00      	cmp	r3, #0
 800e876:	d002      	beq.n	800e87e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e878:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e87c:	e021      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e884:	2b00      	cmp	r3, #0
 800e886:	d002      	beq.n	800e88e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e888:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e88c:	e019      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e894:	2b00      	cmp	r3, #0
 800e896:	d002      	beq.n	800e89e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e898:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e89c:	e011      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d002      	beq.n	800e8ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e8a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e8ac:	e009      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	f003 0308 	and.w	r3, r3, #8
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d002      	beq.n	800e8be <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e8b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e8bc:	e001      	b.n	800e8c2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e8be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3720      	adds	r7, #32
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20000000 	.word	0x20000000
 800e8d0:	10624dd3 	.word	0x10624dd3
 800e8d4:	fdffe008 	.word	0xfdffe008

0800e8d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b085      	sub	sp, #20
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e8e0:	4b1f      	ldr	r3, [pc, #124]	; (800e960 <SDMMC_GetCmdResp2+0x88>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4a1f      	ldr	r2, [pc, #124]	; (800e964 <SDMMC_GetCmdResp2+0x8c>)
 800e8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800e8ea:	0a5b      	lsrs	r3, r3, #9
 800e8ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8f0:	fb02 f303 	mul.w	r3, r2, r3
 800e8f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	1e5a      	subs	r2, r3, #1
 800e8fa:	60fa      	str	r2, [r7, #12]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d102      	bne.n	800e906 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e900:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e904:	e026      	b.n	800e954 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e90a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e912:	2b00      	cmp	r3, #0
 800e914:	d0ef      	beq.n	800e8f6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1ea      	bne.n	800e8f6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e924:	f003 0304 	and.w	r3, r3, #4
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d004      	beq.n	800e936 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2204      	movs	r2, #4
 800e930:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e932:	2304      	movs	r3, #4
 800e934:	e00e      	b.n	800e954 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e93a:	f003 0301 	and.w	r3, r3, #1
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d004      	beq.n	800e94c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2201      	movs	r2, #1
 800e946:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e948:	2301      	movs	r3, #1
 800e94a:	e003      	b.n	800e954 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	22c5      	movs	r2, #197	; 0xc5
 800e950:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e952:	2300      	movs	r3, #0
}
 800e954:	4618      	mov	r0, r3
 800e956:	3714      	adds	r7, #20
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr
 800e960:	20000000 	.word	0x20000000
 800e964:	10624dd3 	.word	0x10624dd3

0800e968 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e970:	4b1a      	ldr	r3, [pc, #104]	; (800e9dc <SDMMC_GetCmdResp3+0x74>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a1a      	ldr	r2, [pc, #104]	; (800e9e0 <SDMMC_GetCmdResp3+0x78>)
 800e976:	fba2 2303 	umull	r2, r3, r2, r3
 800e97a:	0a5b      	lsrs	r3, r3, #9
 800e97c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e980:	fb02 f303 	mul.w	r3, r2, r3
 800e984:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	1e5a      	subs	r2, r3, #1
 800e98a:	60fa      	str	r2, [r7, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d102      	bne.n	800e996 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e990:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e994:	e01b      	b.n	800e9ce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d0ef      	beq.n	800e986 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1ea      	bne.n	800e986 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9b4:	f003 0304 	and.w	r3, r3, #4
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d004      	beq.n	800e9c6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2204      	movs	r2, #4
 800e9c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e9c2:	2304      	movs	r3, #4
 800e9c4:	e003      	b.n	800e9ce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	22c5      	movs	r2, #197	; 0xc5
 800e9ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e9cc:	2300      	movs	r3, #0
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3714      	adds	r7, #20
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	20000000 	.word	0x20000000
 800e9e0:	10624dd3 	.word	0x10624dd3

0800e9e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b088      	sub	sp, #32
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	607a      	str	r2, [r7, #4]
 800e9f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e9f2:	4b35      	ldr	r3, [pc, #212]	; (800eac8 <SDMMC_GetCmdResp6+0xe4>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a35      	ldr	r2, [pc, #212]	; (800eacc <SDMMC_GetCmdResp6+0xe8>)
 800e9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800e9fc:	0a5b      	lsrs	r3, r3, #9
 800e9fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea02:	fb02 f303 	mul.w	r3, r2, r3
 800ea06:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	1e5a      	subs	r2, r3, #1
 800ea0c:	61fa      	str	r2, [r7, #28]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d102      	bne.n	800ea18 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea16:	e052      	b.n	800eabe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea1c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d0ef      	beq.n	800ea08 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1ea      	bne.n	800ea08 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea36:	f003 0304 	and.w	r3, r3, #4
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d004      	beq.n	800ea48 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2204      	movs	r2, #4
 800ea42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea44:	2304      	movs	r3, #4
 800ea46:	e03a      	b.n	800eabe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea4c:	f003 0301 	and.w	r3, r3, #1
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d004      	beq.n	800ea5e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2201      	movs	r2, #1
 800ea58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	e02f      	b.n	800eabe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ea5e:	68f8      	ldr	r0, [r7, #12]
 800ea60:	f7ff fbca 	bl	800e1f8 <SDMMC_GetCommandResponse>
 800ea64:	4603      	mov	r3, r0
 800ea66:	461a      	mov	r2, r3
 800ea68:	7afb      	ldrb	r3, [r7, #11]
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d001      	beq.n	800ea72 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e025      	b.n	800eabe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	22c5      	movs	r2, #197	; 0xc5
 800ea76:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ea78:	2100      	movs	r1, #0
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f7ff fbc9 	bl	800e212 <SDMMC_GetResponse>
 800ea80:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d106      	bne.n	800ea9a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	0c1b      	lsrs	r3, r3, #16
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ea96:	2300      	movs	r3, #0
 800ea98:	e011      	b.n	800eabe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d002      	beq.n	800eaaa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eaa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eaa8:	e009      	b.n	800eabe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d002      	beq.n	800eaba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eab8:	e001      	b.n	800eabe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eaba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3720      	adds	r7, #32
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	20000000 	.word	0x20000000
 800eacc:	10624dd3 	.word	0x10624dd3

0800ead0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ead8:	4b22      	ldr	r3, [pc, #136]	; (800eb64 <SDMMC_GetCmdResp7+0x94>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4a22      	ldr	r2, [pc, #136]	; (800eb68 <SDMMC_GetCmdResp7+0x98>)
 800eade:	fba2 2303 	umull	r2, r3, r2, r3
 800eae2:	0a5b      	lsrs	r3, r3, #9
 800eae4:	f241 3288 	movw	r2, #5000	; 0x1388
 800eae8:	fb02 f303 	mul.w	r3, r2, r3
 800eaec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	1e5a      	subs	r2, r3, #1
 800eaf2:	60fa      	str	r2, [r7, #12]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d102      	bne.n	800eafe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eaf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eafc:	e02c      	b.n	800eb58 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d0ef      	beq.n	800eaee <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1ea      	bne.n	800eaee <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb1c:	f003 0304 	and.w	r3, r3, #4
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d004      	beq.n	800eb2e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2204      	movs	r2, #4
 800eb28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb2a:	2304      	movs	r3, #4
 800eb2c:	e014      	b.n	800eb58 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb32:	f003 0301 	and.w	r3, r3, #1
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d004      	beq.n	800eb44 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb40:	2301      	movs	r3, #1
 800eb42:	e009      	b.n	800eb58 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d002      	beq.n	800eb56 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2240      	movs	r2, #64	; 0x40
 800eb54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800eb56:	2300      	movs	r3, #0
  
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3714      	adds	r7, #20
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr
 800eb64:	20000000 	.word	0x20000000
 800eb68:	10624dd3 	.word	0x10624dd3

0800eb6c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b085      	sub	sp, #20
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb74:	4b11      	ldr	r3, [pc, #68]	; (800ebbc <SDMMC_GetCmdError+0x50>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a11      	ldr	r2, [pc, #68]	; (800ebc0 <SDMMC_GetCmdError+0x54>)
 800eb7a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb7e:	0a5b      	lsrs	r3, r3, #9
 800eb80:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb84:	fb02 f303 	mul.w	r3, r2, r3
 800eb88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	1e5a      	subs	r2, r3, #1
 800eb8e:	60fa      	str	r2, [r7, #12]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d102      	bne.n	800eb9a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb98:	e009      	b.n	800ebae <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d0f1      	beq.n	800eb8a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	22c5      	movs	r2, #197	; 0xc5
 800ebaa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ebac:	2300      	movs	r3, #0
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3714      	adds	r7, #20
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr
 800ebba:	bf00      	nop
 800ebbc:	20000000 	.word	0x20000000
 800ebc0:	10624dd3 	.word	0x10624dd3

0800ebc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b084      	sub	sp, #16
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
 800ebce:	f107 001c 	add.w	r0, r7, #28
 800ebd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d120      	bne.n	800ec1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	68da      	ldr	r2, [r3, #12]
 800ebec:	4b20      	ldr	r3, [pc, #128]	; (800ec70 <USB_CoreInit+0xac>)
 800ebee:	4013      	ands	r3, r2
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	68db      	ldr	r3, [r3, #12]
 800ebf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ec00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d105      	bne.n	800ec12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	68db      	ldr	r3, [r3, #12]
 800ec0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 f9d8 	bl	800efc8 <USB_CoreReset>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	73fb      	strb	r3, [r7, #15]
 800ec1c:	e010      	b.n	800ec40 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f000 f9cc 	bl	800efc8 <USB_CoreReset>
 800ec30:	4603      	mov	r3, r0
 800ec32:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800ec40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec42:	2b01      	cmp	r3, #1
 800ec44:	d10b      	bne.n	800ec5e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	f043 0206 	orr.w	r2, r3, #6
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	689b      	ldr	r3, [r3, #8]
 800ec56:	f043 0220 	orr.w	r2, r3, #32
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ec5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ec6a:	b004      	add	sp, #16
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	ffbdffbf 	.word	0xffbdffbf

0800ec74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	f043 0201 	orr.w	r2, r3, #1
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ec88:	2300      	movs	r3, #0
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	370c      	adds	r7, #12
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr

0800ec96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec96:	b480      	push	{r7}
 800ec98:	b083      	sub	sp, #12
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	f023 0201 	bic.w	r2, r3, #1
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ecaa:	2300      	movs	r3, #0
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	68db      	ldr	r3, [r3, #12]
 800eccc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ecd4:	78fb      	ldrb	r3, [r7, #3]
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d115      	bne.n	800ed06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ece6:	2001      	movs	r0, #1
 800ece8:	f7f4 fcc6 	bl	8003678 <HAL_Delay>
      ms++;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f000 f95a 	bl	800efac <USB_GetMode>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d01e      	beq.n	800ed3c <USB_SetCurrentMode+0x84>
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2b31      	cmp	r3, #49	; 0x31
 800ed02:	d9f0      	bls.n	800ece6 <USB_SetCurrentMode+0x2e>
 800ed04:	e01a      	b.n	800ed3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ed06:	78fb      	ldrb	r3, [r7, #3]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d115      	bne.n	800ed38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ed18:	2001      	movs	r0, #1
 800ed1a:	f7f4 fcad 	bl	8003678 <HAL_Delay>
      ms++;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	3301      	adds	r3, #1
 800ed22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 f941 	bl	800efac <USB_GetMode>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d005      	beq.n	800ed3c <USB_SetCurrentMode+0x84>
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2b31      	cmp	r3, #49	; 0x31
 800ed34:	d9f0      	bls.n	800ed18 <USB_SetCurrentMode+0x60>
 800ed36:	e001      	b.n	800ed3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	e005      	b.n	800ed48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2b32      	cmp	r3, #50	; 0x32
 800ed40:	d101      	bne.n	800ed46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ed42:	2301      	movs	r3, #1
 800ed44:	e000      	b.n	800ed48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ed46:	2300      	movs	r3, #0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3710      	adds	r7, #16
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b085      	sub	sp, #20
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	3301      	adds	r3, #1
 800ed62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	4a13      	ldr	r2, [pc, #76]	; (800edb4 <USB_FlushTxFifo+0x64>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d901      	bls.n	800ed70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ed6c:	2303      	movs	r3, #3
 800ed6e:	e01b      	b.n	800eda8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	691b      	ldr	r3, [r3, #16]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	daf2      	bge.n	800ed5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	019b      	lsls	r3, r3, #6
 800ed80:	f043 0220 	orr.w	r2, r3, #32
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	4a08      	ldr	r2, [pc, #32]	; (800edb4 <USB_FlushTxFifo+0x64>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d901      	bls.n	800ed9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ed96:	2303      	movs	r3, #3
 800ed98:	e006      	b.n	800eda8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	691b      	ldr	r3, [r3, #16]
 800ed9e:	f003 0320 	and.w	r3, r3, #32
 800eda2:	2b20      	cmp	r3, #32
 800eda4:	d0f0      	beq.n	800ed88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800eda6:	2300      	movs	r3, #0
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3714      	adds	r7, #20
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr
 800edb4:	00030d40 	.word	0x00030d40

0800edb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800edc0:	2300      	movs	r3, #0
 800edc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	3301      	adds	r3, #1
 800edc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	4a11      	ldr	r2, [pc, #68]	; (800ee14 <USB_FlushRxFifo+0x5c>)
 800edce:	4293      	cmp	r3, r2
 800edd0:	d901      	bls.n	800edd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800edd2:	2303      	movs	r3, #3
 800edd4:	e018      	b.n	800ee08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	691b      	ldr	r3, [r3, #16]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	daf2      	bge.n	800edc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800edde:	2300      	movs	r3, #0
 800ede0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2210      	movs	r2, #16
 800ede6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	3301      	adds	r3, #1
 800edec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	4a08      	ldr	r2, [pc, #32]	; (800ee14 <USB_FlushRxFifo+0x5c>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d901      	bls.n	800edfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800edf6:	2303      	movs	r3, #3
 800edf8:	e006      	b.n	800ee08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	691b      	ldr	r3, [r3, #16]
 800edfe:	f003 0310 	and.w	r3, r3, #16
 800ee02:	2b10      	cmp	r3, #16
 800ee04:	d0f0      	beq.n	800ede8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ee06:	2300      	movs	r3, #0
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3714      	adds	r7, #20
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr
 800ee14:	00030d40 	.word	0x00030d40

0800ee18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b089      	sub	sp, #36	; 0x24
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	4611      	mov	r1, r2
 800ee24:	461a      	mov	r2, r3
 800ee26:	460b      	mov	r3, r1
 800ee28:	71fb      	strb	r3, [r7, #7]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ee36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d123      	bne.n	800ee86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ee3e:	88bb      	ldrh	r3, [r7, #4]
 800ee40:	3303      	adds	r3, #3
 800ee42:	089b      	lsrs	r3, r3, #2
 800ee44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ee46:	2300      	movs	r3, #0
 800ee48:	61bb      	str	r3, [r7, #24]
 800ee4a:	e018      	b.n	800ee7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ee4c:	79fb      	ldrb	r3, [r7, #7]
 800ee4e:	031a      	lsls	r2, r3, #12
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	4413      	add	r3, r2
 800ee54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee58:	461a      	mov	r2, r3
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	3301      	adds	r3, #1
 800ee64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	3301      	adds	r3, #1
 800ee70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	3301      	adds	r3, #1
 800ee76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ee78:	69bb      	ldr	r3, [r7, #24]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	61bb      	str	r3, [r7, #24]
 800ee7e:	69ba      	ldr	r2, [r7, #24]
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d3e2      	bcc.n	800ee4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3724      	adds	r7, #36	; 0x24
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b08b      	sub	sp, #44	; 0x2c
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	4613      	mov	r3, r2
 800eea0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800eeaa:	88fb      	ldrh	r3, [r7, #6]
 800eeac:	089b      	lsrs	r3, r3, #2
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800eeb2:	88fb      	ldrh	r3, [r7, #6]
 800eeb4:	f003 0303 	and.w	r3, r3, #3
 800eeb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800eeba:	2300      	movs	r3, #0
 800eebc:	623b      	str	r3, [r7, #32]
 800eebe:	e014      	b.n	800eeea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800eec0:	69bb      	ldr	r3, [r7, #24]
 800eec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeca:	601a      	str	r2, [r3, #0]
    pDest++;
 800eecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eece:	3301      	adds	r3, #1
 800eed0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed4:	3301      	adds	r3, #1
 800eed6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeda:	3301      	adds	r3, #1
 800eedc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800eede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee0:	3301      	adds	r3, #1
 800eee2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800eee4:	6a3b      	ldr	r3, [r7, #32]
 800eee6:	3301      	adds	r3, #1
 800eee8:	623b      	str	r3, [r7, #32]
 800eeea:	6a3a      	ldr	r2, [r7, #32]
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d3e6      	bcc.n	800eec0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800eef2:	8bfb      	ldrh	r3, [r7, #30]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d01e      	beq.n	800ef36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800eef8:	2300      	movs	r3, #0
 800eefa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef02:	461a      	mov	r2, r3
 800ef04:	f107 0310 	add.w	r3, r7, #16
 800ef08:	6812      	ldr	r2, [r2, #0]
 800ef0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ef0c:	693a      	ldr	r2, [r7, #16]
 800ef0e:	6a3b      	ldr	r3, [r7, #32]
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	00db      	lsls	r3, r3, #3
 800ef14:	fa22 f303 	lsr.w	r3, r2, r3
 800ef18:	b2da      	uxtb	r2, r3
 800ef1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1c:	701a      	strb	r2, [r3, #0]
      i++;
 800ef1e:	6a3b      	ldr	r3, [r7, #32]
 800ef20:	3301      	adds	r3, #1
 800ef22:	623b      	str	r3, [r7, #32]
      pDest++;
 800ef24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef26:	3301      	adds	r3, #1
 800ef28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ef2a:	8bfb      	ldrh	r3, [r7, #30]
 800ef2c:	3b01      	subs	r3, #1
 800ef2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ef30:	8bfb      	ldrh	r3, [r7, #30]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d1ea      	bne.n	800ef0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	372c      	adds	r7, #44	; 0x2c
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	695b      	ldr	r3, [r3, #20]
 800ef50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	699b      	ldr	r3, [r3, #24]
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	4013      	ands	r3, r2
 800ef5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3714      	adds	r7, #20
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr

0800ef6a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800ef6a:	b480      	push	{r7}
 800ef6c:	b085      	sub	sp, #20
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
 800ef72:	460b      	mov	r3, r1
 800ef74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800ef7a:	78fb      	ldrb	r3, [r7, #3]
 800ef7c:	015a      	lsls	r2, r3, #5
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	4413      	add	r3, r2
 800ef82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef86:	689b      	ldr	r3, [r3, #8]
 800ef88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800ef8a:	78fb      	ldrb	r3, [r7, #3]
 800ef8c:	015a      	lsls	r2, r3, #5
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	4413      	add	r3, r2
 800ef92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	68ba      	ldr	r2, [r7, #8]
 800ef9a:	4013      	ands	r3, r2
 800ef9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ef9e:	68bb      	ldr	r3, [r7, #8]
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3714      	adds	r7, #20
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr

0800efac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800efac:	b480      	push	{r7}
 800efae:	b083      	sub	sp, #12
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	695b      	ldr	r3, [r3, #20]
 800efb8:	f003 0301 	and.w	r3, r3, #1
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	370c      	adds	r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr

0800efc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800efc8:	b480      	push	{r7}
 800efca:	b085      	sub	sp, #20
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800efd0:	2300      	movs	r3, #0
 800efd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	3301      	adds	r3, #1
 800efd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	4a13      	ldr	r2, [pc, #76]	; (800f02c <USB_CoreReset+0x64>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d901      	bls.n	800efe6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800efe2:	2303      	movs	r3, #3
 800efe4:	e01b      	b.n	800f01e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	691b      	ldr	r3, [r3, #16]
 800efea:	2b00      	cmp	r3, #0
 800efec:	daf2      	bge.n	800efd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800efee:	2300      	movs	r3, #0
 800eff0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	691b      	ldr	r3, [r3, #16]
 800eff6:	f043 0201 	orr.w	r2, r3, #1
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	3301      	adds	r3, #1
 800f002:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	4a09      	ldr	r2, [pc, #36]	; (800f02c <USB_CoreReset+0x64>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d901      	bls.n	800f010 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f00c:	2303      	movs	r3, #3
 800f00e:	e006      	b.n	800f01e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	691b      	ldr	r3, [r3, #16]
 800f014:	f003 0301 	and.w	r3, r3, #1
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d0f0      	beq.n	800effe <USB_CoreReset+0x36>

  return HAL_OK;
 800f01c:	2300      	movs	r3, #0
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3714      	adds	r7, #20
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop
 800f02c:	00030d40 	.word	0x00030d40

0800f030 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f030:	b084      	sub	sp, #16
 800f032:	b580      	push	{r7, lr}
 800f034:	b086      	sub	sp, #24
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
 800f03a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f03e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f042:	2300      	movs	r3, #0
 800f044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f050:	461a      	mov	r2, r3
 800f052:	2300      	movs	r3, #0
 800f054:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f05a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d018      	beq.n	800f0a0 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800f06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f070:	2b01      	cmp	r3, #1
 800f072:	d10a      	bne.n	800f08a <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f082:	f043 0304 	orr.w	r3, r3, #4
 800f086:	6013      	str	r3, [r2, #0]
 800f088:	e014      	b.n	800f0b4 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f098:	f023 0304 	bic.w	r3, r3, #4
 800f09c:	6013      	str	r3, [r2, #0]
 800f09e:	e009      	b.n	800f0b4 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	68fa      	ldr	r2, [r7, #12]
 800f0aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f0ae:	f023 0304 	bic.w	r3, r3, #4
 800f0b2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f0b4:	2110      	movs	r1, #16
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f7ff fe4a 	bl	800ed50 <USB_FlushTxFifo>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d001      	beq.n	800f0c6 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f7ff fe76 	bl	800edb8 <USB_FlushRxFifo>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	613b      	str	r3, [r7, #16]
 800f0da:	e015      	b.n	800f108 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	015a      	lsls	r2, r3, #5
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	015a      	lsls	r2, r3, #5
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	2300      	movs	r3, #0
 800f100:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	3301      	adds	r3, #1
 800f106:	613b      	str	r3, [r7, #16]
 800f108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f10a:	693a      	ldr	r2, [r7, #16]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d3e5      	bcc.n	800f0dc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2200      	movs	r2, #0
 800f114:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f11c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00b      	beq.n	800f142 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f130:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4a13      	ldr	r2, [pc, #76]	; (800f184 <USB_HostInit+0x154>)
 800f136:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	4a13      	ldr	r2, [pc, #76]	; (800f188 <USB_HostInit+0x158>)
 800f13c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800f140:	e009      	b.n	800f156 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2280      	movs	r2, #128	; 0x80
 800f146:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	4a10      	ldr	r2, [pc, #64]	; (800f18c <USB_HostInit+0x15c>)
 800f14c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4a0f      	ldr	r2, [pc, #60]	; (800f190 <USB_HostInit+0x160>)
 800f152:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d105      	bne.n	800f168 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	699b      	ldr	r3, [r3, #24]
 800f160:	f043 0210 	orr.w	r2, r3, #16
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	699a      	ldr	r2, [r3, #24]
 800f16c:	4b09      	ldr	r3, [pc, #36]	; (800f194 <USB_HostInit+0x164>)
 800f16e:	4313      	orrs	r3, r2
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800f174:	7dfb      	ldrb	r3, [r7, #23]
}
 800f176:	4618      	mov	r0, r3
 800f178:	3718      	adds	r7, #24
 800f17a:	46bd      	mov	sp, r7
 800f17c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f180:	b004      	add	sp, #16
 800f182:	4770      	bx	lr
 800f184:	01000200 	.word	0x01000200
 800f188:	00e00300 	.word	0x00e00300
 800f18c:	00600080 	.word	0x00600080
 800f190:	004000e0 	.word	0x004000e0
 800f194:	a3200008 	.word	0xa3200008

0800f198 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800f198:	b480      	push	{r7}
 800f19a:	b085      	sub	sp, #20
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f1b6:	f023 0303 	bic.w	r3, r3, #3
 800f1ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	78fb      	ldrb	r3, [r7, #3]
 800f1c6:	f003 0303 	and.w	r3, r3, #3
 800f1ca:	68f9      	ldr	r1, [r7, #12]
 800f1cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800f1d4:	78fb      	ldrb	r3, [r7, #3]
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d107      	bne.n	800f1ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f1e6:	6053      	str	r3, [r2, #4]
 800f1e8:	e009      	b.n	800f1fe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800f1ea:	78fb      	ldrb	r3, [r7, #3]
 800f1ec:	2b02      	cmp	r3, #2
 800f1ee:	d106      	bne.n	800f1fe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	f241 7370 	movw	r3, #6000	; 0x1770
 800f1fc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800f1fe:	2300      	movs	r3, #0
}
 800f200:	4618      	mov	r0, r3
 800f202:	3714      	adds	r7, #20
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr

0800f20c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800f218:	2300      	movs	r3, #0
 800f21a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f22c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f23a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800f23c:	2064      	movs	r0, #100	; 0x64
 800f23e:	f7f4 fa1b 	bl	8003678 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f24a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f24e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800f250:	200a      	movs	r0, #10
 800f252:	f7f4 fa11 	bl	8003678 <HAL_Delay>

  return HAL_OK;
 800f256:	2300      	movs	r3, #0
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3710      	adds	r7, #16
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800f260:	b480      	push	{r7}
 800f262:	b085      	sub	sp, #20
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	460b      	mov	r3, r1
 800f26a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f270:	2300      	movs	r3, #0
 800f272:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f284:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d109      	bne.n	800f2a4 <USB_DriveVbus+0x44>
 800f290:	78fb      	ldrb	r3, [r7, #3]
 800f292:	2b01      	cmp	r3, #1
 800f294:	d106      	bne.n	800f2a4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f29e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f2a2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f2aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2ae:	d109      	bne.n	800f2c4 <USB_DriveVbus+0x64>
 800f2b0:	78fb      	ldrb	r3, [r7, #3]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d106      	bne.n	800f2c4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	68fa      	ldr	r2, [r7, #12]
 800f2ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f2be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2c2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800f2c4:	2300      	movs	r3, #0
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3714      	adds	r7, #20
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr

0800f2d2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f2d2:	b480      	push	{r7}
 800f2d4:	b085      	sub	sp, #20
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	0c5b      	lsrs	r3, r3, #17
 800f2f0:	f003 0303 	and.w	r3, r3, #3
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3714      	adds	r7, #20
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800f300:	b480      	push	{r7}
 800f302:	b085      	sub	sp, #20
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	b29b      	uxth	r3, r3
}
 800f316:	4618      	mov	r0, r3
 800f318:	3714      	adds	r7, #20
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr
	...

0800f324 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b088      	sub	sp, #32
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	4608      	mov	r0, r1
 800f32e:	4611      	mov	r1, r2
 800f330:	461a      	mov	r2, r3
 800f332:	4603      	mov	r3, r0
 800f334:	70fb      	strb	r3, [r7, #3]
 800f336:	460b      	mov	r3, r1
 800f338:	70bb      	strb	r3, [r7, #2]
 800f33a:	4613      	mov	r3, r2
 800f33c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800f33e:	2300      	movs	r3, #0
 800f340:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800f346:	78fb      	ldrb	r3, [r7, #3]
 800f348:	015a      	lsls	r2, r3, #5
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	4413      	add	r3, r2
 800f34e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f352:	461a      	mov	r2, r3
 800f354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f358:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800f35a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f35e:	2b03      	cmp	r3, #3
 800f360:	d87e      	bhi.n	800f460 <USB_HC_Init+0x13c>
 800f362:	a201      	add	r2, pc, #4	; (adr r2, 800f368 <USB_HC_Init+0x44>)
 800f364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f368:	0800f379 	.word	0x0800f379
 800f36c:	0800f423 	.word	0x0800f423
 800f370:	0800f379 	.word	0x0800f379
 800f374:	0800f3e5 	.word	0x0800f3e5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f378:	78fb      	ldrb	r3, [r7, #3]
 800f37a:	015a      	lsls	r2, r3, #5
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	4413      	add	r3, r2
 800f380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f384:	461a      	mov	r2, r3
 800f386:	f240 439d 	movw	r3, #1181	; 0x49d
 800f38a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800f38c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f390:	2b00      	cmp	r3, #0
 800f392:	da10      	bge.n	800f3b6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f394:	78fb      	ldrb	r3, [r7, #3]
 800f396:	015a      	lsls	r2, r3, #5
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	4413      	add	r3, r2
 800f39c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	78fa      	ldrb	r2, [r7, #3]
 800f3a4:	0151      	lsls	r1, r2, #5
 800f3a6:	693a      	ldr	r2, [r7, #16]
 800f3a8:	440a      	add	r2, r1
 800f3aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f3ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f3b2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800f3b4:	e057      	b.n	800f466 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d051      	beq.n	800f466 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800f3c2:	78fb      	ldrb	r3, [r7, #3]
 800f3c4:	015a      	lsls	r2, r3, #5
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	78fa      	ldrb	r2, [r7, #3]
 800f3d2:	0151      	lsls	r1, r2, #5
 800f3d4:	693a      	ldr	r2, [r7, #16]
 800f3d6:	440a      	add	r2, r1
 800f3d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f3dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f3e0:	60d3      	str	r3, [r2, #12]
      break;
 800f3e2:	e040      	b.n	800f466 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f3e4:	78fb      	ldrb	r3, [r7, #3]
 800f3e6:	015a      	lsls	r2, r3, #5
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	f240 639d 	movw	r3, #1693	; 0x69d
 800f3f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f3f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	da34      	bge.n	800f46a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f400:	78fb      	ldrb	r3, [r7, #3]
 800f402:	015a      	lsls	r2, r3, #5
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	4413      	add	r3, r2
 800f408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	78fa      	ldrb	r2, [r7, #3]
 800f410:	0151      	lsls	r1, r2, #5
 800f412:	693a      	ldr	r2, [r7, #16]
 800f414:	440a      	add	r2, r1
 800f416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f41a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f41e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800f420:	e023      	b.n	800f46a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f422:	78fb      	ldrb	r3, [r7, #3]
 800f424:	015a      	lsls	r2, r3, #5
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	4413      	add	r3, r2
 800f42a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f42e:	461a      	mov	r2, r3
 800f430:	f240 2325 	movw	r3, #549	; 0x225
 800f434:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f436:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	da17      	bge.n	800f46e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800f43e:	78fb      	ldrb	r3, [r7, #3]
 800f440:	015a      	lsls	r2, r3, #5
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	4413      	add	r3, r2
 800f446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	78fa      	ldrb	r2, [r7, #3]
 800f44e:	0151      	lsls	r1, r2, #5
 800f450:	693a      	ldr	r2, [r7, #16]
 800f452:	440a      	add	r2, r1
 800f454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f458:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800f45c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800f45e:	e006      	b.n	800f46e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800f460:	2301      	movs	r3, #1
 800f462:	77fb      	strb	r3, [r7, #31]
      break;
 800f464:	e004      	b.n	800f470 <USB_HC_Init+0x14c>
      break;
 800f466:	bf00      	nop
 800f468:	e002      	b.n	800f470 <USB_HC_Init+0x14c>
      break;
 800f46a:	bf00      	nop
 800f46c:	e000      	b.n	800f470 <USB_HC_Init+0x14c>
      break;
 800f46e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800f470:	78fb      	ldrb	r3, [r7, #3]
 800f472:	015a      	lsls	r2, r3, #5
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	4413      	add	r3, r2
 800f478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	78fa      	ldrb	r2, [r7, #3]
 800f480:	0151      	lsls	r1, r2, #5
 800f482:	693a      	ldr	r2, [r7, #16]
 800f484:	440a      	add	r2, r1
 800f486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f48a:	f043 0302 	orr.w	r3, r3, #2
 800f48e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f496:	699a      	ldr	r2, [r3, #24]
 800f498:	78fb      	ldrb	r3, [r7, #3]
 800f49a:	f003 030f 	and.w	r3, r3, #15
 800f49e:	2101      	movs	r1, #1
 800f4a0:	fa01 f303 	lsl.w	r3, r1, r3
 800f4a4:	6939      	ldr	r1, [r7, #16]
 800f4a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	699b      	ldr	r3, [r3, #24]
 800f4b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800f4ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	da03      	bge.n	800f4ca <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800f4c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4c6:	61bb      	str	r3, [r7, #24]
 800f4c8:	e001      	b.n	800f4ce <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff feff 	bl	800f2d2 <USB_GetHostSpeed>
 800f4d4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800f4d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f4da:	2b02      	cmp	r3, #2
 800f4dc:	d106      	bne.n	800f4ec <USB_HC_Init+0x1c8>
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2b02      	cmp	r3, #2
 800f4e2:	d003      	beq.n	800f4ec <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800f4e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f4e8:	617b      	str	r3, [r7, #20]
 800f4ea:	e001      	b.n	800f4f0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f4f0:	787b      	ldrb	r3, [r7, #1]
 800f4f2:	059b      	lsls	r3, r3, #22
 800f4f4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f4f8:	78bb      	ldrb	r3, [r7, #2]
 800f4fa:	02db      	lsls	r3, r3, #11
 800f4fc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f500:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f502:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f506:	049b      	lsls	r3, r3, #18
 800f508:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f50c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f50e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f510:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f514:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f51a:	78fb      	ldrb	r3, [r7, #3]
 800f51c:	0159      	lsls	r1, r3, #5
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	440b      	add	r3, r1
 800f522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f526:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f52c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800f52e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f532:	2b03      	cmp	r3, #3
 800f534:	d003      	beq.n	800f53e <USB_HC_Init+0x21a>
 800f536:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d10f      	bne.n	800f55e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800f53e:	78fb      	ldrb	r3, [r7, #3]
 800f540:	015a      	lsls	r2, r3, #5
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	4413      	add	r3, r2
 800f546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	78fa      	ldrb	r2, [r7, #3]
 800f54e:	0151      	lsls	r1, r2, #5
 800f550:	693a      	ldr	r2, [r7, #16]
 800f552:	440a      	add	r2, r1
 800f554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f55c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800f55e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f560:	4618      	mov	r0, r3
 800f562:	3720      	adds	r7, #32
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b08c      	sub	sp, #48	; 0x30
 800f56c:	af02      	add	r7, sp, #8
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	4613      	mov	r3, r2
 800f574:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	785b      	ldrb	r3, [r3, #1]
 800f57e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800f580:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f584:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f58a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d02d      	beq.n	800f5ee <USB_HC_StartXfer+0x86>
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	791b      	ldrb	r3, [r3, #4]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d129      	bne.n	800f5ee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800f59a:	79fb      	ldrb	r3, [r7, #7]
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d117      	bne.n	800f5d0 <USB_HC_StartXfer+0x68>
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	79db      	ldrb	r3, [r3, #7]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d003      	beq.n	800f5b0 <USB_HC_StartXfer+0x48>
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	79db      	ldrb	r3, [r3, #7]
 800f5ac:	2b02      	cmp	r3, #2
 800f5ae:	d10f      	bne.n	800f5d0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	015a      	lsls	r2, r3, #5
 800f5b4:	6a3b      	ldr	r3, [r7, #32]
 800f5b6:	4413      	add	r3, r2
 800f5b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	69fa      	ldr	r2, [r7, #28]
 800f5c0:	0151      	lsls	r1, r2, #5
 800f5c2:	6a3a      	ldr	r2, [r7, #32]
 800f5c4:	440a      	add	r2, r1
 800f5c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5ce:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800f5d0:	79fb      	ldrb	r3, [r7, #7]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d10b      	bne.n	800f5ee <USB_HC_StartXfer+0x86>
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	795b      	ldrb	r3, [r3, #5]
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d107      	bne.n	800f5ee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	785b      	ldrb	r3, [r3, #1]
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f000 fa0f 	bl	800fa08 <USB_DoPing>
      return HAL_OK;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	e0f8      	b.n	800f7e0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	695b      	ldr	r3, [r3, #20]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d018      	beq.n	800f628 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	695b      	ldr	r3, [r3, #20]
 800f5fa:	68ba      	ldr	r2, [r7, #8]
 800f5fc:	8912      	ldrh	r2, [r2, #8]
 800f5fe:	4413      	add	r3, r2
 800f600:	3b01      	subs	r3, #1
 800f602:	68ba      	ldr	r2, [r7, #8]
 800f604:	8912      	ldrh	r2, [r2, #8]
 800f606:	fbb3 f3f2 	udiv	r3, r3, r2
 800f60a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800f60c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f60e:	8b7b      	ldrh	r3, [r7, #26]
 800f610:	429a      	cmp	r2, r3
 800f612:	d90b      	bls.n	800f62c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800f614:	8b7b      	ldrh	r3, [r7, #26]
 800f616:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f618:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f61a:	68ba      	ldr	r2, [r7, #8]
 800f61c:	8912      	ldrh	r2, [r2, #8]
 800f61e:	fb03 f202 	mul.w	r2, r3, r2
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	611a      	str	r2, [r3, #16]
 800f626:	e001      	b.n	800f62c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800f628:	2301      	movs	r3, #1
 800f62a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	78db      	ldrb	r3, [r3, #3]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d007      	beq.n	800f644 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f634:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f636:	68ba      	ldr	r2, [r7, #8]
 800f638:	8912      	ldrh	r2, [r2, #8]
 800f63a:	fb03 f202 	mul.w	r2, r3, r2
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	611a      	str	r2, [r3, #16]
 800f642:	e003      	b.n	800f64c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	695a      	ldr	r2, [r3, #20]
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f654:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f656:	04d9      	lsls	r1, r3, #19
 800f658:	4b63      	ldr	r3, [pc, #396]	; (800f7e8 <USB_HC_StartXfer+0x280>)
 800f65a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f65c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	7a9b      	ldrb	r3, [r3, #10]
 800f662:	075b      	lsls	r3, r3, #29
 800f664:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f668:	69f9      	ldr	r1, [r7, #28]
 800f66a:	0148      	lsls	r0, r1, #5
 800f66c:	6a39      	ldr	r1, [r7, #32]
 800f66e:	4401      	add	r1, r0
 800f670:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f674:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f676:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800f678:	79fb      	ldrb	r3, [r7, #7]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d009      	beq.n	800f692 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	68d9      	ldr	r1, [r3, #12]
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	015a      	lsls	r2, r3, #5
 800f686:	6a3b      	ldr	r3, [r7, #32]
 800f688:	4413      	add	r3, r2
 800f68a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f68e:	460a      	mov	r2, r1
 800f690:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800f692:	6a3b      	ldr	r3, [r7, #32]
 800f694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f698:	689b      	ldr	r3, [r3, #8]
 800f69a:	f003 0301 	and.w	r3, r3, #1
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	bf0c      	ite	eq
 800f6a2:	2301      	moveq	r3, #1
 800f6a4:	2300      	movne	r3, #0
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	015a      	lsls	r2, r3, #5
 800f6ae:	6a3b      	ldr	r3, [r7, #32]
 800f6b0:	4413      	add	r3, r2
 800f6b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	69fa      	ldr	r2, [r7, #28]
 800f6ba:	0151      	lsls	r1, r2, #5
 800f6bc:	6a3a      	ldr	r2, [r7, #32]
 800f6be:	440a      	add	r2, r1
 800f6c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f6c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f6c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800f6ca:	69fb      	ldr	r3, [r7, #28]
 800f6cc:	015a      	lsls	r2, r3, #5
 800f6ce:	6a3b      	ldr	r3, [r7, #32]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	7e7b      	ldrb	r3, [r7, #25]
 800f6da:	075b      	lsls	r3, r3, #29
 800f6dc:	69f9      	ldr	r1, [r7, #28]
 800f6de:	0148      	lsls	r0, r1, #5
 800f6e0:	6a39      	ldr	r1, [r7, #32]
 800f6e2:	4401      	add	r1, r0
 800f6e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	015a      	lsls	r2, r3, #5
 800f6f0:	6a3b      	ldr	r3, [r7, #32]
 800f6f2:	4413      	add	r3, r2
 800f6f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f702:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	78db      	ldrb	r3, [r3, #3]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d004      	beq.n	800f716 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f712:	613b      	str	r3, [r7, #16]
 800f714:	e003      	b.n	800f71e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f71c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f724:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	015a      	lsls	r2, r3, #5
 800f72a:	6a3b      	ldr	r3, [r7, #32]
 800f72c:	4413      	add	r3, r2
 800f72e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f732:	461a      	mov	r2, r3
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800f738:	79fb      	ldrb	r3, [r7, #7]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d001      	beq.n	800f742 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800f73e:	2300      	movs	r3, #0
 800f740:	e04e      	b.n	800f7e0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	78db      	ldrb	r3, [r3, #3]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d149      	bne.n	800f7de <USB_HC_StartXfer+0x276>
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	695b      	ldr	r3, [r3, #20]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d045      	beq.n	800f7de <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	79db      	ldrb	r3, [r3, #7]
 800f756:	2b03      	cmp	r3, #3
 800f758:	d830      	bhi.n	800f7bc <USB_HC_StartXfer+0x254>
 800f75a:	a201      	add	r2, pc, #4	; (adr r2, 800f760 <USB_HC_StartXfer+0x1f8>)
 800f75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f760:	0800f771 	.word	0x0800f771
 800f764:	0800f795 	.word	0x0800f795
 800f768:	0800f771 	.word	0x0800f771
 800f76c:	0800f795 	.word	0x0800f795
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	695b      	ldr	r3, [r3, #20]
 800f774:	3303      	adds	r3, #3
 800f776:	089b      	lsrs	r3, r3, #2
 800f778:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800f77a:	8afa      	ldrh	r2, [r7, #22]
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f780:	b29b      	uxth	r3, r3
 800f782:	429a      	cmp	r2, r3
 800f784:	d91c      	bls.n	800f7c0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	699b      	ldr	r3, [r3, #24]
 800f78a:	f043 0220 	orr.w	r2, r3, #32
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	619a      	str	r2, [r3, #24]
        }
        break;
 800f792:	e015      	b.n	800f7c0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	695b      	ldr	r3, [r3, #20]
 800f798:	3303      	adds	r3, #3
 800f79a:	089b      	lsrs	r3, r3, #2
 800f79c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800f79e:	8afa      	ldrh	r2, [r7, #22]
 800f7a0:	6a3b      	ldr	r3, [r7, #32]
 800f7a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f7a6:	691b      	ldr	r3, [r3, #16]
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d90a      	bls.n	800f7c4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	699b      	ldr	r3, [r3, #24]
 800f7b2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	619a      	str	r2, [r3, #24]
        }
        break;
 800f7ba:	e003      	b.n	800f7c4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800f7bc:	bf00      	nop
 800f7be:	e002      	b.n	800f7c6 <USB_HC_StartXfer+0x25e>
        break;
 800f7c0:	bf00      	nop
 800f7c2:	e000      	b.n	800f7c6 <USB_HC_StartXfer+0x25e>
        break;
 800f7c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	68d9      	ldr	r1, [r3, #12]
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	785a      	ldrb	r2, [r3, #1]
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	695b      	ldr	r3, [r3, #20]
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	9000      	str	r0, [sp, #0]
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f7ff fb1d 	bl	800ee18 <USB_WritePacket>
  }

  return HAL_OK;
 800f7de:	2300      	movs	r3, #0
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3728      	adds	r7, #40	; 0x28
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	1ff80000 	.word	0x1ff80000

0800f7ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b085      	sub	sp, #20
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f7fe:	695b      	ldr	r3, [r3, #20]
 800f800:	b29b      	uxth	r3, r3
}
 800f802:	4618      	mov	r0, r3
 800f804:	3714      	adds	r7, #20
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr

0800f80e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800f80e:	b480      	push	{r7}
 800f810:	b089      	sub	sp, #36	; 0x24
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
 800f816:	460b      	mov	r3, r1
 800f818:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800f81e:	78fb      	ldrb	r3, [r7, #3]
 800f820:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800f822:	2300      	movs	r3, #0
 800f824:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	015a      	lsls	r2, r3, #5
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	4413      	add	r3, r2
 800f82e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	0c9b      	lsrs	r3, r3, #18
 800f836:	f003 0303 	and.w	r3, r3, #3
 800f83a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800f83c:	69bb      	ldr	r3, [r7, #24]
 800f83e:	015a      	lsls	r2, r3, #5
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	4413      	add	r3, r2
 800f844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	0fdb      	lsrs	r3, r3, #31
 800f84c:	f003 0301 	and.w	r3, r3, #1
 800f850:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	689b      	ldr	r3, [r3, #8]
 800f856:	f003 0320 	and.w	r3, r3, #32
 800f85a:	2b20      	cmp	r3, #32
 800f85c:	d104      	bne.n	800f868 <USB_HC_Halt+0x5a>
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d101      	bne.n	800f868 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800f864:	2300      	movs	r3, #0
 800f866:	e0c8      	b.n	800f9fa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d002      	beq.n	800f874 <USB_HC_Halt+0x66>
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	2b02      	cmp	r3, #2
 800f872:	d163      	bne.n	800f93c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f874:	69bb      	ldr	r3, [r7, #24]
 800f876:	015a      	lsls	r2, r3, #5
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	4413      	add	r3, r2
 800f87c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	69ba      	ldr	r2, [r7, #24]
 800f884:	0151      	lsls	r1, r2, #5
 800f886:	69fa      	ldr	r2, [r7, #28]
 800f888:	440a      	add	r2, r1
 800f88a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f88e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f892:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	689b      	ldr	r3, [r3, #8]
 800f898:	f003 0320 	and.w	r3, r3, #32
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f040 80ab 	bne.w	800f9f8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d133      	bne.n	800f916 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	015a      	lsls	r2, r3, #5
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	69ba      	ldr	r2, [r7, #24]
 800f8be:	0151      	lsls	r1, r2, #5
 800f8c0:	69fa      	ldr	r2, [r7, #28]
 800f8c2:	440a      	add	r2, r1
 800f8c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f8c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f8cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	015a      	lsls	r2, r3, #5
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	69ba      	ldr	r2, [r7, #24]
 800f8de:	0151      	lsls	r1, r2, #5
 800f8e0:	69fa      	ldr	r2, [r7, #28]
 800f8e2:	440a      	add	r2, r1
 800f8e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f8e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f8ec:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f8fa:	d81d      	bhi.n	800f938 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f8fc:	69bb      	ldr	r3, [r7, #24]
 800f8fe:	015a      	lsls	r2, r3, #5
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	4413      	add	r3, r2
 800f904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f90e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f912:	d0ec      	beq.n	800f8ee <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f914:	e070      	b.n	800f9f8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f916:	69bb      	ldr	r3, [r7, #24]
 800f918:	015a      	lsls	r2, r3, #5
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	4413      	add	r3, r2
 800f91e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	69ba      	ldr	r2, [r7, #24]
 800f926:	0151      	lsls	r1, r2, #5
 800f928:	69fa      	ldr	r2, [r7, #28]
 800f92a:	440a      	add	r2, r1
 800f92c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f934:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f936:	e05f      	b.n	800f9f8 <USB_HC_Halt+0x1ea>
            break;
 800f938:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f93a:	e05d      	b.n	800f9f8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f93c:	69bb      	ldr	r3, [r7, #24]
 800f93e:	015a      	lsls	r2, r3, #5
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	4413      	add	r3, r2
 800f944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	69ba      	ldr	r2, [r7, #24]
 800f94c:	0151      	lsls	r1, r2, #5
 800f94e:	69fa      	ldr	r2, [r7, #28]
 800f950:	440a      	add	r2, r1
 800f952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f956:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f95a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800f95c:	69fb      	ldr	r3, [r7, #28]
 800f95e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f962:	691b      	ldr	r3, [r3, #16]
 800f964:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d133      	bne.n	800f9d4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f96c:	69bb      	ldr	r3, [r7, #24]
 800f96e:	015a      	lsls	r2, r3, #5
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	4413      	add	r3, r2
 800f974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	69ba      	ldr	r2, [r7, #24]
 800f97c:	0151      	lsls	r1, r2, #5
 800f97e:	69fa      	ldr	r2, [r7, #28]
 800f980:	440a      	add	r2, r1
 800f982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f986:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f98a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f98c:	69bb      	ldr	r3, [r7, #24]
 800f98e:	015a      	lsls	r2, r3, #5
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	4413      	add	r3, r2
 800f994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	69ba      	ldr	r2, [r7, #24]
 800f99c:	0151      	lsls	r1, r2, #5
 800f99e:	69fa      	ldr	r2, [r7, #28]
 800f9a0:	440a      	add	r2, r1
 800f9a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f9a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f9aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f9b8:	d81d      	bhi.n	800f9f6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	015a      	lsls	r2, r3, #5
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	4413      	add	r3, r2
 800f9c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f9cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9d0:	d0ec      	beq.n	800f9ac <USB_HC_Halt+0x19e>
 800f9d2:	e011      	b.n	800f9f8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	015a      	lsls	r2, r3, #5
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	4413      	add	r3, r2
 800f9dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	69ba      	ldr	r2, [r7, #24]
 800f9e4:	0151      	lsls	r1, r2, #5
 800f9e6:	69fa      	ldr	r2, [r7, #28]
 800f9e8:	440a      	add	r2, r1
 800f9ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f9ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f9f2:	6013      	str	r3, [r2, #0]
 800f9f4:	e000      	b.n	800f9f8 <USB_HC_Halt+0x1ea>
          break;
 800f9f6:	bf00      	nop
    }
  }

  return HAL_OK;
 800f9f8:	2300      	movs	r3, #0
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3724      	adds	r7, #36	; 0x24
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr
	...

0800fa08 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b087      	sub	sp, #28
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	460b      	mov	r3, r1
 800fa12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800fa18:	78fb      	ldrb	r3, [r7, #3]
 800fa1a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	04da      	lsls	r2, r3, #19
 800fa24:	4b15      	ldr	r3, [pc, #84]	; (800fa7c <USB_DoPing+0x74>)
 800fa26:	4013      	ands	r3, r2
 800fa28:	693a      	ldr	r2, [r7, #16]
 800fa2a:	0151      	lsls	r1, r2, #5
 800fa2c:	697a      	ldr	r2, [r7, #20]
 800fa2e:	440a      	add	r2, r1
 800fa30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fa34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fa38:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	015a      	lsls	r2, r3, #5
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	4413      	add	r3, r2
 800fa42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fa50:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fa58:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	015a      	lsls	r2, r3, #5
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	4413      	add	r3, r2
 800fa62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa66:	461a      	mov	r2, r3
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800fa6c:	2300      	movs	r3, #0
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	371c      	adds	r7, #28
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr
 800fa7a:	bf00      	nop
 800fa7c:	1ff80000 	.word	0x1ff80000

0800fa80 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b088      	sub	sp, #32
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800fa90:	2300      	movs	r3, #0
 800fa92:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f7ff f8fe 	bl	800ec96 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fa9a:	2110      	movs	r1, #16
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7ff f957 	bl	800ed50 <USB_FlushTxFifo>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d001      	beq.n	800faac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800faa8:	2301      	movs	r3, #1
 800faaa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f7ff f983 	bl	800edb8 <USB_FlushRxFifo>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d001      	beq.n	800fabc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800fab8:	2301      	movs	r3, #1
 800faba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800fabc:	2300      	movs	r3, #0
 800fabe:	61bb      	str	r3, [r7, #24]
 800fac0:	e01f      	b.n	800fb02 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800fac2:	69bb      	ldr	r3, [r7, #24]
 800fac4:	015a      	lsls	r2, r3, #5
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	4413      	add	r3, r2
 800faca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fad8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fae0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fae8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	015a      	lsls	r2, r3, #5
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	4413      	add	r3, r2
 800faf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800faf6:	461a      	mov	r2, r3
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800fafc:	69bb      	ldr	r3, [r7, #24]
 800fafe:	3301      	adds	r3, #1
 800fb00:	61bb      	str	r3, [r7, #24]
 800fb02:	69bb      	ldr	r3, [r7, #24]
 800fb04:	2b0f      	cmp	r3, #15
 800fb06:	d9dc      	bls.n	800fac2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800fb08:	2300      	movs	r3, #0
 800fb0a:	61bb      	str	r3, [r7, #24]
 800fb0c:	e034      	b.n	800fb78 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800fb0e:	69bb      	ldr	r3, [r7, #24]
 800fb10:	015a      	lsls	r2, r3, #5
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	4413      	add	r3, r2
 800fb16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fb24:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fb2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fb34:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800fb36:	69bb      	ldr	r3, [r7, #24]
 800fb38:	015a      	lsls	r2, r3, #5
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb42:	461a      	mov	r2, r3
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	3301      	adds	r3, #1
 800fb4c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fb54:	d80c      	bhi.n	800fb70 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	015a      	lsls	r2, r3, #5
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb6c:	d0ec      	beq.n	800fb48 <USB_StopHost+0xc8>
 800fb6e:	e000      	b.n	800fb72 <USB_StopHost+0xf2>
        break;
 800fb70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800fb72:	69bb      	ldr	r3, [r7, #24]
 800fb74:	3301      	adds	r3, #1
 800fb76:	61bb      	str	r3, [r7, #24]
 800fb78:	69bb      	ldr	r3, [r7, #24]
 800fb7a:	2b0f      	cmp	r3, #15
 800fb7c:	d9c7      	bls.n	800fb0e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb84:	461a      	mov	r2, r3
 800fb86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f7ff f86d 	bl	800ec74 <USB_EnableGlobalInt>

  return ret;
 800fb9a:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3720      	adds	r7, #32
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fba8:	4904      	ldr	r1, [pc, #16]	; (800fbbc <MX_FATFS_Init+0x18>)
 800fbaa:	4805      	ldr	r0, [pc, #20]	; (800fbc0 <MX_FATFS_Init+0x1c>)
 800fbac:	f003 fb3c 	bl	8013228 <FATFS_LinkDriver>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	4b03      	ldr	r3, [pc, #12]	; (800fbc4 <MX_FATFS_Init+0x20>)
 800fbb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fbb8:	bf00      	nop
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	20000f2c 	.word	0x20000f2c
 800fbc0:	08028138 	.word	0x08028138
 800fbc4:	20000f28 	.word	0x20000f28

0800fbc8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fbd2:	f000 f87b 	bl	800fccc <BSP_SD_IsDetected>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d001      	beq.n	800fbe0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fbdc:	2302      	movs	r3, #2
 800fbde:	e012      	b.n	800fc06 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fbe0:	480b      	ldr	r0, [pc, #44]	; (800fc10 <BSP_SD_Init+0x48>)
 800fbe2:	f7fa fbfd 	bl	800a3e0 <HAL_SD_Init>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fbea:	79fb      	ldrb	r3, [r7, #7]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d109      	bne.n	800fc04 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fbf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fbf4:	4806      	ldr	r0, [pc, #24]	; (800fc10 <BSP_SD_Init+0x48>)
 800fbf6:	f7fb f84d 	bl	800ac94 <HAL_SD_ConfigWideBusOperation>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d001      	beq.n	800fc04 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fc00:	2301      	movs	r3, #1
 800fc02:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fc04:	79fb      	ldrb	r3, [r7, #7]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3708      	adds	r7, #8
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	2000086c 	.word	0x2000086c

0800fc14 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b086      	sub	sp, #24
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	68ba      	ldr	r2, [r7, #8]
 800fc28:	68f9      	ldr	r1, [r7, #12]
 800fc2a:	4806      	ldr	r0, [pc, #24]	; (800fc44 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fc2c:	f7fa fc90 	bl	800a550 <HAL_SD_ReadBlocks_DMA>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d001      	beq.n	800fc3a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fc36:	2301      	movs	r3, #1
 800fc38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fc3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3718      	adds	r7, #24
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	2000086c 	.word	0x2000086c

0800fc48 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b086      	sub	sp, #24
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fc54:	2300      	movs	r3, #0
 800fc56:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	68ba      	ldr	r2, [r7, #8]
 800fc5c:	68f9      	ldr	r1, [r7, #12]
 800fc5e:	4806      	ldr	r0, [pc, #24]	; (800fc78 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fc60:	f7fa fd58 	bl	800a714 <HAL_SD_WriteBlocks_DMA>
 800fc64:	4603      	mov	r3, r0
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d001      	beq.n	800fc6e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fc6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3718      	adds	r7, #24
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	2000086c 	.word	0x2000086c

0800fc7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fc80:	4805      	ldr	r0, [pc, #20]	; (800fc98 <BSP_SD_GetCardState+0x1c>)
 800fc82:	f7fb f8a1 	bl	800adc8 <HAL_SD_GetCardState>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b04      	cmp	r3, #4
 800fc8a:	bf14      	ite	ne
 800fc8c:	2301      	movne	r3, #1
 800fc8e:	2300      	moveq	r3, #0
 800fc90:	b2db      	uxtb	r3, r3
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	bd80      	pop	{r7, pc}
 800fc96:	bf00      	nop
 800fc98:	2000086c 	.word	0x2000086c

0800fc9c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fca4:	6879      	ldr	r1, [r7, #4]
 800fca6:	4803      	ldr	r0, [pc, #12]	; (800fcb4 <BSP_SD_GetCardInfo+0x18>)
 800fca8:	f7fa ffc8 	bl	800ac3c <HAL_SD_GetCardInfo>
}
 800fcac:	bf00      	nop
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}
 800fcb4:	2000086c 	.word	0x2000086c

0800fcb8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fcc0:	f000 f9b2 	bl	8010028 <BSP_SD_ReadCpltCallback>
}
 800fcc4:	bf00      	nop
 800fcc6:	3708      	adds	r7, #8
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fcd6:	f000 f80b 	bl	800fcf0 <BSP_PlatformIsDetected>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d101      	bne.n	800fce4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fce0:	2300      	movs	r3, #0
 800fce2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fce4:	79fb      	ldrb	r3, [r7, #7]
 800fce6:	b2db      	uxtb	r3, r3
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3708      	adds	r7, #8
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fcfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fcfe:	4806      	ldr	r0, [pc, #24]	; (800fd18 <BSP_PlatformIsDetected+0x28>)
 800fd00:	f7f6 f8d6 	bl	8005eb0 <HAL_GPIO_ReadPin>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d001      	beq.n	800fd0e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fd0e:	79fb      	ldrb	r3, [r7, #7]
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	40020800 	.word	0x40020800

0800fd1c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800fd24:	f003 facc 	bl	80132c0 <osKernelSysTick>
 800fd28:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800fd2a:	e006      	b.n	800fd3a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd2c:	f7ff ffa6 	bl	800fc7c <BSP_SD_GetCardState>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d101      	bne.n	800fd3a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fd36:	2300      	movs	r3, #0
 800fd38:	e009      	b.n	800fd4e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800fd3a:	f003 fac1 	bl	80132c0 <osKernelSysTick>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	1ad3      	subs	r3, r2, r3
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d8f0      	bhi.n	800fd2c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fd4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
	...

0800fd58 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	4603      	mov	r3, r0
 800fd60:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fd62:	4b0b      	ldr	r3, [pc, #44]	; (800fd90 <SD_CheckStatus+0x38>)
 800fd64:	2201      	movs	r2, #1
 800fd66:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd68:	f7ff ff88 	bl	800fc7c <BSP_SD_GetCardState>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d107      	bne.n	800fd82 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fd72:	4b07      	ldr	r3, [pc, #28]	; (800fd90 <SD_CheckStatus+0x38>)
 800fd74:	781b      	ldrb	r3, [r3, #0]
 800fd76:	b2db      	uxtb	r3, r3
 800fd78:	f023 0301 	bic.w	r3, r3, #1
 800fd7c:	b2da      	uxtb	r2, r3
 800fd7e:	4b04      	ldr	r3, [pc, #16]	; (800fd90 <SD_CheckStatus+0x38>)
 800fd80:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fd82:	4b03      	ldr	r3, [pc, #12]	; (800fd90 <SD_CheckStatus+0x38>)
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	b2db      	uxtb	r3, r3
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3708      	adds	r7, #8
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	20000009 	.word	0x20000009

0800fd94 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fd94:	b590      	push	{r4, r7, lr}
 800fd96:	b087      	sub	sp, #28
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800fd9e:	4b20      	ldr	r3, [pc, #128]	; (800fe20 <SD_initialize+0x8c>)
 800fda0:	2201      	movs	r2, #1
 800fda2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800fda4:	f003 fa80 	bl	80132a8 <osKernelRunning>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d030      	beq.n	800fe10 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800fdae:	f7ff ff0b 	bl	800fbc8 <BSP_SD_Init>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d107      	bne.n	800fdc8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800fdb8:	79fb      	ldrb	r3, [r7, #7]
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7ff ffcc 	bl	800fd58 <SD_CheckStatus>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	4b16      	ldr	r3, [pc, #88]	; (800fe20 <SD_initialize+0x8c>)
 800fdc6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800fdc8:	4b15      	ldr	r3, [pc, #84]	; (800fe20 <SD_initialize+0x8c>)
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d01e      	beq.n	800fe10 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800fdd2:	4b14      	ldr	r3, [pc, #80]	; (800fe24 <SD_initialize+0x90>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d10e      	bne.n	800fdf8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800fdda:	4b13      	ldr	r3, [pc, #76]	; (800fe28 <SD_initialize+0x94>)
 800fddc:	f107 0408 	add.w	r4, r7, #8
 800fde0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fde2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800fde6:	f107 0308 	add.w	r3, r7, #8
 800fdea:	2100      	movs	r1, #0
 800fdec:	4618      	mov	r0, r3
 800fdee:	f003 fc56 	bl	801369e <osMessageCreate>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	4a0b      	ldr	r2, [pc, #44]	; (800fe24 <SD_initialize+0x90>)
 800fdf6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800fdf8:	4b0a      	ldr	r3, [pc, #40]	; (800fe24 <SD_initialize+0x90>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d107      	bne.n	800fe10 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800fe00:	4b07      	ldr	r3, [pc, #28]	; (800fe20 <SD_initialize+0x8c>)
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	b2db      	uxtb	r3, r3
 800fe06:	f043 0301 	orr.w	r3, r3, #1
 800fe0a:	b2da      	uxtb	r2, r3
 800fe0c:	4b04      	ldr	r3, [pc, #16]	; (800fe20 <SD_initialize+0x8c>)
 800fe0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800fe10:	4b03      	ldr	r3, [pc, #12]	; (800fe20 <SD_initialize+0x8c>)
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	b2db      	uxtb	r3, r3
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	371c      	adds	r7, #28
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd90      	pop	{r4, r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	20000009 	.word	0x20000009
 800fe24:	20000f30 	.word	0x20000f30
 800fe28:	08024ccc 	.word	0x08024ccc

0800fe2c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	4603      	mov	r3, r0
 800fe34:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fe36:	79fb      	ldrb	r3, [r7, #7]
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7ff ff8d 	bl	800fd58 <SD_CheckStatus>
 800fe3e:	4603      	mov	r3, r0
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b08a      	sub	sp, #40	; 0x28
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60b9      	str	r1, [r7, #8]
 800fe50:	607a      	str	r2, [r7, #4]
 800fe52:	603b      	str	r3, [r7, #0]
 800fe54:	4603      	mov	r3, r0
 800fe56:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800fe58:	2301      	movs	r3, #1
 800fe5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fe5e:	f247 5030 	movw	r0, #30000	; 0x7530
 800fe62:	f7ff ff5b 	bl	800fd1c <SD_CheckStatusWithTimeout>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	da02      	bge.n	800fe72 <SD_read+0x2a>
  {
    return res;
 800fe6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe70:	e032      	b.n	800fed8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800fe72:	683a      	ldr	r2, [r7, #0]
 800fe74:	6879      	ldr	r1, [r7, #4]
 800fe76:	68b8      	ldr	r0, [r7, #8]
 800fe78:	f7ff fecc 	bl	800fc14 <BSP_SD_ReadBlocks_DMA>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800fe82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d124      	bne.n	800fed4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800fe8a:	4b15      	ldr	r3, [pc, #84]	; (800fee0 <SD_read+0x98>)
 800fe8c:	6819      	ldr	r1, [r3, #0]
 800fe8e:	f107 0314 	add.w	r3, r7, #20
 800fe92:	f247 5230 	movw	r2, #30000	; 0x7530
 800fe96:	4618      	mov	r0, r3
 800fe98:	f003 fc6a 	bl	8013770 <osMessageGet>

    if (event.status == osEventMessage)
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	2b10      	cmp	r3, #16
 800fea0:	d118      	bne.n	800fed4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800fea2:	69bb      	ldr	r3, [r7, #24]
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d115      	bne.n	800fed4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800fea8:	f003 fa0a 	bl	80132c0 <osKernelSysTick>
 800feac:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800feae:	e008      	b.n	800fec2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800feb0:	f7ff fee4 	bl	800fc7c <BSP_SD_GetCardState>
 800feb4:	4603      	mov	r3, r0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d103      	bne.n	800fec2 <SD_read+0x7a>
              {
                res = RES_OK;
 800feba:	2300      	movs	r3, #0
 800febc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800fec0:	e008      	b.n	800fed4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800fec2:	f003 f9fd 	bl	80132c0 <osKernelSysTick>
 800fec6:	4602      	mov	r2, r0
 800fec8:	6a3b      	ldr	r3, [r7, #32]
 800feca:	1ad3      	subs	r3, r2, r3
 800fecc:	f247 522f 	movw	r2, #29999	; 0x752f
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d9ed      	bls.n	800feb0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800fed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3728      	adds	r7, #40	; 0x28
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	20000f30 	.word	0x20000f30

0800fee4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b08a      	sub	sp, #40	; 0x28
 800fee8:	af00      	add	r7, sp, #0
 800feea:	60b9      	str	r1, [r7, #8]
 800feec:	607a      	str	r2, [r7, #4]
 800feee:	603b      	str	r3, [r7, #0]
 800fef0:	4603      	mov	r3, r0
 800fef2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fef4:	2301      	movs	r3, #1
 800fef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fefa:	f247 5030 	movw	r0, #30000	; 0x7530
 800fefe:	f7ff ff0d 	bl	800fd1c <SD_CheckStatusWithTimeout>
 800ff02:	4603      	mov	r3, r0
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	da02      	bge.n	800ff0e <SD_write+0x2a>
  {
    return res;
 800ff08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff0c:	e02e      	b.n	800ff6c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ff0e:	683a      	ldr	r2, [r7, #0]
 800ff10:	6879      	ldr	r1, [r7, #4]
 800ff12:	68b8      	ldr	r0, [r7, #8]
 800ff14:	f7ff fe98 	bl	800fc48 <BSP_SD_WriteBlocks_DMA>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d124      	bne.n	800ff68 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ff1e:	4b15      	ldr	r3, [pc, #84]	; (800ff74 <SD_write+0x90>)
 800ff20:	6819      	ldr	r1, [r3, #0]
 800ff22:	f107 0314 	add.w	r3, r7, #20
 800ff26:	f247 5230 	movw	r2, #30000	; 0x7530
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f003 fc20 	bl	8013770 <osMessageGet>

    if (event.status == osEventMessage)
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	2b10      	cmp	r3, #16
 800ff34:	d118      	bne.n	800ff68 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800ff36:	69bb      	ldr	r3, [r7, #24]
 800ff38:	2b02      	cmp	r3, #2
 800ff3a:	d115      	bne.n	800ff68 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800ff3c:	f003 f9c0 	bl	80132c0 <osKernelSysTick>
 800ff40:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ff42:	e008      	b.n	800ff56 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ff44:	f7ff fe9a 	bl	800fc7c <BSP_SD_GetCardState>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d103      	bne.n	800ff56 <SD_write+0x72>
          {
            res = RES_OK;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ff54:	e008      	b.n	800ff68 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ff56:	f003 f9b3 	bl	80132c0 <osKernelSysTick>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	6a3b      	ldr	r3, [r7, #32]
 800ff5e:	1ad3      	subs	r3, r2, r3
 800ff60:	f247 522f 	movw	r2, #29999	; 0x752f
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d9ed      	bls.n	800ff44 <SD_write+0x60>
    }

  }
#endif

  return res;
 800ff68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3728      	adds	r7, #40	; 0x28
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	20000f30 	.word	0x20000f30

0800ff78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b08c      	sub	sp, #48	; 0x30
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	4603      	mov	r3, r0
 800ff80:	603a      	str	r2, [r7, #0]
 800ff82:	71fb      	strb	r3, [r7, #7]
 800ff84:	460b      	mov	r3, r1
 800ff86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ff8e:	4b25      	ldr	r3, [pc, #148]	; (8010024 <SD_ioctl+0xac>)
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	b2db      	uxtb	r3, r3
 800ff94:	f003 0301 	and.w	r3, r3, #1
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d001      	beq.n	800ffa0 <SD_ioctl+0x28>
 800ff9c:	2303      	movs	r3, #3
 800ff9e:	e03c      	b.n	801001a <SD_ioctl+0xa2>

  switch (cmd)
 800ffa0:	79bb      	ldrb	r3, [r7, #6]
 800ffa2:	2b03      	cmp	r3, #3
 800ffa4:	d834      	bhi.n	8010010 <SD_ioctl+0x98>
 800ffa6:	a201      	add	r2, pc, #4	; (adr r2, 800ffac <SD_ioctl+0x34>)
 800ffa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffac:	0800ffbd 	.word	0x0800ffbd
 800ffb0:	0800ffc5 	.word	0x0800ffc5
 800ffb4:	0800ffdd 	.word	0x0800ffdd
 800ffb8:	0800fff7 	.word	0x0800fff7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ffc2:	e028      	b.n	8010016 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ffc4:	f107 030c 	add.w	r3, r7, #12
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7ff fe67 	bl	800fc9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ffce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ffda:	e01c      	b.n	8010016 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ffdc:	f107 030c 	add.w	r3, r7, #12
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7ff fe5b 	bl	800fc9c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ffe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe8:	b29a      	uxth	r2, r3
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ffee:	2300      	movs	r3, #0
 800fff0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fff4:	e00f      	b.n	8010016 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fff6:	f107 030c 	add.w	r3, r7, #12
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7ff fe4e 	bl	800fc9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010002:	0a5a      	lsrs	r2, r3, #9
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010008:	2300      	movs	r3, #0
 801000a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801000e:	e002      	b.n	8010016 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010010:	2304      	movs	r3, #4
 8010012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010016:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801001a:	4618      	mov	r0, r3
 801001c:	3730      	adds	r7, #48	; 0x30
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	20000009 	.word	0x20000009

08010028 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 801002c:	4b04      	ldr	r3, [pc, #16]	; (8010040 <BSP_SD_ReadCpltCallback+0x18>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2200      	movs	r2, #0
 8010032:	2101      	movs	r1, #1
 8010034:	4618      	mov	r0, r3
 8010036:	f003 fb5b 	bl	80136f0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 801003a:	bf00      	nop
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	20000f30 	.word	0x20000f30

08010044 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8010044:	b5b0      	push	{r4, r5, r7, lr}
 8010046:	b08c      	sub	sp, #48	; 0x30
 8010048:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801004a:	4b96      	ldr	r3, [pc, #600]	; (80102a4 <MX_LWIP_Init+0x260>)
 801004c:	22c0      	movs	r2, #192	; 0xc0
 801004e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8010050:	4b94      	ldr	r3, [pc, #592]	; (80102a4 <MX_LWIP_Init+0x260>)
 8010052:	22a8      	movs	r2, #168	; 0xa8
 8010054:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8010056:	4b93      	ldr	r3, [pc, #588]	; (80102a4 <MX_LWIP_Init+0x260>)
 8010058:	2200      	movs	r2, #0
 801005a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 7;
 801005c:	4b91      	ldr	r3, [pc, #580]	; (80102a4 <MX_LWIP_Init+0x260>)
 801005e:	2207      	movs	r2, #7
 8010060:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8010062:	4b91      	ldr	r3, [pc, #580]	; (80102a8 <MX_LWIP_Init+0x264>)
 8010064:	22ff      	movs	r2, #255	; 0xff
 8010066:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8010068:	4b8f      	ldr	r3, [pc, #572]	; (80102a8 <MX_LWIP_Init+0x264>)
 801006a:	22ff      	movs	r2, #255	; 0xff
 801006c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801006e:	4b8e      	ldr	r3, [pc, #568]	; (80102a8 <MX_LWIP_Init+0x264>)
 8010070:	22ff      	movs	r2, #255	; 0xff
 8010072:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8010074:	4b8c      	ldr	r3, [pc, #560]	; (80102a8 <MX_LWIP_Init+0x264>)
 8010076:	2200      	movs	r2, #0
 8010078:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 801007a:	4b8c      	ldr	r3, [pc, #560]	; (80102ac <MX_LWIP_Init+0x268>)
 801007c:	22c0      	movs	r2, #192	; 0xc0
 801007e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8010080:	4b8a      	ldr	r3, [pc, #552]	; (80102ac <MX_LWIP_Init+0x268>)
 8010082:	22a8      	movs	r2, #168	; 0xa8
 8010084:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8010086:	4b89      	ldr	r3, [pc, #548]	; (80102ac <MX_LWIP_Init+0x268>)
 8010088:	2200      	movs	r2, #0
 801008a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 801008c:	4b87      	ldr	r3, [pc, #540]	; (80102ac <MX_LWIP_Init+0x268>)
 801008e:	2201      	movs	r2, #1
 8010090:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8010092:	2100      	movs	r1, #0
 8010094:	2000      	movs	r0, #0
 8010096:	f007 fed1 	bl	8017e3c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801009a:	4b82      	ldr	r3, [pc, #520]	; (80102a4 <MX_LWIP_Init+0x260>)
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	061a      	lsls	r2, r3, #24
 80100a0:	4b80      	ldr	r3, [pc, #512]	; (80102a4 <MX_LWIP_Init+0x260>)
 80100a2:	785b      	ldrb	r3, [r3, #1]
 80100a4:	041b      	lsls	r3, r3, #16
 80100a6:	431a      	orrs	r2, r3
 80100a8:	4b7e      	ldr	r3, [pc, #504]	; (80102a4 <MX_LWIP_Init+0x260>)
 80100aa:	789b      	ldrb	r3, [r3, #2]
 80100ac:	021b      	lsls	r3, r3, #8
 80100ae:	4313      	orrs	r3, r2
 80100b0:	4a7c      	ldr	r2, [pc, #496]	; (80102a4 <MX_LWIP_Init+0x260>)
 80100b2:	78d2      	ldrb	r2, [r2, #3]
 80100b4:	4313      	orrs	r3, r2
 80100b6:	061a      	lsls	r2, r3, #24
 80100b8:	4b7a      	ldr	r3, [pc, #488]	; (80102a4 <MX_LWIP_Init+0x260>)
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	0619      	lsls	r1, r3, #24
 80100be:	4b79      	ldr	r3, [pc, #484]	; (80102a4 <MX_LWIP_Init+0x260>)
 80100c0:	785b      	ldrb	r3, [r3, #1]
 80100c2:	041b      	lsls	r3, r3, #16
 80100c4:	4319      	orrs	r1, r3
 80100c6:	4b77      	ldr	r3, [pc, #476]	; (80102a4 <MX_LWIP_Init+0x260>)
 80100c8:	789b      	ldrb	r3, [r3, #2]
 80100ca:	021b      	lsls	r3, r3, #8
 80100cc:	430b      	orrs	r3, r1
 80100ce:	4975      	ldr	r1, [pc, #468]	; (80102a4 <MX_LWIP_Init+0x260>)
 80100d0:	78c9      	ldrb	r1, [r1, #3]
 80100d2:	430b      	orrs	r3, r1
 80100d4:	021b      	lsls	r3, r3, #8
 80100d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80100da:	431a      	orrs	r2, r3
 80100dc:	4b71      	ldr	r3, [pc, #452]	; (80102a4 <MX_LWIP_Init+0x260>)
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	0619      	lsls	r1, r3, #24
 80100e2:	4b70      	ldr	r3, [pc, #448]	; (80102a4 <MX_LWIP_Init+0x260>)
 80100e4:	785b      	ldrb	r3, [r3, #1]
 80100e6:	041b      	lsls	r3, r3, #16
 80100e8:	4319      	orrs	r1, r3
 80100ea:	4b6e      	ldr	r3, [pc, #440]	; (80102a4 <MX_LWIP_Init+0x260>)
 80100ec:	789b      	ldrb	r3, [r3, #2]
 80100ee:	021b      	lsls	r3, r3, #8
 80100f0:	430b      	orrs	r3, r1
 80100f2:	496c      	ldr	r1, [pc, #432]	; (80102a4 <MX_LWIP_Init+0x260>)
 80100f4:	78c9      	ldrb	r1, [r1, #3]
 80100f6:	430b      	orrs	r3, r1
 80100f8:	0a1b      	lsrs	r3, r3, #8
 80100fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80100fe:	431a      	orrs	r2, r3
 8010100:	4b68      	ldr	r3, [pc, #416]	; (80102a4 <MX_LWIP_Init+0x260>)
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	0619      	lsls	r1, r3, #24
 8010106:	4b67      	ldr	r3, [pc, #412]	; (80102a4 <MX_LWIP_Init+0x260>)
 8010108:	785b      	ldrb	r3, [r3, #1]
 801010a:	041b      	lsls	r3, r3, #16
 801010c:	4319      	orrs	r1, r3
 801010e:	4b65      	ldr	r3, [pc, #404]	; (80102a4 <MX_LWIP_Init+0x260>)
 8010110:	789b      	ldrb	r3, [r3, #2]
 8010112:	021b      	lsls	r3, r3, #8
 8010114:	430b      	orrs	r3, r1
 8010116:	4963      	ldr	r1, [pc, #396]	; (80102a4 <MX_LWIP_Init+0x260>)
 8010118:	78c9      	ldrb	r1, [r1, #3]
 801011a:	430b      	orrs	r3, r1
 801011c:	0e1b      	lsrs	r3, r3, #24
 801011e:	4313      	orrs	r3, r2
 8010120:	4a63      	ldr	r2, [pc, #396]	; (80102b0 <MX_LWIP_Init+0x26c>)
 8010122:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8010124:	4b60      	ldr	r3, [pc, #384]	; (80102a8 <MX_LWIP_Init+0x264>)
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	061a      	lsls	r2, r3, #24
 801012a:	4b5f      	ldr	r3, [pc, #380]	; (80102a8 <MX_LWIP_Init+0x264>)
 801012c:	785b      	ldrb	r3, [r3, #1]
 801012e:	041b      	lsls	r3, r3, #16
 8010130:	431a      	orrs	r2, r3
 8010132:	4b5d      	ldr	r3, [pc, #372]	; (80102a8 <MX_LWIP_Init+0x264>)
 8010134:	789b      	ldrb	r3, [r3, #2]
 8010136:	021b      	lsls	r3, r3, #8
 8010138:	4313      	orrs	r3, r2
 801013a:	4a5b      	ldr	r2, [pc, #364]	; (80102a8 <MX_LWIP_Init+0x264>)
 801013c:	78d2      	ldrb	r2, [r2, #3]
 801013e:	4313      	orrs	r3, r2
 8010140:	061a      	lsls	r2, r3, #24
 8010142:	4b59      	ldr	r3, [pc, #356]	; (80102a8 <MX_LWIP_Init+0x264>)
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	0619      	lsls	r1, r3, #24
 8010148:	4b57      	ldr	r3, [pc, #348]	; (80102a8 <MX_LWIP_Init+0x264>)
 801014a:	785b      	ldrb	r3, [r3, #1]
 801014c:	041b      	lsls	r3, r3, #16
 801014e:	4319      	orrs	r1, r3
 8010150:	4b55      	ldr	r3, [pc, #340]	; (80102a8 <MX_LWIP_Init+0x264>)
 8010152:	789b      	ldrb	r3, [r3, #2]
 8010154:	021b      	lsls	r3, r3, #8
 8010156:	430b      	orrs	r3, r1
 8010158:	4953      	ldr	r1, [pc, #332]	; (80102a8 <MX_LWIP_Init+0x264>)
 801015a:	78c9      	ldrb	r1, [r1, #3]
 801015c:	430b      	orrs	r3, r1
 801015e:	021b      	lsls	r3, r3, #8
 8010160:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010164:	431a      	orrs	r2, r3
 8010166:	4b50      	ldr	r3, [pc, #320]	; (80102a8 <MX_LWIP_Init+0x264>)
 8010168:	781b      	ldrb	r3, [r3, #0]
 801016a:	0619      	lsls	r1, r3, #24
 801016c:	4b4e      	ldr	r3, [pc, #312]	; (80102a8 <MX_LWIP_Init+0x264>)
 801016e:	785b      	ldrb	r3, [r3, #1]
 8010170:	041b      	lsls	r3, r3, #16
 8010172:	4319      	orrs	r1, r3
 8010174:	4b4c      	ldr	r3, [pc, #304]	; (80102a8 <MX_LWIP_Init+0x264>)
 8010176:	789b      	ldrb	r3, [r3, #2]
 8010178:	021b      	lsls	r3, r3, #8
 801017a:	430b      	orrs	r3, r1
 801017c:	494a      	ldr	r1, [pc, #296]	; (80102a8 <MX_LWIP_Init+0x264>)
 801017e:	78c9      	ldrb	r1, [r1, #3]
 8010180:	430b      	orrs	r3, r1
 8010182:	0a1b      	lsrs	r3, r3, #8
 8010184:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010188:	431a      	orrs	r2, r3
 801018a:	4b47      	ldr	r3, [pc, #284]	; (80102a8 <MX_LWIP_Init+0x264>)
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	0619      	lsls	r1, r3, #24
 8010190:	4b45      	ldr	r3, [pc, #276]	; (80102a8 <MX_LWIP_Init+0x264>)
 8010192:	785b      	ldrb	r3, [r3, #1]
 8010194:	041b      	lsls	r3, r3, #16
 8010196:	4319      	orrs	r1, r3
 8010198:	4b43      	ldr	r3, [pc, #268]	; (80102a8 <MX_LWIP_Init+0x264>)
 801019a:	789b      	ldrb	r3, [r3, #2]
 801019c:	021b      	lsls	r3, r3, #8
 801019e:	430b      	orrs	r3, r1
 80101a0:	4941      	ldr	r1, [pc, #260]	; (80102a8 <MX_LWIP_Init+0x264>)
 80101a2:	78c9      	ldrb	r1, [r1, #3]
 80101a4:	430b      	orrs	r3, r1
 80101a6:	0e1b      	lsrs	r3, r3, #24
 80101a8:	4313      	orrs	r3, r2
 80101aa:	4a42      	ldr	r2, [pc, #264]	; (80102b4 <MX_LWIP_Init+0x270>)
 80101ac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80101ae:	4b3f      	ldr	r3, [pc, #252]	; (80102ac <MX_LWIP_Init+0x268>)
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	061a      	lsls	r2, r3, #24
 80101b4:	4b3d      	ldr	r3, [pc, #244]	; (80102ac <MX_LWIP_Init+0x268>)
 80101b6:	785b      	ldrb	r3, [r3, #1]
 80101b8:	041b      	lsls	r3, r3, #16
 80101ba:	431a      	orrs	r2, r3
 80101bc:	4b3b      	ldr	r3, [pc, #236]	; (80102ac <MX_LWIP_Init+0x268>)
 80101be:	789b      	ldrb	r3, [r3, #2]
 80101c0:	021b      	lsls	r3, r3, #8
 80101c2:	4313      	orrs	r3, r2
 80101c4:	4a39      	ldr	r2, [pc, #228]	; (80102ac <MX_LWIP_Init+0x268>)
 80101c6:	78d2      	ldrb	r2, [r2, #3]
 80101c8:	4313      	orrs	r3, r2
 80101ca:	061a      	lsls	r2, r3, #24
 80101cc:	4b37      	ldr	r3, [pc, #220]	; (80102ac <MX_LWIP_Init+0x268>)
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	0619      	lsls	r1, r3, #24
 80101d2:	4b36      	ldr	r3, [pc, #216]	; (80102ac <MX_LWIP_Init+0x268>)
 80101d4:	785b      	ldrb	r3, [r3, #1]
 80101d6:	041b      	lsls	r3, r3, #16
 80101d8:	4319      	orrs	r1, r3
 80101da:	4b34      	ldr	r3, [pc, #208]	; (80102ac <MX_LWIP_Init+0x268>)
 80101dc:	789b      	ldrb	r3, [r3, #2]
 80101de:	021b      	lsls	r3, r3, #8
 80101e0:	430b      	orrs	r3, r1
 80101e2:	4932      	ldr	r1, [pc, #200]	; (80102ac <MX_LWIP_Init+0x268>)
 80101e4:	78c9      	ldrb	r1, [r1, #3]
 80101e6:	430b      	orrs	r3, r1
 80101e8:	021b      	lsls	r3, r3, #8
 80101ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80101ee:	431a      	orrs	r2, r3
 80101f0:	4b2e      	ldr	r3, [pc, #184]	; (80102ac <MX_LWIP_Init+0x268>)
 80101f2:	781b      	ldrb	r3, [r3, #0]
 80101f4:	0619      	lsls	r1, r3, #24
 80101f6:	4b2d      	ldr	r3, [pc, #180]	; (80102ac <MX_LWIP_Init+0x268>)
 80101f8:	785b      	ldrb	r3, [r3, #1]
 80101fa:	041b      	lsls	r3, r3, #16
 80101fc:	4319      	orrs	r1, r3
 80101fe:	4b2b      	ldr	r3, [pc, #172]	; (80102ac <MX_LWIP_Init+0x268>)
 8010200:	789b      	ldrb	r3, [r3, #2]
 8010202:	021b      	lsls	r3, r3, #8
 8010204:	430b      	orrs	r3, r1
 8010206:	4929      	ldr	r1, [pc, #164]	; (80102ac <MX_LWIP_Init+0x268>)
 8010208:	78c9      	ldrb	r1, [r1, #3]
 801020a:	430b      	orrs	r3, r1
 801020c:	0a1b      	lsrs	r3, r3, #8
 801020e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010212:	431a      	orrs	r2, r3
 8010214:	4b25      	ldr	r3, [pc, #148]	; (80102ac <MX_LWIP_Init+0x268>)
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	0619      	lsls	r1, r3, #24
 801021a:	4b24      	ldr	r3, [pc, #144]	; (80102ac <MX_LWIP_Init+0x268>)
 801021c:	785b      	ldrb	r3, [r3, #1]
 801021e:	041b      	lsls	r3, r3, #16
 8010220:	4319      	orrs	r1, r3
 8010222:	4b22      	ldr	r3, [pc, #136]	; (80102ac <MX_LWIP_Init+0x268>)
 8010224:	789b      	ldrb	r3, [r3, #2]
 8010226:	021b      	lsls	r3, r3, #8
 8010228:	430b      	orrs	r3, r1
 801022a:	4920      	ldr	r1, [pc, #128]	; (80102ac <MX_LWIP_Init+0x268>)
 801022c:	78c9      	ldrb	r1, [r1, #3]
 801022e:	430b      	orrs	r3, r1
 8010230:	0e1b      	lsrs	r3, r3, #24
 8010232:	4313      	orrs	r3, r2
 8010234:	4a20      	ldr	r2, [pc, #128]	; (80102b8 <MX_LWIP_Init+0x274>)
 8010236:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8010238:	4b20      	ldr	r3, [pc, #128]	; (80102bc <MX_LWIP_Init+0x278>)
 801023a:	9302      	str	r3, [sp, #8]
 801023c:	4b20      	ldr	r3, [pc, #128]	; (80102c0 <MX_LWIP_Init+0x27c>)
 801023e:	9301      	str	r3, [sp, #4]
 8010240:	2300      	movs	r3, #0
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	4b1c      	ldr	r3, [pc, #112]	; (80102b8 <MX_LWIP_Init+0x274>)
 8010246:	4a1b      	ldr	r2, [pc, #108]	; (80102b4 <MX_LWIP_Init+0x270>)
 8010248:	4919      	ldr	r1, [pc, #100]	; (80102b0 <MX_LWIP_Init+0x26c>)
 801024a:	481e      	ldr	r0, [pc, #120]	; (80102c4 <MX_LWIP_Init+0x280>)
 801024c:	f008 fbc0 	bl	80189d0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8010250:	481c      	ldr	r0, [pc, #112]	; (80102c4 <MX_LWIP_Init+0x280>)
 8010252:	f008 fd6f 	bl	8018d34 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8010256:	4b1b      	ldr	r3, [pc, #108]	; (80102c4 <MX_LWIP_Init+0x280>)
 8010258:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801025c:	089b      	lsrs	r3, r3, #2
 801025e:	f003 0301 	and.w	r3, r3, #1
 8010262:	b2db      	uxtb	r3, r3
 8010264:	2b00      	cmp	r3, #0
 8010266:	d003      	beq.n	8010270 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8010268:	4816      	ldr	r0, [pc, #88]	; (80102c4 <MX_LWIP_Init+0x280>)
 801026a:	f008 fd73 	bl	8018d54 <netif_set_up>
 801026e:	e002      	b.n	8010276 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8010270:	4814      	ldr	r0, [pc, #80]	; (80102c4 <MX_LWIP_Init+0x280>)
 8010272:	f008 fddb 	bl	8018e2c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8010276:	4914      	ldr	r1, [pc, #80]	; (80102c8 <MX_LWIP_Init+0x284>)
 8010278:	4812      	ldr	r0, [pc, #72]	; (80102c4 <MX_LWIP_Init+0x280>)
 801027a:	f008 fe6d 	bl	8018f58 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 801027e:	4b13      	ldr	r3, [pc, #76]	; (80102cc <MX_LWIP_Init+0x288>)
 8010280:	1d3c      	adds	r4, r7, #4
 8010282:	461d      	mov	r5, r3
 8010284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010288:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801028c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8010290:	1d3b      	adds	r3, r7, #4
 8010292:	490c      	ldr	r1, [pc, #48]	; (80102c4 <MX_LWIP_Init+0x280>)
 8010294:	4618      	mov	r0, r3
 8010296:	f003 f823 	bl	80132e0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801029a:	bf00      	nop
 801029c:	3720      	adds	r7, #32
 801029e:	46bd      	mov	sp, r7
 80102a0:	bdb0      	pop	{r4, r5, r7, pc}
 80102a2:	bf00      	nop
 80102a4:	20000f74 	.word	0x20000f74
 80102a8:	20000f78 	.word	0x20000f78
 80102ac:	20000f7c 	.word	0x20000f7c
 80102b0:	20000f68 	.word	0x20000f68
 80102b4:	20000f6c 	.word	0x20000f6c
 80102b8:	20000f70 	.word	0x20000f70
 80102bc:	08017d4d 	.word	0x08017d4d
 80102c0:	080107f9 	.word	0x080107f9
 80102c4:	20000f34 	.word	0x20000f34
 80102c8:	080102d1 	.word	0x080102d1
 80102cc:	08024ce4 	.word	0x08024ce4

080102d0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b083      	sub	sp, #12
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80102d8:	bf00      	nop
 80102da:	370c      	adds	r7, #12
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr

080102e4 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80102e4:	b480      	push	{r7}
 80102e6:	b087      	sub	sp, #28
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80102f6:	2320      	movs	r3, #32
 80102f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80102fa:	f3bf 8f4f 	dsb	sy
}
 80102fe:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8010300:	e00b      	b.n	801031a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8010302:	4a0d      	ldr	r2, [pc, #52]	; (8010338 <SCB_InvalidateDCache_by_Addr+0x54>)
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	693a      	ldr	r2, [r7, #16]
 801030e:	4413      	add	r3, r2
 8010310:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8010312:	697a      	ldr	r2, [r7, #20]
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	1ad3      	subs	r3, r2, r3
 8010318:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	2b00      	cmp	r3, #0
 801031e:	dcf0      	bgt.n	8010302 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8010320:	f3bf 8f4f 	dsb	sy
}
 8010324:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010326:	f3bf 8f6f 	isb	sy
}
 801032a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 801032c:	bf00      	nop
 801032e:	371c      	adds	r7, #28
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr
 8010338:	e000ed00 	.word	0xe000ed00

0801033c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8010344:	4b04      	ldr	r3, [pc, #16]	; (8010358 <HAL_ETH_RxCpltCallback+0x1c>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4618      	mov	r0, r3
 801034a:	f003 f95f 	bl	801360c <osSemaphoreRelease>
}
 801034e:	bf00      	nop
 8010350:	3708      	adds	r7, #8
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	2000590c 	.word	0x2000590c

0801035c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8010364:	4b04      	ldr	r3, [pc, #16]	; (8010378 <HAL_ETH_TxCpltCallback+0x1c>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	4618      	mov	r0, r3
 801036a:	f003 f94f 	bl	801360c <osSemaphoreRelease>
}
 801036e:	bf00      	nop
 8010370:	3708      	adds	r7, #8
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	20005910 	.word	0x20005910

0801037c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f7f4 ffd7 	bl	8005338 <HAL_ETH_GetDMAError>
 801038a:	4603      	mov	r3, r0
 801038c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010390:	2b80      	cmp	r3, #128	; 0x80
 8010392:	d104      	bne.n	801039e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8010394:	4b04      	ldr	r3, [pc, #16]	; (80103a8 <HAL_ETH_ErrorCallback+0x2c>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4618      	mov	r0, r3
 801039a:	f003 f937 	bl	801360c <osSemaphoreRelease>
  }
}
 801039e:	bf00      	nop
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	bf00      	nop
 80103a8:	2000590c 	.word	0x2000590c

080103ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80103ac:	b5b0      	push	{r4, r5, r7, lr}
 80103ae:	b0b0      	sub	sp, #192	; 0xc0
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80103b4:	2300      	movs	r3, #0
 80103b6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
  uint32_t duplex, speed = 0;
 80103ba:	2300      	movs	r3, #0
 80103bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  int32_t PHYLinkState = 0;
 80103c0:	2300      	movs	r3, #0
 80103c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  ETH_MACConfigTypeDef MACConf = {0};
 80103c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80103ca:	2264      	movs	r2, #100	; 0x64
 80103cc:	2100      	movs	r1, #0
 80103ce:	4618      	mov	r0, r3
 80103d0:	f013 fa9b 	bl	802390a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80103d4:	4b90      	ldr	r3, [pc, #576]	; (8010618 <low_level_init+0x26c>)
 80103d6:	4a91      	ldr	r2, [pc, #580]	; (801061c <low_level_init+0x270>)
 80103d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80103da:	2300      	movs	r3, #0
 80103dc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  MACAddr[1] = 0x80;
 80103e0:	2380      	movs	r3, #128	; 0x80
 80103e2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  MACAddr[2] = 0xE1;
 80103e6:	23e1      	movs	r3, #225	; 0xe1
 80103e8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  MACAddr[3] = 0x00;
 80103ec:	2300      	movs	r3, #0
 80103ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MACAddr[4] = 0x00;
 80103f2:	2300      	movs	r3, #0
 80103f4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  MACAddr[5] = 0x00;
 80103f8:	2300      	movs	r3, #0
 80103fa:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  heth.Init.MACAddr = &MACAddr[0];
 80103fe:	4a86      	ldr	r2, [pc, #536]	; (8010618 <low_level_init+0x26c>)
 8010400:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010404:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8010406:	4b84      	ldr	r3, [pc, #528]	; (8010618 <low_level_init+0x26c>)
 8010408:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801040c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 801040e:	4b82      	ldr	r3, [pc, #520]	; (8010618 <low_level_init+0x26c>)
 8010410:	4a83      	ldr	r2, [pc, #524]	; (8010620 <low_level_init+0x274>)
 8010412:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8010414:	4b80      	ldr	r3, [pc, #512]	; (8010618 <low_level_init+0x26c>)
 8010416:	4a83      	ldr	r2, [pc, #524]	; (8010624 <low_level_init+0x278>)
 8010418:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801041a:	4b7f      	ldr	r3, [pc, #508]	; (8010618 <low_level_init+0x26c>)
 801041c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8010420:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8010422:	487d      	ldr	r0, [pc, #500]	; (8010618 <low_level_init+0x26c>)
 8010424:	f7f4 f94a 	bl	80046bc <HAL_ETH_Init>
 8010428:	4603      	mov	r3, r0
 801042a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801042e:	2238      	movs	r2, #56	; 0x38
 8010430:	2100      	movs	r1, #0
 8010432:	487d      	ldr	r0, [pc, #500]	; (8010628 <low_level_init+0x27c>)
 8010434:	f013 fa69 	bl	802390a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8010438:	4b7b      	ldr	r3, [pc, #492]	; (8010628 <low_level_init+0x27c>)
 801043a:	2221      	movs	r2, #33	; 0x21
 801043c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801043e:	4b7a      	ldr	r3, [pc, #488]	; (8010628 <low_level_init+0x27c>)
 8010440:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8010444:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8010446:	4b78      	ldr	r3, [pc, #480]	; (8010628 <low_level_init+0x27c>)
 8010448:	2200      	movs	r2, #0
 801044a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801044c:	4877      	ldr	r0, [pc, #476]	; (801062c <low_level_init+0x280>)
 801044e:	f008 f979 	bl	8018744 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2206      	movs	r2, #6
 8010456:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801045a:	4b6f      	ldr	r3, [pc, #444]	; (8010618 <low_level_init+0x26c>)
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	781a      	ldrb	r2, [r3, #0]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8010466:	4b6c      	ldr	r3, [pc, #432]	; (8010618 <low_level_init+0x26c>)
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	785a      	ldrb	r2, [r3, #1]
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8010472:	4b69      	ldr	r3, [pc, #420]	; (8010618 <low_level_init+0x26c>)
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	789a      	ldrb	r2, [r3, #2]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801047e:	4b66      	ldr	r3, [pc, #408]	; (8010618 <low_level_init+0x26c>)
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	78da      	ldrb	r2, [r3, #3]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801048a:	4b63      	ldr	r3, [pc, #396]	; (8010618 <low_level_init+0x26c>)
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	791a      	ldrb	r2, [r3, #4]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8010496:	4b60      	ldr	r3, [pc, #384]	; (8010618 <low_level_init+0x26c>)
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	795a      	ldrb	r2, [r3, #5]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80104a8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80104b0:	f043 030a 	orr.w	r3, r3, #10
 80104b4:	b2da      	uxtb	r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80104bc:	2203      	movs	r2, #3
 80104be:	2100      	movs	r1, #0
 80104c0:	2001      	movs	r0, #1
 80104c2:	f003 fb93 	bl	8013bec <xQueueGenericCreate>
 80104c6:	4603      	mov	r3, r0
 80104c8:	4a59      	ldr	r2, [pc, #356]	; (8010630 <low_level_init+0x284>)
 80104ca:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 80104cc:	2203      	movs	r2, #3
 80104ce:	2100      	movs	r1, #0
 80104d0:	2001      	movs	r0, #1
 80104d2:	f003 fb8b 	bl	8013bec <xQueueGenericCreate>
 80104d6:	4603      	mov	r3, r0
 80104d8:	4a56      	ldr	r2, [pc, #344]	; (8010634 <low_level_init+0x288>)
 80104da:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80104dc:	4b56      	ldr	r3, [pc, #344]	; (8010638 <low_level_init+0x28c>)
 80104de:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80104e2:	461d      	mov	r5, r3
 80104e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80104ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80104f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104f4:	6879      	ldr	r1, [r7, #4]
 80104f6:	4618      	mov	r0, r3
 80104f8:	f002 fef2 	bl	80132e0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80104fc:	494f      	ldr	r1, [pc, #316]	; (801063c <low_level_init+0x290>)
 80104fe:	4850      	ldr	r0, [pc, #320]	; (8010640 <low_level_init+0x294>)
 8010500:	f7f2 ff2b 	bl	800335a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8010504:	484e      	ldr	r0, [pc, #312]	; (8010640 <low_level_init+0x294>)
 8010506:	f7f2 ff5a 	bl	80033be <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 801050a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 801050e:	2b00      	cmp	r3, #0
 8010510:	d165      	bne.n	80105de <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8010512:	484b      	ldr	r0, [pc, #300]	; (8010640 <low_level_init+0x294>)
 8010514:	f7f2 fffb 	bl	800350e <LAN8742_GetLinkState>
 8010518:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 801051c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010520:	2b01      	cmp	r3, #1
 8010522:	dc06      	bgt.n	8010532 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f008 fce7 	bl	8018ef8 <netif_set_link_down>
      netif_set_down(netif);
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f008 fc7e 	bl	8018e2c <netif_set_down>
 8010530:	e057      	b.n	80105e2 <low_level_init+0x236>
    }
    else
    {
      switch (PHYLinkState)
 8010532:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010536:	3b02      	subs	r3, #2
 8010538:	2b03      	cmp	r3, #3
 801053a:	d82b      	bhi.n	8010594 <low_level_init+0x1e8>
 801053c:	a201      	add	r2, pc, #4	; (adr r2, 8010544 <low_level_init+0x198>)
 801053e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010542:	bf00      	nop
 8010544:	08010555 	.word	0x08010555
 8010548:	08010567 	.word	0x08010567
 801054c:	08010577 	.word	0x08010577
 8010550:	08010587 	.word	0x08010587
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8010554:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010558:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        speed = ETH_SPEED_100M;
 801055c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        break;
 8010564:	e01f      	b.n	80105a6 <low_level_init+0x1fa>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8010566:	2300      	movs	r3, #0
 8010568:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        speed = ETH_SPEED_100M;
 801056c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        break;
 8010574:	e017      	b.n	80105a6 <low_level_init+0x1fa>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8010576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801057a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        speed = ETH_SPEED_10M;
 801057e:	2300      	movs	r3, #0
 8010580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        break;
 8010584:	e00f      	b.n	80105a6 <low_level_init+0x1fa>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8010586:	2300      	movs	r3, #0
 8010588:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        speed = ETH_SPEED_10M;
 801058c:	2300      	movs	r3, #0
 801058e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        break;
 8010592:	e008      	b.n	80105a6 <low_level_init+0x1fa>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8010594:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010598:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        speed = ETH_SPEED_100M;
 801059c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80105a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        break;
 80105a4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80105a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80105aa:	4619      	mov	r1, r3
 80105ac:	481a      	ldr	r0, [pc, #104]	; (8010618 <low_level_init+0x26c>)
 80105ae:	f7f4 fd69 	bl	8005084 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80105b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80105b6:	667b      	str	r3, [r7, #100]	; 0x64
    MACConf.Speed = speed;
 80105b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80105bc:	663b      	str	r3, [r7, #96]	; 0x60
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80105be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80105c2:	4619      	mov	r1, r3
 80105c4:	4814      	ldr	r0, [pc, #80]	; (8010618 <low_level_init+0x26c>)
 80105c6:	f7f4 fe47 	bl	8005258 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80105ca:	4813      	ldr	r0, [pc, #76]	; (8010618 <low_level_init+0x26c>)
 80105cc:	f7f4 f8f2 	bl	80047b4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f008 fbbf 	bl	8018d54 <netif_set_up>
    netif_set_link_up(netif);
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f008 fc5a 	bl	8018e90 <netif_set_link_up>
 80105dc:	e001      	b.n	80105e2 <low_level_init+0x236>
    }

  }
  else
  {
    Error_Handler();
 80105de:	f7f1 fcd9 	bl	8001f94 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 80105e2:	f7f3 f86d 	bl	80036c0 <HAL_GetREVID>
 80105e6:	4603      	mov	r3, r0
 80105e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105ec:	d10f      	bne.n	801060e <low_level_init+0x262>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 80105ee:	4b15      	ldr	r3, [pc, #84]	; (8010644 <low_level_init+0x298>)
 80105f0:	f107 040c 	add.w	r4, r7, #12
 80105f4:	461d      	mov	r5, r3
 80105f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80105fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8010602:	f107 030c 	add.w	r3, r7, #12
 8010606:	2100      	movs	r1, #0
 8010608:	4618      	mov	r0, r3
 801060a:	f002 fe69 	bl	80132e0 <osThreadCreate>
  }
}
 801060e:	bf00      	nop
 8010610:	37c0      	adds	r7, #192	; 0xc0
 8010612:	46bd      	mov	sp, r7
 8010614:	bdb0      	pop	{r4, r5, r7, pc}
 8010616:	bf00      	nop
 8010618:	20005914 	.word	0x20005914
 801061c:	40028000 	.word	0x40028000
 8010620:	2000014c 	.word	0x2000014c
 8010624:	200000ac 	.word	0x200000ac
 8010628:	200059c4 	.word	0x200059c4
 801062c:	0802814c 	.word	0x0802814c
 8010630:	2000590c 	.word	0x2000590c
 8010634:	20005910 	.word	0x20005910
 8010638:	08024d08 	.word	0x08024d08
 801063c:	2000000c 	.word	0x2000000c
 8010640:	200059fc 	.word	0x200059fc
 8010644:	08024d34 	.word	0x08024d34

08010648 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b092      	sub	sp, #72	; 0x48
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8010652:	2300      	movs	r3, #0
 8010654:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8010656:	2300      	movs	r3, #0
 8010658:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801065a:	2300      	movs	r3, #0
 801065c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8010660:	f107 030c 	add.w	r3, r7, #12
 8010664:	2230      	movs	r2, #48	; 0x30
 8010666:	2100      	movs	r1, #0
 8010668:	4618      	mov	r0, r3
 801066a:	f013 f94e 	bl	802390a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801066e:	f107 030c 	add.w	r3, r7, #12
 8010672:	2230      	movs	r2, #48	; 0x30
 8010674:	2100      	movs	r1, #0
 8010676:	4618      	mov	r0, r3
 8010678:	f013 f947 	bl	802390a <memset>

  for(q = p; q != NULL; q = q->next)
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	643b      	str	r3, [r7, #64]	; 0x40
 8010680:	e045      	b.n	801070e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8010682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010684:	2b03      	cmp	r3, #3
 8010686:	d902      	bls.n	801068e <low_level_output+0x46>
      return ERR_IF;
 8010688:	f06f 030b 	mvn.w	r3, #11
 801068c:	e065      	b.n	801075a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 801068e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010690:	6859      	ldr	r1, [r3, #4]
 8010692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010694:	4613      	mov	r3, r2
 8010696:	005b      	lsls	r3, r3, #1
 8010698:	4413      	add	r3, r2
 801069a:	009b      	lsls	r3, r3, #2
 801069c:	3348      	adds	r3, #72	; 0x48
 801069e:	443b      	add	r3, r7
 80106a0:	3b3c      	subs	r3, #60	; 0x3c
 80106a2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80106a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106a6:	895b      	ldrh	r3, [r3, #10]
 80106a8:	4619      	mov	r1, r3
 80106aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106ac:	4613      	mov	r3, r2
 80106ae:	005b      	lsls	r3, r3, #1
 80106b0:	4413      	add	r3, r2
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	3348      	adds	r3, #72	; 0x48
 80106b6:	443b      	add	r3, r7
 80106b8:	3b38      	subs	r3, #56	; 0x38
 80106ba:	6019      	str	r1, [r3, #0]

    if(i>0)
 80106bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d011      	beq.n	80106e6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80106c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106c4:	1e5a      	subs	r2, r3, #1
 80106c6:	f107 000c 	add.w	r0, r7, #12
 80106ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80106cc:	460b      	mov	r3, r1
 80106ce:	005b      	lsls	r3, r3, #1
 80106d0:	440b      	add	r3, r1
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	18c1      	adds	r1, r0, r3
 80106d6:	4613      	mov	r3, r2
 80106d8:	005b      	lsls	r3, r3, #1
 80106da:	4413      	add	r3, r2
 80106dc:	009b      	lsls	r3, r3, #2
 80106de:	3348      	adds	r3, #72	; 0x48
 80106e0:	443b      	add	r3, r7
 80106e2:	3b34      	subs	r3, #52	; 0x34
 80106e4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80106e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d109      	bne.n	8010702 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80106ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106f0:	4613      	mov	r3, r2
 80106f2:	005b      	lsls	r3, r3, #1
 80106f4:	4413      	add	r3, r2
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	3348      	adds	r3, #72	; 0x48
 80106fa:	443b      	add	r3, r7
 80106fc:	3b34      	subs	r3, #52	; 0x34
 80106fe:	2200      	movs	r2, #0
 8010700:	601a      	str	r2, [r3, #0]
    }

    i++;
 8010702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010704:	3301      	adds	r3, #1
 8010706:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8010708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	643b      	str	r3, [r7, #64]	; 0x40
 801070e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010710:	2b00      	cmp	r3, #0
 8010712:	d1b6      	bne.n	8010682 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	891b      	ldrh	r3, [r3, #8]
 8010718:	461a      	mov	r2, r3
 801071a:	4b12      	ldr	r3, [pc, #72]	; (8010764 <low_level_output+0x11c>)
 801071c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 801071e:	4a11      	ldr	r2, [pc, #68]	; (8010764 <low_level_output+0x11c>)
 8010720:	f107 030c 	add.w	r3, r7, #12
 8010724:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8010726:	4a0f      	ldr	r2, [pc, #60]	; (8010764 <low_level_output+0x11c>)
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 801072c:	6838      	ldr	r0, [r7, #0]
 801072e:	f009 f867 	bl	8019800 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8010732:	490c      	ldr	r1, [pc, #48]	; (8010764 <low_level_output+0x11c>)
 8010734:	480c      	ldr	r0, [pc, #48]	; (8010768 <low_level_output+0x120>)
 8010736:	f7f4 f94b 	bl	80049d0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 801073a:	bf00      	nop
 801073c:	4b0b      	ldr	r3, [pc, #44]	; (801076c <low_level_output+0x124>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010744:	4618      	mov	r0, r3
 8010746:	f002 ff13 	bl	8013570 <osSemaphoreWait>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d1f5      	bne.n	801073c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8010750:	4805      	ldr	r0, [pc, #20]	; (8010768 <low_level_output+0x120>)
 8010752:	f7f4 fad1 	bl	8004cf8 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8010756:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801075a:	4618      	mov	r0, r3
 801075c:	3748      	adds	r7, #72	; 0x48
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	200059c4 	.word	0x200059c4
 8010768:	20005914 	.word	0x20005914
 801076c:	20005910 	.word	0x20005910

08010770 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8010778:	2300      	movs	r3, #0
 801077a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 801077c:	4b07      	ldr	r3, [pc, #28]	; (801079c <low_level_input+0x2c>)
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d105      	bne.n	8010790 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8010784:	f107 030c 	add.w	r3, r7, #12
 8010788:	4619      	mov	r1, r3
 801078a:	4805      	ldr	r0, [pc, #20]	; (80107a0 <low_level_input+0x30>)
 801078c:	f7f4 f97c 	bl	8004a88 <HAL_ETH_ReadData>
  }

  return p;
 8010790:	68fb      	ldr	r3, [r7, #12]
}
 8010792:	4618      	mov	r0, r3
 8010794:	3710      	adds	r7, #16
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	20005908 	.word	0x20005908
 80107a0:	20005914 	.word	0x20005914

080107a4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80107ac:	2300      	movs	r3, #0
 80107ae:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80107b4:	4b0f      	ldr	r3, [pc, #60]	; (80107f4 <ethernetif_input+0x50>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80107bc:	4618      	mov	r0, r3
 80107be:	f002 fed7 	bl	8013570 <osSemaphoreWait>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d1f5      	bne.n	80107b4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80107c8:	68b8      	ldr	r0, [r7, #8]
 80107ca:	f7ff ffd1 	bl	8010770 <low_level_input>
 80107ce:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d00a      	beq.n	80107ec <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	691b      	ldr	r3, [r3, #16]
 80107da:	68b9      	ldr	r1, [r7, #8]
 80107dc:	68f8      	ldr	r0, [r7, #12]
 80107de:	4798      	blx	r3
 80107e0:	4603      	mov	r3, r0
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d002      	beq.n	80107ec <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f008 ff64 	bl	80196b4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1ea      	bne.n	80107c8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80107f2:	e7df      	b.n	80107b4 <ethernetif_input+0x10>
 80107f4:	2000590c 	.word	0x2000590c

080107f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d106      	bne.n	8010814 <ethernetif_init+0x1c>
 8010806:	4b0e      	ldr	r3, [pc, #56]	; (8010840 <ethernetif_init+0x48>)
 8010808:	f240 12f9 	movw	r2, #505	; 0x1f9
 801080c:	490d      	ldr	r1, [pc, #52]	; (8010844 <ethernetif_init+0x4c>)
 801080e:	480e      	ldr	r0, [pc, #56]	; (8010848 <ethernetif_init+0x50>)
 8010810:	f013 f81e 	bl	8023850 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2273      	movs	r2, #115	; 0x73
 8010818:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2274      	movs	r2, #116	; 0x74
 8010820:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	4a09      	ldr	r2, [pc, #36]	; (801084c <ethernetif_init+0x54>)
 8010828:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	4a08      	ldr	r2, [pc, #32]	; (8010850 <ethernetif_init+0x58>)
 801082e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f7ff fdbb 	bl	80103ac <low_level_init>

  return ERR_OK;
 8010836:	2300      	movs	r3, #0
}
 8010838:	4618      	mov	r0, r3
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	08024d50 	.word	0x08024d50
 8010844:	08024d6c 	.word	0x08024d6c
 8010848:	08024d7c 	.word	0x08024d7c
 801084c:	08020e45 	.word	0x08020e45
 8010850:	08010649 	.word	0x08010649

08010854 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b084      	sub	sp, #16
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8010860:	68f9      	ldr	r1, [r7, #12]
 8010862:	4809      	ldr	r0, [pc, #36]	; (8010888 <pbuf_free_custom+0x34>)
 8010864:	f008 f85e 	bl	8018924 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8010868:	4b08      	ldr	r3, [pc, #32]	; (801088c <pbuf_free_custom+0x38>)
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	2b01      	cmp	r3, #1
 801086e:	d107      	bne.n	8010880 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8010870:	4b06      	ldr	r3, [pc, #24]	; (801088c <pbuf_free_custom+0x38>)
 8010872:	2200      	movs	r2, #0
 8010874:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8010876:	4b06      	ldr	r3, [pc, #24]	; (8010890 <pbuf_free_custom+0x3c>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4618      	mov	r0, r3
 801087c:	f002 fec6 	bl	801360c <osSemaphoreRelease>
  }
}
 8010880:	bf00      	nop
 8010882:	3710      	adds	r7, #16
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	0802814c 	.word	0x0802814c
 801088c:	20005908 	.word	0x20005908
 8010890:	2000590c 	.word	0x2000590c

08010894 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8010898:	f7f2 fee2 	bl	8003660 <HAL_GetTick>
 801089c:	4603      	mov	r3, r0
}
 801089e:	4618      	mov	r0, r3
 80108a0:	bd80      	pop	{r7, pc}
	...

080108a4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b08e      	sub	sp, #56	; 0x38
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80108ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80108b0:	2200      	movs	r2, #0
 80108b2:	601a      	str	r2, [r3, #0]
 80108b4:	605a      	str	r2, [r3, #4]
 80108b6:	609a      	str	r2, [r3, #8]
 80108b8:	60da      	str	r2, [r3, #12]
 80108ba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	4a44      	ldr	r2, [pc, #272]	; (80109d4 <HAL_ETH_MspInit+0x130>)
 80108c2:	4293      	cmp	r3, r2
 80108c4:	f040 8081 	bne.w	80109ca <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80108c8:	4b43      	ldr	r3, [pc, #268]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 80108ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108cc:	4a42      	ldr	r2, [pc, #264]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 80108ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80108d2:	6313      	str	r3, [r2, #48]	; 0x30
 80108d4:	4b40      	ldr	r3, [pc, #256]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 80108d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80108dc:	623b      	str	r3, [r7, #32]
 80108de:	6a3b      	ldr	r3, [r7, #32]
 80108e0:	4b3d      	ldr	r3, [pc, #244]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 80108e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108e4:	4a3c      	ldr	r2, [pc, #240]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 80108e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80108ea:	6313      	str	r3, [r2, #48]	; 0x30
 80108ec:	4b3a      	ldr	r3, [pc, #232]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 80108ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80108f4:	61fb      	str	r3, [r7, #28]
 80108f6:	69fb      	ldr	r3, [r7, #28]
 80108f8:	4b37      	ldr	r3, [pc, #220]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 80108fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108fc:	4a36      	ldr	r2, [pc, #216]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 80108fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010902:	6313      	str	r3, [r2, #48]	; 0x30
 8010904:	4b34      	ldr	r3, [pc, #208]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 8010906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801090c:	61bb      	str	r3, [r7, #24]
 801090e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8010910:	4b31      	ldr	r3, [pc, #196]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 8010912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010914:	4a30      	ldr	r2, [pc, #192]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 8010916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801091a:	6313      	str	r3, [r2, #48]	; 0x30
 801091c:	4b2e      	ldr	r3, [pc, #184]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 801091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010924:	617b      	str	r3, [r7, #20]
 8010926:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010928:	4b2b      	ldr	r3, [pc, #172]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 801092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801092c:	4a2a      	ldr	r2, [pc, #168]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 801092e:	f043 0304 	orr.w	r3, r3, #4
 8010932:	6313      	str	r3, [r2, #48]	; 0x30
 8010934:	4b28      	ldr	r3, [pc, #160]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 8010936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010938:	f003 0304 	and.w	r3, r3, #4
 801093c:	613b      	str	r3, [r7, #16]
 801093e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010940:	4b25      	ldr	r3, [pc, #148]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 8010942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010944:	4a24      	ldr	r2, [pc, #144]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 8010946:	f043 0301 	orr.w	r3, r3, #1
 801094a:	6313      	str	r3, [r2, #48]	; 0x30
 801094c:	4b22      	ldr	r3, [pc, #136]	; (80109d8 <HAL_ETH_MspInit+0x134>)
 801094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010950:	f003 0301 	and.w	r3, r3, #1
 8010954:	60fb      	str	r3, [r7, #12]
 8010956:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8010958:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 801095c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801095e:	2302      	movs	r3, #2
 8010960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010962:	2300      	movs	r3, #0
 8010964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010966:	2303      	movs	r3, #3
 8010968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801096a:	230b      	movs	r3, #11
 801096c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010972:	4619      	mov	r1, r3
 8010974:	4819      	ldr	r0, [pc, #100]	; (80109dc <HAL_ETH_MspInit+0x138>)
 8010976:	f7f5 f8ef 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 801097a:	2332      	movs	r3, #50	; 0x32
 801097c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801097e:	2302      	movs	r3, #2
 8010980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010982:	2300      	movs	r3, #0
 8010984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010986:	2303      	movs	r3, #3
 8010988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801098a:	230b      	movs	r3, #11
 801098c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010992:	4619      	mov	r1, r3
 8010994:	4812      	ldr	r0, [pc, #72]	; (80109e0 <HAL_ETH_MspInit+0x13c>)
 8010996:	f7f5 f8df 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 801099a:	2386      	movs	r3, #134	; 0x86
 801099c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801099e:	2302      	movs	r3, #2
 80109a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109a2:	2300      	movs	r3, #0
 80109a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109a6:	2303      	movs	r3, #3
 80109a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80109aa:	230b      	movs	r3, #11
 80109ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80109ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109b2:	4619      	mov	r1, r3
 80109b4:	480b      	ldr	r0, [pc, #44]	; (80109e4 <HAL_ETH_MspInit+0x140>)
 80109b6:	f7f5 f8cf 	bl	8005b58 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80109ba:	2200      	movs	r2, #0
 80109bc:	2105      	movs	r1, #5
 80109be:	203d      	movs	r0, #61	; 0x3d
 80109c0:	f7f3 f9d6 	bl	8003d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80109c4:	203d      	movs	r0, #61	; 0x3d
 80109c6:	f7f3 f9ef 	bl	8003da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80109ca:	bf00      	nop
 80109cc:	3738      	adds	r7, #56	; 0x38
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	40028000 	.word	0x40028000
 80109d8:	40023800 	.word	0x40023800
 80109dc:	40021800 	.word	0x40021800
 80109e0:	40020800 	.word	0x40020800
 80109e4:	40020000 	.word	0x40020000

080109e8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80109ec:	4802      	ldr	r0, [pc, #8]	; (80109f8 <ETH_PHY_IO_Init+0x10>)
 80109ee:	f7f4 fc4d 	bl	800528c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80109f2:	2300      	movs	r3, #0
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	20005914 	.word	0x20005914

080109fc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80109fc:	b480      	push	{r7}
 80109fe:	af00      	add	r7, sp, #0
  return 0;
 8010a00:	2300      	movs	r3, #0
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	46bd      	mov	sp, r7
 8010a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0a:	4770      	bx	lr

08010a0c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	68ba      	ldr	r2, [r7, #8]
 8010a1c:	68f9      	ldr	r1, [r7, #12]
 8010a1e:	4807      	ldr	r0, [pc, #28]	; (8010a3c <ETH_PHY_IO_ReadReg+0x30>)
 8010a20:	f7f4 fa9c 	bl	8004f5c <HAL_ETH_ReadPHYRegister>
 8010a24:	4603      	mov	r3, r0
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d002      	beq.n	8010a30 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8010a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a2e:	e000      	b.n	8010a32 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8010a30:	2300      	movs	r3, #0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3710      	adds	r7, #16
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	20005914 	.word	0x20005914

08010a40 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	68ba      	ldr	r2, [r7, #8]
 8010a50:	68f9      	ldr	r1, [r7, #12]
 8010a52:	4807      	ldr	r0, [pc, #28]	; (8010a70 <ETH_PHY_IO_WriteReg+0x30>)
 8010a54:	f7f4 facd 	bl	8004ff2 <HAL_ETH_WritePHYRegister>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d002      	beq.n	8010a64 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8010a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a62:	e000      	b.n	8010a66 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8010a64:	2300      	movs	r3, #0
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	20005914 	.word	0x20005914

08010a74 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8010a78:	f7f2 fdf2 	bl	8003660 <HAL_GetTick>
 8010a7c:	4603      	mov	r3, r0
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	bd80      	pop	{r7, pc}
	...

08010a84 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b0a0      	sub	sp, #128	; 0x80
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8010a8c:	f107 0308 	add.w	r3, r7, #8
 8010a90:	2264      	movs	r2, #100	; 0x64
 8010a92:	2100      	movs	r1, #0
 8010a94:	4618      	mov	r0, r3
 8010a96:	f012 ff38 	bl	802390a <memset>
  int32_t PHYLinkState = 0;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8010aae:	483a      	ldr	r0, [pc, #232]	; (8010b98 <ethernet_link_thread+0x114>)
 8010ab0:	f7f2 fd2d 	bl	800350e <LAN8742_GetLinkState>
 8010ab4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8010ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ab8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010abc:	089b      	lsrs	r3, r3, #2
 8010abe:	f003 0301 	and.w	r3, r3, #1
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d00c      	beq.n	8010ae2 <ethernet_link_thread+0x5e>
 8010ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	dc09      	bgt.n	8010ae2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8010ace:	4833      	ldr	r0, [pc, #204]	; (8010b9c <ethernet_link_thread+0x118>)
 8010ad0:	f7f3 fefe 	bl	80048d0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8010ad4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010ad6:	f008 f9a9 	bl	8018e2c <netif_set_down>
    netif_set_link_down(netif);
 8010ada:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010adc:	f008 fa0c 	bl	8018ef8 <netif_set_link_down>
 8010ae0:	e055      	b.n	8010b8e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8010ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ae4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ae8:	f003 0304 	and.w	r3, r3, #4
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d14e      	bne.n	8010b8e <ethernet_link_thread+0x10a>
 8010af0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	dd4b      	ble.n	8010b8e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8010af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010af8:	3b02      	subs	r3, #2
 8010afa:	2b03      	cmp	r3, #3
 8010afc:	d82a      	bhi.n	8010b54 <ethernet_link_thread+0xd0>
 8010afe:	a201      	add	r2, pc, #4	; (adr r2, 8010b04 <ethernet_link_thread+0x80>)
 8010b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b04:	08010b15 	.word	0x08010b15
 8010b08:	08010b27 	.word	0x08010b27
 8010b0c:	08010b37 	.word	0x08010b37
 8010b10:	08010b47 	.word	0x08010b47
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8010b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b18:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8010b1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010b1e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8010b20:	2301      	movs	r3, #1
 8010b22:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8010b24:	e017      	b.n	8010b56 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8010b26:	2300      	movs	r3, #0
 8010b28:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8010b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010b2e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8010b30:	2301      	movs	r3, #1
 8010b32:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8010b34:	e00f      	b.n	8010b56 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8010b36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b3a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8010b40:	2301      	movs	r3, #1
 8010b42:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8010b44:	e007      	b.n	8010b56 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8010b46:	2300      	movs	r3, #0
 8010b48:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8010b52:	e000      	b.n	8010b56 <ethernet_link_thread+0xd2>
    default:
      break;
 8010b54:	bf00      	nop
    }

    if(linkchanged)
 8010b56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d018      	beq.n	8010b8e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8010b5c:	f107 0308 	add.w	r3, r7, #8
 8010b60:	4619      	mov	r1, r3
 8010b62:	480e      	ldr	r0, [pc, #56]	; (8010b9c <ethernet_link_thread+0x118>)
 8010b64:	f7f4 fa8e 	bl	8005084 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8010b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b6a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8010b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b6e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8010b70:	f107 0308 	add.w	r3, r7, #8
 8010b74:	4619      	mov	r1, r3
 8010b76:	4809      	ldr	r0, [pc, #36]	; (8010b9c <ethernet_link_thread+0x118>)
 8010b78:	f7f4 fb6e 	bl	8005258 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8010b7c:	4807      	ldr	r0, [pc, #28]	; (8010b9c <ethernet_link_thread+0x118>)
 8010b7e:	f7f3 fe19 	bl	80047b4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8010b82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010b84:	f008 f8e6 	bl	8018d54 <netif_set_up>
      netif_set_link_up(netif);
 8010b88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010b8a:	f008 f981 	bl	8018e90 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8010b8e:	2064      	movs	r0, #100	; 0x64
 8010b90:	f002 fbfe 	bl	8013390 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8010b94:	e78b      	b.n	8010aae <ethernet_link_thread+0x2a>
 8010b96:	bf00      	nop
 8010b98:	200059fc 	.word	0x200059fc
 8010b9c:	20005914 	.word	0x20005914

08010ba0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b086      	sub	sp, #24
 8010ba4:	af02      	add	r7, sp, #8
 8010ba6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8010ba8:	4812      	ldr	r0, [pc, #72]	; (8010bf4 <HAL_ETH_RxAllocateCallback+0x54>)
 8010baa:	f007 fe47 	bl	801883c <memp_malloc_pool>
 8010bae:	60f8      	str	r0, [r7, #12]
  if (p)
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d014      	beq.n	8010be0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	f103 0220 	add.w	r2, r3, #32
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	4a0d      	ldr	r2, [pc, #52]	; (8010bf8 <HAL_ETH_RxAllocateCallback+0x58>)
 8010bc4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8010bce:	9201      	str	r2, [sp, #4]
 8010bd0:	9300      	str	r3, [sp, #0]
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2241      	movs	r2, #65	; 0x41
 8010bd6:	2100      	movs	r1, #0
 8010bd8:	2000      	movs	r0, #0
 8010bda:	f008 fbb1 	bl	8019340 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8010bde:	e005      	b.n	8010bec <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8010be0:	4b06      	ldr	r3, [pc, #24]	; (8010bfc <HAL_ETH_RxAllocateCallback+0x5c>)
 8010be2:	2201      	movs	r2, #1
 8010be4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2200      	movs	r2, #0
 8010bea:	601a      	str	r2, [r3, #0]
}
 8010bec:	bf00      	nop
 8010bee:	3710      	adds	r7, #16
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}
 8010bf4:	0802814c 	.word	0x0802814c
 8010bf8:	08010855 	.word	0x08010855
 8010bfc:	20005908 	.word	0x20005908

08010c00 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b088      	sub	sp, #32
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	607a      	str	r2, [r7, #4]
 8010c0c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010c16:	2300      	movs	r3, #0
 8010c18:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	3b20      	subs	r3, #32
 8010c1e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	2200      	movs	r2, #0
 8010c24:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8010c26:	69fb      	ldr	r3, [r7, #28]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	887a      	ldrh	r2, [r7, #2]
 8010c30:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8010c32:	69bb      	ldr	r3, [r7, #24]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d103      	bne.n	8010c42 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8010c3a:	69bb      	ldr	r3, [r7, #24]
 8010c3c:	69fa      	ldr	r2, [r7, #28]
 8010c3e:	601a      	str	r2, [r3, #0]
 8010c40:	e003      	b.n	8010c4a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	69fa      	ldr	r2, [r7, #28]
 8010c48:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	69fa      	ldr	r2, [r7, #28]
 8010c4e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8010c50:	69bb      	ldr	r3, [r7, #24]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	61fb      	str	r3, [r7, #28]
 8010c56:	e009      	b.n	8010c6c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8010c58:	69fb      	ldr	r3, [r7, #28]
 8010c5a:	891a      	ldrh	r2, [r3, #8]
 8010c5c:	887b      	ldrh	r3, [r7, #2]
 8010c5e:	4413      	add	r3, r2
 8010c60:	b29a      	uxth	r2, r3
 8010c62:	69fb      	ldr	r3, [r7, #28]
 8010c64:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	61fb      	str	r3, [r7, #28]
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d1f2      	bne.n	8010c58 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8010c72:	887b      	ldrh	r3, [r7, #2]
 8010c74:	4619      	mov	r1, r3
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f7ff fb34 	bl	80102e4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8010c7c:	bf00      	nop
 8010c7e:	3720      	adds	r7, #32
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f008 fd11 	bl	80196b4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8010c92:	bf00      	nop
 8010c94:	3708      	adds	r7, #8
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
	...

08010c9c <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8010ca4:	4b15      	ldr	r3, [pc, #84]	; (8010cfc <RMII_Thread+0x60>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d003      	beq.n	8010cb8 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	f002 fb61 	bl	8013378 <osThreadTerminate>
 8010cb6:	e7f5      	b.n	8010ca4 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8010cb8:	4b10      	ldr	r3, [pc, #64]	; (8010cfc <RMII_Thread+0x60>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8010cc0:	2b0a      	cmp	r3, #10
 8010cc2:	d916      	bls.n	8010cf2 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8010cc4:	4b0e      	ldr	r3, [pc, #56]	; (8010d00 <RMII_Thread+0x64>)
 8010cc6:	685b      	ldr	r3, [r3, #4]
 8010cc8:	4a0d      	ldr	r2, [pc, #52]	; (8010d00 <RMII_Thread+0x64>)
 8010cca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010cce:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8010cd0:	4b0b      	ldr	r3, [pc, #44]	; (8010d00 <RMII_Thread+0x64>)
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	4a0a      	ldr	r2, [pc, #40]	; (8010d00 <RMII_Thread+0x64>)
 8010cd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010cda:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8010cdc:	4b07      	ldr	r3, [pc, #28]	; (8010cfc <RMII_Thread+0x60>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8010ce4:	4b05      	ldr	r3, [pc, #20]	; (8010cfc <RMII_Thread+0x60>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	f042 0201 	orr.w	r2, r2, #1
 8010cec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8010cf0:	e7d8      	b.n	8010ca4 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 8010cf2:	20c8      	movs	r0, #200	; 0xc8
 8010cf4:	f002 fb4c 	bl	8013390 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8010cf8:	e7d4      	b.n	8010ca4 <RMII_Thread+0x8>
 8010cfa:	bf00      	nop
 8010cfc:	20005914 	.word	0x20005914
 8010d00:	40013800 	.word	0x40013800

08010d04 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8010d04:	b590      	push	{r4, r7, lr}
 8010d06:	b089      	sub	sp, #36	; 0x24
 8010d08:	af04      	add	r7, sp, #16
 8010d0a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	2202      	movs	r2, #2
 8010d10:	2102      	movs	r1, #2
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f000 fcd7 	bl	80116c6 <USBH_FindInterface>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8010d1c:	7bfb      	ldrb	r3, [r7, #15]
 8010d1e:	2bff      	cmp	r3, #255	; 0xff
 8010d20:	d002      	beq.n	8010d28 <USBH_CDC_InterfaceInit+0x24>
 8010d22:	7bfb      	ldrb	r3, [r7, #15]
 8010d24:	2b01      	cmp	r3, #1
 8010d26:	d901      	bls.n	8010d2c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8010d28:	2302      	movs	r3, #2
 8010d2a:	e13d      	b.n	8010fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8010d2c:	7bfb      	ldrb	r3, [r7, #15]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f000 fcac 	bl	801168e <USBH_SelectInterface>
 8010d36:	4603      	mov	r3, r0
 8010d38:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8010d3a:	7bbb      	ldrb	r3, [r7, #14]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d001      	beq.n	8010d44 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8010d40:	2302      	movs	r3, #2
 8010d42:	e131      	b.n	8010fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8010d4a:	2050      	movs	r0, #80	; 0x50
 8010d4c:	f012 fba4 	bl	8023498 <malloc>
 8010d50:	4603      	mov	r3, r0
 8010d52:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010d5a:	69db      	ldr	r3, [r3, #28]
 8010d5c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d101      	bne.n	8010d68 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8010d64:	2302      	movs	r3, #2
 8010d66:	e11f      	b.n	8010fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8010d68:	2250      	movs	r2, #80	; 0x50
 8010d6a:	2100      	movs	r1, #0
 8010d6c:	68b8      	ldr	r0, [r7, #8]
 8010d6e:	f012 fdcc 	bl	802390a <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8010d72:	7bfb      	ldrb	r3, [r7, #15]
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	211a      	movs	r1, #26
 8010d78:	fb01 f303 	mul.w	r3, r1, r3
 8010d7c:	4413      	add	r3, r2
 8010d7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010d82:	781b      	ldrb	r3, [r3, #0]
 8010d84:	b25b      	sxtb	r3, r3
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	da15      	bge.n	8010db6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010d8a:	7bfb      	ldrb	r3, [r7, #15]
 8010d8c:	687a      	ldr	r2, [r7, #4]
 8010d8e:	211a      	movs	r1, #26
 8010d90:	fb01 f303 	mul.w	r3, r1, r3
 8010d94:	4413      	add	r3, r2
 8010d96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010d9a:	781a      	ldrb	r2, [r3, #0]
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010da0:	7bfb      	ldrb	r3, [r7, #15]
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	211a      	movs	r1, #26
 8010da6:	fb01 f303 	mul.w	r3, r1, r3
 8010daa:	4413      	add	r3, r2
 8010dac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010db0:	881a      	ldrh	r2, [r3, #0]
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	785b      	ldrb	r3, [r3, #1]
 8010dba:	4619      	mov	r1, r3
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f002 f984 	bl	80130ca <USBH_AllocPipe>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	7819      	ldrb	r1, [r3, #0]
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	7858      	ldrb	r0, [r3, #1]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010dde:	68ba      	ldr	r2, [r7, #8]
 8010de0:	8952      	ldrh	r2, [r2, #10]
 8010de2:	9202      	str	r2, [sp, #8]
 8010de4:	2203      	movs	r2, #3
 8010de6:	9201      	str	r2, [sp, #4]
 8010de8:	9300      	str	r3, [sp, #0]
 8010dea:	4623      	mov	r3, r4
 8010dec:	4602      	mov	r2, r0
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f002 f93c 	bl	801306c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f012 fac7 	bl	8023390 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8010e02:	2300      	movs	r3, #0
 8010e04:	2200      	movs	r2, #0
 8010e06:	210a      	movs	r1, #10
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f000 fc5c 	bl	80116c6 <USBH_FindInterface>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8010e12:	7bfb      	ldrb	r3, [r7, #15]
 8010e14:	2bff      	cmp	r3, #255	; 0xff
 8010e16:	d002      	beq.n	8010e1e <USBH_CDC_InterfaceInit+0x11a>
 8010e18:	7bfb      	ldrb	r3, [r7, #15]
 8010e1a:	2b01      	cmp	r3, #1
 8010e1c:	d901      	bls.n	8010e22 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8010e1e:	2302      	movs	r3, #2
 8010e20:	e0c2      	b.n	8010fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8010e22:	7bfb      	ldrb	r3, [r7, #15]
 8010e24:	687a      	ldr	r2, [r7, #4]
 8010e26:	211a      	movs	r1, #26
 8010e28:	fb01 f303 	mul.w	r3, r1, r3
 8010e2c:	4413      	add	r3, r2
 8010e2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	b25b      	sxtb	r3, r3
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	da16      	bge.n	8010e68 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010e3a:	7bfb      	ldrb	r3, [r7, #15]
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	211a      	movs	r1, #26
 8010e40:	fb01 f303 	mul.w	r3, r1, r3
 8010e44:	4413      	add	r3, r2
 8010e46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010e4a:	781a      	ldrb	r2, [r3, #0]
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010e50:	7bfb      	ldrb	r3, [r7, #15]
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	211a      	movs	r1, #26
 8010e56:	fb01 f303 	mul.w	r3, r1, r3
 8010e5a:	4413      	add	r3, r2
 8010e5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010e60:	881a      	ldrh	r2, [r3, #0]
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	835a      	strh	r2, [r3, #26]
 8010e66:	e015      	b.n	8010e94 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010e68:	7bfb      	ldrb	r3, [r7, #15]
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	211a      	movs	r1, #26
 8010e6e:	fb01 f303 	mul.w	r3, r1, r3
 8010e72:	4413      	add	r3, r2
 8010e74:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8010e78:	781a      	ldrb	r2, [r3, #0]
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010e7e:	7bfb      	ldrb	r3, [r7, #15]
 8010e80:	687a      	ldr	r2, [r7, #4]
 8010e82:	211a      	movs	r1, #26
 8010e84:	fb01 f303 	mul.w	r3, r1, r3
 8010e88:	4413      	add	r3, r2
 8010e8a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8010e8e:	881a      	ldrh	r2, [r3, #0]
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8010e94:	7bfb      	ldrb	r3, [r7, #15]
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	211a      	movs	r1, #26
 8010e9a:	fb01 f303 	mul.w	r3, r1, r3
 8010e9e:	4413      	add	r3, r2
 8010ea0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	b25b      	sxtb	r3, r3
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	da16      	bge.n	8010eda <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8010eac:	7bfb      	ldrb	r3, [r7, #15]
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	211a      	movs	r1, #26
 8010eb2:	fb01 f303 	mul.w	r3, r1, r3
 8010eb6:	4413      	add	r3, r2
 8010eb8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8010ebc:	781a      	ldrb	r2, [r3, #0]
 8010ebe:	68bb      	ldr	r3, [r7, #8]
 8010ec0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010ec2:	7bfb      	ldrb	r3, [r7, #15]
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	211a      	movs	r1, #26
 8010ec8:	fb01 f303 	mul.w	r3, r1, r3
 8010ecc:	4413      	add	r3, r2
 8010ece:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8010ed2:	881a      	ldrh	r2, [r3, #0]
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	835a      	strh	r2, [r3, #26]
 8010ed8:	e015      	b.n	8010f06 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8010eda:	7bfb      	ldrb	r3, [r7, #15]
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	211a      	movs	r1, #26
 8010ee0:	fb01 f303 	mul.w	r3, r1, r3
 8010ee4:	4413      	add	r3, r2
 8010ee6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8010eea:	781a      	ldrb	r2, [r3, #0]
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010ef0:	7bfb      	ldrb	r3, [r7, #15]
 8010ef2:	687a      	ldr	r2, [r7, #4]
 8010ef4:	211a      	movs	r1, #26
 8010ef6:	fb01 f303 	mul.w	r3, r1, r3
 8010efa:	4413      	add	r3, r2
 8010efc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8010f00:	881a      	ldrh	r2, [r3, #0]
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	7b9b      	ldrb	r3, [r3, #14]
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	6878      	ldr	r0, [r7, #4]
 8010f0e:	f002 f8dc 	bl	80130ca <USBH_AllocPipe>
 8010f12:	4603      	mov	r3, r0
 8010f14:	461a      	mov	r2, r3
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	7bdb      	ldrb	r3, [r3, #15]
 8010f1e:	4619      	mov	r1, r3
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f002 f8d2 	bl	80130ca <USBH_AllocPipe>
 8010f26:	4603      	mov	r3, r0
 8010f28:	461a      	mov	r2, r3
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	7b59      	ldrb	r1, [r3, #13]
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	7b98      	ldrb	r0, [r3, #14]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010f42:	68ba      	ldr	r2, [r7, #8]
 8010f44:	8b12      	ldrh	r2, [r2, #24]
 8010f46:	9202      	str	r2, [sp, #8]
 8010f48:	2202      	movs	r2, #2
 8010f4a:	9201      	str	r2, [sp, #4]
 8010f4c:	9300      	str	r3, [sp, #0]
 8010f4e:	4623      	mov	r3, r4
 8010f50:	4602      	mov	r2, r0
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f002 f88a 	bl	801306c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	7b19      	ldrb	r1, [r3, #12]
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	7bd8      	ldrb	r0, [r3, #15]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010f6c:	68ba      	ldr	r2, [r7, #8]
 8010f6e:	8b52      	ldrh	r2, [r2, #26]
 8010f70:	9202      	str	r2, [sp, #8]
 8010f72:	2202      	movs	r2, #2
 8010f74:	9201      	str	r2, [sp, #4]
 8010f76:	9300      	str	r3, [sp, #0]
 8010f78:	4623      	mov	r3, r4
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f002 f875 	bl	801306c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	2200      	movs	r2, #0
 8010f86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	7b5b      	ldrb	r3, [r3, #13]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	4619      	mov	r1, r3
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f012 f9fc 	bl	8023390 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	7b1b      	ldrb	r3, [r3, #12]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f012 f9f5 	bl	8023390 <USBH_LL_SetToggle>

  return USBH_OK;
 8010fa6:	2300      	movs	r3, #0
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3714      	adds	r7, #20
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd90      	pop	{r4, r7, pc}

08010fb0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010fbe:	69db      	ldr	r3, [r3, #28]
 8010fc0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d00e      	beq.n	8010fe8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	4619      	mov	r1, r3
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f002 f86a 	bl	80130aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	4619      	mov	r1, r3
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f002 f895 	bl	801310c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	7b1b      	ldrb	r3, [r3, #12]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d00e      	beq.n	801100e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	7b1b      	ldrb	r3, [r3, #12]
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f002 f857 	bl	80130aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	7b1b      	ldrb	r3, [r3, #12]
 8011000:	4619      	mov	r1, r3
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f002 f882 	bl	801310c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	2200      	movs	r2, #0
 801100c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	7b5b      	ldrb	r3, [r3, #13]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d00e      	beq.n	8011034 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	7b5b      	ldrb	r3, [r3, #13]
 801101a:	4619      	mov	r1, r3
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f002 f844 	bl	80130aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	7b5b      	ldrb	r3, [r3, #13]
 8011026:	4619      	mov	r1, r3
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f002 f86f 	bl	801310c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	2200      	movs	r2, #0
 8011032:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801103a:	69db      	ldr	r3, [r3, #28]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00b      	beq.n	8011058 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011046:	69db      	ldr	r3, [r3, #28]
 8011048:	4618      	mov	r0, r3
 801104a:	f012 fa2d 	bl	80234a8 <free>
    phost->pActiveClass->pData = 0U;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011054:	2200      	movs	r2, #0
 8011056:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8011058:	2300      	movs	r3, #0
}
 801105a:	4618      	mov	r0, r3
 801105c:	3710      	adds	r7, #16
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}

08011062 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8011062:	b580      	push	{r7, lr}
 8011064:	b084      	sub	sp, #16
 8011066:	af00      	add	r7, sp, #0
 8011068:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011070:	69db      	ldr	r3, [r3, #28]
 8011072:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	3340      	adds	r3, #64	; 0x40
 8011078:	4619      	mov	r1, r3
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f000 f8b1 	bl	80111e2 <GetLineCoding>
 8011080:	4603      	mov	r3, r0
 8011082:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8011084:	7afb      	ldrb	r3, [r7, #11]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d105      	bne.n	8011096 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011090:	2102      	movs	r1, #2
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8011096:	7afb      	ldrb	r3, [r7, #11]
}
 8011098:	4618      	mov	r0, r3
 801109a:	3710      	adds	r7, #16
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80110a8:	2301      	movs	r3, #1
 80110aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80110ac:	2300      	movs	r3, #0
 80110ae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80110b6:	69db      	ldr	r3, [r3, #28]
 80110b8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80110c0:	2b04      	cmp	r3, #4
 80110c2:	d877      	bhi.n	80111b4 <USBH_CDC_Process+0x114>
 80110c4:	a201      	add	r2, pc, #4	; (adr r2, 80110cc <USBH_CDC_Process+0x2c>)
 80110c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ca:	bf00      	nop
 80110cc:	080110e1 	.word	0x080110e1
 80110d0:	080110e7 	.word	0x080110e7
 80110d4:	08011117 	.word	0x08011117
 80110d8:	0801118b 	.word	0x0801118b
 80110dc:	08011199 	.word	0x08011199
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80110e0:	2300      	movs	r3, #0
 80110e2:	73fb      	strb	r3, [r7, #15]
      break;
 80110e4:	e06d      	b.n	80111c2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80110ea:	4619      	mov	r1, r3
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 f897 	bl	8011220 <SetLineCoding>
 80110f2:	4603      	mov	r3, r0
 80110f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80110f6:	7bbb      	ldrb	r3, [r7, #14]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d104      	bne.n	8011106 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	2202      	movs	r2, #2
 8011100:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8011104:	e058      	b.n	80111b8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8011106:	7bbb      	ldrb	r3, [r7, #14]
 8011108:	2b01      	cmp	r3, #1
 801110a:	d055      	beq.n	80111b8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	2204      	movs	r2, #4
 8011110:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8011114:	e050      	b.n	80111b8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	3340      	adds	r3, #64	; 0x40
 801111a:	4619      	mov	r1, r3
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f000 f860 	bl	80111e2 <GetLineCoding>
 8011122:	4603      	mov	r3, r0
 8011124:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011126:	7bbb      	ldrb	r3, [r7, #14]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d126      	bne.n	801117a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	2200      	movs	r2, #0
 8011130:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801113e:	791b      	ldrb	r3, [r3, #4]
 8011140:	429a      	cmp	r2, r3
 8011142:	d13b      	bne.n	80111bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801114e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011150:	429a      	cmp	r2, r3
 8011152:	d133      	bne.n	80111bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801115e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8011160:	429a      	cmp	r2, r3
 8011162:	d12b      	bne.n	80111bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801116c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 801116e:	429a      	cmp	r2, r3
 8011170:	d124      	bne.n	80111bc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f000 f982 	bl	801147c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8011178:	e020      	b.n	80111bc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 801117a:	7bbb      	ldrb	r3, [r7, #14]
 801117c:	2b01      	cmp	r3, #1
 801117e:	d01d      	beq.n	80111bc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	2204      	movs	r2, #4
 8011184:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8011188:	e018      	b.n	80111bc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f000 f867 	bl	801125e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f000 f8f6 	bl	8011382 <CDC_ProcessReception>
      break;
 8011196:	e014      	b.n	80111c2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8011198:	2100      	movs	r1, #0
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f001 f97b 	bl	8012496 <USBH_ClrFeature>
 80111a0:	4603      	mov	r3, r0
 80111a2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80111a4:	7bbb      	ldrb	r3, [r7, #14]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d10a      	bne.n	80111c0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	2200      	movs	r2, #0
 80111ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80111b2:	e005      	b.n	80111c0 <USBH_CDC_Process+0x120>

    default:
      break;
 80111b4:	bf00      	nop
 80111b6:	e004      	b.n	80111c2 <USBH_CDC_Process+0x122>
      break;
 80111b8:	bf00      	nop
 80111ba:	e002      	b.n	80111c2 <USBH_CDC_Process+0x122>
      break;
 80111bc:	bf00      	nop
 80111be:	e000      	b.n	80111c2 <USBH_CDC_Process+0x122>
      break;
 80111c0:	bf00      	nop

  }

  return status;
 80111c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	3710      	adds	r7, #16
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}

080111cc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80111cc:	b480      	push	{r7}
 80111ce:	b083      	sub	sp, #12
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80111d4:	2300      	movs	r3, #0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	370c      	adds	r7, #12
 80111da:	46bd      	mov	sp, r7
 80111dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e0:	4770      	bx	lr

080111e2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b082      	sub	sp, #8
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]
 80111ea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	22a1      	movs	r2, #161	; 0xa1
 80111f0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2221      	movs	r2, #33	; 0x21
 80111f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2200      	movs	r2, #0
 8011202:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2207      	movs	r2, #7
 8011208:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	2207      	movs	r2, #7
 801120e:	4619      	mov	r1, r3
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f001 fbe9 	bl	80129e8 <USBH_CtlReq>
 8011216:	4603      	mov	r3, r0
}
 8011218:	4618      	mov	r0, r3
 801121a:	3708      	adds	r7, #8
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2221      	movs	r2, #33	; 0x21
 801122e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2220      	movs	r2, #32
 8011234:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2200      	movs	r2, #0
 801123a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2200      	movs	r2, #0
 8011240:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2207      	movs	r2, #7
 8011246:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2207      	movs	r2, #7
 801124c:	4619      	mov	r1, r3
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f001 fbca 	bl	80129e8 <USBH_CtlReq>
 8011254:	4603      	mov	r3, r0
}
 8011256:	4618      	mov	r0, r3
 8011258:	3708      	adds	r7, #8
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}

0801125e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 801125e:	b580      	push	{r7, lr}
 8011260:	b086      	sub	sp, #24
 8011262:	af02      	add	r7, sp, #8
 8011264:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801126c:	69db      	ldr	r3, [r3, #28]
 801126e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011270:	2300      	movs	r3, #0
 8011272:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801127a:	2b01      	cmp	r3, #1
 801127c:	d002      	beq.n	8011284 <CDC_ProcessTransmission+0x26>
 801127e:	2b02      	cmp	r3, #2
 8011280:	d023      	beq.n	80112ca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8011282:	e07a      	b.n	801137a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011288:	68fa      	ldr	r2, [r7, #12]
 801128a:	8b12      	ldrh	r2, [r2, #24]
 801128c:	4293      	cmp	r3, r2
 801128e:	d90b      	bls.n	80112a8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	69d9      	ldr	r1, [r3, #28]
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	8b1a      	ldrh	r2, [r3, #24]
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	7b5b      	ldrb	r3, [r3, #13]
 801129c:	2001      	movs	r0, #1
 801129e:	9000      	str	r0, [sp, #0]
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f001 fea0 	bl	8012fe6 <USBH_BulkSendData>
 80112a6:	e00b      	b.n	80112c0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80112b0:	b29a      	uxth	r2, r3
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	7b5b      	ldrb	r3, [r3, #13]
 80112b6:	2001      	movs	r0, #1
 80112b8:	9000      	str	r0, [sp, #0]
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f001 fe93 	bl	8012fe6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2202      	movs	r2, #2
 80112c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80112c8:	e057      	b.n	801137a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	7b5b      	ldrb	r3, [r3, #13]
 80112ce:	4619      	mov	r1, r3
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f012 f833 	bl	802333c <USBH_LL_GetURBState>
 80112d6:	4603      	mov	r3, r0
 80112d8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80112da:	7afb      	ldrb	r3, [r7, #11]
 80112dc:	2b01      	cmp	r3, #1
 80112de:	d136      	bne.n	801134e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e4:	68fa      	ldr	r2, [r7, #12]
 80112e6:	8b12      	ldrh	r2, [r2, #24]
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d90e      	bls.n	801130a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112f0:	68fa      	ldr	r2, [r7, #12]
 80112f2:	8b12      	ldrh	r2, [r2, #24]
 80112f4:	1a9a      	subs	r2, r3, r2
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	69db      	ldr	r3, [r3, #28]
 80112fe:	68fa      	ldr	r2, [r7, #12]
 8011300:	8b12      	ldrh	r2, [r2, #24]
 8011302:	441a      	add	r2, r3
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	61da      	str	r2, [r3, #28]
 8011308:	e002      	b.n	8011310 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2200      	movs	r2, #0
 801130e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011314:	2b00      	cmp	r3, #0
 8011316:	d004      	beq.n	8011322 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2201      	movs	r2, #1
 801131c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011320:	e006      	b.n	8011330 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	2200      	movs	r2, #0
 8011326:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f000 f892 	bl	8011454 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2204      	movs	r2, #4
 8011334:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011344:	2200      	movs	r2, #0
 8011346:	4619      	mov	r1, r3
 8011348:	f002 f9d2 	bl	80136f0 <osMessagePut>
      break;
 801134c:	e014      	b.n	8011378 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 801134e:	7afb      	ldrb	r3, [r7, #11]
 8011350:	2b02      	cmp	r3, #2
 8011352:	d111      	bne.n	8011378 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2201      	movs	r2, #1
 8011358:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2204      	movs	r2, #4
 8011360:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011370:	2200      	movs	r2, #0
 8011372:	4619      	mov	r1, r3
 8011374:	f002 f9bc 	bl	80136f0 <osMessagePut>
      break;
 8011378:	bf00      	nop
  }
}
 801137a:	bf00      	nop
 801137c:	3710      	adds	r7, #16
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}

08011382 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8011382:	b580      	push	{r7, lr}
 8011384:	b086      	sub	sp, #24
 8011386:	af00      	add	r7, sp, #0
 8011388:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011390:	69db      	ldr	r3, [r3, #28]
 8011392:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011394:	2300      	movs	r3, #0
 8011396:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801139e:	2b03      	cmp	r3, #3
 80113a0:	d002      	beq.n	80113a8 <CDC_ProcessReception+0x26>
 80113a2:	2b04      	cmp	r3, #4
 80113a4:	d00e      	beq.n	80113c4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80113a6:	e051      	b.n	801144c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	6a19      	ldr	r1, [r3, #32]
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	8b5a      	ldrh	r2, [r3, #26]
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	7b1b      	ldrb	r3, [r3, #12]
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f001 fe3b 	bl	8013030 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	2204      	movs	r2, #4
 80113be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80113c2:	e043      	b.n	801144c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	7b1b      	ldrb	r3, [r3, #12]
 80113c8:	4619      	mov	r1, r3
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f011 ffb6 	bl	802333c <USBH_LL_GetURBState>
 80113d0:	4603      	mov	r3, r0
 80113d2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80113d4:	7cfb      	ldrb	r3, [r7, #19]
 80113d6:	2b01      	cmp	r3, #1
 80113d8:	d137      	bne.n	801144a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	7b1b      	ldrb	r3, [r3, #12]
 80113de:	4619      	mov	r1, r3
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f011 ff19 	bl	8023218 <USBH_LL_GetLastXferSize>
 80113e6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ec:	68fa      	ldr	r2, [r7, #12]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d016      	beq.n	8011420 <CDC_ProcessReception+0x9e>
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	8b5b      	ldrh	r3, [r3, #26]
 80113f6:	461a      	mov	r2, r3
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	4293      	cmp	r3, r2
 80113fc:	d910      	bls.n	8011420 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	1ad2      	subs	r2, r2, r3
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	6a1a      	ldr	r2, [r3, #32]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	441a      	add	r2, r3
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	2203      	movs	r2, #3
 801141a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801141e:	e006      	b.n	801142e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	2200      	movs	r2, #0
 8011424:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f000 f81d 	bl	8011468 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2204      	movs	r2, #4
 8011432:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011442:	2200      	movs	r2, #0
 8011444:	4619      	mov	r1, r3
 8011446:	f002 f953 	bl	80136f0 <osMessagePut>
      break;
 801144a:	bf00      	nop
  }
}
 801144c:	bf00      	nop
 801144e:	3718      	adds	r7, #24
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8011454:	b480      	push	{r7}
 8011456:	b083      	sub	sp, #12
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801145c:	bf00      	nop
 801145e:	370c      	adds	r7, #12
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr

08011468 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8011468:	b480      	push	{r7}
 801146a:	b083      	sub	sp, #12
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8011470:	bf00      	nop
 8011472:	370c      	adds	r7, #12
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr

0801147c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 801147c:	b480      	push	{r7}
 801147e:	b083      	sub	sp, #12
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8011484:	bf00      	nop
 8011486:	370c      	adds	r7, #12
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr

08011490 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8011490:	b5b0      	push	{r4, r5, r7, lr}
 8011492:	b090      	sub	sp, #64	; 0x40
 8011494:	af00      	add	r7, sp, #0
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	60b9      	str	r1, [r7, #8]
 801149a:	4613      	mov	r3, r2
 801149c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d101      	bne.n	80114a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80114a4:	2302      	movs	r3, #2
 80114a6:	e04d      	b.n	8011544 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	79fa      	ldrb	r2, [r7, #7]
 80114ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2200      	movs	r2, #0
 80114b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2200      	movs	r2, #0
 80114bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80114c0:	68f8      	ldr	r0, [r7, #12]
 80114c2:	f000 f847 	bl	8011554 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	2200      	movs	r2, #0
 80114ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	2200      	movs	r2, #0
 80114d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2200      	movs	r2, #0
 80114da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	2200      	movs	r2, #0
 80114e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d003      	beq.n	80114f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	68ba      	ldr	r2, [r7, #8]
 80114f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80114f4:	4b15      	ldr	r3, [pc, #84]	; (801154c <USBH_Init+0xbc>)
 80114f6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80114fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80114fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8011500:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011504:	2100      	movs	r1, #0
 8011506:	4618      	mov	r0, r3
 8011508:	f002 f8c9 	bl	801369e <osMessageCreate>
 801150c:	4602      	mov	r2, r0
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8011514:	4b0e      	ldr	r3, [pc, #56]	; (8011550 <USBH_Init+0xc0>)
 8011516:	f107 0414 	add.w	r4, r7, #20
 801151a:	461d      	mov	r5, r3
 801151c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801151e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011520:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011524:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8011528:	f107 0314 	add.w	r3, r7, #20
 801152c:	68f9      	ldr	r1, [r7, #12]
 801152e:	4618      	mov	r0, r3
 8011530:	f001 fed6 	bl	80132e0 <osThreadCreate>
 8011534:	4602      	mov	r2, r0
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 801153c:	68f8      	ldr	r0, [r7, #12]
 801153e:	f011 fdb7 	bl	80230b0 <USBH_LL_Init>

  return USBH_OK;
 8011542:	2300      	movs	r3, #0
}
 8011544:	4618      	mov	r0, r3
 8011546:	3740      	adds	r7, #64	; 0x40
 8011548:	46bd      	mov	sp, r7
 801154a:	bdb0      	pop	{r4, r5, r7, pc}
 801154c:	08024da8 	.word	0x08024da8
 8011550:	08024dc4 	.word	0x08024dc4

08011554 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 801155c:	2300      	movs	r3, #0
 801155e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8011560:	2300      	movs	r3, #0
 8011562:	60fb      	str	r3, [r7, #12]
 8011564:	e009      	b.n	801157a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8011566:	687a      	ldr	r2, [r7, #4]
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	33e0      	adds	r3, #224	; 0xe0
 801156c:	009b      	lsls	r3, r3, #2
 801156e:	4413      	add	r3, r2
 8011570:	2200      	movs	r2, #0
 8011572:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	3301      	adds	r3, #1
 8011578:	60fb      	str	r3, [r7, #12]
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	2b0f      	cmp	r3, #15
 801157e:	d9f2      	bls.n	8011566 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8011580:	2300      	movs	r3, #0
 8011582:	60fb      	str	r3, [r7, #12]
 8011584:	e009      	b.n	801159a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8011586:	687a      	ldr	r2, [r7, #4]
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	4413      	add	r3, r2
 801158c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011590:	2200      	movs	r2, #0
 8011592:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	3301      	adds	r3, #1
 8011598:	60fb      	str	r3, [r7, #12]
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115a0:	d3f1      	bcc.n	8011586 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2200      	movs	r2, #0
 80115a6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2200      	movs	r2, #0
 80115ac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2201      	movs	r2, #1
 80115b2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2200      	movs	r2, #0
 80115b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2201      	movs	r2, #1
 80115c0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2240      	movs	r2, #64	; 0x40
 80115c6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2200      	movs	r2, #0
 80115cc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2200      	movs	r2, #0
 80115d2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2201      	movs	r2, #1
 80115da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2200      	movs	r2, #0
 80115e2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2200      	movs	r2, #0
 80115ea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	331c      	adds	r3, #28
 80115f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80115f6:	2100      	movs	r1, #0
 80115f8:	4618      	mov	r0, r3
 80115fa:	f012 f986 	bl	802390a <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011608:	2100      	movs	r1, #0
 801160a:	4618      	mov	r0, r3
 801160c:	f012 f97d 	bl	802390a <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f203 3326 	addw	r3, r3, #806	; 0x326
 8011616:	2212      	movs	r2, #18
 8011618:	2100      	movs	r1, #0
 801161a:	4618      	mov	r0, r3
 801161c:	f012 f975 	bl	802390a <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011626:	223e      	movs	r2, #62	; 0x3e
 8011628:	2100      	movs	r1, #0
 801162a:	4618      	mov	r0, r3
 801162c:	f012 f96d 	bl	802390a <memset>

  return USBH_OK;
 8011630:	2300      	movs	r3, #0
}
 8011632:	4618      	mov	r0, r3
 8011634:	3710      	adds	r7, #16
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}

0801163a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 801163a:	b480      	push	{r7}
 801163c:	b085      	sub	sp, #20
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
 8011642:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8011644:	2300      	movs	r3, #0
 8011646:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d016      	beq.n	801167c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8011654:	2b00      	cmp	r3, #0
 8011656:	d10e      	bne.n	8011676 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801165e:	1c59      	adds	r1, r3, #1
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8011666:	687a      	ldr	r2, [r7, #4]
 8011668:	33de      	adds	r3, #222	; 0xde
 801166a:	6839      	ldr	r1, [r7, #0]
 801166c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8011670:	2300      	movs	r3, #0
 8011672:	73fb      	strb	r3, [r7, #15]
 8011674:	e004      	b.n	8011680 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8011676:	2302      	movs	r3, #2
 8011678:	73fb      	strb	r3, [r7, #15]
 801167a:	e001      	b.n	8011680 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801167c:	2302      	movs	r3, #2
 801167e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011680:	7bfb      	ldrb	r3, [r7, #15]
}
 8011682:	4618      	mov	r0, r3
 8011684:	3714      	adds	r7, #20
 8011686:	46bd      	mov	sp, r7
 8011688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168c:	4770      	bx	lr

0801168e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 801168e:	b480      	push	{r7}
 8011690:	b085      	sub	sp, #20
 8011692:	af00      	add	r7, sp, #0
 8011694:	6078      	str	r0, [r7, #4]
 8011696:	460b      	mov	r3, r1
 8011698:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 801169a:	2300      	movs	r3, #0
 801169c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80116a4:	78fa      	ldrb	r2, [r7, #3]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d204      	bcs.n	80116b4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	78fa      	ldrb	r2, [r7, #3]
 80116ae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80116b2:	e001      	b.n	80116b8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80116b4:	2302      	movs	r3, #2
 80116b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80116b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3714      	adds	r7, #20
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr

080116c6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80116c6:	b480      	push	{r7}
 80116c8:	b087      	sub	sp, #28
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	6078      	str	r0, [r7, #4]
 80116ce:	4608      	mov	r0, r1
 80116d0:	4611      	mov	r1, r2
 80116d2:	461a      	mov	r2, r3
 80116d4:	4603      	mov	r3, r0
 80116d6:	70fb      	strb	r3, [r7, #3]
 80116d8:	460b      	mov	r3, r1
 80116da:	70bb      	strb	r3, [r7, #2]
 80116dc:	4613      	mov	r3, r2
 80116de:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80116e0:	2300      	movs	r3, #0
 80116e2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80116e4:	2300      	movs	r3, #0
 80116e6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80116ee:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80116f0:	e025      	b.n	801173e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80116f2:	7dfb      	ldrb	r3, [r7, #23]
 80116f4:	221a      	movs	r2, #26
 80116f6:	fb02 f303 	mul.w	r3, r2, r3
 80116fa:	3308      	adds	r3, #8
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	4413      	add	r3, r2
 8011700:	3302      	adds	r3, #2
 8011702:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8011704:	693b      	ldr	r3, [r7, #16]
 8011706:	795b      	ldrb	r3, [r3, #5]
 8011708:	78fa      	ldrb	r2, [r7, #3]
 801170a:	429a      	cmp	r2, r3
 801170c:	d002      	beq.n	8011714 <USBH_FindInterface+0x4e>
 801170e:	78fb      	ldrb	r3, [r7, #3]
 8011710:	2bff      	cmp	r3, #255	; 0xff
 8011712:	d111      	bne.n	8011738 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8011718:	78ba      	ldrb	r2, [r7, #2]
 801171a:	429a      	cmp	r2, r3
 801171c:	d002      	beq.n	8011724 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801171e:	78bb      	ldrb	r3, [r7, #2]
 8011720:	2bff      	cmp	r3, #255	; 0xff
 8011722:	d109      	bne.n	8011738 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011728:	787a      	ldrb	r2, [r7, #1]
 801172a:	429a      	cmp	r2, r3
 801172c:	d002      	beq.n	8011734 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801172e:	787b      	ldrb	r3, [r7, #1]
 8011730:	2bff      	cmp	r3, #255	; 0xff
 8011732:	d101      	bne.n	8011738 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8011734:	7dfb      	ldrb	r3, [r7, #23]
 8011736:	e006      	b.n	8011746 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8011738:	7dfb      	ldrb	r3, [r7, #23]
 801173a:	3301      	adds	r3, #1
 801173c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801173e:	7dfb      	ldrb	r3, [r7, #23]
 8011740:	2b01      	cmp	r3, #1
 8011742:	d9d6      	bls.n	80116f2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8011744:	23ff      	movs	r3, #255	; 0xff
}
 8011746:	4618      	mov	r0, r3
 8011748:	371c      	adds	r7, #28
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr

08011752 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8011752:	b580      	push	{r7, lr}
 8011754:	b082      	sub	sp, #8
 8011756:	af00      	add	r7, sp, #0
 8011758:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f011 fce4 	bl	8023128 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8011760:	2101      	movs	r1, #1
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f011 fdfd 	bl	8023362 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8011768:	2300      	movs	r3, #0
}
 801176a:	4618      	mov	r0, r3
 801176c:	3708      	adds	r7, #8
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
	...

08011774 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b088      	sub	sp, #32
 8011778:	af04      	add	r7, sp, #16
 801177a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 801177c:	2302      	movs	r3, #2
 801177e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8011780:	2300      	movs	r3, #0
 8011782:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 801178a:	b2db      	uxtb	r3, r3
 801178c:	2b01      	cmp	r3, #1
 801178e:	d102      	bne.n	8011796 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2203      	movs	r2, #3
 8011794:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	781b      	ldrb	r3, [r3, #0]
 801179a:	b2db      	uxtb	r3, r3
 801179c:	2b0b      	cmp	r3, #11
 801179e:	f200 8247 	bhi.w	8011c30 <USBH_Process+0x4bc>
 80117a2:	a201      	add	r2, pc, #4	; (adr r2, 80117a8 <USBH_Process+0x34>)
 80117a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117a8:	080117d9 	.word	0x080117d9
 80117ac:	08011827 	.word	0x08011827
 80117b0:	080118ab 	.word	0x080118ab
 80117b4:	08011baf 	.word	0x08011baf
 80117b8:	08011c31 	.word	0x08011c31
 80117bc:	0801196b 	.word	0x0801196b
 80117c0:	08011b39 	.word	0x08011b39
 80117c4:	080119bd 	.word	0x080119bd
 80117c8:	080119f9 	.word	0x080119f9
 80117cc:	08011a33 	.word	0x08011a33
 80117d0:	08011a91 	.word	0x08011a91
 80117d4:	08011b97 	.word	0x08011b97
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	f000 8227 	beq.w	8011c34 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2201      	movs	r2, #1
 80117ea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80117ec:	20c8      	movs	r0, #200	; 0xc8
 80117ee:	f011 fdff 	bl	80233f0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f011 fcf5 	bl	80231e2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2200      	movs	r2, #0
 80117fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2200      	movs	r2, #0
 8011804:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2201      	movs	r2, #1
 801180c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801181c:	2200      	movs	r2, #0
 801181e:	4619      	mov	r1, r3
 8011820:	f001 ff66 	bl	80136f0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8011824:	e206      	b.n	8011c34 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 801182c:	2b01      	cmp	r3, #1
 801182e:	d107      	bne.n	8011840 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2200      	movs	r2, #0
 8011834:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2202      	movs	r2, #2
 801183c:	701a      	strb	r2, [r3, #0]
 801183e:	e025      	b.n	801188c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8011846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801184a:	d914      	bls.n	8011876 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8011852:	3301      	adds	r3, #1
 8011854:	b2da      	uxtb	r2, r3
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8011862:	2b03      	cmp	r3, #3
 8011864:	d903      	bls.n	801186e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	220d      	movs	r2, #13
 801186a:	701a      	strb	r2, [r3, #0]
 801186c:	e00e      	b.n	801188c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	2200      	movs	r2, #0
 8011872:	701a      	strb	r2, [r3, #0]
 8011874:	e00a      	b.n	801188c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801187c:	f103 020a 	add.w	r2, r3, #10
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8011886:	200a      	movs	r0, #10
 8011888:	f011 fdb2 	bl	80233f0 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2201      	movs	r2, #1
 8011890:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80118a0:	2200      	movs	r2, #0
 80118a2:	4619      	mov	r1, r3
 80118a4:	f001 ff24 	bl	80136f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80118a8:	e1cb      	b.n	8011c42 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d005      	beq.n	80118c0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80118ba:	2104      	movs	r1, #4
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80118c0:	2064      	movs	r0, #100	; 0x64
 80118c2:	f011 fd95 	bl	80233f0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f011 fc64 	bl	8023194 <USBH_LL_GetSpeed>
 80118cc:	4603      	mov	r3, r0
 80118ce:	461a      	mov	r2, r3
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2205      	movs	r2, #5
 80118da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80118dc:	2100      	movs	r1, #0
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f001 fbf3 	bl	80130ca <USBH_AllocPipe>
 80118e4:	4603      	mov	r3, r0
 80118e6:	461a      	mov	r2, r3
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80118ec:	2180      	movs	r1, #128	; 0x80
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f001 fbeb 	bl	80130ca <USBH_AllocPipe>
 80118f4:	4603      	mov	r3, r0
 80118f6:	461a      	mov	r2, r3
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	7919      	ldrb	r1, [r3, #4]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8011910:	b292      	uxth	r2, r2
 8011912:	9202      	str	r2, [sp, #8]
 8011914:	2200      	movs	r2, #0
 8011916:	9201      	str	r2, [sp, #4]
 8011918:	9300      	str	r3, [sp, #0]
 801191a:	4603      	mov	r3, r0
 801191c:	2280      	movs	r2, #128	; 0x80
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f001 fba4 	bl	801306c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	7959      	ldrb	r1, [r3, #5]
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8011934:	687a      	ldr	r2, [r7, #4]
 8011936:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8011938:	b292      	uxth	r2, r2
 801193a:	9202      	str	r2, [sp, #8]
 801193c:	2200      	movs	r2, #0
 801193e:	9201      	str	r2, [sp, #4]
 8011940:	9300      	str	r3, [sp, #0]
 8011942:	4603      	mov	r3, r0
 8011944:	2200      	movs	r2, #0
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f001 fb90 	bl	801306c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2201      	movs	r2, #1
 8011950:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011960:	2200      	movs	r2, #0
 8011962:	4619      	mov	r1, r3
 8011964:	f001 fec4 	bl	80136f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011968:	e16b      	b.n	8011c42 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 f96e 	bl	8011c4c <USBH_HandleEnum>
 8011970:	4603      	mov	r3, r0
 8011972:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8011974:	7bbb      	ldrb	r3, [r7, #14]
 8011976:	b2db      	uxtb	r3, r3
 8011978:	2b00      	cmp	r3, #0
 801197a:	f040 815d 	bne.w	8011c38 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2200      	movs	r2, #0
 8011982:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 801198c:	2b01      	cmp	r3, #1
 801198e:	d103      	bne.n	8011998 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2208      	movs	r2, #8
 8011994:	701a      	strb	r2, [r3, #0]
 8011996:	e002      	b.n	801199e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2207      	movs	r2, #7
 801199c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2205      	movs	r2, #5
 80119a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80119b2:	2200      	movs	r2, #0
 80119b4:	4619      	mov	r1, r3
 80119b6:	f001 fe9b 	bl	80136f0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80119ba:	e13d      	b.n	8011c38 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	f000 813a 	beq.w	8011c3c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80119ce:	2101      	movs	r1, #1
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2208      	movs	r2, #8
 80119d8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2205      	movs	r2, #5
 80119de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80119ee:	2200      	movs	r2, #0
 80119f0:	4619      	mov	r1, r3
 80119f2:	f001 fe7d 	bl	80136f0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80119f6:	e121      	b.n	8011c3c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	4619      	mov	r1, r3
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 fd00 	bl	8012408 <USBH_SetCfg>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d102      	bne.n	8011a14 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2209      	movs	r2, #9
 8011a12:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2201      	movs	r2, #1
 8011a18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011a28:	2200      	movs	r2, #0
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	f001 fe60 	bl	80136f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011a30:	e107      	b.n	8011c42 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8011a38:	f003 0320 	and.w	r3, r3, #32
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d015      	beq.n	8011a6c <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8011a40:	2101      	movs	r1, #1
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 fd03 	bl	801244e <USBH_SetFeature>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8011a4c:	7bbb      	ldrb	r3, [r7, #14]
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d103      	bne.n	8011a5c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	220a      	movs	r2, #10
 8011a58:	701a      	strb	r2, [r3, #0]
 8011a5a:	e00a      	b.n	8011a72 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8011a5c:	7bbb      	ldrb	r3, [r7, #14]
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	2b03      	cmp	r3, #3
 8011a62:	d106      	bne.n	8011a72 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	220a      	movs	r2, #10
 8011a68:	701a      	strb	r2, [r3, #0]
 8011a6a:	e002      	b.n	8011a72 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	220a      	movs	r2, #10
 8011a70:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2201      	movs	r2, #1
 8011a76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011a86:	2200      	movs	r2, #0
 8011a88:	4619      	mov	r1, r3
 8011a8a:	f001 fe31 	bl	80136f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011a8e:	e0d8      	b.n	8011c42 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d03f      	beq.n	8011b1a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	73fb      	strb	r3, [r7, #15]
 8011aa6:	e016      	b.n	8011ad6 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8011aa8:	7bfa      	ldrb	r2, [r7, #15]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	32de      	adds	r2, #222	; 0xde
 8011aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ab2:	791a      	ldrb	r2, [r3, #4]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d108      	bne.n	8011ad0 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8011abe:	7bfa      	ldrb	r2, [r7, #15]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	32de      	adds	r2, #222	; 0xde
 8011ac4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8011ace:	e005      	b.n	8011adc <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8011ad0:	7bfb      	ldrb	r3, [r7, #15]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	73fb      	strb	r3, [r7, #15]
 8011ad6:	7bfb      	ldrb	r3, [r7, #15]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d0e5      	beq.n	8011aa8 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d016      	beq.n	8011b14 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011aec:	689b      	ldr	r3, [r3, #8]
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	4798      	blx	r3
 8011af2:	4603      	mov	r3, r0
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d109      	bne.n	8011b0c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2206      	movs	r2, #6
 8011afc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011b04:	2103      	movs	r1, #3
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	4798      	blx	r3
 8011b0a:	e006      	b.n	8011b1a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	220d      	movs	r2, #13
 8011b10:	701a      	strb	r2, [r3, #0]
 8011b12:	e002      	b.n	8011b1a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	220d      	movs	r2, #13
 8011b18:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2205      	movs	r2, #5
 8011b1e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011b2e:	2200      	movs	r2, #0
 8011b30:	4619      	mov	r1, r3
 8011b32:	f001 fddd 	bl	80136f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011b36:	e084      	b.n	8011c42 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d017      	beq.n	8011b72 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011b48:	691b      	ldr	r3, [r3, #16]
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	4798      	blx	r3
 8011b4e:	4603      	mov	r3, r0
 8011b50:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8011b52:	7bbb      	ldrb	r3, [r7, #14]
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d103      	bne.n	8011b62 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	220b      	movs	r2, #11
 8011b5e:	701a      	strb	r2, [r3, #0]
 8011b60:	e00a      	b.n	8011b78 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8011b62:	7bbb      	ldrb	r3, [r7, #14]
 8011b64:	b2db      	uxtb	r3, r3
 8011b66:	2b02      	cmp	r3, #2
 8011b68:	d106      	bne.n	8011b78 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	220d      	movs	r2, #13
 8011b6e:	701a      	strb	r2, [r3, #0]
 8011b70:	e002      	b.n	8011b78 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	220d      	movs	r2, #13
 8011b76:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2205      	movs	r2, #5
 8011b7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	4619      	mov	r1, r3
 8011b90:	f001 fdae 	bl	80136f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011b94:	e055      	b.n	8011c42 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d04f      	beq.n	8011c40 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011ba6:	695b      	ldr	r3, [r3, #20]
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	4798      	blx	r3
      }
      break;
 8011bac:	e048      	b.n	8011c40 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f7ff fccc 	bl	8011554 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d009      	beq.n	8011bda <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d005      	beq.n	8011bf0 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011bea:	2105      	movs	r1, #5
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	2b01      	cmp	r3, #1
 8011bfa:	d107      	bne.n	8011c0c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f7ff fda4 	bl	8011752 <USBH_Start>
 8011c0a:	e002      	b.n	8011c12 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f011 fa8b 	bl	8023128 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2201      	movs	r2, #1
 8011c16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011c26:	2200      	movs	r2, #0
 8011c28:	4619      	mov	r1, r3
 8011c2a:	f001 fd61 	bl	80136f0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011c2e:	e008      	b.n	8011c42 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8011c30:	bf00      	nop
 8011c32:	e006      	b.n	8011c42 <USBH_Process+0x4ce>
      break;
 8011c34:	bf00      	nop
 8011c36:	e004      	b.n	8011c42 <USBH_Process+0x4ce>
      break;
 8011c38:	bf00      	nop
 8011c3a:	e002      	b.n	8011c42 <USBH_Process+0x4ce>
    break;
 8011c3c:	bf00      	nop
 8011c3e:	e000      	b.n	8011c42 <USBH_Process+0x4ce>
      break;
 8011c40:	bf00      	nop
  }
  return USBH_OK;
 8011c42:	2300      	movs	r3, #0
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3710      	adds	r7, #16
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}

08011c4c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b088      	sub	sp, #32
 8011c50:	af04      	add	r7, sp, #16
 8011c52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8011c54:	2301      	movs	r3, #1
 8011c56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8011c58:	2301      	movs	r3, #1
 8011c5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	785b      	ldrb	r3, [r3, #1]
 8011c60:	2b07      	cmp	r3, #7
 8011c62:	f200 8208 	bhi.w	8012076 <USBH_HandleEnum+0x42a>
 8011c66:	a201      	add	r2, pc, #4	; (adr r2, 8011c6c <USBH_HandleEnum+0x20>)
 8011c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c6c:	08011c8d 	.word	0x08011c8d
 8011c70:	08011d4b 	.word	0x08011d4b
 8011c74:	08011db5 	.word	0x08011db5
 8011c78:	08011e43 	.word	0x08011e43
 8011c7c:	08011ead 	.word	0x08011ead
 8011c80:	08011f1d 	.word	0x08011f1d
 8011c84:	08011fb9 	.word	0x08011fb9
 8011c88:	08012037 	.word	0x08012037
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8011c8c:	2108      	movs	r1, #8
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f000 faea 	bl	8012268 <USBH_Get_DevDesc>
 8011c94:	4603      	mov	r3, r0
 8011c96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011c98:	7bbb      	ldrb	r3, [r7, #14]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d130      	bne.n	8011d00 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2201      	movs	r2, #1
 8011cac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	7919      	ldrb	r1, [r3, #4]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8011cc2:	b292      	uxth	r2, r2
 8011cc4:	9202      	str	r2, [sp, #8]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	9201      	str	r2, [sp, #4]
 8011cca:	9300      	str	r3, [sp, #0]
 8011ccc:	4603      	mov	r3, r0
 8011cce:	2280      	movs	r2, #128	; 0x80
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f001 f9cb 	bl	801306c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	7959      	ldrb	r1, [r3, #5]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011ce6:	687a      	ldr	r2, [r7, #4]
 8011ce8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011cea:	b292      	uxth	r2, r2
 8011cec:	9202      	str	r2, [sp, #8]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	9201      	str	r2, [sp, #4]
 8011cf2:	9300      	str	r3, [sp, #0]
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f001 f9b7 	bl	801306c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8011cfe:	e1bc      	b.n	801207a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011d00:	7bbb      	ldrb	r3, [r7, #14]
 8011d02:	2b03      	cmp	r3, #3
 8011d04:	f040 81b9 	bne.w	801207a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011d0e:	3301      	adds	r3, #1
 8011d10:	b2da      	uxtb	r2, r3
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011d1e:	2b03      	cmp	r3, #3
 8011d20:	d903      	bls.n	8011d2a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	220d      	movs	r2, #13
 8011d26:	701a      	strb	r2, [r3, #0]
      break;
 8011d28:	e1a7      	b.n	801207a <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	795b      	ldrb	r3, [r3, #5]
 8011d2e:	4619      	mov	r1, r3
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f001 f9eb 	bl	801310c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	791b      	ldrb	r3, [r3, #4]
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f001 f9e5 	bl	801310c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2200      	movs	r2, #0
 8011d46:	701a      	strb	r2, [r3, #0]
      break;
 8011d48:	e197      	b.n	801207a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8011d4a:	2112      	movs	r1, #18
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f000 fa8b 	bl	8012268 <USBH_Get_DevDesc>
 8011d52:	4603      	mov	r3, r0
 8011d54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011d56:	7bbb      	ldrb	r3, [r7, #14]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d103      	bne.n	8011d64 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2202      	movs	r2, #2
 8011d60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011d62:	e18c      	b.n	801207e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011d64:	7bbb      	ldrb	r3, [r7, #14]
 8011d66:	2b03      	cmp	r3, #3
 8011d68:	f040 8189 	bne.w	801207e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011d72:	3301      	adds	r3, #1
 8011d74:	b2da      	uxtb	r2, r3
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011d82:	2b03      	cmp	r3, #3
 8011d84:	d903      	bls.n	8011d8e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	220d      	movs	r2, #13
 8011d8a:	701a      	strb	r2, [r3, #0]
      break;
 8011d8c:	e177      	b.n	801207e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	795b      	ldrb	r3, [r3, #5]
 8011d92:	4619      	mov	r1, r3
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f001 f9b9 	bl	801310c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	791b      	ldrb	r3, [r3, #4]
 8011d9e:	4619      	mov	r1, r3
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f001 f9b3 	bl	801310c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2200      	movs	r2, #0
 8011daa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2200      	movs	r2, #0
 8011db0:	701a      	strb	r2, [r3, #0]
      break;
 8011db2:	e164      	b.n	801207e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8011db4:	2101      	movs	r1, #1
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f000 fb02 	bl	80123c0 <USBH_SetAddress>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011dc0:	7bbb      	ldrb	r3, [r7, #14]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d132      	bne.n	8011e2c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8011dc6:	2002      	movs	r0, #2
 8011dc8:	f011 fb12 	bl	80233f0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2201      	movs	r2, #1
 8011dd0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2203      	movs	r2, #3
 8011dd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	7919      	ldrb	r1, [r3, #4]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011dea:	687a      	ldr	r2, [r7, #4]
 8011dec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8011dee:	b292      	uxth	r2, r2
 8011df0:	9202      	str	r2, [sp, #8]
 8011df2:	2200      	movs	r2, #0
 8011df4:	9201      	str	r2, [sp, #4]
 8011df6:	9300      	str	r3, [sp, #0]
 8011df8:	4603      	mov	r3, r0
 8011dfa:	2280      	movs	r2, #128	; 0x80
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f001 f935 	bl	801306c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	7959      	ldrb	r1, [r3, #5]
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011e12:	687a      	ldr	r2, [r7, #4]
 8011e14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011e16:	b292      	uxth	r2, r2
 8011e18:	9202      	str	r2, [sp, #8]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	9201      	str	r2, [sp, #4]
 8011e1e:	9300      	str	r3, [sp, #0]
 8011e20:	4603      	mov	r3, r0
 8011e22:	2200      	movs	r2, #0
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f001 f921 	bl	801306c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8011e2a:	e12a      	b.n	8012082 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011e2c:	7bbb      	ldrb	r3, [r7, #14]
 8011e2e:	2b03      	cmp	r3, #3
 8011e30:	f040 8127 	bne.w	8012082 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	220d      	movs	r2, #13
 8011e38:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	705a      	strb	r2, [r3, #1]
      break;
 8011e40:	e11f      	b.n	8012082 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8011e42:	2109      	movs	r1, #9
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f000 fa37 	bl	80122b8 <USBH_Get_CfgDesc>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011e4e:	7bbb      	ldrb	r3, [r7, #14]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d103      	bne.n	8011e5c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2204      	movs	r2, #4
 8011e58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011e5a:	e114      	b.n	8012086 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011e5c:	7bbb      	ldrb	r3, [r7, #14]
 8011e5e:	2b03      	cmp	r3, #3
 8011e60:	f040 8111 	bne.w	8012086 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	b2da      	uxtb	r2, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011e7a:	2b03      	cmp	r3, #3
 8011e7c:	d903      	bls.n	8011e86 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	220d      	movs	r2, #13
 8011e82:	701a      	strb	r2, [r3, #0]
      break;
 8011e84:	e0ff      	b.n	8012086 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	795b      	ldrb	r3, [r3, #5]
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	6878      	ldr	r0, [r7, #4]
 8011e8e:	f001 f93d 	bl	801310c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	791b      	ldrb	r3, [r3, #4]
 8011e96:	4619      	mov	r1, r3
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f001 f937 	bl	801310c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	701a      	strb	r2, [r3, #0]
      break;
 8011eaa:	e0ec      	b.n	8012086 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f000 f9ff 	bl	80122b8 <USBH_Get_CfgDesc>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011ebe:	7bbb      	ldrb	r3, [r7, #14]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d103      	bne.n	8011ecc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2205      	movs	r2, #5
 8011ec8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011eca:	e0de      	b.n	801208a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011ecc:	7bbb      	ldrb	r3, [r7, #14]
 8011ece:	2b03      	cmp	r3, #3
 8011ed0:	f040 80db 	bne.w	801208a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011eda:	3301      	adds	r3, #1
 8011edc:	b2da      	uxtb	r2, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8011eea:	2b03      	cmp	r3, #3
 8011eec:	d903      	bls.n	8011ef6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	220d      	movs	r2, #13
 8011ef2:	701a      	strb	r2, [r3, #0]
      break;
 8011ef4:	e0c9      	b.n	801208a <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	795b      	ldrb	r3, [r3, #5]
 8011efa:	4619      	mov	r1, r3
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f001 f905 	bl	801310c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	791b      	ldrb	r3, [r3, #4]
 8011f06:	4619      	mov	r1, r3
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f001 f8ff 	bl	801310c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2200      	movs	r2, #0
 8011f12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2200      	movs	r2, #0
 8011f18:	701a      	strb	r2, [r3, #0]
      break;
 8011f1a:	e0b6      	b.n	801208a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d036      	beq.n	8011f94 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8011f32:	23ff      	movs	r3, #255	; 0xff
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f000 f9e3 	bl	8012300 <USBH_Get_StringDesc>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011f3e:	7bbb      	ldrb	r3, [r7, #14]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d111      	bne.n	8011f68 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2206      	movs	r2, #6
 8011f48:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2205      	movs	r2, #5
 8011f4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011f5e:	2200      	movs	r2, #0
 8011f60:	4619      	mov	r1, r3
 8011f62:	f001 fbc5 	bl	80136f0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8011f66:	e092      	b.n	801208e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011f68:	7bbb      	ldrb	r3, [r7, #14]
 8011f6a:	2b03      	cmp	r3, #3
 8011f6c:	f040 808f 	bne.w	801208e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2206      	movs	r2, #6
 8011f74:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2205      	movs	r2, #5
 8011f7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	4619      	mov	r1, r3
 8011f8e:	f001 fbaf 	bl	80136f0 <osMessagePut>
      break;
 8011f92:	e07c      	b.n	801208e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2206      	movs	r2, #6
 8011f98:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2205      	movs	r2, #5
 8011f9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011fae:	2200      	movs	r2, #0
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	f001 fb9d 	bl	80136f0 <osMessagePut>
      break;
 8011fb6:	e06a      	b.n	801208e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d027      	beq.n	8012012 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8011fce:	23ff      	movs	r3, #255	; 0xff
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f000 f995 	bl	8012300 <USBH_Get_StringDesc>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011fda:	7bbb      	ldrb	r3, [r7, #14]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d103      	bne.n	8011fe8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2207      	movs	r2, #7
 8011fe4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8011fe6:	e054      	b.n	8012092 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011fe8:	7bbb      	ldrb	r3, [r7, #14]
 8011fea:	2b03      	cmp	r3, #3
 8011fec:	d151      	bne.n	8012092 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2207      	movs	r2, #7
 8011ff2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2205      	movs	r2, #5
 8011ff8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012008:	2200      	movs	r2, #0
 801200a:	4619      	mov	r1, r3
 801200c:	f001 fb70 	bl	80136f0 <osMessagePut>
      break;
 8012010:	e03f      	b.n	8012092 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2207      	movs	r2, #7
 8012016:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2205      	movs	r2, #5
 801201c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801202c:	2200      	movs	r2, #0
 801202e:	4619      	mov	r1, r3
 8012030:	f001 fb5e 	bl	80136f0 <osMessagePut>
      break;
 8012034:	e02d      	b.n	8012092 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 801203c:	2b00      	cmp	r3, #0
 801203e:	d017      	beq.n	8012070 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801204c:	23ff      	movs	r3, #255	; 0xff
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 f956 	bl	8012300 <USBH_Get_StringDesc>
 8012054:	4603      	mov	r3, r0
 8012056:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012058:	7bbb      	ldrb	r3, [r7, #14]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d102      	bne.n	8012064 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801205e:	2300      	movs	r3, #0
 8012060:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8012062:	e018      	b.n	8012096 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012064:	7bbb      	ldrb	r3, [r7, #14]
 8012066:	2b03      	cmp	r3, #3
 8012068:	d115      	bne.n	8012096 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 801206a:	2300      	movs	r3, #0
 801206c:	73fb      	strb	r3, [r7, #15]
      break;
 801206e:	e012      	b.n	8012096 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8012070:	2300      	movs	r3, #0
 8012072:	73fb      	strb	r3, [r7, #15]
      break;
 8012074:	e00f      	b.n	8012096 <USBH_HandleEnum+0x44a>

    default:
      break;
 8012076:	bf00      	nop
 8012078:	e00e      	b.n	8012098 <USBH_HandleEnum+0x44c>
      break;
 801207a:	bf00      	nop
 801207c:	e00c      	b.n	8012098 <USBH_HandleEnum+0x44c>
      break;
 801207e:	bf00      	nop
 8012080:	e00a      	b.n	8012098 <USBH_HandleEnum+0x44c>
      break;
 8012082:	bf00      	nop
 8012084:	e008      	b.n	8012098 <USBH_HandleEnum+0x44c>
      break;
 8012086:	bf00      	nop
 8012088:	e006      	b.n	8012098 <USBH_HandleEnum+0x44c>
      break;
 801208a:	bf00      	nop
 801208c:	e004      	b.n	8012098 <USBH_HandleEnum+0x44c>
      break;
 801208e:	bf00      	nop
 8012090:	e002      	b.n	8012098 <USBH_HandleEnum+0x44c>
      break;
 8012092:	bf00      	nop
 8012094:	e000      	b.n	8012098 <USBH_HandleEnum+0x44c>
      break;
 8012096:	bf00      	nop
  }
  return Status;
 8012098:	7bfb      	ldrb	r3, [r7, #15]
}
 801209a:	4618      	mov	r0, r3
 801209c:	3710      	adds	r7, #16
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop

080120a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	683a      	ldr	r2, [r7, #0]
 80120b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80120b6:	bf00      	nop
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr

080120c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b082      	sub	sp, #8
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80120d0:	1c5a      	adds	r2, r3, #1
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f000 f804 	bl	80120e6 <USBH_HandleSof>
}
 80120de:	bf00      	nop
 80120e0:	3708      	adds	r7, #8
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}

080120e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80120e6:	b580      	push	{r7, lr}
 80120e8:	b082      	sub	sp, #8
 80120ea:	af00      	add	r7, sp, #0
 80120ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	2b0b      	cmp	r3, #11
 80120f6:	d10a      	bne.n	801210e <USBH_HandleSof+0x28>
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d005      	beq.n	801210e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012108:	699b      	ldr	r3, [r3, #24]
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	4798      	blx	r3
  }
}
 801210e:	bf00      	nop
 8012110:	3708      	adds	r7, #8
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}

08012116 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8012116:	b580      	push	{r7, lr}
 8012118:	b082      	sub	sp, #8
 801211a:	af00      	add	r7, sp, #0
 801211c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	2201      	movs	r2, #1
 8012122:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2201      	movs	r2, #1
 801212a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801213a:	2200      	movs	r2, #0
 801213c:	4619      	mov	r1, r3
 801213e:	f001 fad7 	bl	80136f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8012142:	bf00      	nop
}
 8012144:	3708      	adds	r7, #8
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}

0801214a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801214a:	b480      	push	{r7}
 801214c:	b083      	sub	sp, #12
 801214e:	af00      	add	r7, sp, #0
 8012150:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2200      	movs	r2, #0
 8012156:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801215a:	bf00      	nop
}
 801215c:	370c      	adds	r7, #12
 801215e:	46bd      	mov	sp, r7
 8012160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012164:	4770      	bx	lr

08012166 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8012166:	b580      	push	{r7, lr}
 8012168:	b082      	sub	sp, #8
 801216a:	af00      	add	r7, sp, #0
 801216c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2201      	movs	r2, #1
 8012172:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2200      	movs	r2, #0
 801217a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2200      	movs	r2, #0
 8012182:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2201      	movs	r2, #1
 801218a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801219a:	2200      	movs	r2, #0
 801219c:	4619      	mov	r1, r3
 801219e:	f001 faa7 	bl	80136f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80121a2:	2300      	movs	r3, #0
}
 80121a4:	4618      	mov	r0, r3
 80121a6:	3708      	adds	r7, #8
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}

080121ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2201      	movs	r2, #1
 80121b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2200      	movs	r2, #0
 80121c0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f010 ffc6 	bl	802315e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	791b      	ldrb	r3, [r3, #4]
 80121d6:	4619      	mov	r1, r3
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f000 ff97 	bl	801310c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	795b      	ldrb	r3, [r3, #5]
 80121e2:	4619      	mov	r1, r3
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f000 ff91 	bl	801310c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2201      	movs	r2, #1
 80121ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80121fe:	2200      	movs	r2, #0
 8012200:	4619      	mov	r1, r3
 8012202:	f001 fa75 	bl	80136f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8012206:	2300      	movs	r3, #0
}
 8012208:	4618      	mov	r0, r3
 801220a:	3708      	adds	r7, #8
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b086      	sub	sp, #24
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 801221e:	f107 030c 	add.w	r3, r7, #12
 8012222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012226:	4618      	mov	r0, r3
 8012228:	f001 faa2 	bl	8013770 <osMessageGet>
    if (event.status == osEventMessage)
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	2b10      	cmp	r3, #16
 8012230:	d1f2      	bne.n	8012218 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f7ff fa9e 	bl	8011774 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012238:	e7ee      	b.n	8012218 <USBH_Process_OS+0x8>

0801223a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 801223a:	b580      	push	{r7, lr}
 801223c:	b082      	sub	sp, #8
 801223e:	af00      	add	r7, sp, #0
 8012240:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2201      	movs	r2, #1
 8012246:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012256:	2200      	movs	r2, #0
 8012258:	4619      	mov	r1, r3
 801225a:	f001 fa49 	bl	80136f0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 801225e:	2300      	movs	r3, #0
}
 8012260:	4618      	mov	r0, r3
 8012262:	3708      	adds	r7, #8
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b086      	sub	sp, #24
 801226c:	af02      	add	r7, sp, #8
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	460b      	mov	r3, r1
 8012272:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801227a:	78fb      	ldrb	r3, [r7, #3]
 801227c:	b29b      	uxth	r3, r3
 801227e:	9300      	str	r3, [sp, #0]
 8012280:	4613      	mov	r3, r2
 8012282:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012286:	2100      	movs	r1, #0
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f000 f864 	bl	8012356 <USBH_GetDescriptor>
 801228e:	4603      	mov	r3, r0
 8012290:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8012292:	7bfb      	ldrb	r3, [r7, #15]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d10a      	bne.n	80122ae <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f203 3026 	addw	r0, r3, #806	; 0x326
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80122a4:	78fa      	ldrb	r2, [r7, #3]
 80122a6:	b292      	uxth	r2, r2
 80122a8:	4619      	mov	r1, r3
 80122aa:	f000 f919 	bl	80124e0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80122ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3710      	adds	r7, #16
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}

080122b8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b086      	sub	sp, #24
 80122bc:	af02      	add	r7, sp, #8
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	460b      	mov	r3, r1
 80122c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	331c      	adds	r3, #28
 80122c8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80122ca:	887b      	ldrh	r3, [r7, #2]
 80122cc:	9300      	str	r3, [sp, #0]
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122d4:	2100      	movs	r1, #0
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 f83d 	bl	8012356 <USBH_GetDescriptor>
 80122dc:	4603      	mov	r3, r0
 80122de:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80122e0:	7bfb      	ldrb	r3, [r7, #15]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d107      	bne.n	80122f6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80122e6:	887b      	ldrh	r3, [r7, #2]
 80122e8:	461a      	mov	r2, r3
 80122ea:	68b9      	ldr	r1, [r7, #8]
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f000 f989 	bl	8012604 <USBH_ParseCfgDesc>
 80122f2:	4603      	mov	r3, r0
 80122f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80122f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b088      	sub	sp, #32
 8012304:	af02      	add	r7, sp, #8
 8012306:	60f8      	str	r0, [r7, #12]
 8012308:	607a      	str	r2, [r7, #4]
 801230a:	461a      	mov	r2, r3
 801230c:	460b      	mov	r3, r1
 801230e:	72fb      	strb	r3, [r7, #11]
 8012310:	4613      	mov	r3, r2
 8012312:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8012314:	7afb      	ldrb	r3, [r7, #11]
 8012316:	b29b      	uxth	r3, r3
 8012318:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801231c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8012324:	893b      	ldrh	r3, [r7, #8]
 8012326:	9300      	str	r3, [sp, #0]
 8012328:	460b      	mov	r3, r1
 801232a:	2100      	movs	r1, #0
 801232c:	68f8      	ldr	r0, [r7, #12]
 801232e:	f000 f812 	bl	8012356 <USBH_GetDescriptor>
 8012332:	4603      	mov	r3, r0
 8012334:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8012336:	7dfb      	ldrb	r3, [r7, #23]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d107      	bne.n	801234c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012342:	893a      	ldrh	r2, [r7, #8]
 8012344:	6879      	ldr	r1, [r7, #4]
 8012346:	4618      	mov	r0, r3
 8012348:	f000 fb00 	bl	801294c <USBH_ParseStringDesc>
  }

  return status;
 801234c:	7dfb      	ldrb	r3, [r7, #23]
}
 801234e:	4618      	mov	r0, r3
 8012350:	3718      	adds	r7, #24
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}

08012356 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8012356:	b580      	push	{r7, lr}
 8012358:	b084      	sub	sp, #16
 801235a:	af00      	add	r7, sp, #0
 801235c:	60f8      	str	r0, [r7, #12]
 801235e:	607b      	str	r3, [r7, #4]
 8012360:	460b      	mov	r3, r1
 8012362:	72fb      	strb	r3, [r7, #11]
 8012364:	4613      	mov	r3, r2
 8012366:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	789b      	ldrb	r3, [r3, #2]
 801236c:	2b01      	cmp	r3, #1
 801236e:	d11c      	bne.n	80123aa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8012370:	7afb      	ldrb	r3, [r7, #11]
 8012372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012376:	b2da      	uxtb	r2, r3
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2206      	movs	r2, #6
 8012380:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	893a      	ldrh	r2, [r7, #8]
 8012386:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8012388:	893b      	ldrh	r3, [r7, #8]
 801238a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801238e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012392:	d104      	bne.n	801239e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	f240 4209 	movw	r2, #1033	; 0x409
 801239a:	829a      	strh	r2, [r3, #20]
 801239c:	e002      	b.n	80123a4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2200      	movs	r2, #0
 80123a2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	8b3a      	ldrh	r2, [r7, #24]
 80123a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80123aa:	8b3b      	ldrh	r3, [r7, #24]
 80123ac:	461a      	mov	r2, r3
 80123ae:	6879      	ldr	r1, [r7, #4]
 80123b0:	68f8      	ldr	r0, [r7, #12]
 80123b2:	f000 fb19 	bl	80129e8 <USBH_CtlReq>
 80123b6:	4603      	mov	r3, r0
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	3710      	adds	r7, #16
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	460b      	mov	r3, r1
 80123ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	789b      	ldrb	r3, [r3, #2]
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d10f      	bne.n	80123f4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2200      	movs	r2, #0
 80123d8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2205      	movs	r2, #5
 80123de:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80123e0:	78fb      	ldrb	r3, [r7, #3]
 80123e2:	b29a      	uxth	r2, r3
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2200      	movs	r2, #0
 80123ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2200      	movs	r2, #0
 80123f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80123f4:	2200      	movs	r2, #0
 80123f6:	2100      	movs	r1, #0
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f000 faf5 	bl	80129e8 <USBH_CtlReq>
 80123fe:	4603      	mov	r3, r0
}
 8012400:	4618      	mov	r0, r3
 8012402:	3708      	adds	r7, #8
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}

08012408 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b082      	sub	sp, #8
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	460b      	mov	r3, r1
 8012412:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	789b      	ldrb	r3, [r3, #2]
 8012418:	2b01      	cmp	r3, #1
 801241a:	d10e      	bne.n	801243a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2200      	movs	r2, #0
 8012420:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2209      	movs	r2, #9
 8012426:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	887a      	ldrh	r2, [r7, #2]
 801242c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2200      	movs	r2, #0
 8012432:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2200      	movs	r2, #0
 8012438:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801243a:	2200      	movs	r2, #0
 801243c:	2100      	movs	r1, #0
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f000 fad2 	bl	80129e8 <USBH_CtlReq>
 8012444:	4603      	mov	r3, r0
}
 8012446:	4618      	mov	r0, r3
 8012448:	3708      	adds	r7, #8
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}

0801244e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b082      	sub	sp, #8
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
 8012456:	460b      	mov	r3, r1
 8012458:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	789b      	ldrb	r3, [r3, #2]
 801245e:	2b01      	cmp	r3, #1
 8012460:	d10f      	bne.n	8012482 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2200      	movs	r2, #0
 8012466:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2203      	movs	r2, #3
 801246c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801246e:	78fb      	ldrb	r3, [r7, #3]
 8012470:	b29a      	uxth	r2, r3
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2200      	movs	r2, #0
 801247a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2200      	movs	r2, #0
 8012480:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8012482:	2200      	movs	r2, #0
 8012484:	2100      	movs	r1, #0
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f000 faae 	bl	80129e8 <USBH_CtlReq>
 801248c:	4603      	mov	r3, r0
}
 801248e:	4618      	mov	r0, r3
 8012490:	3708      	adds	r7, #8
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}

08012496 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8012496:	b580      	push	{r7, lr}
 8012498:	b082      	sub	sp, #8
 801249a:	af00      	add	r7, sp, #0
 801249c:	6078      	str	r0, [r7, #4]
 801249e:	460b      	mov	r3, r1
 80124a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	789b      	ldrb	r3, [r3, #2]
 80124a6:	2b01      	cmp	r3, #1
 80124a8:	d10f      	bne.n	80124ca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2202      	movs	r2, #2
 80124ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2201      	movs	r2, #1
 80124b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2200      	movs	r2, #0
 80124ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80124bc:	78fb      	ldrb	r3, [r7, #3]
 80124be:	b29a      	uxth	r2, r3
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2200      	movs	r2, #0
 80124c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80124ca:	2200      	movs	r2, #0
 80124cc:	2100      	movs	r1, #0
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f000 fa8a 	bl	80129e8 <USBH_CtlReq>
 80124d4:	4603      	mov	r3, r0
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3708      	adds	r7, #8
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
	...

080124e0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 80124e0:	b480      	push	{r7}
 80124e2:	b085      	sub	sp, #20
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	4613      	mov	r3, r2
 80124ec:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	781a      	ldrb	r2, [r3, #0]
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	785a      	ldrb	r2, [r3, #1]
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	3302      	adds	r3, #2
 8012502:	781b      	ldrb	r3, [r3, #0]
 8012504:	b29a      	uxth	r2, r3
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	3303      	adds	r3, #3
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	b29b      	uxth	r3, r3
 801250e:	021b      	lsls	r3, r3, #8
 8012510:	b29b      	uxth	r3, r3
 8012512:	4313      	orrs	r3, r2
 8012514:	b29a      	uxth	r2, r3
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	791a      	ldrb	r2, [r3, #4]
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	795a      	ldrb	r2, [r3, #5]
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	799a      	ldrb	r2, [r3, #6]
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	79da      	ldrb	r2, [r3, #7]
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	79db      	ldrb	r3, [r3, #7]
 801253e:	2b20      	cmp	r3, #32
 8012540:	dc0f      	bgt.n	8012562 <USBH_ParseDevDesc+0x82>
 8012542:	2b08      	cmp	r3, #8
 8012544:	db14      	blt.n	8012570 <USBH_ParseDevDesc+0x90>
 8012546:	3b08      	subs	r3, #8
 8012548:	4a2d      	ldr	r2, [pc, #180]	; (8012600 <USBH_ParseDevDesc+0x120>)
 801254a:	fa22 f303 	lsr.w	r3, r2, r3
 801254e:	f003 0301 	and.w	r3, r3, #1
 8012552:	2b00      	cmp	r3, #0
 8012554:	bf14      	ite	ne
 8012556:	2301      	movne	r3, #1
 8012558:	2300      	moveq	r3, #0
 801255a:	b2db      	uxtb	r3, r3
 801255c:	2b00      	cmp	r3, #0
 801255e:	d102      	bne.n	8012566 <USBH_ParseDevDesc+0x86>
 8012560:	e006      	b.n	8012570 <USBH_ParseDevDesc+0x90>
 8012562:	2b40      	cmp	r3, #64	; 0x40
 8012564:	d104      	bne.n	8012570 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	79da      	ldrb	r2, [r3, #7]
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	71da      	strb	r2, [r3, #7]
      break;
 801256e:	e003      	b.n	8012578 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	2240      	movs	r2, #64	; 0x40
 8012574:	71da      	strb	r2, [r3, #7]
      break;
 8012576:	bf00      	nop
  }

  if (length > 8U)
 8012578:	88fb      	ldrh	r3, [r7, #6]
 801257a:	2b08      	cmp	r3, #8
 801257c:	d939      	bls.n	80125f2 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	3308      	adds	r3, #8
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	b29a      	uxth	r2, r3
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	3309      	adds	r3, #9
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	b29b      	uxth	r3, r3
 801258e:	021b      	lsls	r3, r3, #8
 8012590:	b29b      	uxth	r3, r3
 8012592:	4313      	orrs	r3, r2
 8012594:	b29a      	uxth	r2, r3
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	330a      	adds	r3, #10
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	b29a      	uxth	r2, r3
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	330b      	adds	r3, #11
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	021b      	lsls	r3, r3, #8
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	4313      	orrs	r3, r2
 80125b0:	b29a      	uxth	r2, r3
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	330c      	adds	r3, #12
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	b29a      	uxth	r2, r3
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	330d      	adds	r3, #13
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	b29b      	uxth	r3, r3
 80125c6:	021b      	lsls	r3, r3, #8
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	4313      	orrs	r3, r2
 80125cc:	b29a      	uxth	r2, r3
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	7b9a      	ldrb	r2, [r3, #14]
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	7bda      	ldrb	r2, [r3, #15]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	7c1a      	ldrb	r2, [r3, #16]
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	7c5a      	ldrb	r2, [r3, #17]
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	745a      	strb	r2, [r3, #17]
  }
}
 80125f2:	bf00      	nop
 80125f4:	3714      	adds	r7, #20
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr
 80125fe:	bf00      	nop
 8012600:	01000101 	.word	0x01000101

08012604 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b08c      	sub	sp, #48	; 0x30
 8012608:	af00      	add	r7, sp, #0
 801260a:	60f8      	str	r0, [r7, #12]
 801260c:	60b9      	str	r1, [r7, #8]
 801260e:	4613      	mov	r3, r2
 8012610:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8012618:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801261a:	2300      	movs	r3, #0
 801261c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8012624:	2300      	movs	r3, #0
 8012626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 801262a:	2300      	movs	r3, #0
 801262c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	781a      	ldrb	r2, [r3, #0]
 8012638:	6a3b      	ldr	r3, [r7, #32]
 801263a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	785a      	ldrb	r2, [r3, #1]
 8012640:	6a3b      	ldr	r3, [r7, #32]
 8012642:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	3302      	adds	r3, #2
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	b29a      	uxth	r2, r3
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	3303      	adds	r3, #3
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	b29b      	uxth	r3, r3
 8012654:	021b      	lsls	r3, r3, #8
 8012656:	b29b      	uxth	r3, r3
 8012658:	4313      	orrs	r3, r2
 801265a:	b29b      	uxth	r3, r3
 801265c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012660:	bf28      	it	cs
 8012662:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8012666:	b29a      	uxth	r2, r3
 8012668:	6a3b      	ldr	r3, [r7, #32]
 801266a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	791a      	ldrb	r2, [r3, #4]
 8012670:	6a3b      	ldr	r3, [r7, #32]
 8012672:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	795a      	ldrb	r2, [r3, #5]
 8012678:	6a3b      	ldr	r3, [r7, #32]
 801267a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	799a      	ldrb	r2, [r3, #6]
 8012680:	6a3b      	ldr	r3, [r7, #32]
 8012682:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	79da      	ldrb	r2, [r3, #7]
 8012688:	6a3b      	ldr	r3, [r7, #32]
 801268a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	7a1a      	ldrb	r2, [r3, #8]
 8012690:	6a3b      	ldr	r3, [r7, #32]
 8012692:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8012694:	6a3b      	ldr	r3, [r7, #32]
 8012696:	781b      	ldrb	r3, [r3, #0]
 8012698:	2b09      	cmp	r3, #9
 801269a:	d002      	beq.n	80126a2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 801269c:	6a3b      	ldr	r3, [r7, #32]
 801269e:	2209      	movs	r2, #9
 80126a0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80126a2:	88fb      	ldrh	r3, [r7, #6]
 80126a4:	2b09      	cmp	r3, #9
 80126a6:	f240 8099 	bls.w	80127dc <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 80126aa:	2309      	movs	r3, #9
 80126ac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80126ae:	2300      	movs	r3, #0
 80126b0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80126b2:	e07d      	b.n	80127b0 <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80126b4:	f107 0316 	add.w	r3, r7, #22
 80126b8:	4619      	mov	r1, r3
 80126ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126bc:	f000 f979 	bl	80129b2 <USBH_GetNextDesc>
 80126c0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80126c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c4:	785b      	ldrb	r3, [r3, #1]
 80126c6:	2b04      	cmp	r3, #4
 80126c8:	d172      	bne.n	80127b0 <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80126ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	2b09      	cmp	r3, #9
 80126d0:	d002      	beq.n	80126d8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80126d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d4:	2209      	movs	r2, #9
 80126d6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80126d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126dc:	221a      	movs	r2, #26
 80126de:	fb02 f303 	mul.w	r3, r2, r3
 80126e2:	3308      	adds	r3, #8
 80126e4:	6a3a      	ldr	r2, [r7, #32]
 80126e6:	4413      	add	r3, r2
 80126e8:	3302      	adds	r3, #2
 80126ea:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80126ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126ee:	69f8      	ldr	r0, [r7, #28]
 80126f0:	f000 f87a 	bl	80127e8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80126f4:	2300      	movs	r3, #0
 80126f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80126fa:	2300      	movs	r3, #0
 80126fc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80126fe:	e03f      	b.n	8012780 <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8012700:	f107 0316 	add.w	r3, r7, #22
 8012704:	4619      	mov	r1, r3
 8012706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012708:	f000 f953 	bl	80129b2 <USBH_GetNextDesc>
 801270c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012710:	785b      	ldrb	r3, [r3, #1]
 8012712:	2b05      	cmp	r3, #5
 8012714:	d134      	bne.n	8012780 <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	795b      	ldrb	r3, [r3, #5]
 801271a:	2b01      	cmp	r3, #1
 801271c:	d10f      	bne.n	801273e <USBH_ParseCfgDesc+0x13a>
 801271e:	69fb      	ldr	r3, [r7, #28]
 8012720:	799b      	ldrb	r3, [r3, #6]
 8012722:	2b02      	cmp	r3, #2
 8012724:	d10b      	bne.n	801273e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8012726:	69fb      	ldr	r3, [r7, #28]
 8012728:	79db      	ldrb	r3, [r3, #7]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d10b      	bne.n	8012746 <USBH_ParseCfgDesc+0x142>
 801272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	2b09      	cmp	r3, #9
 8012734:	d007      	beq.n	8012746 <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 8012736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012738:	2209      	movs	r2, #9
 801273a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801273c:	e003      	b.n	8012746 <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 801273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012740:	2207      	movs	r2, #7
 8012742:	701a      	strb	r2, [r3, #0]
 8012744:	e000      	b.n	8012748 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8012746:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8012748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801274c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012750:	3201      	adds	r2, #1
 8012752:	00d2      	lsls	r2, r2, #3
 8012754:	211a      	movs	r1, #26
 8012756:	fb01 f303 	mul.w	r3, r1, r3
 801275a:	4413      	add	r3, r2
 801275c:	3308      	adds	r3, #8
 801275e:	6a3a      	ldr	r2, [r7, #32]
 8012760:	4413      	add	r3, r2
 8012762:	3304      	adds	r3, #4
 8012764:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8012766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012768:	69b9      	ldr	r1, [r7, #24]
 801276a:	68f8      	ldr	r0, [r7, #12]
 801276c:	f000 f86c 	bl	8012848 <USBH_ParseEPDesc>
 8012770:	4603      	mov	r3, r0
 8012772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8012776:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801277a:	3301      	adds	r3, #1
 801277c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	791b      	ldrb	r3, [r3, #4]
 8012784:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012788:	429a      	cmp	r2, r3
 801278a:	d204      	bcs.n	8012796 <USBH_ParseCfgDesc+0x192>
 801278c:	6a3b      	ldr	r3, [r7, #32]
 801278e:	885a      	ldrh	r2, [r3, #2]
 8012790:	8afb      	ldrh	r3, [r7, #22]
 8012792:	429a      	cmp	r2, r3
 8012794:	d8b4      	bhi.n	8012700 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8012796:	69fb      	ldr	r3, [r7, #28]
 8012798:	791b      	ldrb	r3, [r3, #4]
 801279a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801279e:	429a      	cmp	r2, r3
 80127a0:	d201      	bcs.n	80127a6 <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 80127a2:	2303      	movs	r3, #3
 80127a4:	e01c      	b.n	80127e0 <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 80127a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127aa:	3301      	adds	r3, #1
 80127ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80127b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127b4:	2b01      	cmp	r3, #1
 80127b6:	d805      	bhi.n	80127c4 <USBH_ParseCfgDesc+0x1c0>
 80127b8:	6a3b      	ldr	r3, [r7, #32]
 80127ba:	885a      	ldrh	r2, [r3, #2]
 80127bc:	8afb      	ldrh	r3, [r7, #22]
 80127be:	429a      	cmp	r2, r3
 80127c0:	f63f af78 	bhi.w	80126b4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80127c4:	6a3b      	ldr	r3, [r7, #32]
 80127c6:	791b      	ldrb	r3, [r3, #4]
 80127c8:	2b02      	cmp	r3, #2
 80127ca:	bf28      	it	cs
 80127cc:	2302      	movcs	r3, #2
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d201      	bcs.n	80127dc <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 80127d8:	2303      	movs	r3, #3
 80127da:	e001      	b.n	80127e0 <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 80127dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3730      	adds	r7, #48	; 0x30
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b083      	sub	sp, #12
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	781a      	ldrb	r2, [r3, #0]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	785a      	ldrb	r2, [r3, #1]
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	789a      	ldrb	r2, [r3, #2]
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	78da      	ldrb	r2, [r3, #3]
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	791a      	ldrb	r2, [r3, #4]
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	795a      	ldrb	r2, [r3, #5]
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	799a      	ldrb	r2, [r3, #6]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	79da      	ldrb	r2, [r3, #7]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	7a1a      	ldrb	r2, [r3, #8]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	721a      	strb	r2, [r3, #8]
}
 801283a:	bf00      	nop
 801283c:	370c      	adds	r7, #12
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr
	...

08012848 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 8012848:	b480      	push	{r7}
 801284a:	b087      	sub	sp, #28
 801284c:	af00      	add	r7, sp, #0
 801284e:	60f8      	str	r0, [r7, #12]
 8012850:	60b9      	str	r1, [r7, #8]
 8012852:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8012854:	2300      	movs	r3, #0
 8012856:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	781a      	ldrb	r2, [r3, #0]
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	785a      	ldrb	r2, [r3, #1]
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	789a      	ldrb	r2, [r3, #2]
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	78da      	ldrb	r2, [r3, #3]
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	3304      	adds	r3, #4
 801287c:	781b      	ldrb	r3, [r3, #0]
 801287e:	b29a      	uxth	r2, r3
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	3305      	adds	r3, #5
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	b29b      	uxth	r3, r3
 8012888:	021b      	lsls	r3, r3, #8
 801288a:	b29b      	uxth	r3, r3
 801288c:	4313      	orrs	r3, r2
 801288e:	b29a      	uxth	r2, r3
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	799a      	ldrb	r2, [r3, #6]
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	889b      	ldrh	r3, [r3, #4]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d102      	bne.n	80128aa <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80128a4:	2303      	movs	r3, #3
 80128a6:	75fb      	strb	r3, [r7, #23]
 80128a8:	e00d      	b.n	80128c6 <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	889a      	ldrh	r2, [r3, #4]
 80128ae:	4b26      	ldr	r3, [pc, #152]	; (8012948 <USBH_ParseEPDesc+0x100>)
 80128b0:	4013      	ands	r3, r2
 80128b2:	b29a      	uxth	r2, r3
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	889b      	ldrh	r3, [r3, #4]
 80128bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80128c0:	b29a      	uxth	r2, r3
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d116      	bne.n	80128fe <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	78db      	ldrb	r3, [r3, #3]
 80128d4:	f003 0303 	and.w	r3, r3, #3
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d005      	beq.n	80128e8 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	78db      	ldrb	r3, [r3, #3]
 80128e0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80128e4:	2b03      	cmp	r3, #3
 80128e6:	d127      	bne.n	8012938 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	799b      	ldrb	r3, [r3, #6]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d003      	beq.n	80128f8 <USBH_ParseEPDesc+0xb0>
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	799b      	ldrb	r3, [r3, #6]
 80128f4:	2b10      	cmp	r3, #16
 80128f6:	d91f      	bls.n	8012938 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 80128f8:	2303      	movs	r3, #3
 80128fa:	75fb      	strb	r3, [r7, #23]
 80128fc:	e01c      	b.n	8012938 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	78db      	ldrb	r3, [r3, #3]
 8012902:	f003 0303 	and.w	r3, r3, #3
 8012906:	2b01      	cmp	r3, #1
 8012908:	d10a      	bne.n	8012920 <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	799b      	ldrb	r3, [r3, #6]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d003      	beq.n	801291a <USBH_ParseEPDesc+0xd2>
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	799b      	ldrb	r3, [r3, #6]
 8012916:	2b10      	cmp	r3, #16
 8012918:	d90e      	bls.n	8012938 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 801291a:	2303      	movs	r3, #3
 801291c:	75fb      	strb	r3, [r7, #23]
 801291e:	e00b      	b.n	8012938 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	78db      	ldrb	r3, [r3, #3]
 8012924:	f003 0303 	and.w	r3, r3, #3
 8012928:	2b03      	cmp	r3, #3
 801292a:	d105      	bne.n	8012938 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	799b      	ldrb	r3, [r3, #6]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d101      	bne.n	8012938 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8012934:	2303      	movs	r3, #3
 8012936:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8012938:	7dfb      	ldrb	r3, [r7, #23]
}
 801293a:	4618      	mov	r0, r3
 801293c:	371c      	adds	r7, #28
 801293e:	46bd      	mov	sp, r7
 8012940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012944:	4770      	bx	lr
 8012946:	bf00      	nop
 8012948:	fffff800 	.word	0xfffff800

0801294c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801294c:	b480      	push	{r7}
 801294e:	b087      	sub	sp, #28
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	4613      	mov	r3, r2
 8012958:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	3301      	adds	r3, #1
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	2b03      	cmp	r3, #3
 8012962:	d120      	bne.n	80129a6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	1e9a      	subs	r2, r3, #2
 801296a:	88fb      	ldrh	r3, [r7, #6]
 801296c:	4293      	cmp	r3, r2
 801296e:	bf28      	it	cs
 8012970:	4613      	movcs	r3, r2
 8012972:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	3302      	adds	r3, #2
 8012978:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801297a:	2300      	movs	r3, #0
 801297c:	82fb      	strh	r3, [r7, #22]
 801297e:	e00b      	b.n	8012998 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8012980:	8afb      	ldrh	r3, [r7, #22]
 8012982:	68fa      	ldr	r2, [r7, #12]
 8012984:	4413      	add	r3, r2
 8012986:	781a      	ldrb	r2, [r3, #0]
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	701a      	strb	r2, [r3, #0]
      pdest++;
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	3301      	adds	r3, #1
 8012990:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8012992:	8afb      	ldrh	r3, [r7, #22]
 8012994:	3302      	adds	r3, #2
 8012996:	82fb      	strh	r3, [r7, #22]
 8012998:	8afa      	ldrh	r2, [r7, #22]
 801299a:	8abb      	ldrh	r3, [r7, #20]
 801299c:	429a      	cmp	r2, r3
 801299e:	d3ef      	bcc.n	8012980 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	2200      	movs	r2, #0
 80129a4:	701a      	strb	r2, [r3, #0]
  }
}
 80129a6:	bf00      	nop
 80129a8:	371c      	adds	r7, #28
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	4770      	bx	lr

080129b2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80129b2:	b480      	push	{r7}
 80129b4:	b085      	sub	sp, #20
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
 80129ba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	881a      	ldrh	r2, [r3, #0]
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	b29b      	uxth	r3, r3
 80129c6:	4413      	add	r3, r2
 80129c8:	b29a      	uxth	r2, r3
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	4413      	add	r3, r2
 80129d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80129da:	68fb      	ldr	r3, [r7, #12]
}
 80129dc:	4618      	mov	r0, r3
 80129de:	3714      	adds	r7, #20
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr

080129e8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b086      	sub	sp, #24
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	60b9      	str	r1, [r7, #8]
 80129f2:	4613      	mov	r3, r2
 80129f4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80129f6:	2301      	movs	r3, #1
 80129f8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	789b      	ldrb	r3, [r3, #2]
 80129fe:	2b01      	cmp	r3, #1
 8012a00:	d002      	beq.n	8012a08 <USBH_CtlReq+0x20>
 8012a02:	2b02      	cmp	r3, #2
 8012a04:	d01d      	beq.n	8012a42 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8012a06:	e043      	b.n	8012a90 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	68ba      	ldr	r2, [r7, #8]
 8012a0c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	88fa      	ldrh	r2, [r7, #6]
 8012a12:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	2201      	movs	r2, #1
 8012a18:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	2202      	movs	r2, #2
 8012a1e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8012a20:	2301      	movs	r3, #1
 8012a22:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	2203      	movs	r2, #3
 8012a28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012a38:	2200      	movs	r2, #0
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	f000 fe58 	bl	80136f0 <osMessagePut>
      break;
 8012a40:	e026      	b.n	8012a90 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8012a42:	68f8      	ldr	r0, [r7, #12]
 8012a44:	f000 f82a 	bl	8012a9c <USBH_HandleControl>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8012a4c:	7dfb      	ldrb	r3, [r7, #23]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d002      	beq.n	8012a58 <USBH_CtlReq+0x70>
 8012a52:	7dfb      	ldrb	r3, [r7, #23]
 8012a54:	2b03      	cmp	r3, #3
 8012a56:	d106      	bne.n	8012a66 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2201      	movs	r2, #1
 8012a5c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	2200      	movs	r2, #0
 8012a62:	761a      	strb	r2, [r3, #24]
 8012a64:	e005      	b.n	8012a72 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8012a66:	7dfb      	ldrb	r3, [r7, #23]
 8012a68:	2b02      	cmp	r3, #2
 8012a6a:	d102      	bne.n	8012a72 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	2201      	movs	r2, #1
 8012a70:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	2203      	movs	r2, #3
 8012a76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012a86:	2200      	movs	r2, #0
 8012a88:	4619      	mov	r1, r3
 8012a8a:	f000 fe31 	bl	80136f0 <osMessagePut>
      break;
 8012a8e:	bf00      	nop
  }
  return status;
 8012a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a92:	4618      	mov	r0, r3
 8012a94:	3718      	adds	r7, #24
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd80      	pop	{r7, pc}
	...

08012a9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b086      	sub	sp, #24
 8012aa0:	af02      	add	r7, sp, #8
 8012aa2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	7e1b      	ldrb	r3, [r3, #24]
 8012ab0:	3b01      	subs	r3, #1
 8012ab2:	2b0a      	cmp	r3, #10
 8012ab4:	f200 8229 	bhi.w	8012f0a <USBH_HandleControl+0x46e>
 8012ab8:	a201      	add	r2, pc, #4	; (adr r2, 8012ac0 <USBH_HandleControl+0x24>)
 8012aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012abe:	bf00      	nop
 8012ac0:	08012aed 	.word	0x08012aed
 8012ac4:	08012b07 	.word	0x08012b07
 8012ac8:	08012ba9 	.word	0x08012ba9
 8012acc:	08012bcf 	.word	0x08012bcf
 8012ad0:	08012c5b 	.word	0x08012c5b
 8012ad4:	08012c85 	.word	0x08012c85
 8012ad8:	08012d47 	.word	0x08012d47
 8012adc:	08012d69 	.word	0x08012d69
 8012ae0:	08012dfb 	.word	0x08012dfb
 8012ae4:	08012e21 	.word	0x08012e21
 8012ae8:	08012eb3 	.word	0x08012eb3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f103 0110 	add.w	r1, r3, #16
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	795b      	ldrb	r3, [r3, #5]
 8012af6:	461a      	mov	r2, r3
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f000 fa17 	bl	8012f2c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2202      	movs	r2, #2
 8012b02:	761a      	strb	r2, [r3, #24]
      break;
 8012b04:	e20c      	b.n	8012f20 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	795b      	ldrb	r3, [r3, #5]
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f010 fc15 	bl	802333c <USBH_LL_GetURBState>
 8012b12:	4603      	mov	r3, r0
 8012b14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8012b16:	7bbb      	ldrb	r3, [r7, #14]
 8012b18:	2b01      	cmp	r3, #1
 8012b1a:	d12c      	bne.n	8012b76 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	7c1b      	ldrb	r3, [r3, #16]
 8012b20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012b24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	8adb      	ldrh	r3, [r3, #22]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d00a      	beq.n	8012b44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8012b2e:	7b7b      	ldrb	r3, [r7, #13]
 8012b30:	2b80      	cmp	r3, #128	; 0x80
 8012b32:	d103      	bne.n	8012b3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2203      	movs	r2, #3
 8012b38:	761a      	strb	r2, [r3, #24]
 8012b3a:	e00d      	b.n	8012b58 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2205      	movs	r2, #5
 8012b40:	761a      	strb	r2, [r3, #24]
 8012b42:	e009      	b.n	8012b58 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8012b44:	7b7b      	ldrb	r3, [r7, #13]
 8012b46:	2b80      	cmp	r3, #128	; 0x80
 8012b48:	d103      	bne.n	8012b52 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2209      	movs	r2, #9
 8012b4e:	761a      	strb	r2, [r3, #24]
 8012b50:	e002      	b.n	8012b58 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2207      	movs	r2, #7
 8012b56:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2203      	movs	r2, #3
 8012b5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	4619      	mov	r1, r3
 8012b70:	f000 fdbe 	bl	80136f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012b74:	e1cb      	b.n	8012f0e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8012b76:	7bbb      	ldrb	r3, [r7, #14]
 8012b78:	2b04      	cmp	r3, #4
 8012b7a:	d003      	beq.n	8012b84 <USBH_HandleControl+0xe8>
 8012b7c:	7bbb      	ldrb	r3, [r7, #14]
 8012b7e:	2b02      	cmp	r3, #2
 8012b80:	f040 81c5 	bne.w	8012f0e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	220b      	movs	r2, #11
 8012b88:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2203      	movs	r2, #3
 8012b8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	4619      	mov	r1, r3
 8012ba2:	f000 fda5 	bl	80136f0 <osMessagePut>
      break;
 8012ba6:	e1b2      	b.n	8012f0e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8012bae:	b29a      	uxth	r2, r3
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6899      	ldr	r1, [r3, #8]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	899a      	ldrh	r2, [r3, #12]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	791b      	ldrb	r3, [r3, #4]
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f000 f9f2 	bl	8012faa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2204      	movs	r2, #4
 8012bca:	761a      	strb	r2, [r3, #24]
      break;
 8012bcc:	e1a8      	b.n	8012f20 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	791b      	ldrb	r3, [r3, #4]
 8012bd2:	4619      	mov	r1, r3
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f010 fbb1 	bl	802333c <USBH_LL_GetURBState>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8012bde:	7bbb      	ldrb	r3, [r7, #14]
 8012be0:	2b01      	cmp	r3, #1
 8012be2:	d110      	bne.n	8012c06 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2209      	movs	r2, #9
 8012be8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2203      	movs	r2, #3
 8012bee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012bfe:	2200      	movs	r2, #0
 8012c00:	4619      	mov	r1, r3
 8012c02:	f000 fd75 	bl	80136f0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8012c06:	7bbb      	ldrb	r3, [r7, #14]
 8012c08:	2b05      	cmp	r3, #5
 8012c0a:	d110      	bne.n	8012c2e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8012c0c:	2303      	movs	r3, #3
 8012c0e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2203      	movs	r2, #3
 8012c14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012c24:	2200      	movs	r2, #0
 8012c26:	4619      	mov	r1, r3
 8012c28:	f000 fd62 	bl	80136f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012c2c:	e171      	b.n	8012f12 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8012c2e:	7bbb      	ldrb	r3, [r7, #14]
 8012c30:	2b04      	cmp	r3, #4
 8012c32:	f040 816e 	bne.w	8012f12 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	220b      	movs	r2, #11
 8012c3a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2203      	movs	r2, #3
 8012c40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012c50:	2200      	movs	r2, #0
 8012c52:	4619      	mov	r1, r3
 8012c54:	f000 fd4c 	bl	80136f0 <osMessagePut>
      break;
 8012c58:	e15b      	b.n	8012f12 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	6899      	ldr	r1, [r3, #8]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	899a      	ldrh	r2, [r3, #12]
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	795b      	ldrb	r3, [r3, #5]
 8012c66:	2001      	movs	r0, #1
 8012c68:	9000      	str	r0, [sp, #0]
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f000 f978 	bl	8012f60 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8012c76:	b29a      	uxth	r2, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2206      	movs	r2, #6
 8012c80:	761a      	strb	r2, [r3, #24]
      break;
 8012c82:	e14d      	b.n	8012f20 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	795b      	ldrb	r3, [r3, #5]
 8012c88:	4619      	mov	r1, r3
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f010 fb56 	bl	802333c <USBH_LL_GetURBState>
 8012c90:	4603      	mov	r3, r0
 8012c92:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012c94:	7bbb      	ldrb	r3, [r7, #14]
 8012c96:	2b01      	cmp	r3, #1
 8012c98:	d111      	bne.n	8012cbe <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2207      	movs	r2, #7
 8012c9e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2203      	movs	r2, #3
 8012ca4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	4619      	mov	r1, r3
 8012cb8:	f000 fd1a 	bl	80136f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012cbc:	e12b      	b.n	8012f16 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8012cbe:	7bbb      	ldrb	r3, [r7, #14]
 8012cc0:	2b05      	cmp	r3, #5
 8012cc2:	d113      	bne.n	8012cec <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	220c      	movs	r2, #12
 8012cc8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8012cca:	2303      	movs	r3, #3
 8012ccc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2203      	movs	r2, #3
 8012cd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	f000 fd03 	bl	80136f0 <osMessagePut>
      break;
 8012cea:	e114      	b.n	8012f16 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8012cec:	7bbb      	ldrb	r3, [r7, #14]
 8012cee:	2b02      	cmp	r3, #2
 8012cf0:	d111      	bne.n	8012d16 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2205      	movs	r2, #5
 8012cf6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2203      	movs	r2, #3
 8012cfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	4619      	mov	r1, r3
 8012d10:	f000 fcee 	bl	80136f0 <osMessagePut>
      break;
 8012d14:	e0ff      	b.n	8012f16 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8012d16:	7bbb      	ldrb	r3, [r7, #14]
 8012d18:	2b04      	cmp	r3, #4
 8012d1a:	f040 80fc 	bne.w	8012f16 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	220b      	movs	r2, #11
 8012d22:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8012d24:	2302      	movs	r3, #2
 8012d26:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2203      	movs	r2, #3
 8012d2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	4619      	mov	r1, r3
 8012d40:	f000 fcd6 	bl	80136f0 <osMessagePut>
      break;
 8012d44:	e0e7      	b.n	8012f16 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	791b      	ldrb	r3, [r3, #4]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	2100      	movs	r1, #0
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f000 f92b 	bl	8012faa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8012d5a:	b29a      	uxth	r2, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2208      	movs	r2, #8
 8012d64:	761a      	strb	r2, [r3, #24]

      break;
 8012d66:	e0db      	b.n	8012f20 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	791b      	ldrb	r3, [r3, #4]
 8012d6c:	4619      	mov	r1, r3
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f010 fae4 	bl	802333c <USBH_LL_GetURBState>
 8012d74:	4603      	mov	r3, r0
 8012d76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012d78:	7bbb      	ldrb	r3, [r7, #14]
 8012d7a:	2b01      	cmp	r3, #1
 8012d7c:	d113      	bne.n	8012da6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	220d      	movs	r2, #13
 8012d82:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8012d84:	2300      	movs	r3, #0
 8012d86:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2203      	movs	r2, #3
 8012d8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	4619      	mov	r1, r3
 8012da0:	f000 fca6 	bl	80136f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012da4:	e0b9      	b.n	8012f1a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8012da6:	7bbb      	ldrb	r3, [r7, #14]
 8012da8:	2b04      	cmp	r3, #4
 8012daa:	d111      	bne.n	8012dd0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	220b      	movs	r2, #11
 8012db0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2203      	movs	r2, #3
 8012db6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	4619      	mov	r1, r3
 8012dca:	f000 fc91 	bl	80136f0 <osMessagePut>
      break;
 8012dce:	e0a4      	b.n	8012f1a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8012dd0:	7bbb      	ldrb	r3, [r7, #14]
 8012dd2:	2b05      	cmp	r3, #5
 8012dd4:	f040 80a1 	bne.w	8012f1a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8012dd8:	2303      	movs	r3, #3
 8012dda:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2203      	movs	r2, #3
 8012de0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012df0:	2200      	movs	r2, #0
 8012df2:	4619      	mov	r1, r3
 8012df4:	f000 fc7c 	bl	80136f0 <osMessagePut>
      break;
 8012df8:	e08f      	b.n	8012f1a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	795b      	ldrb	r3, [r3, #5]
 8012dfe:	2201      	movs	r2, #1
 8012e00:	9200      	str	r2, [sp, #0]
 8012e02:	2200      	movs	r2, #0
 8012e04:	2100      	movs	r1, #0
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f000 f8aa 	bl	8012f60 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8012e12:	b29a      	uxth	r2, r3
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	220a      	movs	r2, #10
 8012e1c:	761a      	strb	r2, [r3, #24]
      break;
 8012e1e:	e07f      	b.n	8012f20 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	795b      	ldrb	r3, [r3, #5]
 8012e24:	4619      	mov	r1, r3
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f010 fa88 	bl	802333c <USBH_LL_GetURBState>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8012e30:	7bbb      	ldrb	r3, [r7, #14]
 8012e32:	2b01      	cmp	r3, #1
 8012e34:	d113      	bne.n	8012e5e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8012e36:	2300      	movs	r3, #0
 8012e38:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	220d      	movs	r2, #13
 8012e3e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2203      	movs	r2, #3
 8012e44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012e54:	2200      	movs	r2, #0
 8012e56:	4619      	mov	r1, r3
 8012e58:	f000 fc4a 	bl	80136f0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012e5c:	e05f      	b.n	8012f1e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8012e5e:	7bbb      	ldrb	r3, [r7, #14]
 8012e60:	2b02      	cmp	r3, #2
 8012e62:	d111      	bne.n	8012e88 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2209      	movs	r2, #9
 8012e68:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	2203      	movs	r2, #3
 8012e6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012e7e:	2200      	movs	r2, #0
 8012e80:	4619      	mov	r1, r3
 8012e82:	f000 fc35 	bl	80136f0 <osMessagePut>
      break;
 8012e86:	e04a      	b.n	8012f1e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8012e88:	7bbb      	ldrb	r3, [r7, #14]
 8012e8a:	2b04      	cmp	r3, #4
 8012e8c:	d147      	bne.n	8012f1e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	220b      	movs	r2, #11
 8012e92:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2203      	movs	r2, #3
 8012e98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	4619      	mov	r1, r3
 8012eac:	f000 fc20 	bl	80136f0 <osMessagePut>
      break;
 8012eb0:	e035      	b.n	8012f1e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	7e5b      	ldrb	r3, [r3, #25]
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	b2da      	uxtb	r2, r3
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	765a      	strb	r2, [r3, #25]
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	7e5b      	ldrb	r3, [r3, #25]
 8012ec2:	2b02      	cmp	r3, #2
 8012ec4:	d806      	bhi.n	8012ed4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2201      	movs	r2, #1
 8012eca:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2201      	movs	r2, #1
 8012ed0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8012ed2:	e025      	b.n	8012f20 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012eda:	2106      	movs	r1, #6
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	795b      	ldrb	r3, [r3, #5]
 8012eea:	4619      	mov	r1, r3
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f000 f90d 	bl	801310c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	791b      	ldrb	r3, [r3, #4]
 8012ef6:	4619      	mov	r1, r3
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f000 f907 	bl	801310c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2200      	movs	r2, #0
 8012f02:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8012f04:	2302      	movs	r3, #2
 8012f06:	73fb      	strb	r3, [r7, #15]
      break;
 8012f08:	e00a      	b.n	8012f20 <USBH_HandleControl+0x484>

    default:
      break;
 8012f0a:	bf00      	nop
 8012f0c:	e008      	b.n	8012f20 <USBH_HandleControl+0x484>
      break;
 8012f0e:	bf00      	nop
 8012f10:	e006      	b.n	8012f20 <USBH_HandleControl+0x484>
      break;
 8012f12:	bf00      	nop
 8012f14:	e004      	b.n	8012f20 <USBH_HandleControl+0x484>
      break;
 8012f16:	bf00      	nop
 8012f18:	e002      	b.n	8012f20 <USBH_HandleControl+0x484>
      break;
 8012f1a:	bf00      	nop
 8012f1c:	e000      	b.n	8012f20 <USBH_HandleControl+0x484>
      break;
 8012f1e:	bf00      	nop
  }

  return status;
 8012f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f22:	4618      	mov	r0, r3
 8012f24:	3710      	adds	r7, #16
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}
 8012f2a:	bf00      	nop

08012f2c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b088      	sub	sp, #32
 8012f30:	af04      	add	r7, sp, #16
 8012f32:	60f8      	str	r0, [r7, #12]
 8012f34:	60b9      	str	r1, [r7, #8]
 8012f36:	4613      	mov	r3, r2
 8012f38:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012f3a:	79f9      	ldrb	r1, [r7, #7]
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	9303      	str	r3, [sp, #12]
 8012f40:	2308      	movs	r3, #8
 8012f42:	9302      	str	r3, [sp, #8]
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	9301      	str	r3, [sp, #4]
 8012f48:	2300      	movs	r3, #0
 8012f4a:	9300      	str	r3, [sp, #0]
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	2200      	movs	r2, #0
 8012f50:	68f8      	ldr	r0, [r7, #12]
 8012f52:	f010 f9c2 	bl	80232da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8012f56:	2300      	movs	r3, #0
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3710      	adds	r7, #16
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b088      	sub	sp, #32
 8012f64:	af04      	add	r7, sp, #16
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	4611      	mov	r1, r2
 8012f6c:	461a      	mov	r2, r3
 8012f6e:	460b      	mov	r3, r1
 8012f70:	80fb      	strh	r3, [r7, #6]
 8012f72:	4613      	mov	r3, r2
 8012f74:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d001      	beq.n	8012f84 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8012f80:	2300      	movs	r3, #0
 8012f82:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012f84:	7979      	ldrb	r1, [r7, #5]
 8012f86:	7e3b      	ldrb	r3, [r7, #24]
 8012f88:	9303      	str	r3, [sp, #12]
 8012f8a:	88fb      	ldrh	r3, [r7, #6]
 8012f8c:	9302      	str	r3, [sp, #8]
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	9301      	str	r3, [sp, #4]
 8012f92:	2301      	movs	r3, #1
 8012f94:	9300      	str	r3, [sp, #0]
 8012f96:	2300      	movs	r3, #0
 8012f98:	2200      	movs	r2, #0
 8012f9a:	68f8      	ldr	r0, [r7, #12]
 8012f9c:	f010 f99d 	bl	80232da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8012fa0:	2300      	movs	r3, #0
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	3710      	adds	r7, #16
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}

08012faa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8012faa:	b580      	push	{r7, lr}
 8012fac:	b088      	sub	sp, #32
 8012fae:	af04      	add	r7, sp, #16
 8012fb0:	60f8      	str	r0, [r7, #12]
 8012fb2:	60b9      	str	r1, [r7, #8]
 8012fb4:	4611      	mov	r1, r2
 8012fb6:	461a      	mov	r2, r3
 8012fb8:	460b      	mov	r3, r1
 8012fba:	80fb      	strh	r3, [r7, #6]
 8012fbc:	4613      	mov	r3, r2
 8012fbe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012fc0:	7979      	ldrb	r1, [r7, #5]
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	9303      	str	r3, [sp, #12]
 8012fc6:	88fb      	ldrh	r3, [r7, #6]
 8012fc8:	9302      	str	r3, [sp, #8]
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	9301      	str	r3, [sp, #4]
 8012fce:	2301      	movs	r3, #1
 8012fd0:	9300      	str	r3, [sp, #0]
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	68f8      	ldr	r0, [r7, #12]
 8012fd8:	f010 f97f 	bl	80232da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8012fdc:	2300      	movs	r3, #0

}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3710      	adds	r7, #16
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}

08012fe6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8012fe6:	b580      	push	{r7, lr}
 8012fe8:	b088      	sub	sp, #32
 8012fea:	af04      	add	r7, sp, #16
 8012fec:	60f8      	str	r0, [r7, #12]
 8012fee:	60b9      	str	r1, [r7, #8]
 8012ff0:	4611      	mov	r1, r2
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	460b      	mov	r3, r1
 8012ff6:	80fb      	strh	r3, [r7, #6]
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013002:	2b00      	cmp	r3, #0
 8013004:	d001      	beq.n	801300a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8013006:	2300      	movs	r3, #0
 8013008:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801300a:	7979      	ldrb	r1, [r7, #5]
 801300c:	7e3b      	ldrb	r3, [r7, #24]
 801300e:	9303      	str	r3, [sp, #12]
 8013010:	88fb      	ldrh	r3, [r7, #6]
 8013012:	9302      	str	r3, [sp, #8]
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	9301      	str	r3, [sp, #4]
 8013018:	2301      	movs	r3, #1
 801301a:	9300      	str	r3, [sp, #0]
 801301c:	2302      	movs	r3, #2
 801301e:	2200      	movs	r2, #0
 8013020:	68f8      	ldr	r0, [r7, #12]
 8013022:	f010 f95a 	bl	80232da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8013026:	2300      	movs	r3, #0
}
 8013028:	4618      	mov	r0, r3
 801302a:	3710      	adds	r7, #16
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b088      	sub	sp, #32
 8013034:	af04      	add	r7, sp, #16
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	4611      	mov	r1, r2
 801303c:	461a      	mov	r2, r3
 801303e:	460b      	mov	r3, r1
 8013040:	80fb      	strh	r3, [r7, #6]
 8013042:	4613      	mov	r3, r2
 8013044:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013046:	7979      	ldrb	r1, [r7, #5]
 8013048:	2300      	movs	r3, #0
 801304a:	9303      	str	r3, [sp, #12]
 801304c:	88fb      	ldrh	r3, [r7, #6]
 801304e:	9302      	str	r3, [sp, #8]
 8013050:	68bb      	ldr	r3, [r7, #8]
 8013052:	9301      	str	r3, [sp, #4]
 8013054:	2301      	movs	r3, #1
 8013056:	9300      	str	r3, [sp, #0]
 8013058:	2302      	movs	r3, #2
 801305a:	2201      	movs	r2, #1
 801305c:	68f8      	ldr	r0, [r7, #12]
 801305e:	f010 f93c 	bl	80232da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8013062:	2300      	movs	r3, #0
}
 8013064:	4618      	mov	r0, r3
 8013066:	3710      	adds	r7, #16
 8013068:	46bd      	mov	sp, r7
 801306a:	bd80      	pop	{r7, pc}

0801306c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b086      	sub	sp, #24
 8013070:	af04      	add	r7, sp, #16
 8013072:	6078      	str	r0, [r7, #4]
 8013074:	4608      	mov	r0, r1
 8013076:	4611      	mov	r1, r2
 8013078:	461a      	mov	r2, r3
 801307a:	4603      	mov	r3, r0
 801307c:	70fb      	strb	r3, [r7, #3]
 801307e:	460b      	mov	r3, r1
 8013080:	70bb      	strb	r3, [r7, #2]
 8013082:	4613      	mov	r3, r2
 8013084:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8013086:	7878      	ldrb	r0, [r7, #1]
 8013088:	78ba      	ldrb	r2, [r7, #2]
 801308a:	78f9      	ldrb	r1, [r7, #3]
 801308c:	8b3b      	ldrh	r3, [r7, #24]
 801308e:	9302      	str	r3, [sp, #8]
 8013090:	7d3b      	ldrb	r3, [r7, #20]
 8013092:	9301      	str	r3, [sp, #4]
 8013094:	7c3b      	ldrb	r3, [r7, #16]
 8013096:	9300      	str	r3, [sp, #0]
 8013098:	4603      	mov	r3, r0
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f010 f8cf 	bl	802323e <USBH_LL_OpenPipe>

  return USBH_OK;
 80130a0:	2300      	movs	r3, #0
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3708      	adds	r7, #8
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}

080130aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80130aa:	b580      	push	{r7, lr}
 80130ac:	b082      	sub	sp, #8
 80130ae:	af00      	add	r7, sp, #0
 80130b0:	6078      	str	r0, [r7, #4]
 80130b2:	460b      	mov	r3, r1
 80130b4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80130b6:	78fb      	ldrb	r3, [r7, #3]
 80130b8:	4619      	mov	r1, r3
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f010 f8ee 	bl	802329c <USBH_LL_ClosePipe>

  return USBH_OK;
 80130c0:	2300      	movs	r3, #0
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3708      	adds	r7, #8
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}

080130ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80130ca:	b580      	push	{r7, lr}
 80130cc:	b084      	sub	sp, #16
 80130ce:	af00      	add	r7, sp, #0
 80130d0:	6078      	str	r0, [r7, #4]
 80130d2:	460b      	mov	r3, r1
 80130d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f000 f836 	bl	8013148 <USBH_GetFreePipe>
 80130dc:	4603      	mov	r3, r0
 80130de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80130e0:	89fb      	ldrh	r3, [r7, #14]
 80130e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130e6:	4293      	cmp	r3, r2
 80130e8:	d00a      	beq.n	8013100 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80130ea:	78fa      	ldrb	r2, [r7, #3]
 80130ec:	89fb      	ldrh	r3, [r7, #14]
 80130ee:	f003 030f 	and.w	r3, r3, #15
 80130f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80130f6:	6879      	ldr	r1, [r7, #4]
 80130f8:	33e0      	adds	r3, #224	; 0xe0
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	440b      	add	r3, r1
 80130fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8013100:	89fb      	ldrh	r3, [r7, #14]
 8013102:	b2db      	uxtb	r3, r3
}
 8013104:	4618      	mov	r0, r3
 8013106:	3710      	adds	r7, #16
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801310c:	b480      	push	{r7}
 801310e:	b083      	sub	sp, #12
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
 8013114:	460b      	mov	r3, r1
 8013116:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8013118:	78fb      	ldrb	r3, [r7, #3]
 801311a:	2b0f      	cmp	r3, #15
 801311c:	d80d      	bhi.n	801313a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801311e:	78fb      	ldrb	r3, [r7, #3]
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	33e0      	adds	r3, #224	; 0xe0
 8013124:	009b      	lsls	r3, r3, #2
 8013126:	4413      	add	r3, r2
 8013128:	685a      	ldr	r2, [r3, #4]
 801312a:	78fb      	ldrb	r3, [r7, #3]
 801312c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8013130:	6879      	ldr	r1, [r7, #4]
 8013132:	33e0      	adds	r3, #224	; 0xe0
 8013134:	009b      	lsls	r3, r3, #2
 8013136:	440b      	add	r3, r1
 8013138:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801313a:	2300      	movs	r3, #0
}
 801313c:	4618      	mov	r0, r3
 801313e:	370c      	adds	r7, #12
 8013140:	46bd      	mov	sp, r7
 8013142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013146:	4770      	bx	lr

08013148 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8013148:	b480      	push	{r7}
 801314a:	b085      	sub	sp, #20
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8013150:	2300      	movs	r3, #0
 8013152:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8013154:	2300      	movs	r3, #0
 8013156:	73fb      	strb	r3, [r7, #15]
 8013158:	e00f      	b.n	801317a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801315a:	7bfb      	ldrb	r3, [r7, #15]
 801315c:	687a      	ldr	r2, [r7, #4]
 801315e:	33e0      	adds	r3, #224	; 0xe0
 8013160:	009b      	lsls	r3, r3, #2
 8013162:	4413      	add	r3, r2
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801316a:	2b00      	cmp	r3, #0
 801316c:	d102      	bne.n	8013174 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801316e:	7bfb      	ldrb	r3, [r7, #15]
 8013170:	b29b      	uxth	r3, r3
 8013172:	e007      	b.n	8013184 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8013174:	7bfb      	ldrb	r3, [r7, #15]
 8013176:	3301      	adds	r3, #1
 8013178:	73fb      	strb	r3, [r7, #15]
 801317a:	7bfb      	ldrb	r3, [r7, #15]
 801317c:	2b0f      	cmp	r3, #15
 801317e:	d9ec      	bls.n	801315a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8013180:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8013184:	4618      	mov	r0, r3
 8013186:	3714      	adds	r7, #20
 8013188:	46bd      	mov	sp, r7
 801318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318e:	4770      	bx	lr

08013190 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013190:	b480      	push	{r7}
 8013192:	b087      	sub	sp, #28
 8013194:	af00      	add	r7, sp, #0
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	60b9      	str	r1, [r7, #8]
 801319a:	4613      	mov	r3, r2
 801319c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801319e:	2301      	movs	r3, #1
 80131a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80131a2:	2300      	movs	r3, #0
 80131a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80131a6:	4b1f      	ldr	r3, [pc, #124]	; (8013224 <FATFS_LinkDriverEx+0x94>)
 80131a8:	7a5b      	ldrb	r3, [r3, #9]
 80131aa:	b2db      	uxtb	r3, r3
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d131      	bne.n	8013214 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80131b0:	4b1c      	ldr	r3, [pc, #112]	; (8013224 <FATFS_LinkDriverEx+0x94>)
 80131b2:	7a5b      	ldrb	r3, [r3, #9]
 80131b4:	b2db      	uxtb	r3, r3
 80131b6:	461a      	mov	r2, r3
 80131b8:	4b1a      	ldr	r3, [pc, #104]	; (8013224 <FATFS_LinkDriverEx+0x94>)
 80131ba:	2100      	movs	r1, #0
 80131bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80131be:	4b19      	ldr	r3, [pc, #100]	; (8013224 <FATFS_LinkDriverEx+0x94>)
 80131c0:	7a5b      	ldrb	r3, [r3, #9]
 80131c2:	b2db      	uxtb	r3, r3
 80131c4:	4a17      	ldr	r2, [pc, #92]	; (8013224 <FATFS_LinkDriverEx+0x94>)
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	4413      	add	r3, r2
 80131ca:	68fa      	ldr	r2, [r7, #12]
 80131cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80131ce:	4b15      	ldr	r3, [pc, #84]	; (8013224 <FATFS_LinkDriverEx+0x94>)
 80131d0:	7a5b      	ldrb	r3, [r3, #9]
 80131d2:	b2db      	uxtb	r3, r3
 80131d4:	461a      	mov	r2, r3
 80131d6:	4b13      	ldr	r3, [pc, #76]	; (8013224 <FATFS_LinkDriverEx+0x94>)
 80131d8:	4413      	add	r3, r2
 80131da:	79fa      	ldrb	r2, [r7, #7]
 80131dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80131de:	4b11      	ldr	r3, [pc, #68]	; (8013224 <FATFS_LinkDriverEx+0x94>)
 80131e0:	7a5b      	ldrb	r3, [r3, #9]
 80131e2:	b2db      	uxtb	r3, r3
 80131e4:	1c5a      	adds	r2, r3, #1
 80131e6:	b2d1      	uxtb	r1, r2
 80131e8:	4a0e      	ldr	r2, [pc, #56]	; (8013224 <FATFS_LinkDriverEx+0x94>)
 80131ea:	7251      	strb	r1, [r2, #9]
 80131ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80131ee:	7dbb      	ldrb	r3, [r7, #22]
 80131f0:	3330      	adds	r3, #48	; 0x30
 80131f2:	b2da      	uxtb	r2, r3
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	3301      	adds	r3, #1
 80131fc:	223a      	movs	r2, #58	; 0x3a
 80131fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	3302      	adds	r3, #2
 8013204:	222f      	movs	r2, #47	; 0x2f
 8013206:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	3303      	adds	r3, #3
 801320c:	2200      	movs	r2, #0
 801320e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013210:	2300      	movs	r3, #0
 8013212:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013214:	7dfb      	ldrb	r3, [r7, #23]
}
 8013216:	4618      	mov	r0, r3
 8013218:	371c      	adds	r7, #28
 801321a:	46bd      	mov	sp, r7
 801321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013220:	4770      	bx	lr
 8013222:	bf00      	nop
 8013224:	20005a1c 	.word	0x20005a1c

08013228 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b082      	sub	sp, #8
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013232:	2200      	movs	r2, #0
 8013234:	6839      	ldr	r1, [r7, #0]
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f7ff ffaa 	bl	8013190 <FATFS_LinkDriverEx>
 801323c:	4603      	mov	r3, r0
}
 801323e:	4618      	mov	r0, r3
 8013240:	3708      	adds	r7, #8
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}

08013246 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013246:	b480      	push	{r7}
 8013248:	b085      	sub	sp, #20
 801324a:	af00      	add	r7, sp, #0
 801324c:	4603      	mov	r3, r0
 801324e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013250:	2300      	movs	r3, #0
 8013252:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013258:	2b84      	cmp	r3, #132	; 0x84
 801325a:	d005      	beq.n	8013268 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801325c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	4413      	add	r3, r2
 8013264:	3303      	adds	r3, #3
 8013266:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013268:	68fb      	ldr	r3, [r7, #12]
}
 801326a:	4618      	mov	r0, r3
 801326c:	3714      	adds	r7, #20
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr

08013276 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8013276:	b480      	push	{r7}
 8013278:	b083      	sub	sp, #12
 801327a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801327c:	f3ef 8305 	mrs	r3, IPSR
 8013280:	607b      	str	r3, [r7, #4]
  return(result);
 8013282:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8013284:	2b00      	cmp	r3, #0
 8013286:	bf14      	ite	ne
 8013288:	2301      	movne	r3, #1
 801328a:	2300      	moveq	r3, #0
 801328c:	b2db      	uxtb	r3, r3
}
 801328e:	4618      	mov	r0, r3
 8013290:	370c      	adds	r7, #12
 8013292:	46bd      	mov	sp, r7
 8013294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013298:	4770      	bx	lr

0801329a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801329a:	b580      	push	{r7, lr}
 801329c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801329e:	f001 febf 	bl	8015020 <vTaskStartScheduler>
  
  return osOK;
 80132a2:	2300      	movs	r3, #0
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80132ac:	f002 fb28 	bl	8015900 <xTaskGetSchedulerState>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b01      	cmp	r3, #1
 80132b4:	d101      	bne.n	80132ba <osKernelRunning+0x12>
    return 0;
 80132b6:	2300      	movs	r3, #0
 80132b8:	e000      	b.n	80132bc <osKernelRunning+0x14>
  else
    return 1;
 80132ba:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80132bc:	4618      	mov	r0, r3
 80132be:	bd80      	pop	{r7, pc}

080132c0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80132c4:	f7ff ffd7 	bl	8013276 <inHandlerMode>
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d003      	beq.n	80132d6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80132ce:	f001 ffd1 	bl	8015274 <xTaskGetTickCountFromISR>
 80132d2:	4603      	mov	r3, r0
 80132d4:	e002      	b.n	80132dc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80132d6:	f001 ffbd 	bl	8015254 <xTaskGetTickCount>
 80132da:	4603      	mov	r3, r0
  }
}
 80132dc:	4618      	mov	r0, r3
 80132de:	bd80      	pop	{r7, pc}

080132e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80132e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132e2:	b089      	sub	sp, #36	; 0x24
 80132e4:	af04      	add	r7, sp, #16
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	695b      	ldr	r3, [r3, #20]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d020      	beq.n	8013334 <osThreadCreate+0x54>
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	699b      	ldr	r3, [r3, #24]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d01c      	beq.n	8013334 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	685c      	ldr	r4, [r3, #4]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	691e      	ldr	r6, [r3, #16]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801330c:	4618      	mov	r0, r3
 801330e:	f7ff ff9a 	bl	8013246 <makeFreeRtosPriority>
 8013312:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	695b      	ldr	r3, [r3, #20]
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801331c:	9202      	str	r2, [sp, #8]
 801331e:	9301      	str	r3, [sp, #4]
 8013320:	9100      	str	r1, [sp, #0]
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	4632      	mov	r2, r6
 8013326:	4629      	mov	r1, r5
 8013328:	4620      	mov	r0, r4
 801332a:	f001 fbf3 	bl	8014b14 <xTaskCreateStatic>
 801332e:	4603      	mov	r3, r0
 8013330:	60fb      	str	r3, [r7, #12]
 8013332:	e01c      	b.n	801336e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	685c      	ldr	r4, [r3, #4]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013340:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013348:	4618      	mov	r0, r3
 801334a:	f7ff ff7c 	bl	8013246 <makeFreeRtosPriority>
 801334e:	4602      	mov	r2, r0
 8013350:	f107 030c 	add.w	r3, r7, #12
 8013354:	9301      	str	r3, [sp, #4]
 8013356:	9200      	str	r2, [sp, #0]
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	4632      	mov	r2, r6
 801335c:	4629      	mov	r1, r5
 801335e:	4620      	mov	r0, r4
 8013360:	f001 fc3b 	bl	8014bda <xTaskCreate>
 8013364:	4603      	mov	r3, r0
 8013366:	2b01      	cmp	r3, #1
 8013368:	d001      	beq.n	801336e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801336a:	2300      	movs	r3, #0
 801336c:	e000      	b.n	8013370 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801336e:	68fb      	ldr	r3, [r7, #12]
}
 8013370:	4618      	mov	r0, r3
 8013372:	3714      	adds	r7, #20
 8013374:	46bd      	mov	sp, r7
 8013376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013378 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b082      	sub	sp, #8
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f001 fd85 	bl	8014e90 <vTaskDelete>
  return osOK;
 8013386:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8013388:	4618      	mov	r0, r3
 801338a:	3708      	adds	r7, #8
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}

08013390 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b084      	sub	sp, #16
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d001      	beq.n	80133a6 <osDelay+0x16>
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	e000      	b.n	80133a8 <osDelay+0x18>
 80133a6:	2301      	movs	r3, #1
 80133a8:	4618      	mov	r0, r3
 80133aa:	f001 fe03 	bl	8014fb4 <vTaskDelay>
  
  return osOK;
 80133ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	3710      	adds	r7, #16
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}

080133b8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b082      	sub	sp, #8
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	685b      	ldr	r3, [r3, #4]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d007      	beq.n	80133d8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	4619      	mov	r1, r3
 80133ce:	2001      	movs	r0, #1
 80133d0:	f000 fc9f 	bl	8013d12 <xQueueCreateMutexStatic>
 80133d4:	4603      	mov	r3, r0
 80133d6:	e003      	b.n	80133e0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80133d8:	2001      	movs	r0, #1
 80133da:	f000 fc82 	bl	8013ce2 <xQueueCreateMutex>
 80133de:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	3708      	adds	r7, #8
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}

080133e8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b084      	sub	sp, #16
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
 80133f0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80133f2:	2300      	movs	r3, #0
 80133f4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d101      	bne.n	8013400 <osMutexWait+0x18>
    return osErrorParameter;
 80133fc:	2380      	movs	r3, #128	; 0x80
 80133fe:	e03a      	b.n	8013476 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8013400:	2300      	movs	r3, #0
 8013402:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801340a:	d103      	bne.n	8013414 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 801340c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013410:	60fb      	str	r3, [r7, #12]
 8013412:	e009      	b.n	8013428 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d006      	beq.n	8013428 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d101      	bne.n	8013428 <osMutexWait+0x40>
      ticks = 1;
 8013424:	2301      	movs	r3, #1
 8013426:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8013428:	f7ff ff25 	bl	8013276 <inHandlerMode>
 801342c:	4603      	mov	r3, r0
 801342e:	2b00      	cmp	r3, #0
 8013430:	d017      	beq.n	8013462 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8013432:	f107 0308 	add.w	r3, r7, #8
 8013436:	461a      	mov	r2, r3
 8013438:	2100      	movs	r1, #0
 801343a:	6878      	ldr	r0, [r7, #4]
 801343c:	f001 f92c 	bl	8014698 <xQueueReceiveFromISR>
 8013440:	4603      	mov	r3, r0
 8013442:	2b01      	cmp	r3, #1
 8013444:	d001      	beq.n	801344a <osMutexWait+0x62>
      return osErrorOS;
 8013446:	23ff      	movs	r3, #255	; 0xff
 8013448:	e015      	b.n	8013476 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d011      	beq.n	8013474 <osMutexWait+0x8c>
 8013450:	4b0b      	ldr	r3, [pc, #44]	; (8013480 <osMutexWait+0x98>)
 8013452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013456:	601a      	str	r2, [r3, #0]
 8013458:	f3bf 8f4f 	dsb	sy
 801345c:	f3bf 8f6f 	isb	sy
 8013460:	e008      	b.n	8013474 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8013462:	68f9      	ldr	r1, [r7, #12]
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f001 f803 	bl	8014470 <xQueueSemaphoreTake>
 801346a:	4603      	mov	r3, r0
 801346c:	2b01      	cmp	r3, #1
 801346e:	d001      	beq.n	8013474 <osMutexWait+0x8c>
    return osErrorOS;
 8013470:	23ff      	movs	r3, #255	; 0xff
 8013472:	e000      	b.n	8013476 <osMutexWait+0x8e>
  }
  
  return osOK;
 8013474:	2300      	movs	r3, #0
}
 8013476:	4618      	mov	r0, r3
 8013478:	3710      	adds	r7, #16
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}
 801347e:	bf00      	nop
 8013480:	e000ed04 	.word	0xe000ed04

08013484 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b084      	sub	sp, #16
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801348c:	2300      	movs	r3, #0
 801348e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8013490:	2300      	movs	r3, #0
 8013492:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8013494:	f7ff feef 	bl	8013276 <inHandlerMode>
 8013498:	4603      	mov	r3, r0
 801349a:	2b00      	cmp	r3, #0
 801349c:	d016      	beq.n	80134cc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801349e:	f107 0308 	add.w	r3, r7, #8
 80134a2:	4619      	mov	r1, r3
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f000 fe67 	bl	8014178 <xQueueGiveFromISR>
 80134aa:	4603      	mov	r3, r0
 80134ac:	2b01      	cmp	r3, #1
 80134ae:	d001      	beq.n	80134b4 <osMutexRelease+0x30>
      return osErrorOS;
 80134b0:	23ff      	movs	r3, #255	; 0xff
 80134b2:	e017      	b.n	80134e4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d013      	beq.n	80134e2 <osMutexRelease+0x5e>
 80134ba:	4b0c      	ldr	r3, [pc, #48]	; (80134ec <osMutexRelease+0x68>)
 80134bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134c0:	601a      	str	r2, [r3, #0]
 80134c2:	f3bf 8f4f 	dsb	sy
 80134c6:	f3bf 8f6f 	isb	sy
 80134ca:	e00a      	b.n	80134e2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80134cc:	2300      	movs	r3, #0
 80134ce:	2200      	movs	r2, #0
 80134d0:	2100      	movs	r1, #0
 80134d2:	6878      	ldr	r0, [r7, #4]
 80134d4:	f000 fcaa 	bl	8013e2c <xQueueGenericSend>
 80134d8:	4603      	mov	r3, r0
 80134da:	2b01      	cmp	r3, #1
 80134dc:	d001      	beq.n	80134e2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80134de:	23ff      	movs	r3, #255	; 0xff
 80134e0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80134e2:	68fb      	ldr	r3, [r7, #12]
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3710      	adds	r7, #16
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}
 80134ec:	e000ed04 	.word	0xe000ed04

080134f0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b086      	sub	sp, #24
 80134f4:	af02      	add	r7, sp, #8
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	685b      	ldr	r3, [r3, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d016      	beq.n	8013530 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	2b01      	cmp	r3, #1
 8013506:	d10a      	bne.n	801351e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	685b      	ldr	r3, [r3, #4]
 801350c:	2203      	movs	r2, #3
 801350e:	9200      	str	r2, [sp, #0]
 8013510:	2200      	movs	r2, #0
 8013512:	2100      	movs	r1, #0
 8013514:	2001      	movs	r0, #1
 8013516:	f000 fae7 	bl	8013ae8 <xQueueGenericCreateStatic>
 801351a:	4603      	mov	r3, r0
 801351c:	e023      	b.n	8013566 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 801351e:	6838      	ldr	r0, [r7, #0]
 8013520:	6839      	ldr	r1, [r7, #0]
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	461a      	mov	r2, r3
 8013528:	f000 fc0e 	bl	8013d48 <xQueueCreateCountingSemaphoreStatic>
 801352c:	4603      	mov	r3, r0
 801352e:	e01a      	b.n	8013566 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	2b01      	cmp	r3, #1
 8013534:	d110      	bne.n	8013558 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8013536:	2203      	movs	r2, #3
 8013538:	2100      	movs	r1, #0
 801353a:	2001      	movs	r0, #1
 801353c:	f000 fb56 	bl	8013bec <xQueueGenericCreate>
 8013540:	60f8      	str	r0, [r7, #12]
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d005      	beq.n	8013554 <osSemaphoreCreate+0x64>
 8013548:	2300      	movs	r3, #0
 801354a:	2200      	movs	r2, #0
 801354c:	2100      	movs	r1, #0
 801354e:	68f8      	ldr	r0, [r7, #12]
 8013550:	f000 fc6c 	bl	8013e2c <xQueueGenericSend>
      return sema;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	e006      	b.n	8013566 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	683a      	ldr	r2, [r7, #0]
 801355c:	4611      	mov	r1, r2
 801355e:	4618      	mov	r0, r3
 8013560:	f000 fc2d 	bl	8013dbe <xQueueCreateCountingSemaphore>
 8013564:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8013566:	4618      	mov	r0, r3
 8013568:	3710      	adds	r7, #16
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
	...

08013570 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b084      	sub	sp, #16
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801357a:	2300      	movs	r3, #0
 801357c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d101      	bne.n	8013588 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8013584:	2380      	movs	r3, #128	; 0x80
 8013586:	e03a      	b.n	80135fe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8013588:	2300      	movs	r3, #0
 801358a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013592:	d103      	bne.n	801359c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8013594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013598:	60fb      	str	r3, [r7, #12]
 801359a:	e009      	b.n	80135b0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d006      	beq.n	80135b0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d101      	bne.n	80135b0 <osSemaphoreWait+0x40>
      ticks = 1;
 80135ac:	2301      	movs	r3, #1
 80135ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80135b0:	f7ff fe61 	bl	8013276 <inHandlerMode>
 80135b4:	4603      	mov	r3, r0
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d017      	beq.n	80135ea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80135ba:	f107 0308 	add.w	r3, r7, #8
 80135be:	461a      	mov	r2, r3
 80135c0:	2100      	movs	r1, #0
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f001 f868 	bl	8014698 <xQueueReceiveFromISR>
 80135c8:	4603      	mov	r3, r0
 80135ca:	2b01      	cmp	r3, #1
 80135cc:	d001      	beq.n	80135d2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80135ce:	23ff      	movs	r3, #255	; 0xff
 80135d0:	e015      	b.n	80135fe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d011      	beq.n	80135fc <osSemaphoreWait+0x8c>
 80135d8:	4b0b      	ldr	r3, [pc, #44]	; (8013608 <osSemaphoreWait+0x98>)
 80135da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135de:	601a      	str	r2, [r3, #0]
 80135e0:	f3bf 8f4f 	dsb	sy
 80135e4:	f3bf 8f6f 	isb	sy
 80135e8:	e008      	b.n	80135fc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80135ea:	68f9      	ldr	r1, [r7, #12]
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f000 ff3f 	bl	8014470 <xQueueSemaphoreTake>
 80135f2:	4603      	mov	r3, r0
 80135f4:	2b01      	cmp	r3, #1
 80135f6:	d001      	beq.n	80135fc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80135f8:	23ff      	movs	r3, #255	; 0xff
 80135fa:	e000      	b.n	80135fe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80135fc:	2300      	movs	r3, #0
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3710      	adds	r7, #16
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	e000ed04 	.word	0xe000ed04

0801360c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b084      	sub	sp, #16
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8013614:	2300      	movs	r3, #0
 8013616:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8013618:	2300      	movs	r3, #0
 801361a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801361c:	f7ff fe2b 	bl	8013276 <inHandlerMode>
 8013620:	4603      	mov	r3, r0
 8013622:	2b00      	cmp	r3, #0
 8013624:	d016      	beq.n	8013654 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013626:	f107 0308 	add.w	r3, r7, #8
 801362a:	4619      	mov	r1, r3
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f000 fda3 	bl	8014178 <xQueueGiveFromISR>
 8013632:	4603      	mov	r3, r0
 8013634:	2b01      	cmp	r3, #1
 8013636:	d001      	beq.n	801363c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8013638:	23ff      	movs	r3, #255	; 0xff
 801363a:	e017      	b.n	801366c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d013      	beq.n	801366a <osSemaphoreRelease+0x5e>
 8013642:	4b0c      	ldr	r3, [pc, #48]	; (8013674 <osSemaphoreRelease+0x68>)
 8013644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013648:	601a      	str	r2, [r3, #0]
 801364a:	f3bf 8f4f 	dsb	sy
 801364e:	f3bf 8f6f 	isb	sy
 8013652:	e00a      	b.n	801366a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8013654:	2300      	movs	r3, #0
 8013656:	2200      	movs	r2, #0
 8013658:	2100      	movs	r1, #0
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f000 fbe6 	bl	8013e2c <xQueueGenericSend>
 8013660:	4603      	mov	r3, r0
 8013662:	2b01      	cmp	r3, #1
 8013664:	d001      	beq.n	801366a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8013666:	23ff      	movs	r3, #255	; 0xff
 8013668:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801366a:	68fb      	ldr	r3, [r7, #12]
}
 801366c:	4618      	mov	r0, r3
 801366e:	3710      	adds	r7, #16
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}
 8013674:	e000ed04 	.word	0xe000ed04

08013678 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b082      	sub	sp, #8
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8013680:	f7ff fdf9 	bl	8013276 <inHandlerMode>
 8013684:	4603      	mov	r3, r0
 8013686:	2b00      	cmp	r3, #0
 8013688:	d001      	beq.n	801368e <osSemaphoreDelete+0x16>
    return osErrorISR;
 801368a:	2382      	movs	r3, #130	; 0x82
 801368c:	e003      	b.n	8013696 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801368e:	6878      	ldr	r0, [r7, #4]
 8013690:	f001 f8c8 	bl	8014824 <vQueueDelete>

  return osOK; 
 8013694:	2300      	movs	r3, #0
}
 8013696:	4618      	mov	r0, r3
 8013698:	3708      	adds	r7, #8
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}

0801369e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801369e:	b590      	push	{r4, r7, lr}
 80136a0:	b085      	sub	sp, #20
 80136a2:	af02      	add	r7, sp, #8
 80136a4:	6078      	str	r0, [r7, #4]
 80136a6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	689b      	ldr	r3, [r3, #8]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d011      	beq.n	80136d4 <osMessageCreate+0x36>
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	68db      	ldr	r3, [r3, #12]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d00d      	beq.n	80136d4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	6818      	ldr	r0, [r3, #0]
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6859      	ldr	r1, [r3, #4]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	689a      	ldr	r2, [r3, #8]
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	2400      	movs	r4, #0
 80136ca:	9400      	str	r4, [sp, #0]
 80136cc:	f000 fa0c 	bl	8013ae8 <xQueueGenericCreateStatic>
 80136d0:	4603      	mov	r3, r0
 80136d2:	e008      	b.n	80136e6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6818      	ldr	r0, [r3, #0]
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	685b      	ldr	r3, [r3, #4]
 80136dc:	2200      	movs	r2, #0
 80136de:	4619      	mov	r1, r3
 80136e0:	f000 fa84 	bl	8013bec <xQueueGenericCreate>
 80136e4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	370c      	adds	r7, #12
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd90      	pop	{r4, r7, pc}
	...

080136f0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b086      	sub	sp, #24
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	60f8      	str	r0, [r7, #12]
 80136f8:	60b9      	str	r1, [r7, #8]
 80136fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80136fc:	2300      	movs	r3, #0
 80136fe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d101      	bne.n	801370e <osMessagePut+0x1e>
    ticks = 1;
 801370a:	2301      	movs	r3, #1
 801370c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801370e:	f7ff fdb2 	bl	8013276 <inHandlerMode>
 8013712:	4603      	mov	r3, r0
 8013714:	2b00      	cmp	r3, #0
 8013716:	d018      	beq.n	801374a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8013718:	f107 0210 	add.w	r2, r7, #16
 801371c:	f107 0108 	add.w	r1, r7, #8
 8013720:	2300      	movs	r3, #0
 8013722:	68f8      	ldr	r0, [r7, #12]
 8013724:	f000 fc88 	bl	8014038 <xQueueGenericSendFromISR>
 8013728:	4603      	mov	r3, r0
 801372a:	2b01      	cmp	r3, #1
 801372c:	d001      	beq.n	8013732 <osMessagePut+0x42>
      return osErrorOS;
 801372e:	23ff      	movs	r3, #255	; 0xff
 8013730:	e018      	b.n	8013764 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013732:	693b      	ldr	r3, [r7, #16]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d014      	beq.n	8013762 <osMessagePut+0x72>
 8013738:	4b0c      	ldr	r3, [pc, #48]	; (801376c <osMessagePut+0x7c>)
 801373a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801373e:	601a      	str	r2, [r3, #0]
 8013740:	f3bf 8f4f 	dsb	sy
 8013744:	f3bf 8f6f 	isb	sy
 8013748:	e00b      	b.n	8013762 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801374a:	f107 0108 	add.w	r1, r7, #8
 801374e:	2300      	movs	r3, #0
 8013750:	697a      	ldr	r2, [r7, #20]
 8013752:	68f8      	ldr	r0, [r7, #12]
 8013754:	f000 fb6a 	bl	8013e2c <xQueueGenericSend>
 8013758:	4603      	mov	r3, r0
 801375a:	2b01      	cmp	r3, #1
 801375c:	d001      	beq.n	8013762 <osMessagePut+0x72>
      return osErrorOS;
 801375e:	23ff      	movs	r3, #255	; 0xff
 8013760:	e000      	b.n	8013764 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8013762:	2300      	movs	r3, #0
}
 8013764:	4618      	mov	r0, r3
 8013766:	3718      	adds	r7, #24
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	e000ed04 	.word	0xe000ed04

08013770 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8013770:	b590      	push	{r4, r7, lr}
 8013772:	b08b      	sub	sp, #44	; 0x2c
 8013774:	af00      	add	r7, sp, #0
 8013776:	60f8      	str	r0, [r7, #12]
 8013778:	60b9      	str	r1, [r7, #8]
 801377a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8013780:	2300      	movs	r3, #0
 8013782:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d10a      	bne.n	80137a0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801378a:	2380      	movs	r3, #128	; 0x80
 801378c:	617b      	str	r3, [r7, #20]
    return event;
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	461c      	mov	r4, r3
 8013792:	f107 0314 	add.w	r3, r7, #20
 8013796:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801379a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801379e:	e054      	b.n	801384a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80137a0:	2300      	movs	r3, #0
 80137a2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80137a4:	2300      	movs	r3, #0
 80137a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137ae:	d103      	bne.n	80137b8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80137b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137b4:	627b      	str	r3, [r7, #36]	; 0x24
 80137b6:	e009      	b.n	80137cc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d006      	beq.n	80137cc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80137c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d101      	bne.n	80137cc <osMessageGet+0x5c>
      ticks = 1;
 80137c8:	2301      	movs	r3, #1
 80137ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80137cc:	f7ff fd53 	bl	8013276 <inHandlerMode>
 80137d0:	4603      	mov	r3, r0
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d01c      	beq.n	8013810 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80137d6:	f107 0220 	add.w	r2, r7, #32
 80137da:	f107 0314 	add.w	r3, r7, #20
 80137de:	3304      	adds	r3, #4
 80137e0:	4619      	mov	r1, r3
 80137e2:	68b8      	ldr	r0, [r7, #8]
 80137e4:	f000 ff58 	bl	8014698 <xQueueReceiveFromISR>
 80137e8:	4603      	mov	r3, r0
 80137ea:	2b01      	cmp	r3, #1
 80137ec:	d102      	bne.n	80137f4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80137ee:	2310      	movs	r3, #16
 80137f0:	617b      	str	r3, [r7, #20]
 80137f2:	e001      	b.n	80137f8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80137f4:	2300      	movs	r3, #0
 80137f6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80137f8:	6a3b      	ldr	r3, [r7, #32]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d01d      	beq.n	801383a <osMessageGet+0xca>
 80137fe:	4b15      	ldr	r3, [pc, #84]	; (8013854 <osMessageGet+0xe4>)
 8013800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013804:	601a      	str	r2, [r3, #0]
 8013806:	f3bf 8f4f 	dsb	sy
 801380a:	f3bf 8f6f 	isb	sy
 801380e:	e014      	b.n	801383a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8013810:	f107 0314 	add.w	r3, r7, #20
 8013814:	3304      	adds	r3, #4
 8013816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013818:	4619      	mov	r1, r3
 801381a:	68b8      	ldr	r0, [r7, #8]
 801381c:	f000 fd42 	bl	80142a4 <xQueueReceive>
 8013820:	4603      	mov	r3, r0
 8013822:	2b01      	cmp	r3, #1
 8013824:	d102      	bne.n	801382c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8013826:	2310      	movs	r3, #16
 8013828:	617b      	str	r3, [r7, #20]
 801382a:	e006      	b.n	801383a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382e:	2b00      	cmp	r3, #0
 8013830:	d101      	bne.n	8013836 <osMessageGet+0xc6>
 8013832:	2300      	movs	r3, #0
 8013834:	e000      	b.n	8013838 <osMessageGet+0xc8>
 8013836:	2340      	movs	r3, #64	; 0x40
 8013838:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	461c      	mov	r4, r3
 801383e:	f107 0314 	add.w	r3, r7, #20
 8013842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801384a:	68f8      	ldr	r0, [r7, #12]
 801384c:	372c      	adds	r7, #44	; 0x2c
 801384e:	46bd      	mov	sp, r7
 8013850:	bd90      	pop	{r4, r7, pc}
 8013852:	bf00      	nop
 8013854:	e000ed04 	.word	0xe000ed04

08013858 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8013860:	f7ff fd09 	bl	8013276 <inHandlerMode>
 8013864:	4603      	mov	r3, r0
 8013866:	2b00      	cmp	r3, #0
 8013868:	d004      	beq.n	8013874 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f000 ffba 	bl	80147e4 <uxQueueMessagesWaitingFromISR>
 8013870:	4603      	mov	r3, r0
 8013872:	e003      	b.n	801387c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8013874:	6878      	ldr	r0, [r7, #4]
 8013876:	f000 ff95 	bl	80147a4 <uxQueueMessagesWaiting>
 801387a:	4603      	mov	r3, r0
  }
}
 801387c:	4618      	mov	r0, r3
 801387e:	3708      	adds	r7, #8
 8013880:	46bd      	mov	sp, r7
 8013882:	bd80      	pop	{r7, pc}

08013884 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 801388c:	f7ff fcf3 	bl	8013276 <inHandlerMode>
 8013890:	4603      	mov	r3, r0
 8013892:	2b00      	cmp	r3, #0
 8013894:	d001      	beq.n	801389a <osMessageDelete+0x16>
    return osErrorISR;
 8013896:	2382      	movs	r3, #130	; 0x82
 8013898:	e003      	b.n	80138a2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 ffc2 	bl	8014824 <vQueueDelete>

  return osOK; 
 80138a0:	2300      	movs	r3, #0
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3708      	adds	r7, #8
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}

080138aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80138aa:	b480      	push	{r7}
 80138ac:	b083      	sub	sp, #12
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f103 0208 	add.w	r2, r3, #8
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f103 0208 	add.w	r2, r3, #8
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	f103 0208 	add.w	r2, r3, #8
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2200      	movs	r2, #0
 80138dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80138de:	bf00      	nop
 80138e0:	370c      	adds	r7, #12
 80138e2:	46bd      	mov	sp, r7
 80138e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e8:	4770      	bx	lr

080138ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80138ea:	b480      	push	{r7}
 80138ec:	b083      	sub	sp, #12
 80138ee:	af00      	add	r7, sp, #0
 80138f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	2200      	movs	r2, #0
 80138f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80138f8:	bf00      	nop
 80138fa:	370c      	adds	r7, #12
 80138fc:	46bd      	mov	sp, r7
 80138fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013902:	4770      	bx	lr

08013904 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013904:	b480      	push	{r7}
 8013906:	b085      	sub	sp, #20
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	685b      	ldr	r3, [r3, #4]
 8013912:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	68fa      	ldr	r2, [r7, #12]
 8013918:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	689a      	ldr	r2, [r3, #8]
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	689b      	ldr	r3, [r3, #8]
 8013926:	683a      	ldr	r2, [r7, #0]
 8013928:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	683a      	ldr	r2, [r7, #0]
 801392e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	687a      	ldr	r2, [r7, #4]
 8013934:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	1c5a      	adds	r2, r3, #1
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	601a      	str	r2, [r3, #0]
}
 8013940:	bf00      	nop
 8013942:	3714      	adds	r7, #20
 8013944:	46bd      	mov	sp, r7
 8013946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394a:	4770      	bx	lr

0801394c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801394c:	b480      	push	{r7}
 801394e:	b085      	sub	sp, #20
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013962:	d103      	bne.n	801396c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	691b      	ldr	r3, [r3, #16]
 8013968:	60fb      	str	r3, [r7, #12]
 801396a:	e00c      	b.n	8013986 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	3308      	adds	r3, #8
 8013970:	60fb      	str	r3, [r7, #12]
 8013972:	e002      	b.n	801397a <vListInsert+0x2e>
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	685b      	ldr	r3, [r3, #4]
 8013978:	60fb      	str	r3, [r7, #12]
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	685b      	ldr	r3, [r3, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	68ba      	ldr	r2, [r7, #8]
 8013982:	429a      	cmp	r2, r3
 8013984:	d2f6      	bcs.n	8013974 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	685a      	ldr	r2, [r3, #4]
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	683a      	ldr	r2, [r7, #0]
 8013994:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	68fa      	ldr	r2, [r7, #12]
 801399a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	683a      	ldr	r2, [r7, #0]
 80139a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	687a      	ldr	r2, [r7, #4]
 80139a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	1c5a      	adds	r2, r3, #1
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	601a      	str	r2, [r3, #0]
}
 80139b2:	bf00      	nop
 80139b4:	3714      	adds	r7, #20
 80139b6:	46bd      	mov	sp, r7
 80139b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139bc:	4770      	bx	lr

080139be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80139be:	b480      	push	{r7}
 80139c0:	b085      	sub	sp, #20
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	691b      	ldr	r3, [r3, #16]
 80139ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	685b      	ldr	r3, [r3, #4]
 80139d0:	687a      	ldr	r2, [r7, #4]
 80139d2:	6892      	ldr	r2, [r2, #8]
 80139d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	689b      	ldr	r3, [r3, #8]
 80139da:	687a      	ldr	r2, [r7, #4]
 80139dc:	6852      	ldr	r2, [r2, #4]
 80139de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	687a      	ldr	r2, [r7, #4]
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d103      	bne.n	80139f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	689a      	ldr	r2, [r3, #8]
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2200      	movs	r2, #0
 80139f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	1e5a      	subs	r2, r3, #1
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	681b      	ldr	r3, [r3, #0]
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3714      	adds	r7, #20
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a10:	4770      	bx	lr
	...

08013a14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b084      	sub	sp, #16
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d10c      	bne.n	8013a42 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a2c:	b672      	cpsid	i
 8013a2e:	f383 8811 	msr	BASEPRI, r3
 8013a32:	f3bf 8f6f 	isb	sy
 8013a36:	f3bf 8f4f 	dsb	sy
 8013a3a:	b662      	cpsie	i
 8013a3c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013a3e:	bf00      	nop
 8013a40:	e7fe      	b.n	8013a40 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8013a42:	f002 faab 	bl	8015f9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a4e:	68f9      	ldr	r1, [r7, #12]
 8013a50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013a52:	fb01 f303 	mul.w	r3, r1, r3
 8013a56:	441a      	add	r2, r3
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2200      	movs	r2, #0
 8013a60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	681a      	ldr	r2, [r3, #0]
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	681a      	ldr	r2, [r3, #0]
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a72:	3b01      	subs	r3, #1
 8013a74:	68f9      	ldr	r1, [r7, #12]
 8013a76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013a78:	fb01 f303 	mul.w	r3, r1, r3
 8013a7c:	441a      	add	r2, r3
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	22ff      	movs	r2, #255	; 0xff
 8013a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	22ff      	movs	r2, #255	; 0xff
 8013a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d114      	bne.n	8013ac2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	691b      	ldr	r3, [r3, #16]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d01a      	beq.n	8013ad6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	3310      	adds	r3, #16
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f001 fd61 	bl	801556c <xTaskRemoveFromEventList>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d012      	beq.n	8013ad6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013ab0:	4b0c      	ldr	r3, [pc, #48]	; (8013ae4 <xQueueGenericReset+0xd0>)
 8013ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ab6:	601a      	str	r2, [r3, #0]
 8013ab8:	f3bf 8f4f 	dsb	sy
 8013abc:	f3bf 8f6f 	isb	sy
 8013ac0:	e009      	b.n	8013ad6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	3310      	adds	r3, #16
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7ff feef 	bl	80138aa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	3324      	adds	r3, #36	; 0x24
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7ff feea 	bl	80138aa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013ad6:	f002 fa95 	bl	8016004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013ada:	2301      	movs	r3, #1
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	3710      	adds	r7, #16
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}
 8013ae4:	e000ed04 	.word	0xe000ed04

08013ae8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b08e      	sub	sp, #56	; 0x38
 8013aec:	af02      	add	r7, sp, #8
 8013aee:	60f8      	str	r0, [r7, #12]
 8013af0:	60b9      	str	r1, [r7, #8]
 8013af2:	607a      	str	r2, [r7, #4]
 8013af4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d10c      	bne.n	8013b16 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8013afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b00:	b672      	cpsid	i
 8013b02:	f383 8811 	msr	BASEPRI, r3
 8013b06:	f3bf 8f6f 	isb	sy
 8013b0a:	f3bf 8f4f 	dsb	sy
 8013b0e:	b662      	cpsie	i
 8013b10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013b12:	bf00      	nop
 8013b14:	e7fe      	b.n	8013b14 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d10c      	bne.n	8013b36 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8013b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b20:	b672      	cpsid	i
 8013b22:	f383 8811 	msr	BASEPRI, r3
 8013b26:	f3bf 8f6f 	isb	sy
 8013b2a:	f3bf 8f4f 	dsb	sy
 8013b2e:	b662      	cpsie	i
 8013b30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013b32:	bf00      	nop
 8013b34:	e7fe      	b.n	8013b34 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d002      	beq.n	8013b42 <xQueueGenericCreateStatic+0x5a>
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d001      	beq.n	8013b46 <xQueueGenericCreateStatic+0x5e>
 8013b42:	2301      	movs	r3, #1
 8013b44:	e000      	b.n	8013b48 <xQueueGenericCreateStatic+0x60>
 8013b46:	2300      	movs	r3, #0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d10c      	bne.n	8013b66 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8013b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b50:	b672      	cpsid	i
 8013b52:	f383 8811 	msr	BASEPRI, r3
 8013b56:	f3bf 8f6f 	isb	sy
 8013b5a:	f3bf 8f4f 	dsb	sy
 8013b5e:	b662      	cpsie	i
 8013b60:	623b      	str	r3, [r7, #32]
}
 8013b62:	bf00      	nop
 8013b64:	e7fe      	b.n	8013b64 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d102      	bne.n	8013b72 <xQueueGenericCreateStatic+0x8a>
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d101      	bne.n	8013b76 <xQueueGenericCreateStatic+0x8e>
 8013b72:	2301      	movs	r3, #1
 8013b74:	e000      	b.n	8013b78 <xQueueGenericCreateStatic+0x90>
 8013b76:	2300      	movs	r3, #0
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d10c      	bne.n	8013b96 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8013b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b80:	b672      	cpsid	i
 8013b82:	f383 8811 	msr	BASEPRI, r3
 8013b86:	f3bf 8f6f 	isb	sy
 8013b8a:	f3bf 8f4f 	dsb	sy
 8013b8e:	b662      	cpsie	i
 8013b90:	61fb      	str	r3, [r7, #28]
}
 8013b92:	bf00      	nop
 8013b94:	e7fe      	b.n	8013b94 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013b96:	2348      	movs	r3, #72	; 0x48
 8013b98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	2b48      	cmp	r3, #72	; 0x48
 8013b9e:	d00c      	beq.n	8013bba <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8013ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba4:	b672      	cpsid	i
 8013ba6:	f383 8811 	msr	BASEPRI, r3
 8013baa:	f3bf 8f6f 	isb	sy
 8013bae:	f3bf 8f4f 	dsb	sy
 8013bb2:	b662      	cpsie	i
 8013bb4:	61bb      	str	r3, [r7, #24]
}
 8013bb6:	bf00      	nop
 8013bb8:	e7fe      	b.n	8013bb8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013bba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d00d      	beq.n	8013be2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc8:	2201      	movs	r2, #1
 8013bca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013bce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd4:	9300      	str	r3, [sp, #0]
 8013bd6:	4613      	mov	r3, r2
 8013bd8:	687a      	ldr	r2, [r7, #4]
 8013bda:	68b9      	ldr	r1, [r7, #8]
 8013bdc:	68f8      	ldr	r0, [r7, #12]
 8013bde:	f000 f847 	bl	8013c70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3730      	adds	r7, #48	; 0x30
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}

08013bec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b08a      	sub	sp, #40	; 0x28
 8013bf0:	af02      	add	r7, sp, #8
 8013bf2:	60f8      	str	r0, [r7, #12]
 8013bf4:	60b9      	str	r1, [r7, #8]
 8013bf6:	4613      	mov	r3, r2
 8013bf8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d10c      	bne.n	8013c1a <xQueueGenericCreate+0x2e>
	__asm volatile
 8013c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c04:	b672      	cpsid	i
 8013c06:	f383 8811 	msr	BASEPRI, r3
 8013c0a:	f3bf 8f6f 	isb	sy
 8013c0e:	f3bf 8f4f 	dsb	sy
 8013c12:	b662      	cpsie	i
 8013c14:	613b      	str	r3, [r7, #16]
}
 8013c16:	bf00      	nop
 8013c18:	e7fe      	b.n	8013c18 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d102      	bne.n	8013c26 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013c20:	2300      	movs	r3, #0
 8013c22:	61fb      	str	r3, [r7, #28]
 8013c24:	e004      	b.n	8013c30 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	68ba      	ldr	r2, [r7, #8]
 8013c2a:	fb02 f303 	mul.w	r3, r2, r3
 8013c2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013c30:	69fb      	ldr	r3, [r7, #28]
 8013c32:	3348      	adds	r3, #72	; 0x48
 8013c34:	4618      	mov	r0, r3
 8013c36:	f002 fadd 	bl	80161f4 <pvPortMalloc>
 8013c3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013c3c:	69bb      	ldr	r3, [r7, #24]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d011      	beq.n	8013c66 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013c42:	69bb      	ldr	r3, [r7, #24]
 8013c44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013c46:	697b      	ldr	r3, [r7, #20]
 8013c48:	3348      	adds	r3, #72	; 0x48
 8013c4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013c4c:	69bb      	ldr	r3, [r7, #24]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013c54:	79fa      	ldrb	r2, [r7, #7]
 8013c56:	69bb      	ldr	r3, [r7, #24]
 8013c58:	9300      	str	r3, [sp, #0]
 8013c5a:	4613      	mov	r3, r2
 8013c5c:	697a      	ldr	r2, [r7, #20]
 8013c5e:	68b9      	ldr	r1, [r7, #8]
 8013c60:	68f8      	ldr	r0, [r7, #12]
 8013c62:	f000 f805 	bl	8013c70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013c66:	69bb      	ldr	r3, [r7, #24]
	}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3720      	adds	r7, #32
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}

08013c70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b084      	sub	sp, #16
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	60f8      	str	r0, [r7, #12]
 8013c78:	60b9      	str	r1, [r7, #8]
 8013c7a:	607a      	str	r2, [r7, #4]
 8013c7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d103      	bne.n	8013c8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013c84:	69bb      	ldr	r3, [r7, #24]
 8013c86:	69ba      	ldr	r2, [r7, #24]
 8013c88:	601a      	str	r2, [r3, #0]
 8013c8a:	e002      	b.n	8013c92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013c8c:	69bb      	ldr	r3, [r7, #24]
 8013c8e:	687a      	ldr	r2, [r7, #4]
 8013c90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013c92:	69bb      	ldr	r3, [r7, #24]
 8013c94:	68fa      	ldr	r2, [r7, #12]
 8013c96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013c98:	69bb      	ldr	r3, [r7, #24]
 8013c9a:	68ba      	ldr	r2, [r7, #8]
 8013c9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013c9e:	2101      	movs	r1, #1
 8013ca0:	69b8      	ldr	r0, [r7, #24]
 8013ca2:	f7ff feb7 	bl	8013a14 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013ca6:	bf00      	nop
 8013ca8:	3710      	adds	r7, #16
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}

08013cae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8013cae:	b580      	push	{r7, lr}
 8013cb0:	b082      	sub	sp, #8
 8013cb2:	af00      	add	r7, sp, #0
 8013cb4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d00e      	beq.n	8013cda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013cce:	2300      	movs	r3, #0
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	2100      	movs	r1, #0
 8013cd4:	6878      	ldr	r0, [r7, #4]
 8013cd6:	f000 f8a9 	bl	8013e2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013cda:	bf00      	nop
 8013cdc:	3708      	adds	r7, #8
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}

08013ce2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8013ce2:	b580      	push	{r7, lr}
 8013ce4:	b086      	sub	sp, #24
 8013ce6:	af00      	add	r7, sp, #0
 8013ce8:	4603      	mov	r3, r0
 8013cea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013cec:	2301      	movs	r3, #1
 8013cee:	617b      	str	r3, [r7, #20]
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013cf4:	79fb      	ldrb	r3, [r7, #7]
 8013cf6:	461a      	mov	r2, r3
 8013cf8:	6939      	ldr	r1, [r7, #16]
 8013cfa:	6978      	ldr	r0, [r7, #20]
 8013cfc:	f7ff ff76 	bl	8013bec <xQueueGenericCreate>
 8013d00:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013d02:	68f8      	ldr	r0, [r7, #12]
 8013d04:	f7ff ffd3 	bl	8013cae <prvInitialiseMutex>

		return xNewQueue;
 8013d08:	68fb      	ldr	r3, [r7, #12]
	}
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	3718      	adds	r7, #24
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	bd80      	pop	{r7, pc}

08013d12 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013d12:	b580      	push	{r7, lr}
 8013d14:	b088      	sub	sp, #32
 8013d16:	af02      	add	r7, sp, #8
 8013d18:	4603      	mov	r3, r0
 8013d1a:	6039      	str	r1, [r7, #0]
 8013d1c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013d1e:	2301      	movs	r3, #1
 8013d20:	617b      	str	r3, [r7, #20]
 8013d22:	2300      	movs	r3, #0
 8013d24:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013d26:	79fb      	ldrb	r3, [r7, #7]
 8013d28:	9300      	str	r3, [sp, #0]
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	6939      	ldr	r1, [r7, #16]
 8013d30:	6978      	ldr	r0, [r7, #20]
 8013d32:	f7ff fed9 	bl	8013ae8 <xQueueGenericCreateStatic>
 8013d36:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013d38:	68f8      	ldr	r0, [r7, #12]
 8013d3a:	f7ff ffb8 	bl	8013cae <prvInitialiseMutex>

		return xNewQueue;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
	}
 8013d40:	4618      	mov	r0, r3
 8013d42:	3718      	adds	r7, #24
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}

08013d48 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b08a      	sub	sp, #40	; 0x28
 8013d4c:	af02      	add	r7, sp, #8
 8013d4e:	60f8      	str	r0, [r7, #12]
 8013d50:	60b9      	str	r1, [r7, #8]
 8013d52:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d10c      	bne.n	8013d74 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8013d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d5e:	b672      	cpsid	i
 8013d60:	f383 8811 	msr	BASEPRI, r3
 8013d64:	f3bf 8f6f 	isb	sy
 8013d68:	f3bf 8f4f 	dsb	sy
 8013d6c:	b662      	cpsie	i
 8013d6e:	61bb      	str	r3, [r7, #24]
}
 8013d70:	bf00      	nop
 8013d72:	e7fe      	b.n	8013d72 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013d74:	68ba      	ldr	r2, [r7, #8]
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d90c      	bls.n	8013d96 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8013d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d80:	b672      	cpsid	i
 8013d82:	f383 8811 	msr	BASEPRI, r3
 8013d86:	f3bf 8f6f 	isb	sy
 8013d8a:	f3bf 8f4f 	dsb	sy
 8013d8e:	b662      	cpsie	i
 8013d90:	617b      	str	r3, [r7, #20]
}
 8013d92:	bf00      	nop
 8013d94:	e7fe      	b.n	8013d94 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013d96:	2302      	movs	r3, #2
 8013d98:	9300      	str	r3, [sp, #0]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	2100      	movs	r1, #0
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	f7ff fea1 	bl	8013ae8 <xQueueGenericCreateStatic>
 8013da6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8013da8:	69fb      	ldr	r3, [r7, #28]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d002      	beq.n	8013db4 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013dae:	69fb      	ldr	r3, [r7, #28]
 8013db0:	68ba      	ldr	r2, [r7, #8]
 8013db2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013db4:	69fb      	ldr	r3, [r7, #28]
	}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3720      	adds	r7, #32
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}

08013dbe <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8013dbe:	b580      	push	{r7, lr}
 8013dc0:	b086      	sub	sp, #24
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	6078      	str	r0, [r7, #4]
 8013dc6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d10c      	bne.n	8013de8 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8013dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dd2:	b672      	cpsid	i
 8013dd4:	f383 8811 	msr	BASEPRI, r3
 8013dd8:	f3bf 8f6f 	isb	sy
 8013ddc:	f3bf 8f4f 	dsb	sy
 8013de0:	b662      	cpsie	i
 8013de2:	613b      	str	r3, [r7, #16]
}
 8013de4:	bf00      	nop
 8013de6:	e7fe      	b.n	8013de6 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013de8:	683a      	ldr	r2, [r7, #0]
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d90c      	bls.n	8013e0a <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8013df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df4:	b672      	cpsid	i
 8013df6:	f383 8811 	msr	BASEPRI, r3
 8013dfa:	f3bf 8f6f 	isb	sy
 8013dfe:	f3bf 8f4f 	dsb	sy
 8013e02:	b662      	cpsie	i
 8013e04:	60fb      	str	r3, [r7, #12]
}
 8013e06:	bf00      	nop
 8013e08:	e7fe      	b.n	8013e08 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013e0a:	2202      	movs	r2, #2
 8013e0c:	2100      	movs	r1, #0
 8013e0e:	6878      	ldr	r0, [r7, #4]
 8013e10:	f7ff feec 	bl	8013bec <xQueueGenericCreate>
 8013e14:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d002      	beq.n	8013e22 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	683a      	ldr	r2, [r7, #0]
 8013e20:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013e22:	697b      	ldr	r3, [r7, #20]
	}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3718      	adds	r7, #24
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}

08013e2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b08e      	sub	sp, #56	; 0x38
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	607a      	str	r2, [r7, #4]
 8013e38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d10c      	bne.n	8013e62 <xQueueGenericSend+0x36>
	__asm volatile
 8013e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e4c:	b672      	cpsid	i
 8013e4e:	f383 8811 	msr	BASEPRI, r3
 8013e52:	f3bf 8f6f 	isb	sy
 8013e56:	f3bf 8f4f 	dsb	sy
 8013e5a:	b662      	cpsie	i
 8013e5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013e5e:	bf00      	nop
 8013e60:	e7fe      	b.n	8013e60 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d103      	bne.n	8013e70 <xQueueGenericSend+0x44>
 8013e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d101      	bne.n	8013e74 <xQueueGenericSend+0x48>
 8013e70:	2301      	movs	r3, #1
 8013e72:	e000      	b.n	8013e76 <xQueueGenericSend+0x4a>
 8013e74:	2300      	movs	r3, #0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d10c      	bne.n	8013e94 <xQueueGenericSend+0x68>
	__asm volatile
 8013e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e7e:	b672      	cpsid	i
 8013e80:	f383 8811 	msr	BASEPRI, r3
 8013e84:	f3bf 8f6f 	isb	sy
 8013e88:	f3bf 8f4f 	dsb	sy
 8013e8c:	b662      	cpsie	i
 8013e8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013e90:	bf00      	nop
 8013e92:	e7fe      	b.n	8013e92 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	2b02      	cmp	r3, #2
 8013e98:	d103      	bne.n	8013ea2 <xQueueGenericSend+0x76>
 8013e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e9e:	2b01      	cmp	r3, #1
 8013ea0:	d101      	bne.n	8013ea6 <xQueueGenericSend+0x7a>
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	e000      	b.n	8013ea8 <xQueueGenericSend+0x7c>
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d10c      	bne.n	8013ec6 <xQueueGenericSend+0x9a>
	__asm volatile
 8013eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb0:	b672      	cpsid	i
 8013eb2:	f383 8811 	msr	BASEPRI, r3
 8013eb6:	f3bf 8f6f 	isb	sy
 8013eba:	f3bf 8f4f 	dsb	sy
 8013ebe:	b662      	cpsie	i
 8013ec0:	623b      	str	r3, [r7, #32]
}
 8013ec2:	bf00      	nop
 8013ec4:	e7fe      	b.n	8013ec4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013ec6:	f001 fd1b 	bl	8015900 <xTaskGetSchedulerState>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d102      	bne.n	8013ed6 <xQueueGenericSend+0xaa>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d101      	bne.n	8013eda <xQueueGenericSend+0xae>
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	e000      	b.n	8013edc <xQueueGenericSend+0xb0>
 8013eda:	2300      	movs	r3, #0
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d10c      	bne.n	8013efa <xQueueGenericSend+0xce>
	__asm volatile
 8013ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ee4:	b672      	cpsid	i
 8013ee6:	f383 8811 	msr	BASEPRI, r3
 8013eea:	f3bf 8f6f 	isb	sy
 8013eee:	f3bf 8f4f 	dsb	sy
 8013ef2:	b662      	cpsie	i
 8013ef4:	61fb      	str	r3, [r7, #28]
}
 8013ef6:	bf00      	nop
 8013ef8:	e7fe      	b.n	8013ef8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013efa:	f002 f84f 	bl	8015f9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d302      	bcc.n	8013f10 <xQueueGenericSend+0xe4>
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	2b02      	cmp	r3, #2
 8013f0e:	d129      	bne.n	8013f64 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013f10:	683a      	ldr	r2, [r7, #0]
 8013f12:	68b9      	ldr	r1, [r7, #8]
 8013f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f16:	f000 fcc2 	bl	801489e <prvCopyDataToQueue>
 8013f1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d010      	beq.n	8013f46 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f26:	3324      	adds	r3, #36	; 0x24
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f001 fb1f 	bl	801556c <xTaskRemoveFromEventList>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d013      	beq.n	8013f5c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013f34:	4b3f      	ldr	r3, [pc, #252]	; (8014034 <xQueueGenericSend+0x208>)
 8013f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f3a:	601a      	str	r2, [r3, #0]
 8013f3c:	f3bf 8f4f 	dsb	sy
 8013f40:	f3bf 8f6f 	isb	sy
 8013f44:	e00a      	b.n	8013f5c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d007      	beq.n	8013f5c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013f4c:	4b39      	ldr	r3, [pc, #228]	; (8014034 <xQueueGenericSend+0x208>)
 8013f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f52:	601a      	str	r2, [r3, #0]
 8013f54:	f3bf 8f4f 	dsb	sy
 8013f58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013f5c:	f002 f852 	bl	8016004 <vPortExitCritical>
				return pdPASS;
 8013f60:	2301      	movs	r3, #1
 8013f62:	e063      	b.n	801402c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d103      	bne.n	8013f72 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013f6a:	f002 f84b 	bl	8016004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	e05c      	b.n	801402c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d106      	bne.n	8013f86 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013f78:	f107 0314 	add.w	r3, r7, #20
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f001 fb59 	bl	8015634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013f82:	2301      	movs	r3, #1
 8013f84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013f86:	f002 f83d 	bl	8016004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013f8a:	f001 f8b7 	bl	80150fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013f8e:	f002 f805 	bl	8015f9c <vPortEnterCritical>
 8013f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f98:	b25b      	sxtb	r3, r3
 8013f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f9e:	d103      	bne.n	8013fa8 <xQueueGenericSend+0x17c>
 8013fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013fae:	b25b      	sxtb	r3, r3
 8013fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fb4:	d103      	bne.n	8013fbe <xQueueGenericSend+0x192>
 8013fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb8:	2200      	movs	r2, #0
 8013fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013fbe:	f002 f821 	bl	8016004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013fc2:	1d3a      	adds	r2, r7, #4
 8013fc4:	f107 0314 	add.w	r3, r7, #20
 8013fc8:	4611      	mov	r1, r2
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f001 fb48 	bl	8015660 <xTaskCheckForTimeOut>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d124      	bne.n	8014020 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fd8:	f000 fd59 	bl	8014a8e <prvIsQueueFull>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d018      	beq.n	8014014 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe4:	3310      	adds	r3, #16
 8013fe6:	687a      	ldr	r2, [r7, #4]
 8013fe8:	4611      	mov	r1, r2
 8013fea:	4618      	mov	r0, r3
 8013fec:	f001 fa98 	bl	8015520 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ff2:	f000 fce4 	bl	80149be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013ff6:	f001 f88f 	bl	8015118 <xTaskResumeAll>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	f47f af7c 	bne.w	8013efa <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8014002:	4b0c      	ldr	r3, [pc, #48]	; (8014034 <xQueueGenericSend+0x208>)
 8014004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014008:	601a      	str	r2, [r3, #0]
 801400a:	f3bf 8f4f 	dsb	sy
 801400e:	f3bf 8f6f 	isb	sy
 8014012:	e772      	b.n	8013efa <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014016:	f000 fcd2 	bl	80149be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801401a:	f001 f87d 	bl	8015118 <xTaskResumeAll>
 801401e:	e76c      	b.n	8013efa <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014022:	f000 fccc 	bl	80149be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014026:	f001 f877 	bl	8015118 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801402a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801402c:	4618      	mov	r0, r3
 801402e:	3738      	adds	r7, #56	; 0x38
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}
 8014034:	e000ed04 	.word	0xe000ed04

08014038 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b08e      	sub	sp, #56	; 0x38
 801403c:	af00      	add	r7, sp, #0
 801403e:	60f8      	str	r0, [r7, #12]
 8014040:	60b9      	str	r1, [r7, #8]
 8014042:	607a      	str	r2, [r7, #4]
 8014044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801404c:	2b00      	cmp	r3, #0
 801404e:	d10c      	bne.n	801406a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8014050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014054:	b672      	cpsid	i
 8014056:	f383 8811 	msr	BASEPRI, r3
 801405a:	f3bf 8f6f 	isb	sy
 801405e:	f3bf 8f4f 	dsb	sy
 8014062:	b662      	cpsie	i
 8014064:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014066:	bf00      	nop
 8014068:	e7fe      	b.n	8014068 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801406a:	68bb      	ldr	r3, [r7, #8]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d103      	bne.n	8014078 <xQueueGenericSendFromISR+0x40>
 8014070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014074:	2b00      	cmp	r3, #0
 8014076:	d101      	bne.n	801407c <xQueueGenericSendFromISR+0x44>
 8014078:	2301      	movs	r3, #1
 801407a:	e000      	b.n	801407e <xQueueGenericSendFromISR+0x46>
 801407c:	2300      	movs	r3, #0
 801407e:	2b00      	cmp	r3, #0
 8014080:	d10c      	bne.n	801409c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8014082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014086:	b672      	cpsid	i
 8014088:	f383 8811 	msr	BASEPRI, r3
 801408c:	f3bf 8f6f 	isb	sy
 8014090:	f3bf 8f4f 	dsb	sy
 8014094:	b662      	cpsie	i
 8014096:	623b      	str	r3, [r7, #32]
}
 8014098:	bf00      	nop
 801409a:	e7fe      	b.n	801409a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	2b02      	cmp	r3, #2
 80140a0:	d103      	bne.n	80140aa <xQueueGenericSendFromISR+0x72>
 80140a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140a6:	2b01      	cmp	r3, #1
 80140a8:	d101      	bne.n	80140ae <xQueueGenericSendFromISR+0x76>
 80140aa:	2301      	movs	r3, #1
 80140ac:	e000      	b.n	80140b0 <xQueueGenericSendFromISR+0x78>
 80140ae:	2300      	movs	r3, #0
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d10c      	bne.n	80140ce <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80140b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140b8:	b672      	cpsid	i
 80140ba:	f383 8811 	msr	BASEPRI, r3
 80140be:	f3bf 8f6f 	isb	sy
 80140c2:	f3bf 8f4f 	dsb	sy
 80140c6:	b662      	cpsie	i
 80140c8:	61fb      	str	r3, [r7, #28]
}
 80140ca:	bf00      	nop
 80140cc:	e7fe      	b.n	80140cc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80140ce:	f002 f84d 	bl	801616c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80140d2:	f3ef 8211 	mrs	r2, BASEPRI
 80140d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140da:	b672      	cpsid	i
 80140dc:	f383 8811 	msr	BASEPRI, r3
 80140e0:	f3bf 8f6f 	isb	sy
 80140e4:	f3bf 8f4f 	dsb	sy
 80140e8:	b662      	cpsie	i
 80140ea:	61ba      	str	r2, [r7, #24]
 80140ec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80140ee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80140f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80140f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80140f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d302      	bcc.n	8014104 <xQueueGenericSendFromISR+0xcc>
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	2b02      	cmp	r3, #2
 8014102:	d12c      	bne.n	801415e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801410a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801410e:	683a      	ldr	r2, [r7, #0]
 8014110:	68b9      	ldr	r1, [r7, #8]
 8014112:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014114:	f000 fbc3 	bl	801489e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014118:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801411c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014120:	d112      	bne.n	8014148 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014126:	2b00      	cmp	r3, #0
 8014128:	d016      	beq.n	8014158 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801412c:	3324      	adds	r3, #36	; 0x24
 801412e:	4618      	mov	r0, r3
 8014130:	f001 fa1c 	bl	801556c <xTaskRemoveFromEventList>
 8014134:	4603      	mov	r3, r0
 8014136:	2b00      	cmp	r3, #0
 8014138:	d00e      	beq.n	8014158 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d00b      	beq.n	8014158 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2201      	movs	r2, #1
 8014144:	601a      	str	r2, [r3, #0]
 8014146:	e007      	b.n	8014158 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014148:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801414c:	3301      	adds	r3, #1
 801414e:	b2db      	uxtb	r3, r3
 8014150:	b25a      	sxtb	r2, r3
 8014152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014158:	2301      	movs	r3, #1
 801415a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801415c:	e001      	b.n	8014162 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801415e:	2300      	movs	r3, #0
 8014160:	637b      	str	r3, [r7, #52]	; 0x34
 8014162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014164:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801416c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801416e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014170:	4618      	mov	r0, r3
 8014172:	3738      	adds	r7, #56	; 0x38
 8014174:	46bd      	mov	sp, r7
 8014176:	bd80      	pop	{r7, pc}

08014178 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b08e      	sub	sp, #56	; 0x38
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
 8014180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014188:	2b00      	cmp	r3, #0
 801418a:	d10c      	bne.n	80141a6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 801418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014190:	b672      	cpsid	i
 8014192:	f383 8811 	msr	BASEPRI, r3
 8014196:	f3bf 8f6f 	isb	sy
 801419a:	f3bf 8f4f 	dsb	sy
 801419e:	b662      	cpsie	i
 80141a0:	623b      	str	r3, [r7, #32]
}
 80141a2:	bf00      	nop
 80141a4:	e7fe      	b.n	80141a4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80141a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d00c      	beq.n	80141c8 <xQueueGiveFromISR+0x50>
	__asm volatile
 80141ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141b2:	b672      	cpsid	i
 80141b4:	f383 8811 	msr	BASEPRI, r3
 80141b8:	f3bf 8f6f 	isb	sy
 80141bc:	f3bf 8f4f 	dsb	sy
 80141c0:	b662      	cpsie	i
 80141c2:	61fb      	str	r3, [r7, #28]
}
 80141c4:	bf00      	nop
 80141c6:	e7fe      	b.n	80141c6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80141c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d103      	bne.n	80141d8 <xQueueGiveFromISR+0x60>
 80141d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d2:	689b      	ldr	r3, [r3, #8]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d101      	bne.n	80141dc <xQueueGiveFromISR+0x64>
 80141d8:	2301      	movs	r3, #1
 80141da:	e000      	b.n	80141de <xQueueGiveFromISR+0x66>
 80141dc:	2300      	movs	r3, #0
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d10c      	bne.n	80141fc <xQueueGiveFromISR+0x84>
	__asm volatile
 80141e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e6:	b672      	cpsid	i
 80141e8:	f383 8811 	msr	BASEPRI, r3
 80141ec:	f3bf 8f6f 	isb	sy
 80141f0:	f3bf 8f4f 	dsb	sy
 80141f4:	b662      	cpsie	i
 80141f6:	61bb      	str	r3, [r7, #24]
}
 80141f8:	bf00      	nop
 80141fa:	e7fe      	b.n	80141fa <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80141fc:	f001 ffb6 	bl	801616c <vPortValidateInterruptPriority>
	__asm volatile
 8014200:	f3ef 8211 	mrs	r2, BASEPRI
 8014204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014208:	b672      	cpsid	i
 801420a:	f383 8811 	msr	BASEPRI, r3
 801420e:	f3bf 8f6f 	isb	sy
 8014212:	f3bf 8f4f 	dsb	sy
 8014216:	b662      	cpsie	i
 8014218:	617a      	str	r2, [r7, #20]
 801421a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801421c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801421e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014224:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801422a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801422c:	429a      	cmp	r2, r3
 801422e:	d22b      	bcs.n	8014288 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801423c:	1c5a      	adds	r2, r3, #1
 801423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014240:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014242:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801424a:	d112      	bne.n	8014272 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014250:	2b00      	cmp	r3, #0
 8014252:	d016      	beq.n	8014282 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014256:	3324      	adds	r3, #36	; 0x24
 8014258:	4618      	mov	r0, r3
 801425a:	f001 f987 	bl	801556c <xTaskRemoveFromEventList>
 801425e:	4603      	mov	r3, r0
 8014260:	2b00      	cmp	r3, #0
 8014262:	d00e      	beq.n	8014282 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d00b      	beq.n	8014282 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	2201      	movs	r2, #1
 801426e:	601a      	str	r2, [r3, #0]
 8014270:	e007      	b.n	8014282 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014276:	3301      	adds	r3, #1
 8014278:	b2db      	uxtb	r3, r3
 801427a:	b25a      	sxtb	r2, r3
 801427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014282:	2301      	movs	r3, #1
 8014284:	637b      	str	r3, [r7, #52]	; 0x34
 8014286:	e001      	b.n	801428c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014288:	2300      	movs	r3, #0
 801428a:	637b      	str	r3, [r7, #52]	; 0x34
 801428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	f383 8811 	msr	BASEPRI, r3
}
 8014296:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801429a:	4618      	mov	r0, r3
 801429c:	3738      	adds	r7, #56	; 0x38
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}
	...

080142a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b08c      	sub	sp, #48	; 0x30
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	60f8      	str	r0, [r7, #12]
 80142ac:	60b9      	str	r1, [r7, #8]
 80142ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80142b0:	2300      	movs	r3, #0
 80142b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80142b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d10c      	bne.n	80142d8 <xQueueReceive+0x34>
	__asm volatile
 80142be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c2:	b672      	cpsid	i
 80142c4:	f383 8811 	msr	BASEPRI, r3
 80142c8:	f3bf 8f6f 	isb	sy
 80142cc:	f3bf 8f4f 	dsb	sy
 80142d0:	b662      	cpsie	i
 80142d2:	623b      	str	r3, [r7, #32]
}
 80142d4:	bf00      	nop
 80142d6:	e7fe      	b.n	80142d6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d103      	bne.n	80142e6 <xQueueReceive+0x42>
 80142de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d101      	bne.n	80142ea <xQueueReceive+0x46>
 80142e6:	2301      	movs	r3, #1
 80142e8:	e000      	b.n	80142ec <xQueueReceive+0x48>
 80142ea:	2300      	movs	r3, #0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d10c      	bne.n	801430a <xQueueReceive+0x66>
	__asm volatile
 80142f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f4:	b672      	cpsid	i
 80142f6:	f383 8811 	msr	BASEPRI, r3
 80142fa:	f3bf 8f6f 	isb	sy
 80142fe:	f3bf 8f4f 	dsb	sy
 8014302:	b662      	cpsie	i
 8014304:	61fb      	str	r3, [r7, #28]
}
 8014306:	bf00      	nop
 8014308:	e7fe      	b.n	8014308 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801430a:	f001 faf9 	bl	8015900 <xTaskGetSchedulerState>
 801430e:	4603      	mov	r3, r0
 8014310:	2b00      	cmp	r3, #0
 8014312:	d102      	bne.n	801431a <xQueueReceive+0x76>
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d101      	bne.n	801431e <xQueueReceive+0x7a>
 801431a:	2301      	movs	r3, #1
 801431c:	e000      	b.n	8014320 <xQueueReceive+0x7c>
 801431e:	2300      	movs	r3, #0
 8014320:	2b00      	cmp	r3, #0
 8014322:	d10c      	bne.n	801433e <xQueueReceive+0x9a>
	__asm volatile
 8014324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014328:	b672      	cpsid	i
 801432a:	f383 8811 	msr	BASEPRI, r3
 801432e:	f3bf 8f6f 	isb	sy
 8014332:	f3bf 8f4f 	dsb	sy
 8014336:	b662      	cpsie	i
 8014338:	61bb      	str	r3, [r7, #24]
}
 801433a:	bf00      	nop
 801433c:	e7fe      	b.n	801433c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801433e:	f001 fe2d 	bl	8015f9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014346:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434a:	2b00      	cmp	r3, #0
 801434c:	d01f      	beq.n	801438e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801434e:	68b9      	ldr	r1, [r7, #8]
 8014350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014352:	f000 fb0e 	bl	8014972 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014358:	1e5a      	subs	r2, r3, #1
 801435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801435c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014360:	691b      	ldr	r3, [r3, #16]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d00f      	beq.n	8014386 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014368:	3310      	adds	r3, #16
 801436a:	4618      	mov	r0, r3
 801436c:	f001 f8fe 	bl	801556c <xTaskRemoveFromEventList>
 8014370:	4603      	mov	r3, r0
 8014372:	2b00      	cmp	r3, #0
 8014374:	d007      	beq.n	8014386 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014376:	4b3d      	ldr	r3, [pc, #244]	; (801446c <xQueueReceive+0x1c8>)
 8014378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801437c:	601a      	str	r2, [r3, #0]
 801437e:	f3bf 8f4f 	dsb	sy
 8014382:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014386:	f001 fe3d 	bl	8016004 <vPortExitCritical>
				return pdPASS;
 801438a:	2301      	movs	r3, #1
 801438c:	e069      	b.n	8014462 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d103      	bne.n	801439c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014394:	f001 fe36 	bl	8016004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014398:	2300      	movs	r3, #0
 801439a:	e062      	b.n	8014462 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 801439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d106      	bne.n	80143b0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80143a2:	f107 0310 	add.w	r3, r7, #16
 80143a6:	4618      	mov	r0, r3
 80143a8:	f001 f944 	bl	8015634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80143ac:	2301      	movs	r3, #1
 80143ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80143b0:	f001 fe28 	bl	8016004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80143b4:	f000 fea2 	bl	80150fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80143b8:	f001 fdf0 	bl	8015f9c <vPortEnterCritical>
 80143bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80143c2:	b25b      	sxtb	r3, r3
 80143c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143c8:	d103      	bne.n	80143d2 <xQueueReceive+0x12e>
 80143ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143cc:	2200      	movs	r2, #0
 80143ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80143d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80143d8:	b25b      	sxtb	r3, r3
 80143da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143de:	d103      	bne.n	80143e8 <xQueueReceive+0x144>
 80143e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e2:	2200      	movs	r2, #0
 80143e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80143e8:	f001 fe0c 	bl	8016004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80143ec:	1d3a      	adds	r2, r7, #4
 80143ee:	f107 0310 	add.w	r3, r7, #16
 80143f2:	4611      	mov	r1, r2
 80143f4:	4618      	mov	r0, r3
 80143f6:	f001 f933 	bl	8015660 <xTaskCheckForTimeOut>
 80143fa:	4603      	mov	r3, r0
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d123      	bne.n	8014448 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014402:	f000 fb2e 	bl	8014a62 <prvIsQueueEmpty>
 8014406:	4603      	mov	r3, r0
 8014408:	2b00      	cmp	r3, #0
 801440a:	d017      	beq.n	801443c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801440e:	3324      	adds	r3, #36	; 0x24
 8014410:	687a      	ldr	r2, [r7, #4]
 8014412:	4611      	mov	r1, r2
 8014414:	4618      	mov	r0, r3
 8014416:	f001 f883 	bl	8015520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801441a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801441c:	f000 facf 	bl	80149be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014420:	f000 fe7a 	bl	8015118 <xTaskResumeAll>
 8014424:	4603      	mov	r3, r0
 8014426:	2b00      	cmp	r3, #0
 8014428:	d189      	bne.n	801433e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801442a:	4b10      	ldr	r3, [pc, #64]	; (801446c <xQueueReceive+0x1c8>)
 801442c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014430:	601a      	str	r2, [r3, #0]
 8014432:	f3bf 8f4f 	dsb	sy
 8014436:	f3bf 8f6f 	isb	sy
 801443a:	e780      	b.n	801433e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801443c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801443e:	f000 fabe 	bl	80149be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014442:	f000 fe69 	bl	8015118 <xTaskResumeAll>
 8014446:	e77a      	b.n	801433e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801444a:	f000 fab8 	bl	80149be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801444e:	f000 fe63 	bl	8015118 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014454:	f000 fb05 	bl	8014a62 <prvIsQueueEmpty>
 8014458:	4603      	mov	r3, r0
 801445a:	2b00      	cmp	r3, #0
 801445c:	f43f af6f 	beq.w	801433e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014460:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014462:	4618      	mov	r0, r3
 8014464:	3730      	adds	r7, #48	; 0x30
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop
 801446c:	e000ed04 	.word	0xe000ed04

08014470 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b08e      	sub	sp, #56	; 0x38
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801447a:	2300      	movs	r3, #0
 801447c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014482:	2300      	movs	r3, #0
 8014484:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014488:	2b00      	cmp	r3, #0
 801448a:	d10c      	bne.n	80144a6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 801448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014490:	b672      	cpsid	i
 8014492:	f383 8811 	msr	BASEPRI, r3
 8014496:	f3bf 8f6f 	isb	sy
 801449a:	f3bf 8f4f 	dsb	sy
 801449e:	b662      	cpsie	i
 80144a0:	623b      	str	r3, [r7, #32]
}
 80144a2:	bf00      	nop
 80144a4:	e7fe      	b.n	80144a4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80144a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d00c      	beq.n	80144c8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80144ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144b2:	b672      	cpsid	i
 80144b4:	f383 8811 	msr	BASEPRI, r3
 80144b8:	f3bf 8f6f 	isb	sy
 80144bc:	f3bf 8f4f 	dsb	sy
 80144c0:	b662      	cpsie	i
 80144c2:	61fb      	str	r3, [r7, #28]
}
 80144c4:	bf00      	nop
 80144c6:	e7fe      	b.n	80144c6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80144c8:	f001 fa1a 	bl	8015900 <xTaskGetSchedulerState>
 80144cc:	4603      	mov	r3, r0
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d102      	bne.n	80144d8 <xQueueSemaphoreTake+0x68>
 80144d2:	683b      	ldr	r3, [r7, #0]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d101      	bne.n	80144dc <xQueueSemaphoreTake+0x6c>
 80144d8:	2301      	movs	r3, #1
 80144da:	e000      	b.n	80144de <xQueueSemaphoreTake+0x6e>
 80144dc:	2300      	movs	r3, #0
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d10c      	bne.n	80144fc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80144e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e6:	b672      	cpsid	i
 80144e8:	f383 8811 	msr	BASEPRI, r3
 80144ec:	f3bf 8f6f 	isb	sy
 80144f0:	f3bf 8f4f 	dsb	sy
 80144f4:	b662      	cpsie	i
 80144f6:	61bb      	str	r3, [r7, #24]
}
 80144f8:	bf00      	nop
 80144fa:	e7fe      	b.n	80144fa <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80144fc:	f001 fd4e 	bl	8015f9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014504:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014508:	2b00      	cmp	r3, #0
 801450a:	d024      	beq.n	8014556 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801450e:	1e5a      	subs	r2, r3, #1
 8014510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014512:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d104      	bne.n	8014526 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801451c:	f001 fbb6 	bl	8015c8c <pvTaskIncrementMutexHeldCount>
 8014520:	4602      	mov	r2, r0
 8014522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014524:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014528:	691b      	ldr	r3, [r3, #16]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d00f      	beq.n	801454e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014530:	3310      	adds	r3, #16
 8014532:	4618      	mov	r0, r3
 8014534:	f001 f81a 	bl	801556c <xTaskRemoveFromEventList>
 8014538:	4603      	mov	r3, r0
 801453a:	2b00      	cmp	r3, #0
 801453c:	d007      	beq.n	801454e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801453e:	4b55      	ldr	r3, [pc, #340]	; (8014694 <xQueueSemaphoreTake+0x224>)
 8014540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014544:	601a      	str	r2, [r3, #0]
 8014546:	f3bf 8f4f 	dsb	sy
 801454a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801454e:	f001 fd59 	bl	8016004 <vPortExitCritical>
				return pdPASS;
 8014552:	2301      	movs	r3, #1
 8014554:	e099      	b.n	801468a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d113      	bne.n	8014584 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801455e:	2b00      	cmp	r3, #0
 8014560:	d00c      	beq.n	801457c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8014562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014566:	b672      	cpsid	i
 8014568:	f383 8811 	msr	BASEPRI, r3
 801456c:	f3bf 8f6f 	isb	sy
 8014570:	f3bf 8f4f 	dsb	sy
 8014574:	b662      	cpsie	i
 8014576:	617b      	str	r3, [r7, #20]
}
 8014578:	bf00      	nop
 801457a:	e7fe      	b.n	801457a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801457c:	f001 fd42 	bl	8016004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014580:	2300      	movs	r3, #0
 8014582:	e082      	b.n	801468a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014586:	2b00      	cmp	r3, #0
 8014588:	d106      	bne.n	8014598 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801458a:	f107 030c 	add.w	r3, r7, #12
 801458e:	4618      	mov	r0, r3
 8014590:	f001 f850 	bl	8015634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014594:	2301      	movs	r3, #1
 8014596:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014598:	f001 fd34 	bl	8016004 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801459c:	f000 fdae 	bl	80150fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80145a0:	f001 fcfc 	bl	8015f9c <vPortEnterCritical>
 80145a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80145aa:	b25b      	sxtb	r3, r3
 80145ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145b0:	d103      	bne.n	80145ba <xQueueSemaphoreTake+0x14a>
 80145b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b4:	2200      	movs	r2, #0
 80145b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80145ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145c0:	b25b      	sxtb	r3, r3
 80145c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145c6:	d103      	bne.n	80145d0 <xQueueSemaphoreTake+0x160>
 80145c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ca:	2200      	movs	r2, #0
 80145cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80145d0:	f001 fd18 	bl	8016004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80145d4:	463a      	mov	r2, r7
 80145d6:	f107 030c 	add.w	r3, r7, #12
 80145da:	4611      	mov	r1, r2
 80145dc:	4618      	mov	r0, r3
 80145de:	f001 f83f 	bl	8015660 <xTaskCheckForTimeOut>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d132      	bne.n	801464e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80145e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145ea:	f000 fa3a 	bl	8014a62 <prvIsQueueEmpty>
 80145ee:	4603      	mov	r3, r0
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d026      	beq.n	8014642 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80145f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d109      	bne.n	8014610 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80145fc:	f001 fcce 	bl	8015f9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014602:	689b      	ldr	r3, [r3, #8]
 8014604:	4618      	mov	r0, r3
 8014606:	f001 f999 	bl	801593c <xTaskPriorityInherit>
 801460a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801460c:	f001 fcfa 	bl	8016004 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014612:	3324      	adds	r3, #36	; 0x24
 8014614:	683a      	ldr	r2, [r7, #0]
 8014616:	4611      	mov	r1, r2
 8014618:	4618      	mov	r0, r3
 801461a:	f000 ff81 	bl	8015520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801461e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014620:	f000 f9cd 	bl	80149be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014624:	f000 fd78 	bl	8015118 <xTaskResumeAll>
 8014628:	4603      	mov	r3, r0
 801462a:	2b00      	cmp	r3, #0
 801462c:	f47f af66 	bne.w	80144fc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8014630:	4b18      	ldr	r3, [pc, #96]	; (8014694 <xQueueSemaphoreTake+0x224>)
 8014632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014636:	601a      	str	r2, [r3, #0]
 8014638:	f3bf 8f4f 	dsb	sy
 801463c:	f3bf 8f6f 	isb	sy
 8014640:	e75c      	b.n	80144fc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014644:	f000 f9bb 	bl	80149be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014648:	f000 fd66 	bl	8015118 <xTaskResumeAll>
 801464c:	e756      	b.n	80144fc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801464e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014650:	f000 f9b5 	bl	80149be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014654:	f000 fd60 	bl	8015118 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801465a:	f000 fa02 	bl	8014a62 <prvIsQueueEmpty>
 801465e:	4603      	mov	r3, r0
 8014660:	2b00      	cmp	r3, #0
 8014662:	f43f af4b 	beq.w	80144fc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014668:	2b00      	cmp	r3, #0
 801466a:	d00d      	beq.n	8014688 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 801466c:	f001 fc96 	bl	8015f9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014672:	f000 f8fc 	bl	801486e <prvGetDisinheritPriorityAfterTimeout>
 8014676:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801467a:	689b      	ldr	r3, [r3, #8]
 801467c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801467e:	4618      	mov	r0, r3
 8014680:	f001 fa66 	bl	8015b50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014684:	f001 fcbe 	bl	8016004 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014688:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801468a:	4618      	mov	r0, r3
 801468c:	3738      	adds	r7, #56	; 0x38
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}
 8014692:	bf00      	nop
 8014694:	e000ed04 	.word	0xe000ed04

08014698 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b08e      	sub	sp, #56	; 0x38
 801469c:	af00      	add	r7, sp, #0
 801469e:	60f8      	str	r0, [r7, #12]
 80146a0:	60b9      	str	r1, [r7, #8]
 80146a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80146a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d10c      	bne.n	80146c8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80146ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b2:	b672      	cpsid	i
 80146b4:	f383 8811 	msr	BASEPRI, r3
 80146b8:	f3bf 8f6f 	isb	sy
 80146bc:	f3bf 8f4f 	dsb	sy
 80146c0:	b662      	cpsie	i
 80146c2:	623b      	str	r3, [r7, #32]
}
 80146c4:	bf00      	nop
 80146c6:	e7fe      	b.n	80146c6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d103      	bne.n	80146d6 <xQueueReceiveFromISR+0x3e>
 80146ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d101      	bne.n	80146da <xQueueReceiveFromISR+0x42>
 80146d6:	2301      	movs	r3, #1
 80146d8:	e000      	b.n	80146dc <xQueueReceiveFromISR+0x44>
 80146da:	2300      	movs	r3, #0
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d10c      	bne.n	80146fa <xQueueReceiveFromISR+0x62>
	__asm volatile
 80146e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146e4:	b672      	cpsid	i
 80146e6:	f383 8811 	msr	BASEPRI, r3
 80146ea:	f3bf 8f6f 	isb	sy
 80146ee:	f3bf 8f4f 	dsb	sy
 80146f2:	b662      	cpsie	i
 80146f4:	61fb      	str	r3, [r7, #28]
}
 80146f6:	bf00      	nop
 80146f8:	e7fe      	b.n	80146f8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80146fa:	f001 fd37 	bl	801616c <vPortValidateInterruptPriority>
	__asm volatile
 80146fe:	f3ef 8211 	mrs	r2, BASEPRI
 8014702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014706:	b672      	cpsid	i
 8014708:	f383 8811 	msr	BASEPRI, r3
 801470c:	f3bf 8f6f 	isb	sy
 8014710:	f3bf 8f4f 	dsb	sy
 8014714:	b662      	cpsie	i
 8014716:	61ba      	str	r2, [r7, #24]
 8014718:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801471a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801471c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014722:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014726:	2b00      	cmp	r3, #0
 8014728:	d02f      	beq.n	801478a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801472c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014734:	68b9      	ldr	r1, [r7, #8]
 8014736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014738:	f000 f91b 	bl	8014972 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801473e:	1e5a      	subs	r2, r3, #1
 8014740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014742:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014744:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801474c:	d112      	bne.n	8014774 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014750:	691b      	ldr	r3, [r3, #16]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d016      	beq.n	8014784 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014758:	3310      	adds	r3, #16
 801475a:	4618      	mov	r0, r3
 801475c:	f000 ff06 	bl	801556c <xTaskRemoveFromEventList>
 8014760:	4603      	mov	r3, r0
 8014762:	2b00      	cmp	r3, #0
 8014764:	d00e      	beq.n	8014784 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d00b      	beq.n	8014784 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	2201      	movs	r2, #1
 8014770:	601a      	str	r2, [r3, #0]
 8014772:	e007      	b.n	8014784 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014778:	3301      	adds	r3, #1
 801477a:	b2db      	uxtb	r3, r3
 801477c:	b25a      	sxtb	r2, r3
 801477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014784:	2301      	movs	r3, #1
 8014786:	637b      	str	r3, [r7, #52]	; 0x34
 8014788:	e001      	b.n	801478e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801478a:	2300      	movs	r3, #0
 801478c:	637b      	str	r3, [r7, #52]	; 0x34
 801478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014790:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	f383 8811 	msr	BASEPRI, r3
}
 8014798:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801479a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801479c:	4618      	mov	r0, r3
 801479e:	3738      	adds	r7, #56	; 0x38
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}

080147a4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b084      	sub	sp, #16
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d10c      	bne.n	80147cc <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80147b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147b6:	b672      	cpsid	i
 80147b8:	f383 8811 	msr	BASEPRI, r3
 80147bc:	f3bf 8f6f 	isb	sy
 80147c0:	f3bf 8f4f 	dsb	sy
 80147c4:	b662      	cpsie	i
 80147c6:	60bb      	str	r3, [r7, #8]
}
 80147c8:	bf00      	nop
 80147ca:	e7fe      	b.n	80147ca <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80147cc:	f001 fbe6 	bl	8015f9c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147d4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80147d6:	f001 fc15 	bl	8016004 <vPortExitCritical>

	return uxReturn;
 80147da:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80147dc:	4618      	mov	r0, r3
 80147de:	3710      	adds	r7, #16
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}

080147e4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80147e4:	b480      	push	{r7}
 80147e6:	b087      	sub	sp, #28
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d10c      	bne.n	8014810 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 80147f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fa:	b672      	cpsid	i
 80147fc:	f383 8811 	msr	BASEPRI, r3
 8014800:	f3bf 8f6f 	isb	sy
 8014804:	f3bf 8f4f 	dsb	sy
 8014808:	b662      	cpsie	i
 801480a:	60fb      	str	r3, [r7, #12]
}
 801480c:	bf00      	nop
 801480e:	e7fe      	b.n	801480e <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8014810:	697b      	ldr	r3, [r7, #20]
 8014812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014814:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8014816:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014818:	4618      	mov	r0, r3
 801481a:	371c      	adds	r7, #28
 801481c:	46bd      	mov	sp, r7
 801481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014822:	4770      	bx	lr

08014824 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b084      	sub	sp, #16
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d10c      	bne.n	8014850 <vQueueDelete+0x2c>
	__asm volatile
 8014836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801483a:	b672      	cpsid	i
 801483c:	f383 8811 	msr	BASEPRI, r3
 8014840:	f3bf 8f6f 	isb	sy
 8014844:	f3bf 8f4f 	dsb	sy
 8014848:	b662      	cpsie	i
 801484a:	60bb      	str	r3, [r7, #8]
}
 801484c:	bf00      	nop
 801484e:	e7fe      	b.n	801484e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8014850:	68f8      	ldr	r0, [r7, #12]
 8014852:	f000 f935 	bl	8014ac0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801485c:	2b00      	cmp	r3, #0
 801485e:	d102      	bne.n	8014866 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8014860:	68f8      	ldr	r0, [r7, #12]
 8014862:	f001 fd97 	bl	8016394 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014866:	bf00      	nop
 8014868:	3710      	adds	r7, #16
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}

0801486e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801486e:	b480      	push	{r7}
 8014870:	b085      	sub	sp, #20
 8014872:	af00      	add	r7, sp, #0
 8014874:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801487a:	2b00      	cmp	r3, #0
 801487c:	d006      	beq.n	801488c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	f1c3 0307 	rsb	r3, r3, #7
 8014888:	60fb      	str	r3, [r7, #12]
 801488a:	e001      	b.n	8014890 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801488c:	2300      	movs	r3, #0
 801488e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014890:	68fb      	ldr	r3, [r7, #12]
	}
 8014892:	4618      	mov	r0, r3
 8014894:	3714      	adds	r7, #20
 8014896:	46bd      	mov	sp, r7
 8014898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489c:	4770      	bx	lr

0801489e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801489e:	b580      	push	{r7, lr}
 80148a0:	b086      	sub	sp, #24
 80148a2:	af00      	add	r7, sp, #0
 80148a4:	60f8      	str	r0, [r7, #12]
 80148a6:	60b9      	str	r1, [r7, #8]
 80148a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80148aa:	2300      	movs	r3, #0
 80148ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d10d      	bne.n	80148d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d14d      	bne.n	8014960 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	689b      	ldr	r3, [r3, #8]
 80148c8:	4618      	mov	r0, r3
 80148ca:	f001 f8b7 	bl	8015a3c <xTaskPriorityDisinherit>
 80148ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	2200      	movs	r2, #0
 80148d4:	609a      	str	r2, [r3, #8]
 80148d6:	e043      	b.n	8014960 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d119      	bne.n	8014912 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	6858      	ldr	r0, [r3, #4]
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148e6:	461a      	mov	r2, r3
 80148e8:	68b9      	ldr	r1, [r7, #8]
 80148ea:	f00f f8a4 	bl	8023a36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	685a      	ldr	r2, [r3, #4]
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148f6:	441a      	add	r2, r3
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	685a      	ldr	r2, [r3, #4]
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	689b      	ldr	r3, [r3, #8]
 8014904:	429a      	cmp	r2, r3
 8014906:	d32b      	bcc.n	8014960 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	681a      	ldr	r2, [r3, #0]
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	605a      	str	r2, [r3, #4]
 8014910:	e026      	b.n	8014960 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	68d8      	ldr	r0, [r3, #12]
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801491a:	461a      	mov	r2, r3
 801491c:	68b9      	ldr	r1, [r7, #8]
 801491e:	f00f f88a 	bl	8023a36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	68da      	ldr	r2, [r3, #12]
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801492a:	425b      	negs	r3, r3
 801492c:	441a      	add	r2, r3
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	68da      	ldr	r2, [r3, #12]
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	429a      	cmp	r2, r3
 801493c:	d207      	bcs.n	801494e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	689a      	ldr	r2, [r3, #8]
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014946:	425b      	negs	r3, r3
 8014948:	441a      	add	r2, r3
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	2b02      	cmp	r3, #2
 8014952:	d105      	bne.n	8014960 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d002      	beq.n	8014960 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801495a:	693b      	ldr	r3, [r7, #16]
 801495c:	3b01      	subs	r3, #1
 801495e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014960:	693b      	ldr	r3, [r7, #16]
 8014962:	1c5a      	adds	r2, r3, #1
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014968:	697b      	ldr	r3, [r7, #20]
}
 801496a:	4618      	mov	r0, r3
 801496c:	3718      	adds	r7, #24
 801496e:	46bd      	mov	sp, r7
 8014970:	bd80      	pop	{r7, pc}

08014972 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014972:	b580      	push	{r7, lr}
 8014974:	b082      	sub	sp, #8
 8014976:	af00      	add	r7, sp, #0
 8014978:	6078      	str	r0, [r7, #4]
 801497a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014980:	2b00      	cmp	r3, #0
 8014982:	d018      	beq.n	80149b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	68da      	ldr	r2, [r3, #12]
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801498c:	441a      	add	r2, r3
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	68da      	ldr	r2, [r3, #12]
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	689b      	ldr	r3, [r3, #8]
 801499a:	429a      	cmp	r2, r3
 801499c:	d303      	bcc.n	80149a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	681a      	ldr	r2, [r3, #0]
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	68d9      	ldr	r1, [r3, #12]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149ae:	461a      	mov	r2, r3
 80149b0:	6838      	ldr	r0, [r7, #0]
 80149b2:	f00f f840 	bl	8023a36 <memcpy>
	}
}
 80149b6:	bf00      	nop
 80149b8:	3708      	adds	r7, #8
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}

080149be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80149be:	b580      	push	{r7, lr}
 80149c0:	b084      	sub	sp, #16
 80149c2:	af00      	add	r7, sp, #0
 80149c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80149c6:	f001 fae9 	bl	8015f9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80149d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80149d2:	e011      	b.n	80149f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d012      	beq.n	8014a02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	3324      	adds	r3, #36	; 0x24
 80149e0:	4618      	mov	r0, r3
 80149e2:	f000 fdc3 	bl	801556c <xTaskRemoveFromEventList>
 80149e6:	4603      	mov	r3, r0
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d001      	beq.n	80149f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80149ec:	f000 fe9e 	bl	801572c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80149f0:	7bfb      	ldrb	r3, [r7, #15]
 80149f2:	3b01      	subs	r3, #1
 80149f4:	b2db      	uxtb	r3, r3
 80149f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80149f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	dce9      	bgt.n	80149d4 <prvUnlockQueue+0x16>
 8014a00:	e000      	b.n	8014a04 <prvUnlockQueue+0x46>
					break;
 8014a02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	22ff      	movs	r2, #255	; 0xff
 8014a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014a0c:	f001 fafa 	bl	8016004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014a10:	f001 fac4 	bl	8015f9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014a1c:	e011      	b.n	8014a42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	691b      	ldr	r3, [r3, #16]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d012      	beq.n	8014a4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	3310      	adds	r3, #16
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f000 fd9e 	bl	801556c <xTaskRemoveFromEventList>
 8014a30:	4603      	mov	r3, r0
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d001      	beq.n	8014a3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014a36:	f000 fe79 	bl	801572c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014a3a:	7bbb      	ldrb	r3, [r7, #14]
 8014a3c:	3b01      	subs	r3, #1
 8014a3e:	b2db      	uxtb	r3, r3
 8014a40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014a42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	dce9      	bgt.n	8014a1e <prvUnlockQueue+0x60>
 8014a4a:	e000      	b.n	8014a4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014a4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	22ff      	movs	r2, #255	; 0xff
 8014a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014a56:	f001 fad5 	bl	8016004 <vPortExitCritical>
}
 8014a5a:	bf00      	nop
 8014a5c:	3710      	adds	r7, #16
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}

08014a62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014a62:	b580      	push	{r7, lr}
 8014a64:	b084      	sub	sp, #16
 8014a66:	af00      	add	r7, sp, #0
 8014a68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014a6a:	f001 fa97 	bl	8015f9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d102      	bne.n	8014a7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014a76:	2301      	movs	r3, #1
 8014a78:	60fb      	str	r3, [r7, #12]
 8014a7a:	e001      	b.n	8014a80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014a80:	f001 fac0 	bl	8016004 <vPortExitCritical>

	return xReturn;
 8014a84:	68fb      	ldr	r3, [r7, #12]
}
 8014a86:	4618      	mov	r0, r3
 8014a88:	3710      	adds	r7, #16
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	bd80      	pop	{r7, pc}

08014a8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014a8e:	b580      	push	{r7, lr}
 8014a90:	b084      	sub	sp, #16
 8014a92:	af00      	add	r7, sp, #0
 8014a94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014a96:	f001 fa81 	bl	8015f9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d102      	bne.n	8014aac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014aa6:	2301      	movs	r3, #1
 8014aa8:	60fb      	str	r3, [r7, #12]
 8014aaa:	e001      	b.n	8014ab0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014aac:	2300      	movs	r3, #0
 8014aae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014ab0:	f001 faa8 	bl	8016004 <vPortExitCritical>

	return xReturn;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
}
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	3710      	adds	r7, #16
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}
	...

08014ac0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8014ac0:	b480      	push	{r7}
 8014ac2:	b085      	sub	sp, #20
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014ac8:	2300      	movs	r3, #0
 8014aca:	60fb      	str	r3, [r7, #12]
 8014acc:	e016      	b.n	8014afc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014ace:	4a10      	ldr	r2, [pc, #64]	; (8014b10 <vQueueUnregisterQueue+0x50>)
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	00db      	lsls	r3, r3, #3
 8014ad4:	4413      	add	r3, r2
 8014ad6:	685b      	ldr	r3, [r3, #4]
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	429a      	cmp	r2, r3
 8014adc:	d10b      	bne.n	8014af6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014ade:	4a0c      	ldr	r2, [pc, #48]	; (8014b10 <vQueueUnregisterQueue+0x50>)
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	2100      	movs	r1, #0
 8014ae4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8014ae8:	4a09      	ldr	r2, [pc, #36]	; (8014b10 <vQueueUnregisterQueue+0x50>)
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	00db      	lsls	r3, r3, #3
 8014aee:	4413      	add	r3, r2
 8014af0:	2200      	movs	r2, #0
 8014af2:	605a      	str	r2, [r3, #4]
				break;
 8014af4:	e006      	b.n	8014b04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	3301      	adds	r3, #1
 8014afa:	60fb      	str	r3, [r7, #12]
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	2b07      	cmp	r3, #7
 8014b00:	d9e5      	bls.n	8014ace <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014b02:	bf00      	nop
 8014b04:	bf00      	nop
 8014b06:	3714      	adds	r7, #20
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0e:	4770      	bx	lr
 8014b10:	20005a28 	.word	0x20005a28

08014b14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b08e      	sub	sp, #56	; 0x38
 8014b18:	af04      	add	r7, sp, #16
 8014b1a:	60f8      	str	r0, [r7, #12]
 8014b1c:	60b9      	str	r1, [r7, #8]
 8014b1e:	607a      	str	r2, [r7, #4]
 8014b20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d10c      	bne.n	8014b42 <xTaskCreateStatic+0x2e>
	__asm volatile
 8014b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b2c:	b672      	cpsid	i
 8014b2e:	f383 8811 	msr	BASEPRI, r3
 8014b32:	f3bf 8f6f 	isb	sy
 8014b36:	f3bf 8f4f 	dsb	sy
 8014b3a:	b662      	cpsie	i
 8014b3c:	623b      	str	r3, [r7, #32]
}
 8014b3e:	bf00      	nop
 8014b40:	e7fe      	b.n	8014b40 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8014b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d10c      	bne.n	8014b62 <xTaskCreateStatic+0x4e>
	__asm volatile
 8014b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b4c:	b672      	cpsid	i
 8014b4e:	f383 8811 	msr	BASEPRI, r3
 8014b52:	f3bf 8f6f 	isb	sy
 8014b56:	f3bf 8f4f 	dsb	sy
 8014b5a:	b662      	cpsie	i
 8014b5c:	61fb      	str	r3, [r7, #28]
}
 8014b5e:	bf00      	nop
 8014b60:	e7fe      	b.n	8014b60 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014b62:	23a4      	movs	r3, #164	; 0xa4
 8014b64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014b66:	693b      	ldr	r3, [r7, #16]
 8014b68:	2ba4      	cmp	r3, #164	; 0xa4
 8014b6a:	d00c      	beq.n	8014b86 <xTaskCreateStatic+0x72>
	__asm volatile
 8014b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b70:	b672      	cpsid	i
 8014b72:	f383 8811 	msr	BASEPRI, r3
 8014b76:	f3bf 8f6f 	isb	sy
 8014b7a:	f3bf 8f4f 	dsb	sy
 8014b7e:	b662      	cpsie	i
 8014b80:	61bb      	str	r3, [r7, #24]
}
 8014b82:	bf00      	nop
 8014b84:	e7fe      	b.n	8014b84 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014b86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d01e      	beq.n	8014bcc <xTaskCreateStatic+0xb8>
 8014b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d01b      	beq.n	8014bcc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba0:	2202      	movs	r2, #2
 8014ba2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	9303      	str	r3, [sp, #12]
 8014baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bac:	9302      	str	r3, [sp, #8]
 8014bae:	f107 0314 	add.w	r3, r7, #20
 8014bb2:	9301      	str	r3, [sp, #4]
 8014bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb6:	9300      	str	r3, [sp, #0]
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	68b9      	ldr	r1, [r7, #8]
 8014bbe:	68f8      	ldr	r0, [r7, #12]
 8014bc0:	f000 f850 	bl	8014c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014bc6:	f000 f8f9 	bl	8014dbc <prvAddNewTaskToReadyList>
 8014bca:	e001      	b.n	8014bd0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014bd0:	697b      	ldr	r3, [r7, #20]
	}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3728      	adds	r7, #40	; 0x28
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}

08014bda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014bda:	b580      	push	{r7, lr}
 8014bdc:	b08c      	sub	sp, #48	; 0x30
 8014bde:	af04      	add	r7, sp, #16
 8014be0:	60f8      	str	r0, [r7, #12]
 8014be2:	60b9      	str	r1, [r7, #8]
 8014be4:	603b      	str	r3, [r7, #0]
 8014be6:	4613      	mov	r3, r2
 8014be8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014bea:	88fb      	ldrh	r3, [r7, #6]
 8014bec:	009b      	lsls	r3, r3, #2
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f001 fb00 	bl	80161f4 <pvPortMalloc>
 8014bf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d00e      	beq.n	8014c1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014bfc:	20a4      	movs	r0, #164	; 0xa4
 8014bfe:	f001 faf9 	bl	80161f4 <pvPortMalloc>
 8014c02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014c04:	69fb      	ldr	r3, [r7, #28]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d003      	beq.n	8014c12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014c0a:	69fb      	ldr	r3, [r7, #28]
 8014c0c:	697a      	ldr	r2, [r7, #20]
 8014c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8014c10:	e005      	b.n	8014c1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014c12:	6978      	ldr	r0, [r7, #20]
 8014c14:	f001 fbbe 	bl	8016394 <vPortFree>
 8014c18:	e001      	b.n	8014c1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014c1e:	69fb      	ldr	r3, [r7, #28]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d017      	beq.n	8014c54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014c24:	69fb      	ldr	r3, [r7, #28]
 8014c26:	2200      	movs	r2, #0
 8014c28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014c2c:	88fa      	ldrh	r2, [r7, #6]
 8014c2e:	2300      	movs	r3, #0
 8014c30:	9303      	str	r3, [sp, #12]
 8014c32:	69fb      	ldr	r3, [r7, #28]
 8014c34:	9302      	str	r3, [sp, #8]
 8014c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c38:	9301      	str	r3, [sp, #4]
 8014c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c3c:	9300      	str	r3, [sp, #0]
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	68b9      	ldr	r1, [r7, #8]
 8014c42:	68f8      	ldr	r0, [r7, #12]
 8014c44:	f000 f80e 	bl	8014c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014c48:	69f8      	ldr	r0, [r7, #28]
 8014c4a:	f000 f8b7 	bl	8014dbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014c4e:	2301      	movs	r3, #1
 8014c50:	61bb      	str	r3, [r7, #24]
 8014c52:	e002      	b.n	8014c5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014c5a:	69bb      	ldr	r3, [r7, #24]
	}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	3720      	adds	r7, #32
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}

08014c64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b088      	sub	sp, #32
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	60f8      	str	r0, [r7, #12]
 8014c6c:	60b9      	str	r1, [r7, #8]
 8014c6e:	607a      	str	r2, [r7, #4]
 8014c70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	009b      	lsls	r3, r3, #2
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	21a5      	movs	r1, #165	; 0xa5
 8014c7e:	f00e fe44 	bl	802390a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014c86:	6879      	ldr	r1, [r7, #4]
 8014c88:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014c8c:	440b      	add	r3, r1
 8014c8e:	009b      	lsls	r3, r3, #2
 8014c90:	4413      	add	r3, r2
 8014c92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014c94:	69bb      	ldr	r3, [r7, #24]
 8014c96:	f023 0307 	bic.w	r3, r3, #7
 8014c9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014c9c:	69bb      	ldr	r3, [r7, #24]
 8014c9e:	f003 0307 	and.w	r3, r3, #7
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d00c      	beq.n	8014cc0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8014ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014caa:	b672      	cpsid	i
 8014cac:	f383 8811 	msr	BASEPRI, r3
 8014cb0:	f3bf 8f6f 	isb	sy
 8014cb4:	f3bf 8f4f 	dsb	sy
 8014cb8:	b662      	cpsie	i
 8014cba:	617b      	str	r3, [r7, #20]
}
 8014cbc:	bf00      	nop
 8014cbe:	e7fe      	b.n	8014cbe <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014cc0:	68bb      	ldr	r3, [r7, #8]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d01f      	beq.n	8014d06 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	61fb      	str	r3, [r7, #28]
 8014cca:	e012      	b.n	8014cf2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014ccc:	68ba      	ldr	r2, [r7, #8]
 8014cce:	69fb      	ldr	r3, [r7, #28]
 8014cd0:	4413      	add	r3, r2
 8014cd2:	7819      	ldrb	r1, [r3, #0]
 8014cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cd6:	69fb      	ldr	r3, [r7, #28]
 8014cd8:	4413      	add	r3, r2
 8014cda:	3334      	adds	r3, #52	; 0x34
 8014cdc:	460a      	mov	r2, r1
 8014cde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014ce0:	68ba      	ldr	r2, [r7, #8]
 8014ce2:	69fb      	ldr	r3, [r7, #28]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	781b      	ldrb	r3, [r3, #0]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d006      	beq.n	8014cfa <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014cec:	69fb      	ldr	r3, [r7, #28]
 8014cee:	3301      	adds	r3, #1
 8014cf0:	61fb      	str	r3, [r7, #28]
 8014cf2:	69fb      	ldr	r3, [r7, #28]
 8014cf4:	2b0f      	cmp	r3, #15
 8014cf6:	d9e9      	bls.n	8014ccc <prvInitialiseNewTask+0x68>
 8014cf8:	e000      	b.n	8014cfc <prvInitialiseNewTask+0x98>
			{
				break;
 8014cfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cfe:	2200      	movs	r2, #0
 8014d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014d04:	e003      	b.n	8014d0e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d08:	2200      	movs	r2, #0
 8014d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d10:	2b06      	cmp	r3, #6
 8014d12:	d901      	bls.n	8014d18 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014d14:	2306      	movs	r3, #6
 8014d16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d22:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d26:	2200      	movs	r2, #0
 8014d28:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d2c:	3304      	adds	r3, #4
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f7fe fddb 	bl	80138ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d36:	3318      	adds	r3, #24
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7fe fdd6 	bl	80138ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d46:	f1c3 0207 	rsb	r2, r3, #7
 8014d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8014d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d56:	2200      	movs	r2, #0
 8014d58:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d64:	2200      	movs	r2, #0
 8014d66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d6c:	3350      	adds	r3, #80	; 0x50
 8014d6e:	224c      	movs	r2, #76	; 0x4c
 8014d70:	2100      	movs	r1, #0
 8014d72:	4618      	mov	r0, r3
 8014d74:	f00e fdc9 	bl	802390a <memset>
 8014d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d7a:	4a0d      	ldr	r2, [pc, #52]	; (8014db0 <prvInitialiseNewTask+0x14c>)
 8014d7c:	655a      	str	r2, [r3, #84]	; 0x54
 8014d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d80:	4a0c      	ldr	r2, [pc, #48]	; (8014db4 <prvInitialiseNewTask+0x150>)
 8014d82:	659a      	str	r2, [r3, #88]	; 0x58
 8014d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d86:	4a0c      	ldr	r2, [pc, #48]	; (8014db8 <prvInitialiseNewTask+0x154>)
 8014d88:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014d8a:	683a      	ldr	r2, [r7, #0]
 8014d8c:	68f9      	ldr	r1, [r7, #12]
 8014d8e:	69b8      	ldr	r0, [r7, #24]
 8014d90:	f000 fff6 	bl	8015d80 <pxPortInitialiseStack>
 8014d94:	4602      	mov	r2, r0
 8014d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d002      	beq.n	8014da6 <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014da6:	bf00      	nop
 8014da8:	3720      	adds	r7, #32
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}
 8014dae:	bf00      	nop
 8014db0:	20011b6c 	.word	0x20011b6c
 8014db4:	20011bd4 	.word	0x20011bd4
 8014db8:	20011c3c 	.word	0x20011c3c

08014dbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b082      	sub	sp, #8
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014dc4:	f001 f8ea 	bl	8015f9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014dc8:	4b2a      	ldr	r3, [pc, #168]	; (8014e74 <prvAddNewTaskToReadyList+0xb8>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	3301      	adds	r3, #1
 8014dce:	4a29      	ldr	r2, [pc, #164]	; (8014e74 <prvAddNewTaskToReadyList+0xb8>)
 8014dd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014dd2:	4b29      	ldr	r3, [pc, #164]	; (8014e78 <prvAddNewTaskToReadyList+0xbc>)
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d109      	bne.n	8014dee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014dda:	4a27      	ldr	r2, [pc, #156]	; (8014e78 <prvAddNewTaskToReadyList+0xbc>)
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014de0:	4b24      	ldr	r3, [pc, #144]	; (8014e74 <prvAddNewTaskToReadyList+0xb8>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	2b01      	cmp	r3, #1
 8014de6:	d110      	bne.n	8014e0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014de8:	f000 fcc6 	bl	8015778 <prvInitialiseTaskLists>
 8014dec:	e00d      	b.n	8014e0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014dee:	4b23      	ldr	r3, [pc, #140]	; (8014e7c <prvAddNewTaskToReadyList+0xc0>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d109      	bne.n	8014e0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014df6:	4b20      	ldr	r3, [pc, #128]	; (8014e78 <prvAddNewTaskToReadyList+0xbc>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d802      	bhi.n	8014e0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014e04:	4a1c      	ldr	r2, [pc, #112]	; (8014e78 <prvAddNewTaskToReadyList+0xbc>)
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014e0a:	4b1d      	ldr	r3, [pc, #116]	; (8014e80 <prvAddNewTaskToReadyList+0xc4>)
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	3301      	adds	r3, #1
 8014e10:	4a1b      	ldr	r2, [pc, #108]	; (8014e80 <prvAddNewTaskToReadyList+0xc4>)
 8014e12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e18:	2201      	movs	r2, #1
 8014e1a:	409a      	lsls	r2, r3
 8014e1c:	4b19      	ldr	r3, [pc, #100]	; (8014e84 <prvAddNewTaskToReadyList+0xc8>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	4313      	orrs	r3, r2
 8014e22:	4a18      	ldr	r2, [pc, #96]	; (8014e84 <prvAddNewTaskToReadyList+0xc8>)
 8014e24:	6013      	str	r3, [r2, #0]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e2a:	4613      	mov	r3, r2
 8014e2c:	009b      	lsls	r3, r3, #2
 8014e2e:	4413      	add	r3, r2
 8014e30:	009b      	lsls	r3, r3, #2
 8014e32:	4a15      	ldr	r2, [pc, #84]	; (8014e88 <prvAddNewTaskToReadyList+0xcc>)
 8014e34:	441a      	add	r2, r3
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	3304      	adds	r3, #4
 8014e3a:	4619      	mov	r1, r3
 8014e3c:	4610      	mov	r0, r2
 8014e3e:	f7fe fd61 	bl	8013904 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014e42:	f001 f8df 	bl	8016004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014e46:	4b0d      	ldr	r3, [pc, #52]	; (8014e7c <prvAddNewTaskToReadyList+0xc0>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d00e      	beq.n	8014e6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014e4e:	4b0a      	ldr	r3, [pc, #40]	; (8014e78 <prvAddNewTaskToReadyList+0xbc>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d207      	bcs.n	8014e6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014e5c:	4b0b      	ldr	r3, [pc, #44]	; (8014e8c <prvAddNewTaskToReadyList+0xd0>)
 8014e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e62:	601a      	str	r2, [r3, #0]
 8014e64:	f3bf 8f4f 	dsb	sy
 8014e68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014e6c:	bf00      	nop
 8014e6e:	3708      	adds	r7, #8
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}
 8014e74:	20005b68 	.word	0x20005b68
 8014e78:	20005a68 	.word	0x20005a68
 8014e7c:	20005b74 	.word	0x20005b74
 8014e80:	20005b84 	.word	0x20005b84
 8014e84:	20005b70 	.word	0x20005b70
 8014e88:	20005a6c 	.word	0x20005a6c
 8014e8c:	e000ed04 	.word	0xe000ed04

08014e90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b084      	sub	sp, #16
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014e98:	f001 f880 	bl	8015f9c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d102      	bne.n	8014ea8 <vTaskDelete+0x18>
 8014ea2:	4b3a      	ldr	r3, [pc, #232]	; (8014f8c <vTaskDelete+0xfc>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	e000      	b.n	8014eaa <vTaskDelete+0x1a>
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	3304      	adds	r3, #4
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7fe fd84 	bl	80139be <uxListRemove>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d115      	bne.n	8014ee8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ec0:	4933      	ldr	r1, [pc, #204]	; (8014f90 <vTaskDelete+0x100>)
 8014ec2:	4613      	mov	r3, r2
 8014ec4:	009b      	lsls	r3, r3, #2
 8014ec6:	4413      	add	r3, r2
 8014ec8:	009b      	lsls	r3, r3, #2
 8014eca:	440b      	add	r3, r1
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d10a      	bne.n	8014ee8 <vTaskDelete+0x58>
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ed6:	2201      	movs	r2, #1
 8014ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8014edc:	43da      	mvns	r2, r3
 8014ede:	4b2d      	ldr	r3, [pc, #180]	; (8014f94 <vTaskDelete+0x104>)
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	4013      	ands	r3, r2
 8014ee4:	4a2b      	ldr	r2, [pc, #172]	; (8014f94 <vTaskDelete+0x104>)
 8014ee6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d004      	beq.n	8014efa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	3318      	adds	r3, #24
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f7fe fd62 	bl	80139be <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8014efa:	4b27      	ldr	r3, [pc, #156]	; (8014f98 <vTaskDelete+0x108>)
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	3301      	adds	r3, #1
 8014f00:	4a25      	ldr	r2, [pc, #148]	; (8014f98 <vTaskDelete+0x108>)
 8014f02:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8014f04:	4b21      	ldr	r3, [pc, #132]	; (8014f8c <vTaskDelete+0xfc>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	68fa      	ldr	r2, [r7, #12]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d10b      	bne.n	8014f26 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	3304      	adds	r3, #4
 8014f12:	4619      	mov	r1, r3
 8014f14:	4821      	ldr	r0, [pc, #132]	; (8014f9c <vTaskDelete+0x10c>)
 8014f16:	f7fe fcf5 	bl	8013904 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8014f1a:	4b21      	ldr	r3, [pc, #132]	; (8014fa0 <vTaskDelete+0x110>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	3301      	adds	r3, #1
 8014f20:	4a1f      	ldr	r2, [pc, #124]	; (8014fa0 <vTaskDelete+0x110>)
 8014f22:	6013      	str	r3, [r2, #0]
 8014f24:	e009      	b.n	8014f3a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8014f26:	4b1f      	ldr	r3, [pc, #124]	; (8014fa4 <vTaskDelete+0x114>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	3b01      	subs	r3, #1
 8014f2c:	4a1d      	ldr	r2, [pc, #116]	; (8014fa4 <vTaskDelete+0x114>)
 8014f2e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8014f30:	68f8      	ldr	r0, [r7, #12]
 8014f32:	f000 fc8f 	bl	8015854 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8014f36:	f000 fcc3 	bl	80158c0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8014f3a:	f001 f863 	bl	8016004 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8014f3e:	4b1a      	ldr	r3, [pc, #104]	; (8014fa8 <vTaskDelete+0x118>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d01d      	beq.n	8014f82 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 8014f46:	4b11      	ldr	r3, [pc, #68]	; (8014f8c <vTaskDelete+0xfc>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d118      	bne.n	8014f82 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8014f50:	4b16      	ldr	r3, [pc, #88]	; (8014fac <vTaskDelete+0x11c>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d00c      	beq.n	8014f72 <vTaskDelete+0xe2>
	__asm volatile
 8014f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f5c:	b672      	cpsid	i
 8014f5e:	f383 8811 	msr	BASEPRI, r3
 8014f62:	f3bf 8f6f 	isb	sy
 8014f66:	f3bf 8f4f 	dsb	sy
 8014f6a:	b662      	cpsie	i
 8014f6c:	60bb      	str	r3, [r7, #8]
}
 8014f6e:	bf00      	nop
 8014f70:	e7fe      	b.n	8014f70 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8014f72:	4b0f      	ldr	r3, [pc, #60]	; (8014fb0 <vTaskDelete+0x120>)
 8014f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f78:	601a      	str	r2, [r3, #0]
 8014f7a:	f3bf 8f4f 	dsb	sy
 8014f7e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014f82:	bf00      	nop
 8014f84:	3710      	adds	r7, #16
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}
 8014f8a:	bf00      	nop
 8014f8c:	20005a68 	.word	0x20005a68
 8014f90:	20005a6c 	.word	0x20005a6c
 8014f94:	20005b70 	.word	0x20005b70
 8014f98:	20005b84 	.word	0x20005b84
 8014f9c:	20005b3c 	.word	0x20005b3c
 8014fa0:	20005b50 	.word	0x20005b50
 8014fa4:	20005b68 	.word	0x20005b68
 8014fa8:	20005b74 	.word	0x20005b74
 8014fac:	20005b90 	.word	0x20005b90
 8014fb0:	e000ed04 	.word	0xe000ed04

08014fb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b084      	sub	sp, #16
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d019      	beq.n	8014ffa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014fc6:	4b14      	ldr	r3, [pc, #80]	; (8015018 <vTaskDelay+0x64>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d00c      	beq.n	8014fe8 <vTaskDelay+0x34>
	__asm volatile
 8014fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd2:	b672      	cpsid	i
 8014fd4:	f383 8811 	msr	BASEPRI, r3
 8014fd8:	f3bf 8f6f 	isb	sy
 8014fdc:	f3bf 8f4f 	dsb	sy
 8014fe0:	b662      	cpsie	i
 8014fe2:	60bb      	str	r3, [r7, #8]
}
 8014fe4:	bf00      	nop
 8014fe6:	e7fe      	b.n	8014fe6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8014fe8:	f000 f888 	bl	80150fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014fec:	2100      	movs	r1, #0
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f000 fe60 	bl	8015cb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014ff4:	f000 f890 	bl	8015118 <xTaskResumeAll>
 8014ff8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d107      	bne.n	8015010 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8015000:	4b06      	ldr	r3, [pc, #24]	; (801501c <vTaskDelay+0x68>)
 8015002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015006:	601a      	str	r2, [r3, #0]
 8015008:	f3bf 8f4f 	dsb	sy
 801500c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015010:	bf00      	nop
 8015012:	3710      	adds	r7, #16
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}
 8015018:	20005b90 	.word	0x20005b90
 801501c:	e000ed04 	.word	0xe000ed04

08015020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b08a      	sub	sp, #40	; 0x28
 8015024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015026:	2300      	movs	r3, #0
 8015028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801502a:	2300      	movs	r3, #0
 801502c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801502e:	463a      	mov	r2, r7
 8015030:	1d39      	adds	r1, r7, #4
 8015032:	f107 0308 	add.w	r3, r7, #8
 8015036:	4618      	mov	r0, r3
 8015038:	f7eb fada 	bl	80005f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801503c:	6839      	ldr	r1, [r7, #0]
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	68ba      	ldr	r2, [r7, #8]
 8015042:	9202      	str	r2, [sp, #8]
 8015044:	9301      	str	r3, [sp, #4]
 8015046:	2300      	movs	r3, #0
 8015048:	9300      	str	r3, [sp, #0]
 801504a:	2300      	movs	r3, #0
 801504c:	460a      	mov	r2, r1
 801504e:	4923      	ldr	r1, [pc, #140]	; (80150dc <vTaskStartScheduler+0xbc>)
 8015050:	4823      	ldr	r0, [pc, #140]	; (80150e0 <vTaskStartScheduler+0xc0>)
 8015052:	f7ff fd5f 	bl	8014b14 <xTaskCreateStatic>
 8015056:	4603      	mov	r3, r0
 8015058:	4a22      	ldr	r2, [pc, #136]	; (80150e4 <vTaskStartScheduler+0xc4>)
 801505a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801505c:	4b21      	ldr	r3, [pc, #132]	; (80150e4 <vTaskStartScheduler+0xc4>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d002      	beq.n	801506a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015064:	2301      	movs	r3, #1
 8015066:	617b      	str	r3, [r7, #20]
 8015068:	e001      	b.n	801506e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801506a:	2300      	movs	r3, #0
 801506c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801506e:	697b      	ldr	r3, [r7, #20]
 8015070:	2b01      	cmp	r3, #1
 8015072:	d11d      	bne.n	80150b0 <vTaskStartScheduler+0x90>
	__asm volatile
 8015074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015078:	b672      	cpsid	i
 801507a:	f383 8811 	msr	BASEPRI, r3
 801507e:	f3bf 8f6f 	isb	sy
 8015082:	f3bf 8f4f 	dsb	sy
 8015086:	b662      	cpsie	i
 8015088:	613b      	str	r3, [r7, #16]
}
 801508a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801508c:	4b16      	ldr	r3, [pc, #88]	; (80150e8 <vTaskStartScheduler+0xc8>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	3350      	adds	r3, #80	; 0x50
 8015092:	4a16      	ldr	r2, [pc, #88]	; (80150ec <vTaskStartScheduler+0xcc>)
 8015094:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015096:	4b16      	ldr	r3, [pc, #88]	; (80150f0 <vTaskStartScheduler+0xd0>)
 8015098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801509c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801509e:	4b15      	ldr	r3, [pc, #84]	; (80150f4 <vTaskStartScheduler+0xd4>)
 80150a0:	2201      	movs	r2, #1
 80150a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80150a4:	4b14      	ldr	r3, [pc, #80]	; (80150f8 <vTaskStartScheduler+0xd8>)
 80150a6:	2200      	movs	r2, #0
 80150a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80150aa:	f000 fef9 	bl	8015ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80150ae:	e010      	b.n	80150d2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150b6:	d10c      	bne.n	80150d2 <vTaskStartScheduler+0xb2>
	__asm volatile
 80150b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150bc:	b672      	cpsid	i
 80150be:	f383 8811 	msr	BASEPRI, r3
 80150c2:	f3bf 8f6f 	isb	sy
 80150c6:	f3bf 8f4f 	dsb	sy
 80150ca:	b662      	cpsie	i
 80150cc:	60fb      	str	r3, [r7, #12]
}
 80150ce:	bf00      	nop
 80150d0:	e7fe      	b.n	80150d0 <vTaskStartScheduler+0xb0>
}
 80150d2:	bf00      	nop
 80150d4:	3718      	adds	r7, #24
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}
 80150da:	bf00      	nop
 80150dc:	08024de0 	.word	0x08024de0
 80150e0:	08015745 	.word	0x08015745
 80150e4:	20005b8c 	.word	0x20005b8c
 80150e8:	20005a68 	.word	0x20005a68
 80150ec:	200000a8 	.word	0x200000a8
 80150f0:	20005b88 	.word	0x20005b88
 80150f4:	20005b74 	.word	0x20005b74
 80150f8:	20005b6c 	.word	0x20005b6c

080150fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80150fc:	b480      	push	{r7}
 80150fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015100:	4b04      	ldr	r3, [pc, #16]	; (8015114 <vTaskSuspendAll+0x18>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	3301      	adds	r3, #1
 8015106:	4a03      	ldr	r2, [pc, #12]	; (8015114 <vTaskSuspendAll+0x18>)
 8015108:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801510a:	bf00      	nop
 801510c:	46bd      	mov	sp, r7
 801510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015112:	4770      	bx	lr
 8015114:	20005b90 	.word	0x20005b90

08015118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b084      	sub	sp, #16
 801511c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801511e:	2300      	movs	r3, #0
 8015120:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015122:	2300      	movs	r3, #0
 8015124:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015126:	4b42      	ldr	r3, [pc, #264]	; (8015230 <xTaskResumeAll+0x118>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d10c      	bne.n	8015148 <xTaskResumeAll+0x30>
	__asm volatile
 801512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015132:	b672      	cpsid	i
 8015134:	f383 8811 	msr	BASEPRI, r3
 8015138:	f3bf 8f6f 	isb	sy
 801513c:	f3bf 8f4f 	dsb	sy
 8015140:	b662      	cpsie	i
 8015142:	603b      	str	r3, [r7, #0]
}
 8015144:	bf00      	nop
 8015146:	e7fe      	b.n	8015146 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015148:	f000 ff28 	bl	8015f9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801514c:	4b38      	ldr	r3, [pc, #224]	; (8015230 <xTaskResumeAll+0x118>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	3b01      	subs	r3, #1
 8015152:	4a37      	ldr	r2, [pc, #220]	; (8015230 <xTaskResumeAll+0x118>)
 8015154:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015156:	4b36      	ldr	r3, [pc, #216]	; (8015230 <xTaskResumeAll+0x118>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d161      	bne.n	8015222 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801515e:	4b35      	ldr	r3, [pc, #212]	; (8015234 <xTaskResumeAll+0x11c>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d05d      	beq.n	8015222 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015166:	e02e      	b.n	80151c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015168:	4b33      	ldr	r3, [pc, #204]	; (8015238 <xTaskResumeAll+0x120>)
 801516a:	68db      	ldr	r3, [r3, #12]
 801516c:	68db      	ldr	r3, [r3, #12]
 801516e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	3318      	adds	r3, #24
 8015174:	4618      	mov	r0, r3
 8015176:	f7fe fc22 	bl	80139be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	3304      	adds	r3, #4
 801517e:	4618      	mov	r0, r3
 8015180:	f7fe fc1d 	bl	80139be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015188:	2201      	movs	r2, #1
 801518a:	409a      	lsls	r2, r3
 801518c:	4b2b      	ldr	r3, [pc, #172]	; (801523c <xTaskResumeAll+0x124>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	4313      	orrs	r3, r2
 8015192:	4a2a      	ldr	r2, [pc, #168]	; (801523c <xTaskResumeAll+0x124>)
 8015194:	6013      	str	r3, [r2, #0]
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801519a:	4613      	mov	r3, r2
 801519c:	009b      	lsls	r3, r3, #2
 801519e:	4413      	add	r3, r2
 80151a0:	009b      	lsls	r3, r3, #2
 80151a2:	4a27      	ldr	r2, [pc, #156]	; (8015240 <xTaskResumeAll+0x128>)
 80151a4:	441a      	add	r2, r3
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	3304      	adds	r3, #4
 80151aa:	4619      	mov	r1, r3
 80151ac:	4610      	mov	r0, r2
 80151ae:	f7fe fba9 	bl	8013904 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151b6:	4b23      	ldr	r3, [pc, #140]	; (8015244 <xTaskResumeAll+0x12c>)
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151bc:	429a      	cmp	r2, r3
 80151be:	d302      	bcc.n	80151c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80151c0:	4b21      	ldr	r3, [pc, #132]	; (8015248 <xTaskResumeAll+0x130>)
 80151c2:	2201      	movs	r2, #1
 80151c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80151c6:	4b1c      	ldr	r3, [pc, #112]	; (8015238 <xTaskResumeAll+0x120>)
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d1cc      	bne.n	8015168 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d001      	beq.n	80151d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80151d4:	f000 fb74 	bl	80158c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80151d8:	4b1c      	ldr	r3, [pc, #112]	; (801524c <xTaskResumeAll+0x134>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d010      	beq.n	8015206 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80151e4:	f000 f858 	bl	8015298 <xTaskIncrementTick>
 80151e8:	4603      	mov	r3, r0
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d002      	beq.n	80151f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80151ee:	4b16      	ldr	r3, [pc, #88]	; (8015248 <xTaskResumeAll+0x130>)
 80151f0:	2201      	movs	r2, #1
 80151f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	3b01      	subs	r3, #1
 80151f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d1f1      	bne.n	80151e4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8015200:	4b12      	ldr	r3, [pc, #72]	; (801524c <xTaskResumeAll+0x134>)
 8015202:	2200      	movs	r2, #0
 8015204:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015206:	4b10      	ldr	r3, [pc, #64]	; (8015248 <xTaskResumeAll+0x130>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d009      	beq.n	8015222 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801520e:	2301      	movs	r3, #1
 8015210:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015212:	4b0f      	ldr	r3, [pc, #60]	; (8015250 <xTaskResumeAll+0x138>)
 8015214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015218:	601a      	str	r2, [r3, #0]
 801521a:	f3bf 8f4f 	dsb	sy
 801521e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015222:	f000 feef 	bl	8016004 <vPortExitCritical>

	return xAlreadyYielded;
 8015226:	68bb      	ldr	r3, [r7, #8]
}
 8015228:	4618      	mov	r0, r3
 801522a:	3710      	adds	r7, #16
 801522c:	46bd      	mov	sp, r7
 801522e:	bd80      	pop	{r7, pc}
 8015230:	20005b90 	.word	0x20005b90
 8015234:	20005b68 	.word	0x20005b68
 8015238:	20005b28 	.word	0x20005b28
 801523c:	20005b70 	.word	0x20005b70
 8015240:	20005a6c 	.word	0x20005a6c
 8015244:	20005a68 	.word	0x20005a68
 8015248:	20005b7c 	.word	0x20005b7c
 801524c:	20005b78 	.word	0x20005b78
 8015250:	e000ed04 	.word	0xe000ed04

08015254 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015254:	b480      	push	{r7}
 8015256:	b083      	sub	sp, #12
 8015258:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801525a:	4b05      	ldr	r3, [pc, #20]	; (8015270 <xTaskGetTickCount+0x1c>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015260:	687b      	ldr	r3, [r7, #4]
}
 8015262:	4618      	mov	r0, r3
 8015264:	370c      	adds	r7, #12
 8015266:	46bd      	mov	sp, r7
 8015268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526c:	4770      	bx	lr
 801526e:	bf00      	nop
 8015270:	20005b6c 	.word	0x20005b6c

08015274 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b082      	sub	sp, #8
 8015278:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801527a:	f000 ff77 	bl	801616c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801527e:	2300      	movs	r3, #0
 8015280:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015282:	4b04      	ldr	r3, [pc, #16]	; (8015294 <xTaskGetTickCountFromISR+0x20>)
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015288:	683b      	ldr	r3, [r7, #0]
}
 801528a:	4618      	mov	r0, r3
 801528c:	3708      	adds	r7, #8
 801528e:	46bd      	mov	sp, r7
 8015290:	bd80      	pop	{r7, pc}
 8015292:	bf00      	nop
 8015294:	20005b6c 	.word	0x20005b6c

08015298 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b086      	sub	sp, #24
 801529c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801529e:	2300      	movs	r3, #0
 80152a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80152a2:	4b4f      	ldr	r3, [pc, #316]	; (80153e0 <xTaskIncrementTick+0x148>)
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	f040 808a 	bne.w	80153c0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80152ac:	4b4d      	ldr	r3, [pc, #308]	; (80153e4 <xTaskIncrementTick+0x14c>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	3301      	adds	r3, #1
 80152b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80152b4:	4a4b      	ldr	r2, [pc, #300]	; (80153e4 <xTaskIncrementTick+0x14c>)
 80152b6:	693b      	ldr	r3, [r7, #16]
 80152b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80152ba:	693b      	ldr	r3, [r7, #16]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d122      	bne.n	8015306 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80152c0:	4b49      	ldr	r3, [pc, #292]	; (80153e8 <xTaskIncrementTick+0x150>)
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d00c      	beq.n	80152e4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80152ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ce:	b672      	cpsid	i
 80152d0:	f383 8811 	msr	BASEPRI, r3
 80152d4:	f3bf 8f6f 	isb	sy
 80152d8:	f3bf 8f4f 	dsb	sy
 80152dc:	b662      	cpsie	i
 80152de:	603b      	str	r3, [r7, #0]
}
 80152e0:	bf00      	nop
 80152e2:	e7fe      	b.n	80152e2 <xTaskIncrementTick+0x4a>
 80152e4:	4b40      	ldr	r3, [pc, #256]	; (80153e8 <xTaskIncrementTick+0x150>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	60fb      	str	r3, [r7, #12]
 80152ea:	4b40      	ldr	r3, [pc, #256]	; (80153ec <xTaskIncrementTick+0x154>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	4a3e      	ldr	r2, [pc, #248]	; (80153e8 <xTaskIncrementTick+0x150>)
 80152f0:	6013      	str	r3, [r2, #0]
 80152f2:	4a3e      	ldr	r2, [pc, #248]	; (80153ec <xTaskIncrementTick+0x154>)
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	6013      	str	r3, [r2, #0]
 80152f8:	4b3d      	ldr	r3, [pc, #244]	; (80153f0 <xTaskIncrementTick+0x158>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	3301      	adds	r3, #1
 80152fe:	4a3c      	ldr	r2, [pc, #240]	; (80153f0 <xTaskIncrementTick+0x158>)
 8015300:	6013      	str	r3, [r2, #0]
 8015302:	f000 fadd 	bl	80158c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015306:	4b3b      	ldr	r3, [pc, #236]	; (80153f4 <xTaskIncrementTick+0x15c>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	693a      	ldr	r2, [r7, #16]
 801530c:	429a      	cmp	r2, r3
 801530e:	d348      	bcc.n	80153a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015310:	4b35      	ldr	r3, [pc, #212]	; (80153e8 <xTaskIncrementTick+0x150>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d104      	bne.n	8015324 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801531a:	4b36      	ldr	r3, [pc, #216]	; (80153f4 <xTaskIncrementTick+0x15c>)
 801531c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015320:	601a      	str	r2, [r3, #0]
					break;
 8015322:	e03e      	b.n	80153a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015324:	4b30      	ldr	r3, [pc, #192]	; (80153e8 <xTaskIncrementTick+0x150>)
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	68db      	ldr	r3, [r3, #12]
 801532a:	68db      	ldr	r3, [r3, #12]
 801532c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	685b      	ldr	r3, [r3, #4]
 8015332:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015334:	693a      	ldr	r2, [r7, #16]
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	429a      	cmp	r2, r3
 801533a:	d203      	bcs.n	8015344 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801533c:	4a2d      	ldr	r2, [pc, #180]	; (80153f4 <xTaskIncrementTick+0x15c>)
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015342:	e02e      	b.n	80153a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015344:	68bb      	ldr	r3, [r7, #8]
 8015346:	3304      	adds	r3, #4
 8015348:	4618      	mov	r0, r3
 801534a:	f7fe fb38 	bl	80139be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801534e:	68bb      	ldr	r3, [r7, #8]
 8015350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015352:	2b00      	cmp	r3, #0
 8015354:	d004      	beq.n	8015360 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015356:	68bb      	ldr	r3, [r7, #8]
 8015358:	3318      	adds	r3, #24
 801535a:	4618      	mov	r0, r3
 801535c:	f7fe fb2f 	bl	80139be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015364:	2201      	movs	r2, #1
 8015366:	409a      	lsls	r2, r3
 8015368:	4b23      	ldr	r3, [pc, #140]	; (80153f8 <xTaskIncrementTick+0x160>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	4313      	orrs	r3, r2
 801536e:	4a22      	ldr	r2, [pc, #136]	; (80153f8 <xTaskIncrementTick+0x160>)
 8015370:	6013      	str	r3, [r2, #0]
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015376:	4613      	mov	r3, r2
 8015378:	009b      	lsls	r3, r3, #2
 801537a:	4413      	add	r3, r2
 801537c:	009b      	lsls	r3, r3, #2
 801537e:	4a1f      	ldr	r2, [pc, #124]	; (80153fc <xTaskIncrementTick+0x164>)
 8015380:	441a      	add	r2, r3
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	3304      	adds	r3, #4
 8015386:	4619      	mov	r1, r3
 8015388:	4610      	mov	r0, r2
 801538a:	f7fe fabb 	bl	8013904 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801538e:	68bb      	ldr	r3, [r7, #8]
 8015390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015392:	4b1b      	ldr	r3, [pc, #108]	; (8015400 <xTaskIncrementTick+0x168>)
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015398:	429a      	cmp	r2, r3
 801539a:	d3b9      	bcc.n	8015310 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 801539c:	2301      	movs	r3, #1
 801539e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80153a0:	e7b6      	b.n	8015310 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80153a2:	4b17      	ldr	r3, [pc, #92]	; (8015400 <xTaskIncrementTick+0x168>)
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153a8:	4914      	ldr	r1, [pc, #80]	; (80153fc <xTaskIncrementTick+0x164>)
 80153aa:	4613      	mov	r3, r2
 80153ac:	009b      	lsls	r3, r3, #2
 80153ae:	4413      	add	r3, r2
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	440b      	add	r3, r1
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	2b01      	cmp	r3, #1
 80153b8:	d907      	bls.n	80153ca <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80153ba:	2301      	movs	r3, #1
 80153bc:	617b      	str	r3, [r7, #20]
 80153be:	e004      	b.n	80153ca <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80153c0:	4b10      	ldr	r3, [pc, #64]	; (8015404 <xTaskIncrementTick+0x16c>)
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	3301      	adds	r3, #1
 80153c6:	4a0f      	ldr	r2, [pc, #60]	; (8015404 <xTaskIncrementTick+0x16c>)
 80153c8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80153ca:	4b0f      	ldr	r3, [pc, #60]	; (8015408 <xTaskIncrementTick+0x170>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d001      	beq.n	80153d6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80153d2:	2301      	movs	r3, #1
 80153d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80153d6:	697b      	ldr	r3, [r7, #20]
}
 80153d8:	4618      	mov	r0, r3
 80153da:	3718      	adds	r7, #24
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}
 80153e0:	20005b90 	.word	0x20005b90
 80153e4:	20005b6c 	.word	0x20005b6c
 80153e8:	20005b20 	.word	0x20005b20
 80153ec:	20005b24 	.word	0x20005b24
 80153f0:	20005b80 	.word	0x20005b80
 80153f4:	20005b88 	.word	0x20005b88
 80153f8:	20005b70 	.word	0x20005b70
 80153fc:	20005a6c 	.word	0x20005a6c
 8015400:	20005a68 	.word	0x20005a68
 8015404:	20005b78 	.word	0x20005b78
 8015408:	20005b7c 	.word	0x20005b7c

0801540c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b088      	sub	sp, #32
 8015410:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015412:	4b3d      	ldr	r3, [pc, #244]	; (8015508 <vTaskSwitchContext+0xfc>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d003      	beq.n	8015422 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801541a:	4b3c      	ldr	r3, [pc, #240]	; (801550c <vTaskSwitchContext+0x100>)
 801541c:	2201      	movs	r2, #1
 801541e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015420:	e06d      	b.n	80154fe <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 8015422:	4b3a      	ldr	r3, [pc, #232]	; (801550c <vTaskSwitchContext+0x100>)
 8015424:	2200      	movs	r2, #0
 8015426:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8015428:	4b39      	ldr	r3, [pc, #228]	; (8015510 <vTaskSwitchContext+0x104>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801542e:	61fb      	str	r3, [r7, #28]
 8015430:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8015434:	61bb      	str	r3, [r7, #24]
 8015436:	69fb      	ldr	r3, [r7, #28]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	69ba      	ldr	r2, [r7, #24]
 801543c:	429a      	cmp	r2, r3
 801543e:	d111      	bne.n	8015464 <vTaskSwitchContext+0x58>
 8015440:	69fb      	ldr	r3, [r7, #28]
 8015442:	3304      	adds	r3, #4
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	69ba      	ldr	r2, [r7, #24]
 8015448:	429a      	cmp	r2, r3
 801544a:	d10b      	bne.n	8015464 <vTaskSwitchContext+0x58>
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	3308      	adds	r3, #8
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	69ba      	ldr	r2, [r7, #24]
 8015454:	429a      	cmp	r2, r3
 8015456:	d105      	bne.n	8015464 <vTaskSwitchContext+0x58>
 8015458:	69fb      	ldr	r3, [r7, #28]
 801545a:	330c      	adds	r3, #12
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	69ba      	ldr	r2, [r7, #24]
 8015460:	429a      	cmp	r2, r3
 8015462:	d008      	beq.n	8015476 <vTaskSwitchContext+0x6a>
 8015464:	4b2a      	ldr	r3, [pc, #168]	; (8015510 <vTaskSwitchContext+0x104>)
 8015466:	681a      	ldr	r2, [r3, #0]
 8015468:	4b29      	ldr	r3, [pc, #164]	; (8015510 <vTaskSwitchContext+0x104>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	3334      	adds	r3, #52	; 0x34
 801546e:	4619      	mov	r1, r3
 8015470:	4610      	mov	r0, r2
 8015472:	f7eb f8aa 	bl	80005ca <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015476:	4b27      	ldr	r3, [pc, #156]	; (8015514 <vTaskSwitchContext+0x108>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	fab3 f383 	clz	r3, r3
 8015482:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015484:	7afb      	ldrb	r3, [r7, #11]
 8015486:	f1c3 031f 	rsb	r3, r3, #31
 801548a:	617b      	str	r3, [r7, #20]
 801548c:	4922      	ldr	r1, [pc, #136]	; (8015518 <vTaskSwitchContext+0x10c>)
 801548e:	697a      	ldr	r2, [r7, #20]
 8015490:	4613      	mov	r3, r2
 8015492:	009b      	lsls	r3, r3, #2
 8015494:	4413      	add	r3, r2
 8015496:	009b      	lsls	r3, r3, #2
 8015498:	440b      	add	r3, r1
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d10c      	bne.n	80154ba <vTaskSwitchContext+0xae>
	__asm volatile
 80154a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a4:	b672      	cpsid	i
 80154a6:	f383 8811 	msr	BASEPRI, r3
 80154aa:	f3bf 8f6f 	isb	sy
 80154ae:	f3bf 8f4f 	dsb	sy
 80154b2:	b662      	cpsie	i
 80154b4:	607b      	str	r3, [r7, #4]
}
 80154b6:	bf00      	nop
 80154b8:	e7fe      	b.n	80154b8 <vTaskSwitchContext+0xac>
 80154ba:	697a      	ldr	r2, [r7, #20]
 80154bc:	4613      	mov	r3, r2
 80154be:	009b      	lsls	r3, r3, #2
 80154c0:	4413      	add	r3, r2
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	4a14      	ldr	r2, [pc, #80]	; (8015518 <vTaskSwitchContext+0x10c>)
 80154c6:	4413      	add	r3, r2
 80154c8:	613b      	str	r3, [r7, #16]
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	685b      	ldr	r3, [r3, #4]
 80154ce:	685a      	ldr	r2, [r3, #4]
 80154d0:	693b      	ldr	r3, [r7, #16]
 80154d2:	605a      	str	r2, [r3, #4]
 80154d4:	693b      	ldr	r3, [r7, #16]
 80154d6:	685a      	ldr	r2, [r3, #4]
 80154d8:	693b      	ldr	r3, [r7, #16]
 80154da:	3308      	adds	r3, #8
 80154dc:	429a      	cmp	r2, r3
 80154de:	d104      	bne.n	80154ea <vTaskSwitchContext+0xde>
 80154e0:	693b      	ldr	r3, [r7, #16]
 80154e2:	685b      	ldr	r3, [r3, #4]
 80154e4:	685a      	ldr	r2, [r3, #4]
 80154e6:	693b      	ldr	r3, [r7, #16]
 80154e8:	605a      	str	r2, [r3, #4]
 80154ea:	693b      	ldr	r3, [r7, #16]
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	68db      	ldr	r3, [r3, #12]
 80154f0:	4a07      	ldr	r2, [pc, #28]	; (8015510 <vTaskSwitchContext+0x104>)
 80154f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80154f4:	4b06      	ldr	r3, [pc, #24]	; (8015510 <vTaskSwitchContext+0x104>)
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	3350      	adds	r3, #80	; 0x50
 80154fa:	4a08      	ldr	r2, [pc, #32]	; (801551c <vTaskSwitchContext+0x110>)
 80154fc:	6013      	str	r3, [r2, #0]
}
 80154fe:	bf00      	nop
 8015500:	3720      	adds	r7, #32
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}
 8015506:	bf00      	nop
 8015508:	20005b90 	.word	0x20005b90
 801550c:	20005b7c 	.word	0x20005b7c
 8015510:	20005a68 	.word	0x20005a68
 8015514:	20005b70 	.word	0x20005b70
 8015518:	20005a6c 	.word	0x20005a6c
 801551c:	200000a8 	.word	0x200000a8

08015520 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b084      	sub	sp, #16
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
 8015528:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d10c      	bne.n	801554a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8015530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015534:	b672      	cpsid	i
 8015536:	f383 8811 	msr	BASEPRI, r3
 801553a:	f3bf 8f6f 	isb	sy
 801553e:	f3bf 8f4f 	dsb	sy
 8015542:	b662      	cpsie	i
 8015544:	60fb      	str	r3, [r7, #12]
}
 8015546:	bf00      	nop
 8015548:	e7fe      	b.n	8015548 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801554a:	4b07      	ldr	r3, [pc, #28]	; (8015568 <vTaskPlaceOnEventList+0x48>)
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	3318      	adds	r3, #24
 8015550:	4619      	mov	r1, r3
 8015552:	6878      	ldr	r0, [r7, #4]
 8015554:	f7fe f9fa 	bl	801394c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015558:	2101      	movs	r1, #1
 801555a:	6838      	ldr	r0, [r7, #0]
 801555c:	f000 fbaa 	bl	8015cb4 <prvAddCurrentTaskToDelayedList>
}
 8015560:	bf00      	nop
 8015562:	3710      	adds	r7, #16
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}
 8015568:	20005a68 	.word	0x20005a68

0801556c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b086      	sub	sp, #24
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	68db      	ldr	r3, [r3, #12]
 8015578:	68db      	ldr	r3, [r3, #12]
 801557a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d10c      	bne.n	801559c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8015582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015586:	b672      	cpsid	i
 8015588:	f383 8811 	msr	BASEPRI, r3
 801558c:	f3bf 8f6f 	isb	sy
 8015590:	f3bf 8f4f 	dsb	sy
 8015594:	b662      	cpsie	i
 8015596:	60fb      	str	r3, [r7, #12]
}
 8015598:	bf00      	nop
 801559a:	e7fe      	b.n	801559a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	3318      	adds	r3, #24
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7fe fa0c 	bl	80139be <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80155a6:	4b1d      	ldr	r3, [pc, #116]	; (801561c <xTaskRemoveFromEventList+0xb0>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d11c      	bne.n	80155e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80155ae:	693b      	ldr	r3, [r7, #16]
 80155b0:	3304      	adds	r3, #4
 80155b2:	4618      	mov	r0, r3
 80155b4:	f7fe fa03 	bl	80139be <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80155b8:	693b      	ldr	r3, [r7, #16]
 80155ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155bc:	2201      	movs	r2, #1
 80155be:	409a      	lsls	r2, r3
 80155c0:	4b17      	ldr	r3, [pc, #92]	; (8015620 <xTaskRemoveFromEventList+0xb4>)
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	4313      	orrs	r3, r2
 80155c6:	4a16      	ldr	r2, [pc, #88]	; (8015620 <xTaskRemoveFromEventList+0xb4>)
 80155c8:	6013      	str	r3, [r2, #0]
 80155ca:	693b      	ldr	r3, [r7, #16]
 80155cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155ce:	4613      	mov	r3, r2
 80155d0:	009b      	lsls	r3, r3, #2
 80155d2:	4413      	add	r3, r2
 80155d4:	009b      	lsls	r3, r3, #2
 80155d6:	4a13      	ldr	r2, [pc, #76]	; (8015624 <xTaskRemoveFromEventList+0xb8>)
 80155d8:	441a      	add	r2, r3
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	3304      	adds	r3, #4
 80155de:	4619      	mov	r1, r3
 80155e0:	4610      	mov	r0, r2
 80155e2:	f7fe f98f 	bl	8013904 <vListInsertEnd>
 80155e6:	e005      	b.n	80155f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	3318      	adds	r3, #24
 80155ec:	4619      	mov	r1, r3
 80155ee:	480e      	ldr	r0, [pc, #56]	; (8015628 <xTaskRemoveFromEventList+0xbc>)
 80155f0:	f7fe f988 	bl	8013904 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80155f4:	693b      	ldr	r3, [r7, #16]
 80155f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155f8:	4b0c      	ldr	r3, [pc, #48]	; (801562c <xTaskRemoveFromEventList+0xc0>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155fe:	429a      	cmp	r2, r3
 8015600:	d905      	bls.n	801560e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015602:	2301      	movs	r3, #1
 8015604:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015606:	4b0a      	ldr	r3, [pc, #40]	; (8015630 <xTaskRemoveFromEventList+0xc4>)
 8015608:	2201      	movs	r2, #1
 801560a:	601a      	str	r2, [r3, #0]
 801560c:	e001      	b.n	8015612 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801560e:	2300      	movs	r3, #0
 8015610:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015612:	697b      	ldr	r3, [r7, #20]
}
 8015614:	4618      	mov	r0, r3
 8015616:	3718      	adds	r7, #24
 8015618:	46bd      	mov	sp, r7
 801561a:	bd80      	pop	{r7, pc}
 801561c:	20005b90 	.word	0x20005b90
 8015620:	20005b70 	.word	0x20005b70
 8015624:	20005a6c 	.word	0x20005a6c
 8015628:	20005b28 	.word	0x20005b28
 801562c:	20005a68 	.word	0x20005a68
 8015630:	20005b7c 	.word	0x20005b7c

08015634 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015634:	b480      	push	{r7}
 8015636:	b083      	sub	sp, #12
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801563c:	4b06      	ldr	r3, [pc, #24]	; (8015658 <vTaskInternalSetTimeOutState+0x24>)
 801563e:	681a      	ldr	r2, [r3, #0]
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015644:	4b05      	ldr	r3, [pc, #20]	; (801565c <vTaskInternalSetTimeOutState+0x28>)
 8015646:	681a      	ldr	r2, [r3, #0]
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	605a      	str	r2, [r3, #4]
}
 801564c:	bf00      	nop
 801564e:	370c      	adds	r7, #12
 8015650:	46bd      	mov	sp, r7
 8015652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015656:	4770      	bx	lr
 8015658:	20005b80 	.word	0x20005b80
 801565c:	20005b6c 	.word	0x20005b6c

08015660 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b088      	sub	sp, #32
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]
 8015668:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d10c      	bne.n	801568a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8015670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015674:	b672      	cpsid	i
 8015676:	f383 8811 	msr	BASEPRI, r3
 801567a:	f3bf 8f6f 	isb	sy
 801567e:	f3bf 8f4f 	dsb	sy
 8015682:	b662      	cpsie	i
 8015684:	613b      	str	r3, [r7, #16]
}
 8015686:	bf00      	nop
 8015688:	e7fe      	b.n	8015688 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801568a:	683b      	ldr	r3, [r7, #0]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d10c      	bne.n	80156aa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8015690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015694:	b672      	cpsid	i
 8015696:	f383 8811 	msr	BASEPRI, r3
 801569a:	f3bf 8f6f 	isb	sy
 801569e:	f3bf 8f4f 	dsb	sy
 80156a2:	b662      	cpsie	i
 80156a4:	60fb      	str	r3, [r7, #12]
}
 80156a6:	bf00      	nop
 80156a8:	e7fe      	b.n	80156a8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80156aa:	f000 fc77 	bl	8015f9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80156ae:	4b1d      	ldr	r3, [pc, #116]	; (8015724 <xTaskCheckForTimeOut+0xc4>)
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	685b      	ldr	r3, [r3, #4]
 80156b8:	69ba      	ldr	r2, [r7, #24]
 80156ba:	1ad3      	subs	r3, r2, r3
 80156bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80156be:	683b      	ldr	r3, [r7, #0]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80156c6:	d102      	bne.n	80156ce <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80156c8:	2300      	movs	r3, #0
 80156ca:	61fb      	str	r3, [r7, #28]
 80156cc:	e023      	b.n	8015716 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681a      	ldr	r2, [r3, #0]
 80156d2:	4b15      	ldr	r3, [pc, #84]	; (8015728 <xTaskCheckForTimeOut+0xc8>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d007      	beq.n	80156ea <xTaskCheckForTimeOut+0x8a>
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	685b      	ldr	r3, [r3, #4]
 80156de:	69ba      	ldr	r2, [r7, #24]
 80156e0:	429a      	cmp	r2, r3
 80156e2:	d302      	bcc.n	80156ea <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80156e4:	2301      	movs	r3, #1
 80156e6:	61fb      	str	r3, [r7, #28]
 80156e8:	e015      	b.n	8015716 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80156ea:	683b      	ldr	r3, [r7, #0]
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	697a      	ldr	r2, [r7, #20]
 80156f0:	429a      	cmp	r2, r3
 80156f2:	d20b      	bcs.n	801570c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	681a      	ldr	r2, [r3, #0]
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	1ad2      	subs	r2, r2, r3
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015700:	6878      	ldr	r0, [r7, #4]
 8015702:	f7ff ff97 	bl	8015634 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015706:	2300      	movs	r3, #0
 8015708:	61fb      	str	r3, [r7, #28]
 801570a:	e004      	b.n	8015716 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	2200      	movs	r2, #0
 8015710:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015712:	2301      	movs	r3, #1
 8015714:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015716:	f000 fc75 	bl	8016004 <vPortExitCritical>

	return xReturn;
 801571a:	69fb      	ldr	r3, [r7, #28]
}
 801571c:	4618      	mov	r0, r3
 801571e:	3720      	adds	r7, #32
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}
 8015724:	20005b6c 	.word	0x20005b6c
 8015728:	20005b80 	.word	0x20005b80

0801572c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801572c:	b480      	push	{r7}
 801572e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015730:	4b03      	ldr	r3, [pc, #12]	; (8015740 <vTaskMissedYield+0x14>)
 8015732:	2201      	movs	r2, #1
 8015734:	601a      	str	r2, [r3, #0]
}
 8015736:	bf00      	nop
 8015738:	46bd      	mov	sp, r7
 801573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573e:	4770      	bx	lr
 8015740:	20005b7c 	.word	0x20005b7c

08015744 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b082      	sub	sp, #8
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801574c:	f000 f854 	bl	80157f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015750:	4b07      	ldr	r3, [pc, #28]	; (8015770 <prvIdleTask+0x2c>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	2b01      	cmp	r3, #1
 8015756:	d907      	bls.n	8015768 <prvIdleTask+0x24>
			{
				taskYIELD();
 8015758:	4b06      	ldr	r3, [pc, #24]	; (8015774 <prvIdleTask+0x30>)
 801575a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801575e:	601a      	str	r2, [r3, #0]
 8015760:	f3bf 8f4f 	dsb	sy
 8015764:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8015768:	f7ea ff28 	bl	80005bc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801576c:	e7ee      	b.n	801574c <prvIdleTask+0x8>
 801576e:	bf00      	nop
 8015770:	20005a6c 	.word	0x20005a6c
 8015774:	e000ed04 	.word	0xe000ed04

08015778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801577e:	2300      	movs	r3, #0
 8015780:	607b      	str	r3, [r7, #4]
 8015782:	e00c      	b.n	801579e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015784:	687a      	ldr	r2, [r7, #4]
 8015786:	4613      	mov	r3, r2
 8015788:	009b      	lsls	r3, r3, #2
 801578a:	4413      	add	r3, r2
 801578c:	009b      	lsls	r3, r3, #2
 801578e:	4a12      	ldr	r2, [pc, #72]	; (80157d8 <prvInitialiseTaskLists+0x60>)
 8015790:	4413      	add	r3, r2
 8015792:	4618      	mov	r0, r3
 8015794:	f7fe f889 	bl	80138aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	3301      	adds	r3, #1
 801579c:	607b      	str	r3, [r7, #4]
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	2b06      	cmp	r3, #6
 80157a2:	d9ef      	bls.n	8015784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80157a4:	480d      	ldr	r0, [pc, #52]	; (80157dc <prvInitialiseTaskLists+0x64>)
 80157a6:	f7fe f880 	bl	80138aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80157aa:	480d      	ldr	r0, [pc, #52]	; (80157e0 <prvInitialiseTaskLists+0x68>)
 80157ac:	f7fe f87d 	bl	80138aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80157b0:	480c      	ldr	r0, [pc, #48]	; (80157e4 <prvInitialiseTaskLists+0x6c>)
 80157b2:	f7fe f87a 	bl	80138aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80157b6:	480c      	ldr	r0, [pc, #48]	; (80157e8 <prvInitialiseTaskLists+0x70>)
 80157b8:	f7fe f877 	bl	80138aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80157bc:	480b      	ldr	r0, [pc, #44]	; (80157ec <prvInitialiseTaskLists+0x74>)
 80157be:	f7fe f874 	bl	80138aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80157c2:	4b0b      	ldr	r3, [pc, #44]	; (80157f0 <prvInitialiseTaskLists+0x78>)
 80157c4:	4a05      	ldr	r2, [pc, #20]	; (80157dc <prvInitialiseTaskLists+0x64>)
 80157c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80157c8:	4b0a      	ldr	r3, [pc, #40]	; (80157f4 <prvInitialiseTaskLists+0x7c>)
 80157ca:	4a05      	ldr	r2, [pc, #20]	; (80157e0 <prvInitialiseTaskLists+0x68>)
 80157cc:	601a      	str	r2, [r3, #0]
}
 80157ce:	bf00      	nop
 80157d0:	3708      	adds	r7, #8
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}
 80157d6:	bf00      	nop
 80157d8:	20005a6c 	.word	0x20005a6c
 80157dc:	20005af8 	.word	0x20005af8
 80157e0:	20005b0c 	.word	0x20005b0c
 80157e4:	20005b28 	.word	0x20005b28
 80157e8:	20005b3c 	.word	0x20005b3c
 80157ec:	20005b54 	.word	0x20005b54
 80157f0:	20005b20 	.word	0x20005b20
 80157f4:	20005b24 	.word	0x20005b24

080157f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b082      	sub	sp, #8
 80157fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80157fe:	e019      	b.n	8015834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015800:	f000 fbcc 	bl	8015f9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015804:	4b10      	ldr	r3, [pc, #64]	; (8015848 <prvCheckTasksWaitingTermination+0x50>)
 8015806:	68db      	ldr	r3, [r3, #12]
 8015808:	68db      	ldr	r3, [r3, #12]
 801580a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	3304      	adds	r3, #4
 8015810:	4618      	mov	r0, r3
 8015812:	f7fe f8d4 	bl	80139be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015816:	4b0d      	ldr	r3, [pc, #52]	; (801584c <prvCheckTasksWaitingTermination+0x54>)
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	3b01      	subs	r3, #1
 801581c:	4a0b      	ldr	r2, [pc, #44]	; (801584c <prvCheckTasksWaitingTermination+0x54>)
 801581e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015820:	4b0b      	ldr	r3, [pc, #44]	; (8015850 <prvCheckTasksWaitingTermination+0x58>)
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	3b01      	subs	r3, #1
 8015826:	4a0a      	ldr	r2, [pc, #40]	; (8015850 <prvCheckTasksWaitingTermination+0x58>)
 8015828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801582a:	f000 fbeb 	bl	8016004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f000 f810 	bl	8015854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015834:	4b06      	ldr	r3, [pc, #24]	; (8015850 <prvCheckTasksWaitingTermination+0x58>)
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d1e1      	bne.n	8015800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801583c:	bf00      	nop
 801583e:	bf00      	nop
 8015840:	3708      	adds	r7, #8
 8015842:	46bd      	mov	sp, r7
 8015844:	bd80      	pop	{r7, pc}
 8015846:	bf00      	nop
 8015848:	20005b3c 	.word	0x20005b3c
 801584c:	20005b68 	.word	0x20005b68
 8015850:	20005b50 	.word	0x20005b50

08015854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015854:	b580      	push	{r7, lr}
 8015856:	b084      	sub	sp, #16
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	3350      	adds	r3, #80	; 0x50
 8015860:	4618      	mov	r0, r3
 8015862:	f00e f85b 	bl	802391c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801586c:	2b00      	cmp	r3, #0
 801586e:	d108      	bne.n	8015882 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015874:	4618      	mov	r0, r3
 8015876:	f000 fd8d 	bl	8016394 <vPortFree>
				vPortFree( pxTCB );
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f000 fd8a 	bl	8016394 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015880:	e01a      	b.n	80158b8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8015888:	2b01      	cmp	r3, #1
 801588a:	d103      	bne.n	8015894 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f000 fd81 	bl	8016394 <vPortFree>
	}
 8015892:	e011      	b.n	80158b8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801589a:	2b02      	cmp	r3, #2
 801589c:	d00c      	beq.n	80158b8 <prvDeleteTCB+0x64>
	__asm volatile
 801589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158a2:	b672      	cpsid	i
 80158a4:	f383 8811 	msr	BASEPRI, r3
 80158a8:	f3bf 8f6f 	isb	sy
 80158ac:	f3bf 8f4f 	dsb	sy
 80158b0:	b662      	cpsie	i
 80158b2:	60fb      	str	r3, [r7, #12]
}
 80158b4:	bf00      	nop
 80158b6:	e7fe      	b.n	80158b6 <prvDeleteTCB+0x62>
	}
 80158b8:	bf00      	nop
 80158ba:	3710      	adds	r7, #16
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}

080158c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80158c0:	b480      	push	{r7}
 80158c2:	b083      	sub	sp, #12
 80158c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80158c6:	4b0c      	ldr	r3, [pc, #48]	; (80158f8 <prvResetNextTaskUnblockTime+0x38>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d104      	bne.n	80158da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80158d0:	4b0a      	ldr	r3, [pc, #40]	; (80158fc <prvResetNextTaskUnblockTime+0x3c>)
 80158d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80158d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80158d8:	e008      	b.n	80158ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158da:	4b07      	ldr	r3, [pc, #28]	; (80158f8 <prvResetNextTaskUnblockTime+0x38>)
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	68db      	ldr	r3, [r3, #12]
 80158e0:	68db      	ldr	r3, [r3, #12]
 80158e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	685b      	ldr	r3, [r3, #4]
 80158e8:	4a04      	ldr	r2, [pc, #16]	; (80158fc <prvResetNextTaskUnblockTime+0x3c>)
 80158ea:	6013      	str	r3, [r2, #0]
}
 80158ec:	bf00      	nop
 80158ee:	370c      	adds	r7, #12
 80158f0:	46bd      	mov	sp, r7
 80158f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f6:	4770      	bx	lr
 80158f8:	20005b20 	.word	0x20005b20
 80158fc:	20005b88 	.word	0x20005b88

08015900 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015900:	b480      	push	{r7}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015906:	4b0b      	ldr	r3, [pc, #44]	; (8015934 <xTaskGetSchedulerState+0x34>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d102      	bne.n	8015914 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801590e:	2301      	movs	r3, #1
 8015910:	607b      	str	r3, [r7, #4]
 8015912:	e008      	b.n	8015926 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015914:	4b08      	ldr	r3, [pc, #32]	; (8015938 <xTaskGetSchedulerState+0x38>)
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d102      	bne.n	8015922 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801591c:	2302      	movs	r3, #2
 801591e:	607b      	str	r3, [r7, #4]
 8015920:	e001      	b.n	8015926 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015922:	2300      	movs	r3, #0
 8015924:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015926:	687b      	ldr	r3, [r7, #4]
	}
 8015928:	4618      	mov	r0, r3
 801592a:	370c      	adds	r7, #12
 801592c:	46bd      	mov	sp, r7
 801592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015932:	4770      	bx	lr
 8015934:	20005b74 	.word	0x20005b74
 8015938:	20005b90 	.word	0x20005b90

0801593c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801593c:	b580      	push	{r7, lr}
 801593e:	b084      	sub	sp, #16
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015948:	2300      	movs	r3, #0
 801594a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d069      	beq.n	8015a26 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015956:	4b36      	ldr	r3, [pc, #216]	; (8015a30 <xTaskPriorityInherit+0xf4>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801595c:	429a      	cmp	r2, r3
 801595e:	d259      	bcs.n	8015a14 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	699b      	ldr	r3, [r3, #24]
 8015964:	2b00      	cmp	r3, #0
 8015966:	db06      	blt.n	8015976 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015968:	4b31      	ldr	r3, [pc, #196]	; (8015a30 <xTaskPriorityInherit+0xf4>)
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801596e:	f1c3 0207 	rsb	r2, r3, #7
 8015972:	68bb      	ldr	r3, [r7, #8]
 8015974:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	6959      	ldr	r1, [r3, #20]
 801597a:	68bb      	ldr	r3, [r7, #8]
 801597c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801597e:	4613      	mov	r3, r2
 8015980:	009b      	lsls	r3, r3, #2
 8015982:	4413      	add	r3, r2
 8015984:	009b      	lsls	r3, r3, #2
 8015986:	4a2b      	ldr	r2, [pc, #172]	; (8015a34 <xTaskPriorityInherit+0xf8>)
 8015988:	4413      	add	r3, r2
 801598a:	4299      	cmp	r1, r3
 801598c:	d13a      	bne.n	8015a04 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801598e:	68bb      	ldr	r3, [r7, #8]
 8015990:	3304      	adds	r3, #4
 8015992:	4618      	mov	r0, r3
 8015994:	f7fe f813 	bl	80139be <uxListRemove>
 8015998:	4603      	mov	r3, r0
 801599a:	2b00      	cmp	r3, #0
 801599c:	d115      	bne.n	80159ca <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159a2:	4924      	ldr	r1, [pc, #144]	; (8015a34 <xTaskPriorityInherit+0xf8>)
 80159a4:	4613      	mov	r3, r2
 80159a6:	009b      	lsls	r3, r3, #2
 80159a8:	4413      	add	r3, r2
 80159aa:	009b      	lsls	r3, r3, #2
 80159ac:	440b      	add	r3, r1
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d10a      	bne.n	80159ca <xTaskPriorityInherit+0x8e>
 80159b4:	68bb      	ldr	r3, [r7, #8]
 80159b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159b8:	2201      	movs	r2, #1
 80159ba:	fa02 f303 	lsl.w	r3, r2, r3
 80159be:	43da      	mvns	r2, r3
 80159c0:	4b1d      	ldr	r3, [pc, #116]	; (8015a38 <xTaskPriorityInherit+0xfc>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	4013      	ands	r3, r2
 80159c6:	4a1c      	ldr	r2, [pc, #112]	; (8015a38 <xTaskPriorityInherit+0xfc>)
 80159c8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80159ca:	4b19      	ldr	r3, [pc, #100]	; (8015a30 <xTaskPriorityInherit+0xf4>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159d0:	68bb      	ldr	r3, [r7, #8]
 80159d2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80159d4:	68bb      	ldr	r3, [r7, #8]
 80159d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159d8:	2201      	movs	r2, #1
 80159da:	409a      	lsls	r2, r3
 80159dc:	4b16      	ldr	r3, [pc, #88]	; (8015a38 <xTaskPriorityInherit+0xfc>)
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	4313      	orrs	r3, r2
 80159e2:	4a15      	ldr	r2, [pc, #84]	; (8015a38 <xTaskPriorityInherit+0xfc>)
 80159e4:	6013      	str	r3, [r2, #0]
 80159e6:	68bb      	ldr	r3, [r7, #8]
 80159e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159ea:	4613      	mov	r3, r2
 80159ec:	009b      	lsls	r3, r3, #2
 80159ee:	4413      	add	r3, r2
 80159f0:	009b      	lsls	r3, r3, #2
 80159f2:	4a10      	ldr	r2, [pc, #64]	; (8015a34 <xTaskPriorityInherit+0xf8>)
 80159f4:	441a      	add	r2, r3
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	3304      	adds	r3, #4
 80159fa:	4619      	mov	r1, r3
 80159fc:	4610      	mov	r0, r2
 80159fe:	f7fd ff81 	bl	8013904 <vListInsertEnd>
 8015a02:	e004      	b.n	8015a0e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015a04:	4b0a      	ldr	r3, [pc, #40]	; (8015a30 <xTaskPriorityInherit+0xf4>)
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a0a:	68bb      	ldr	r3, [r7, #8]
 8015a0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015a0e:	2301      	movs	r3, #1
 8015a10:	60fb      	str	r3, [r7, #12]
 8015a12:	e008      	b.n	8015a26 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015a14:	68bb      	ldr	r3, [r7, #8]
 8015a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015a18:	4b05      	ldr	r3, [pc, #20]	; (8015a30 <xTaskPriorityInherit+0xf4>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	d201      	bcs.n	8015a26 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015a22:	2301      	movs	r3, #1
 8015a24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015a26:	68fb      	ldr	r3, [r7, #12]
	}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	3710      	adds	r7, #16
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}
 8015a30:	20005a68 	.word	0x20005a68
 8015a34:	20005a6c 	.word	0x20005a6c
 8015a38:	20005b70 	.word	0x20005b70

08015a3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b086      	sub	sp, #24
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015a48:	2300      	movs	r3, #0
 8015a4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d072      	beq.n	8015b38 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015a52:	4b3c      	ldr	r3, [pc, #240]	; (8015b44 <xTaskPriorityDisinherit+0x108>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	693a      	ldr	r2, [r7, #16]
 8015a58:	429a      	cmp	r2, r3
 8015a5a:	d00c      	beq.n	8015a76 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8015a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a60:	b672      	cpsid	i
 8015a62:	f383 8811 	msr	BASEPRI, r3
 8015a66:	f3bf 8f6f 	isb	sy
 8015a6a:	f3bf 8f4f 	dsb	sy
 8015a6e:	b662      	cpsie	i
 8015a70:	60fb      	str	r3, [r7, #12]
}
 8015a72:	bf00      	nop
 8015a74:	e7fe      	b.n	8015a74 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8015a76:	693b      	ldr	r3, [r7, #16]
 8015a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d10c      	bne.n	8015a98 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8015a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a82:	b672      	cpsid	i
 8015a84:	f383 8811 	msr	BASEPRI, r3
 8015a88:	f3bf 8f6f 	isb	sy
 8015a8c:	f3bf 8f4f 	dsb	sy
 8015a90:	b662      	cpsie	i
 8015a92:	60bb      	str	r3, [r7, #8]
}
 8015a94:	bf00      	nop
 8015a96:	e7fe      	b.n	8015a96 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8015a98:	693b      	ldr	r3, [r7, #16]
 8015a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a9c:	1e5a      	subs	r2, r3, #1
 8015a9e:	693b      	ldr	r3, [r7, #16]
 8015aa0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	d044      	beq.n	8015b38 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015aae:	693b      	ldr	r3, [r7, #16]
 8015ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d140      	bne.n	8015b38 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ab6:	693b      	ldr	r3, [r7, #16]
 8015ab8:	3304      	adds	r3, #4
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7fd ff7f 	bl	80139be <uxListRemove>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d115      	bne.n	8015af2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015ac6:	693b      	ldr	r3, [r7, #16]
 8015ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015aca:	491f      	ldr	r1, [pc, #124]	; (8015b48 <xTaskPriorityDisinherit+0x10c>)
 8015acc:	4613      	mov	r3, r2
 8015ace:	009b      	lsls	r3, r3, #2
 8015ad0:	4413      	add	r3, r2
 8015ad2:	009b      	lsls	r3, r3, #2
 8015ad4:	440b      	add	r3, r1
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d10a      	bne.n	8015af2 <xTaskPriorityDisinherit+0xb6>
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ae0:	2201      	movs	r2, #1
 8015ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8015ae6:	43da      	mvns	r2, r3
 8015ae8:	4b18      	ldr	r3, [pc, #96]	; (8015b4c <xTaskPriorityDisinherit+0x110>)
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	4013      	ands	r3, r2
 8015aee:	4a17      	ldr	r2, [pc, #92]	; (8015b4c <xTaskPriorityDisinherit+0x110>)
 8015af0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015af2:	693b      	ldr	r3, [r7, #16]
 8015af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015af6:	693b      	ldr	r3, [r7, #16]
 8015af8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015afe:	f1c3 0207 	rsb	r2, r3, #7
 8015b02:	693b      	ldr	r3, [r7, #16]
 8015b04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015b06:	693b      	ldr	r3, [r7, #16]
 8015b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b0a:	2201      	movs	r2, #1
 8015b0c:	409a      	lsls	r2, r3
 8015b0e:	4b0f      	ldr	r3, [pc, #60]	; (8015b4c <xTaskPriorityDisinherit+0x110>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	4313      	orrs	r3, r2
 8015b14:	4a0d      	ldr	r2, [pc, #52]	; (8015b4c <xTaskPriorityDisinherit+0x110>)
 8015b16:	6013      	str	r3, [r2, #0]
 8015b18:	693b      	ldr	r3, [r7, #16]
 8015b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b1c:	4613      	mov	r3, r2
 8015b1e:	009b      	lsls	r3, r3, #2
 8015b20:	4413      	add	r3, r2
 8015b22:	009b      	lsls	r3, r3, #2
 8015b24:	4a08      	ldr	r2, [pc, #32]	; (8015b48 <xTaskPriorityDisinherit+0x10c>)
 8015b26:	441a      	add	r2, r3
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	3304      	adds	r3, #4
 8015b2c:	4619      	mov	r1, r3
 8015b2e:	4610      	mov	r0, r2
 8015b30:	f7fd fee8 	bl	8013904 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015b34:	2301      	movs	r3, #1
 8015b36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015b38:	697b      	ldr	r3, [r7, #20]
	}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3718      	adds	r7, #24
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}
 8015b42:	bf00      	nop
 8015b44:	20005a68 	.word	0x20005a68
 8015b48:	20005a6c 	.word	0x20005a6c
 8015b4c:	20005b70 	.word	0x20005b70

08015b50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b088      	sub	sp, #32
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
 8015b58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015b5e:	2301      	movs	r3, #1
 8015b60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	f000 8087 	beq.w	8015c78 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015b6a:	69bb      	ldr	r3, [r7, #24]
 8015b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d10c      	bne.n	8015b8c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8015b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b76:	b672      	cpsid	i
 8015b78:	f383 8811 	msr	BASEPRI, r3
 8015b7c:	f3bf 8f6f 	isb	sy
 8015b80:	f3bf 8f4f 	dsb	sy
 8015b84:	b662      	cpsie	i
 8015b86:	60fb      	str	r3, [r7, #12]
}
 8015b88:	bf00      	nop
 8015b8a:	e7fe      	b.n	8015b8a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015b8c:	69bb      	ldr	r3, [r7, #24]
 8015b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b90:	683a      	ldr	r2, [r7, #0]
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d902      	bls.n	8015b9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015b96:	683b      	ldr	r3, [r7, #0]
 8015b98:	61fb      	str	r3, [r7, #28]
 8015b9a:	e002      	b.n	8015ba2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015b9c:	69bb      	ldr	r3, [r7, #24]
 8015b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ba0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015ba2:	69bb      	ldr	r3, [r7, #24]
 8015ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ba6:	69fa      	ldr	r2, [r7, #28]
 8015ba8:	429a      	cmp	r2, r3
 8015baa:	d065      	beq.n	8015c78 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015bac:	69bb      	ldr	r3, [r7, #24]
 8015bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015bb0:	697a      	ldr	r2, [r7, #20]
 8015bb2:	429a      	cmp	r2, r3
 8015bb4:	d160      	bne.n	8015c78 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015bb6:	4b32      	ldr	r3, [pc, #200]	; (8015c80 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	69ba      	ldr	r2, [r7, #24]
 8015bbc:	429a      	cmp	r2, r3
 8015bbe:	d10c      	bne.n	8015bda <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8015bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc4:	b672      	cpsid	i
 8015bc6:	f383 8811 	msr	BASEPRI, r3
 8015bca:	f3bf 8f6f 	isb	sy
 8015bce:	f3bf 8f4f 	dsb	sy
 8015bd2:	b662      	cpsie	i
 8015bd4:	60bb      	str	r3, [r7, #8]
}
 8015bd6:	bf00      	nop
 8015bd8:	e7fe      	b.n	8015bd8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015bda:	69bb      	ldr	r3, [r7, #24]
 8015bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bde:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015be0:	69bb      	ldr	r3, [r7, #24]
 8015be2:	69fa      	ldr	r2, [r7, #28]
 8015be4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015be6:	69bb      	ldr	r3, [r7, #24]
 8015be8:	699b      	ldr	r3, [r3, #24]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	db04      	blt.n	8015bf8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015bee:	69fb      	ldr	r3, [r7, #28]
 8015bf0:	f1c3 0207 	rsb	r2, r3, #7
 8015bf4:	69bb      	ldr	r3, [r7, #24]
 8015bf6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015bf8:	69bb      	ldr	r3, [r7, #24]
 8015bfa:	6959      	ldr	r1, [r3, #20]
 8015bfc:	693a      	ldr	r2, [r7, #16]
 8015bfe:	4613      	mov	r3, r2
 8015c00:	009b      	lsls	r3, r3, #2
 8015c02:	4413      	add	r3, r2
 8015c04:	009b      	lsls	r3, r3, #2
 8015c06:	4a1f      	ldr	r2, [pc, #124]	; (8015c84 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015c08:	4413      	add	r3, r2
 8015c0a:	4299      	cmp	r1, r3
 8015c0c:	d134      	bne.n	8015c78 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015c0e:	69bb      	ldr	r3, [r7, #24]
 8015c10:	3304      	adds	r3, #4
 8015c12:	4618      	mov	r0, r3
 8015c14:	f7fd fed3 	bl	80139be <uxListRemove>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d115      	bne.n	8015c4a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015c1e:	69bb      	ldr	r3, [r7, #24]
 8015c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c22:	4918      	ldr	r1, [pc, #96]	; (8015c84 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015c24:	4613      	mov	r3, r2
 8015c26:	009b      	lsls	r3, r3, #2
 8015c28:	4413      	add	r3, r2
 8015c2a:	009b      	lsls	r3, r3, #2
 8015c2c:	440b      	add	r3, r1
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d10a      	bne.n	8015c4a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8015c34:	69bb      	ldr	r3, [r7, #24]
 8015c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c38:	2201      	movs	r2, #1
 8015c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8015c3e:	43da      	mvns	r2, r3
 8015c40:	4b11      	ldr	r3, [pc, #68]	; (8015c88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	4013      	ands	r3, r2
 8015c46:	4a10      	ldr	r2, [pc, #64]	; (8015c88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015c48:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015c4a:	69bb      	ldr	r3, [r7, #24]
 8015c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c4e:	2201      	movs	r2, #1
 8015c50:	409a      	lsls	r2, r3
 8015c52:	4b0d      	ldr	r3, [pc, #52]	; (8015c88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	4313      	orrs	r3, r2
 8015c58:	4a0b      	ldr	r2, [pc, #44]	; (8015c88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015c5a:	6013      	str	r3, [r2, #0]
 8015c5c:	69bb      	ldr	r3, [r7, #24]
 8015c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c60:	4613      	mov	r3, r2
 8015c62:	009b      	lsls	r3, r3, #2
 8015c64:	4413      	add	r3, r2
 8015c66:	009b      	lsls	r3, r3, #2
 8015c68:	4a06      	ldr	r2, [pc, #24]	; (8015c84 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8015c6a:	441a      	add	r2, r3
 8015c6c:	69bb      	ldr	r3, [r7, #24]
 8015c6e:	3304      	adds	r3, #4
 8015c70:	4619      	mov	r1, r3
 8015c72:	4610      	mov	r0, r2
 8015c74:	f7fd fe46 	bl	8013904 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015c78:	bf00      	nop
 8015c7a:	3720      	adds	r7, #32
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}
 8015c80:	20005a68 	.word	0x20005a68
 8015c84:	20005a6c 	.word	0x20005a6c
 8015c88:	20005b70 	.word	0x20005b70

08015c8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015c8c:	b480      	push	{r7}
 8015c8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015c90:	4b07      	ldr	r3, [pc, #28]	; (8015cb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d004      	beq.n	8015ca2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015c98:	4b05      	ldr	r3, [pc, #20]	; (8015cb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015c9e:	3201      	adds	r2, #1
 8015ca0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8015ca2:	4b03      	ldr	r3, [pc, #12]	; (8015cb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
	}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cae:	4770      	bx	lr
 8015cb0:	20005a68 	.word	0x20005a68

08015cb4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b084      	sub	sp, #16
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
 8015cbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015cbe:	4b29      	ldr	r3, [pc, #164]	; (8015d64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015cc4:	4b28      	ldr	r3, [pc, #160]	; (8015d68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	3304      	adds	r3, #4
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f7fd fe77 	bl	80139be <uxListRemove>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d10b      	bne.n	8015cee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015cd6:	4b24      	ldr	r3, [pc, #144]	; (8015d68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cdc:	2201      	movs	r2, #1
 8015cde:	fa02 f303 	lsl.w	r3, r2, r3
 8015ce2:	43da      	mvns	r2, r3
 8015ce4:	4b21      	ldr	r3, [pc, #132]	; (8015d6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	4013      	ands	r3, r2
 8015cea:	4a20      	ldr	r2, [pc, #128]	; (8015d6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8015cec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015cf4:	d10a      	bne.n	8015d0c <prvAddCurrentTaskToDelayedList+0x58>
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d007      	beq.n	8015d0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015cfc:	4b1a      	ldr	r3, [pc, #104]	; (8015d68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	3304      	adds	r3, #4
 8015d02:	4619      	mov	r1, r3
 8015d04:	481a      	ldr	r0, [pc, #104]	; (8015d70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8015d06:	f7fd fdfd 	bl	8013904 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015d0a:	e026      	b.n	8015d5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015d0c:	68fa      	ldr	r2, [r7, #12]
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	4413      	add	r3, r2
 8015d12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015d14:	4b14      	ldr	r3, [pc, #80]	; (8015d68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	68ba      	ldr	r2, [r7, #8]
 8015d1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015d1c:	68ba      	ldr	r2, [r7, #8]
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	429a      	cmp	r2, r3
 8015d22:	d209      	bcs.n	8015d38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d24:	4b13      	ldr	r3, [pc, #76]	; (8015d74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015d26:	681a      	ldr	r2, [r3, #0]
 8015d28:	4b0f      	ldr	r3, [pc, #60]	; (8015d68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	3304      	adds	r3, #4
 8015d2e:	4619      	mov	r1, r3
 8015d30:	4610      	mov	r0, r2
 8015d32:	f7fd fe0b 	bl	801394c <vListInsert>
}
 8015d36:	e010      	b.n	8015d5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d38:	4b0f      	ldr	r3, [pc, #60]	; (8015d78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015d3a:	681a      	ldr	r2, [r3, #0]
 8015d3c:	4b0a      	ldr	r3, [pc, #40]	; (8015d68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	3304      	adds	r3, #4
 8015d42:	4619      	mov	r1, r3
 8015d44:	4610      	mov	r0, r2
 8015d46:	f7fd fe01 	bl	801394c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015d4a:	4b0c      	ldr	r3, [pc, #48]	; (8015d7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	68ba      	ldr	r2, [r7, #8]
 8015d50:	429a      	cmp	r2, r3
 8015d52:	d202      	bcs.n	8015d5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015d54:	4a09      	ldr	r2, [pc, #36]	; (8015d7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8015d56:	68bb      	ldr	r3, [r7, #8]
 8015d58:	6013      	str	r3, [r2, #0]
}
 8015d5a:	bf00      	nop
 8015d5c:	3710      	adds	r7, #16
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd80      	pop	{r7, pc}
 8015d62:	bf00      	nop
 8015d64:	20005b6c 	.word	0x20005b6c
 8015d68:	20005a68 	.word	0x20005a68
 8015d6c:	20005b70 	.word	0x20005b70
 8015d70:	20005b54 	.word	0x20005b54
 8015d74:	20005b24 	.word	0x20005b24
 8015d78:	20005b20 	.word	0x20005b20
 8015d7c:	20005b88 	.word	0x20005b88

08015d80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015d80:	b480      	push	{r7}
 8015d82:	b085      	sub	sp, #20
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	60f8      	str	r0, [r7, #12]
 8015d88:	60b9      	str	r1, [r7, #8]
 8015d8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	3b04      	subs	r3, #4
 8015d90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	3b04      	subs	r3, #4
 8015d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015da0:	68bb      	ldr	r3, [r7, #8]
 8015da2:	f023 0201 	bic.w	r2, r3, #1
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	3b04      	subs	r3, #4
 8015dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015db0:	4a0c      	ldr	r2, [pc, #48]	; (8015de4 <pxPortInitialiseStack+0x64>)
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	3b14      	subs	r3, #20
 8015dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015dbc:	687a      	ldr	r2, [r7, #4]
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	3b04      	subs	r3, #4
 8015dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	f06f 0202 	mvn.w	r2, #2
 8015dce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	3b20      	subs	r3, #32
 8015dd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3714      	adds	r7, #20
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de2:	4770      	bx	lr
 8015de4:	08015de9 	.word	0x08015de9

08015de8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015de8:	b480      	push	{r7}
 8015dea:	b085      	sub	sp, #20
 8015dec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015dee:	2300      	movs	r3, #0
 8015df0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015df2:	4b14      	ldr	r3, [pc, #80]	; (8015e44 <prvTaskExitError+0x5c>)
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015dfa:	d00c      	beq.n	8015e16 <prvTaskExitError+0x2e>
	__asm volatile
 8015dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e00:	b672      	cpsid	i
 8015e02:	f383 8811 	msr	BASEPRI, r3
 8015e06:	f3bf 8f6f 	isb	sy
 8015e0a:	f3bf 8f4f 	dsb	sy
 8015e0e:	b662      	cpsie	i
 8015e10:	60fb      	str	r3, [r7, #12]
}
 8015e12:	bf00      	nop
 8015e14:	e7fe      	b.n	8015e14 <prvTaskExitError+0x2c>
	__asm volatile
 8015e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e1a:	b672      	cpsid	i
 8015e1c:	f383 8811 	msr	BASEPRI, r3
 8015e20:	f3bf 8f6f 	isb	sy
 8015e24:	f3bf 8f4f 	dsb	sy
 8015e28:	b662      	cpsie	i
 8015e2a:	60bb      	str	r3, [r7, #8]
}
 8015e2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015e2e:	bf00      	nop
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d0fc      	beq.n	8015e30 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015e36:	bf00      	nop
 8015e38:	bf00      	nop
 8015e3a:	3714      	adds	r7, #20
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e42:	4770      	bx	lr
 8015e44:	20000040 	.word	0x20000040
	...

08015e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015e50:	4b07      	ldr	r3, [pc, #28]	; (8015e70 <pxCurrentTCBConst2>)
 8015e52:	6819      	ldr	r1, [r3, #0]
 8015e54:	6808      	ldr	r0, [r1, #0]
 8015e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e5a:	f380 8809 	msr	PSP, r0
 8015e5e:	f3bf 8f6f 	isb	sy
 8015e62:	f04f 0000 	mov.w	r0, #0
 8015e66:	f380 8811 	msr	BASEPRI, r0
 8015e6a:	4770      	bx	lr
 8015e6c:	f3af 8000 	nop.w

08015e70 <pxCurrentTCBConst2>:
 8015e70:	20005a68 	.word	0x20005a68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015e74:	bf00      	nop
 8015e76:	bf00      	nop

08015e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015e78:	4808      	ldr	r0, [pc, #32]	; (8015e9c <prvPortStartFirstTask+0x24>)
 8015e7a:	6800      	ldr	r0, [r0, #0]
 8015e7c:	6800      	ldr	r0, [r0, #0]
 8015e7e:	f380 8808 	msr	MSP, r0
 8015e82:	f04f 0000 	mov.w	r0, #0
 8015e86:	f380 8814 	msr	CONTROL, r0
 8015e8a:	b662      	cpsie	i
 8015e8c:	b661      	cpsie	f
 8015e8e:	f3bf 8f4f 	dsb	sy
 8015e92:	f3bf 8f6f 	isb	sy
 8015e96:	df00      	svc	0
 8015e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015e9a:	bf00      	nop
 8015e9c:	e000ed08 	.word	0xe000ed08

08015ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b084      	sub	sp, #16
 8015ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015ea6:	4b37      	ldr	r3, [pc, #220]	; (8015f84 <xPortStartScheduler+0xe4>)
 8015ea8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	b2db      	uxtb	r3, r3
 8015eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	22ff      	movs	r2, #255	; 0xff
 8015eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	781b      	ldrb	r3, [r3, #0]
 8015ebc:	b2db      	uxtb	r3, r3
 8015ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015ec0:	78fb      	ldrb	r3, [r7, #3]
 8015ec2:	b2db      	uxtb	r3, r3
 8015ec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015ec8:	b2da      	uxtb	r2, r3
 8015eca:	4b2f      	ldr	r3, [pc, #188]	; (8015f88 <xPortStartScheduler+0xe8>)
 8015ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015ece:	4b2f      	ldr	r3, [pc, #188]	; (8015f8c <xPortStartScheduler+0xec>)
 8015ed0:	2207      	movs	r2, #7
 8015ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015ed4:	e009      	b.n	8015eea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015ed6:	4b2d      	ldr	r3, [pc, #180]	; (8015f8c <xPortStartScheduler+0xec>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	3b01      	subs	r3, #1
 8015edc:	4a2b      	ldr	r2, [pc, #172]	; (8015f8c <xPortStartScheduler+0xec>)
 8015ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015ee0:	78fb      	ldrb	r3, [r7, #3]
 8015ee2:	b2db      	uxtb	r3, r3
 8015ee4:	005b      	lsls	r3, r3, #1
 8015ee6:	b2db      	uxtb	r3, r3
 8015ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015eea:	78fb      	ldrb	r3, [r7, #3]
 8015eec:	b2db      	uxtb	r3, r3
 8015eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015ef2:	2b80      	cmp	r3, #128	; 0x80
 8015ef4:	d0ef      	beq.n	8015ed6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015ef6:	4b25      	ldr	r3, [pc, #148]	; (8015f8c <xPortStartScheduler+0xec>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	f1c3 0307 	rsb	r3, r3, #7
 8015efe:	2b04      	cmp	r3, #4
 8015f00:	d00c      	beq.n	8015f1c <xPortStartScheduler+0x7c>
	__asm volatile
 8015f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f06:	b672      	cpsid	i
 8015f08:	f383 8811 	msr	BASEPRI, r3
 8015f0c:	f3bf 8f6f 	isb	sy
 8015f10:	f3bf 8f4f 	dsb	sy
 8015f14:	b662      	cpsie	i
 8015f16:	60bb      	str	r3, [r7, #8]
}
 8015f18:	bf00      	nop
 8015f1a:	e7fe      	b.n	8015f1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015f1c:	4b1b      	ldr	r3, [pc, #108]	; (8015f8c <xPortStartScheduler+0xec>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	021b      	lsls	r3, r3, #8
 8015f22:	4a1a      	ldr	r2, [pc, #104]	; (8015f8c <xPortStartScheduler+0xec>)
 8015f24:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015f26:	4b19      	ldr	r3, [pc, #100]	; (8015f8c <xPortStartScheduler+0xec>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015f2e:	4a17      	ldr	r2, [pc, #92]	; (8015f8c <xPortStartScheduler+0xec>)
 8015f30:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	b2da      	uxtb	r2, r3
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015f3a:	4b15      	ldr	r3, [pc, #84]	; (8015f90 <xPortStartScheduler+0xf0>)
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	4a14      	ldr	r2, [pc, #80]	; (8015f90 <xPortStartScheduler+0xf0>)
 8015f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015f44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015f46:	4b12      	ldr	r3, [pc, #72]	; (8015f90 <xPortStartScheduler+0xf0>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	4a11      	ldr	r2, [pc, #68]	; (8015f90 <xPortStartScheduler+0xf0>)
 8015f4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015f50:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015f52:	f000 f8dd 	bl	8016110 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015f56:	4b0f      	ldr	r3, [pc, #60]	; (8015f94 <xPortStartScheduler+0xf4>)
 8015f58:	2200      	movs	r2, #0
 8015f5a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015f5c:	f000 f8fc 	bl	8016158 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015f60:	4b0d      	ldr	r3, [pc, #52]	; (8015f98 <xPortStartScheduler+0xf8>)
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	4a0c      	ldr	r2, [pc, #48]	; (8015f98 <xPortStartScheduler+0xf8>)
 8015f66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015f6a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015f6c:	f7ff ff84 	bl	8015e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015f70:	f7ff fa4c 	bl	801540c <vTaskSwitchContext>
	prvTaskExitError();
 8015f74:	f7ff ff38 	bl	8015de8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015f78:	2300      	movs	r3, #0
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3710      	adds	r7, #16
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd80      	pop	{r7, pc}
 8015f82:	bf00      	nop
 8015f84:	e000e400 	.word	0xe000e400
 8015f88:	20005b94 	.word	0x20005b94
 8015f8c:	20005b98 	.word	0x20005b98
 8015f90:	e000ed20 	.word	0xe000ed20
 8015f94:	20000040 	.word	0x20000040
 8015f98:	e000ef34 	.word	0xe000ef34

08015f9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015f9c:	b480      	push	{r7}
 8015f9e:	b083      	sub	sp, #12
 8015fa0:	af00      	add	r7, sp, #0
	__asm volatile
 8015fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fa6:	b672      	cpsid	i
 8015fa8:	f383 8811 	msr	BASEPRI, r3
 8015fac:	f3bf 8f6f 	isb	sy
 8015fb0:	f3bf 8f4f 	dsb	sy
 8015fb4:	b662      	cpsie	i
 8015fb6:	607b      	str	r3, [r7, #4]
}
 8015fb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015fba:	4b10      	ldr	r3, [pc, #64]	; (8015ffc <vPortEnterCritical+0x60>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	4a0e      	ldr	r2, [pc, #56]	; (8015ffc <vPortEnterCritical+0x60>)
 8015fc2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015fc4:	4b0d      	ldr	r3, [pc, #52]	; (8015ffc <vPortEnterCritical+0x60>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	2b01      	cmp	r3, #1
 8015fca:	d111      	bne.n	8015ff0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015fcc:	4b0c      	ldr	r3, [pc, #48]	; (8016000 <vPortEnterCritical+0x64>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	b2db      	uxtb	r3, r3
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d00c      	beq.n	8015ff0 <vPortEnterCritical+0x54>
	__asm volatile
 8015fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fda:	b672      	cpsid	i
 8015fdc:	f383 8811 	msr	BASEPRI, r3
 8015fe0:	f3bf 8f6f 	isb	sy
 8015fe4:	f3bf 8f4f 	dsb	sy
 8015fe8:	b662      	cpsie	i
 8015fea:	603b      	str	r3, [r7, #0]
}
 8015fec:	bf00      	nop
 8015fee:	e7fe      	b.n	8015fee <vPortEnterCritical+0x52>
	}
}
 8015ff0:	bf00      	nop
 8015ff2:	370c      	adds	r7, #12
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ffa:	4770      	bx	lr
 8015ffc:	20000040 	.word	0x20000040
 8016000:	e000ed04 	.word	0xe000ed04

08016004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016004:	b480      	push	{r7}
 8016006:	b083      	sub	sp, #12
 8016008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801600a:	4b13      	ldr	r3, [pc, #76]	; (8016058 <vPortExitCritical+0x54>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d10c      	bne.n	801602c <vPortExitCritical+0x28>
	__asm volatile
 8016012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016016:	b672      	cpsid	i
 8016018:	f383 8811 	msr	BASEPRI, r3
 801601c:	f3bf 8f6f 	isb	sy
 8016020:	f3bf 8f4f 	dsb	sy
 8016024:	b662      	cpsie	i
 8016026:	607b      	str	r3, [r7, #4]
}
 8016028:	bf00      	nop
 801602a:	e7fe      	b.n	801602a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801602c:	4b0a      	ldr	r3, [pc, #40]	; (8016058 <vPortExitCritical+0x54>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	3b01      	subs	r3, #1
 8016032:	4a09      	ldr	r2, [pc, #36]	; (8016058 <vPortExitCritical+0x54>)
 8016034:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016036:	4b08      	ldr	r3, [pc, #32]	; (8016058 <vPortExitCritical+0x54>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d105      	bne.n	801604a <vPortExitCritical+0x46>
 801603e:	2300      	movs	r3, #0
 8016040:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016042:	683b      	ldr	r3, [r7, #0]
 8016044:	f383 8811 	msr	BASEPRI, r3
}
 8016048:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801604a:	bf00      	nop
 801604c:	370c      	adds	r7, #12
 801604e:	46bd      	mov	sp, r7
 8016050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016054:	4770      	bx	lr
 8016056:	bf00      	nop
 8016058:	20000040 	.word	0x20000040
 801605c:	00000000 	.word	0x00000000

08016060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016060:	f3ef 8009 	mrs	r0, PSP
 8016064:	f3bf 8f6f 	isb	sy
 8016068:	4b15      	ldr	r3, [pc, #84]	; (80160c0 <pxCurrentTCBConst>)
 801606a:	681a      	ldr	r2, [r3, #0]
 801606c:	f01e 0f10 	tst.w	lr, #16
 8016070:	bf08      	it	eq
 8016072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801607a:	6010      	str	r0, [r2, #0]
 801607c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016084:	b672      	cpsid	i
 8016086:	f380 8811 	msr	BASEPRI, r0
 801608a:	f3bf 8f4f 	dsb	sy
 801608e:	f3bf 8f6f 	isb	sy
 8016092:	b662      	cpsie	i
 8016094:	f7ff f9ba 	bl	801540c <vTaskSwitchContext>
 8016098:	f04f 0000 	mov.w	r0, #0
 801609c:	f380 8811 	msr	BASEPRI, r0
 80160a0:	bc09      	pop	{r0, r3}
 80160a2:	6819      	ldr	r1, [r3, #0]
 80160a4:	6808      	ldr	r0, [r1, #0]
 80160a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160aa:	f01e 0f10 	tst.w	lr, #16
 80160ae:	bf08      	it	eq
 80160b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80160b4:	f380 8809 	msr	PSP, r0
 80160b8:	f3bf 8f6f 	isb	sy
 80160bc:	4770      	bx	lr
 80160be:	bf00      	nop

080160c0 <pxCurrentTCBConst>:
 80160c0:	20005a68 	.word	0x20005a68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80160c4:	bf00      	nop
 80160c6:	bf00      	nop

080160c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b082      	sub	sp, #8
 80160cc:	af00      	add	r7, sp, #0
	__asm volatile
 80160ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160d2:	b672      	cpsid	i
 80160d4:	f383 8811 	msr	BASEPRI, r3
 80160d8:	f3bf 8f6f 	isb	sy
 80160dc:	f3bf 8f4f 	dsb	sy
 80160e0:	b662      	cpsie	i
 80160e2:	607b      	str	r3, [r7, #4]
}
 80160e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80160e6:	f7ff f8d7 	bl	8015298 <xTaskIncrementTick>
 80160ea:	4603      	mov	r3, r0
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d003      	beq.n	80160f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80160f0:	4b06      	ldr	r3, [pc, #24]	; (801610c <SysTick_Handler+0x44>)
 80160f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160f6:	601a      	str	r2, [r3, #0]
 80160f8:	2300      	movs	r3, #0
 80160fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80160fc:	683b      	ldr	r3, [r7, #0]
 80160fe:	f383 8811 	msr	BASEPRI, r3
}
 8016102:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016104:	bf00      	nop
 8016106:	3708      	adds	r7, #8
 8016108:	46bd      	mov	sp, r7
 801610a:	bd80      	pop	{r7, pc}
 801610c:	e000ed04 	.word	0xe000ed04

08016110 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016110:	b480      	push	{r7}
 8016112:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016114:	4b0b      	ldr	r3, [pc, #44]	; (8016144 <vPortSetupTimerInterrupt+0x34>)
 8016116:	2200      	movs	r2, #0
 8016118:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801611a:	4b0b      	ldr	r3, [pc, #44]	; (8016148 <vPortSetupTimerInterrupt+0x38>)
 801611c:	2200      	movs	r2, #0
 801611e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016120:	4b0a      	ldr	r3, [pc, #40]	; (801614c <vPortSetupTimerInterrupt+0x3c>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	4a0a      	ldr	r2, [pc, #40]	; (8016150 <vPortSetupTimerInterrupt+0x40>)
 8016126:	fba2 2303 	umull	r2, r3, r2, r3
 801612a:	099b      	lsrs	r3, r3, #6
 801612c:	4a09      	ldr	r2, [pc, #36]	; (8016154 <vPortSetupTimerInterrupt+0x44>)
 801612e:	3b01      	subs	r3, #1
 8016130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016132:	4b04      	ldr	r3, [pc, #16]	; (8016144 <vPortSetupTimerInterrupt+0x34>)
 8016134:	2207      	movs	r2, #7
 8016136:	601a      	str	r2, [r3, #0]
}
 8016138:	bf00      	nop
 801613a:	46bd      	mov	sp, r7
 801613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016140:	4770      	bx	lr
 8016142:	bf00      	nop
 8016144:	e000e010 	.word	0xe000e010
 8016148:	e000e018 	.word	0xe000e018
 801614c:	20000000 	.word	0x20000000
 8016150:	10624dd3 	.word	0x10624dd3
 8016154:	e000e014 	.word	0xe000e014

08016158 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016158:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016168 <vPortEnableVFP+0x10>
 801615c:	6801      	ldr	r1, [r0, #0]
 801615e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016162:	6001      	str	r1, [r0, #0]
 8016164:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016166:	bf00      	nop
 8016168:	e000ed88 	.word	0xe000ed88

0801616c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801616c:	b480      	push	{r7}
 801616e:	b085      	sub	sp, #20
 8016170:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016172:	f3ef 8305 	mrs	r3, IPSR
 8016176:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	2b0f      	cmp	r3, #15
 801617c:	d916      	bls.n	80161ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801617e:	4a19      	ldr	r2, [pc, #100]	; (80161e4 <vPortValidateInterruptPriority+0x78>)
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	4413      	add	r3, r2
 8016184:	781b      	ldrb	r3, [r3, #0]
 8016186:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016188:	4b17      	ldr	r3, [pc, #92]	; (80161e8 <vPortValidateInterruptPriority+0x7c>)
 801618a:	781b      	ldrb	r3, [r3, #0]
 801618c:	7afa      	ldrb	r2, [r7, #11]
 801618e:	429a      	cmp	r2, r3
 8016190:	d20c      	bcs.n	80161ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8016192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016196:	b672      	cpsid	i
 8016198:	f383 8811 	msr	BASEPRI, r3
 801619c:	f3bf 8f6f 	isb	sy
 80161a0:	f3bf 8f4f 	dsb	sy
 80161a4:	b662      	cpsie	i
 80161a6:	607b      	str	r3, [r7, #4]
}
 80161a8:	bf00      	nop
 80161aa:	e7fe      	b.n	80161aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80161ac:	4b0f      	ldr	r3, [pc, #60]	; (80161ec <vPortValidateInterruptPriority+0x80>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80161b4:	4b0e      	ldr	r3, [pc, #56]	; (80161f0 <vPortValidateInterruptPriority+0x84>)
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d90c      	bls.n	80161d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80161bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161c0:	b672      	cpsid	i
 80161c2:	f383 8811 	msr	BASEPRI, r3
 80161c6:	f3bf 8f6f 	isb	sy
 80161ca:	f3bf 8f4f 	dsb	sy
 80161ce:	b662      	cpsie	i
 80161d0:	603b      	str	r3, [r7, #0]
}
 80161d2:	bf00      	nop
 80161d4:	e7fe      	b.n	80161d4 <vPortValidateInterruptPriority+0x68>
	}
 80161d6:	bf00      	nop
 80161d8:	3714      	adds	r7, #20
 80161da:	46bd      	mov	sp, r7
 80161dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e0:	4770      	bx	lr
 80161e2:	bf00      	nop
 80161e4:	e000e3f0 	.word	0xe000e3f0
 80161e8:	20005b94 	.word	0x20005b94
 80161ec:	e000ed0c 	.word	0xe000ed0c
 80161f0:	20005b98 	.word	0x20005b98

080161f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b08a      	sub	sp, #40	; 0x28
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80161fc:	2300      	movs	r3, #0
 80161fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016200:	f7fe ff7c 	bl	80150fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016204:	4b5e      	ldr	r3, [pc, #376]	; (8016380 <pvPortMalloc+0x18c>)
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d101      	bne.n	8016210 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801620c:	f000 f920 	bl	8016450 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016210:	4b5c      	ldr	r3, [pc, #368]	; (8016384 <pvPortMalloc+0x190>)
 8016212:	681a      	ldr	r2, [r3, #0]
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	4013      	ands	r3, r2
 8016218:	2b00      	cmp	r3, #0
 801621a:	f040 8092 	bne.w	8016342 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d01f      	beq.n	8016264 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8016224:	2208      	movs	r2, #8
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	4413      	add	r3, r2
 801622a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f003 0307 	and.w	r3, r3, #7
 8016232:	2b00      	cmp	r3, #0
 8016234:	d016      	beq.n	8016264 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	f023 0307 	bic.w	r3, r3, #7
 801623c:	3308      	adds	r3, #8
 801623e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	f003 0307 	and.w	r3, r3, #7
 8016246:	2b00      	cmp	r3, #0
 8016248:	d00c      	beq.n	8016264 <pvPortMalloc+0x70>
	__asm volatile
 801624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801624e:	b672      	cpsid	i
 8016250:	f383 8811 	msr	BASEPRI, r3
 8016254:	f3bf 8f6f 	isb	sy
 8016258:	f3bf 8f4f 	dsb	sy
 801625c:	b662      	cpsie	i
 801625e:	617b      	str	r3, [r7, #20]
}
 8016260:	bf00      	nop
 8016262:	e7fe      	b.n	8016262 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d06b      	beq.n	8016342 <pvPortMalloc+0x14e>
 801626a:	4b47      	ldr	r3, [pc, #284]	; (8016388 <pvPortMalloc+0x194>)
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	687a      	ldr	r2, [r7, #4]
 8016270:	429a      	cmp	r2, r3
 8016272:	d866      	bhi.n	8016342 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016274:	4b45      	ldr	r3, [pc, #276]	; (801638c <pvPortMalloc+0x198>)
 8016276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016278:	4b44      	ldr	r3, [pc, #272]	; (801638c <pvPortMalloc+0x198>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801627e:	e004      	b.n	801628a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8016280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801628c:	685b      	ldr	r3, [r3, #4]
 801628e:	687a      	ldr	r2, [r7, #4]
 8016290:	429a      	cmp	r2, r3
 8016292:	d903      	bls.n	801629c <pvPortMalloc+0xa8>
 8016294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d1f1      	bne.n	8016280 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801629c:	4b38      	ldr	r3, [pc, #224]	; (8016380 <pvPortMalloc+0x18c>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162a2:	429a      	cmp	r2, r3
 80162a4:	d04d      	beq.n	8016342 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80162a6:	6a3b      	ldr	r3, [r7, #32]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	2208      	movs	r2, #8
 80162ac:	4413      	add	r3, r2
 80162ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80162b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b2:	681a      	ldr	r2, [r3, #0]
 80162b4:	6a3b      	ldr	r3, [r7, #32]
 80162b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80162b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ba:	685a      	ldr	r2, [r3, #4]
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	1ad2      	subs	r2, r2, r3
 80162c0:	2308      	movs	r3, #8
 80162c2:	005b      	lsls	r3, r3, #1
 80162c4:	429a      	cmp	r2, r3
 80162c6:	d921      	bls.n	801630c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80162c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	4413      	add	r3, r2
 80162ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80162d0:	69bb      	ldr	r3, [r7, #24]
 80162d2:	f003 0307 	and.w	r3, r3, #7
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d00c      	beq.n	80162f4 <pvPortMalloc+0x100>
	__asm volatile
 80162da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162de:	b672      	cpsid	i
 80162e0:	f383 8811 	msr	BASEPRI, r3
 80162e4:	f3bf 8f6f 	isb	sy
 80162e8:	f3bf 8f4f 	dsb	sy
 80162ec:	b662      	cpsie	i
 80162ee:	613b      	str	r3, [r7, #16]
}
 80162f0:	bf00      	nop
 80162f2:	e7fe      	b.n	80162f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80162f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f6:	685a      	ldr	r2, [r3, #4]
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	1ad2      	subs	r2, r2, r3
 80162fc:	69bb      	ldr	r3, [r7, #24]
 80162fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016302:	687a      	ldr	r2, [r7, #4]
 8016304:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016306:	69b8      	ldr	r0, [r7, #24]
 8016308:	f000 f904 	bl	8016514 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801630c:	4b1e      	ldr	r3, [pc, #120]	; (8016388 <pvPortMalloc+0x194>)
 801630e:	681a      	ldr	r2, [r3, #0]
 8016310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016312:	685b      	ldr	r3, [r3, #4]
 8016314:	1ad3      	subs	r3, r2, r3
 8016316:	4a1c      	ldr	r2, [pc, #112]	; (8016388 <pvPortMalloc+0x194>)
 8016318:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801631a:	4b1b      	ldr	r3, [pc, #108]	; (8016388 <pvPortMalloc+0x194>)
 801631c:	681a      	ldr	r2, [r3, #0]
 801631e:	4b1c      	ldr	r3, [pc, #112]	; (8016390 <pvPortMalloc+0x19c>)
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	429a      	cmp	r2, r3
 8016324:	d203      	bcs.n	801632e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016326:	4b18      	ldr	r3, [pc, #96]	; (8016388 <pvPortMalloc+0x194>)
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	4a19      	ldr	r2, [pc, #100]	; (8016390 <pvPortMalloc+0x19c>)
 801632c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016330:	685a      	ldr	r2, [r3, #4]
 8016332:	4b14      	ldr	r3, [pc, #80]	; (8016384 <pvPortMalloc+0x190>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	431a      	orrs	r2, r3
 8016338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801633a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801633e:	2200      	movs	r2, #0
 8016340:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016342:	f7fe fee9 	bl	8015118 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8016346:	69fb      	ldr	r3, [r7, #28]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d101      	bne.n	8016350 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801634c:	f7ea f948 	bl	80005e0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016350:	69fb      	ldr	r3, [r7, #28]
 8016352:	f003 0307 	and.w	r3, r3, #7
 8016356:	2b00      	cmp	r3, #0
 8016358:	d00c      	beq.n	8016374 <pvPortMalloc+0x180>
	__asm volatile
 801635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801635e:	b672      	cpsid	i
 8016360:	f383 8811 	msr	BASEPRI, r3
 8016364:	f3bf 8f6f 	isb	sy
 8016368:	f3bf 8f4f 	dsb	sy
 801636c:	b662      	cpsie	i
 801636e:	60fb      	str	r3, [r7, #12]
}
 8016370:	bf00      	nop
 8016372:	e7fe      	b.n	8016372 <pvPortMalloc+0x17e>
	return pvReturn;
 8016374:	69fb      	ldr	r3, [r7, #28]
}
 8016376:	4618      	mov	r0, r3
 8016378:	3728      	adds	r7, #40	; 0x28
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	2000dba4 	.word	0x2000dba4
 8016384:	2000dbb0 	.word	0x2000dbb0
 8016388:	2000dba8 	.word	0x2000dba8
 801638c:	2000db9c 	.word	0x2000db9c
 8016390:	2000dbac 	.word	0x2000dbac

08016394 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b086      	sub	sp, #24
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d04c      	beq.n	8016440 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80163a6:	2308      	movs	r3, #8
 80163a8:	425b      	negs	r3, r3
 80163aa:	697a      	ldr	r2, [r7, #20]
 80163ac:	4413      	add	r3, r2
 80163ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80163b4:	693b      	ldr	r3, [r7, #16]
 80163b6:	685a      	ldr	r2, [r3, #4]
 80163b8:	4b23      	ldr	r3, [pc, #140]	; (8016448 <vPortFree+0xb4>)
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	4013      	ands	r3, r2
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d10c      	bne.n	80163dc <vPortFree+0x48>
	__asm volatile
 80163c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163c6:	b672      	cpsid	i
 80163c8:	f383 8811 	msr	BASEPRI, r3
 80163cc:	f3bf 8f6f 	isb	sy
 80163d0:	f3bf 8f4f 	dsb	sy
 80163d4:	b662      	cpsie	i
 80163d6:	60fb      	str	r3, [r7, #12]
}
 80163d8:	bf00      	nop
 80163da:	e7fe      	b.n	80163da <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80163dc:	693b      	ldr	r3, [r7, #16]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d00c      	beq.n	80163fe <vPortFree+0x6a>
	__asm volatile
 80163e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163e8:	b672      	cpsid	i
 80163ea:	f383 8811 	msr	BASEPRI, r3
 80163ee:	f3bf 8f6f 	isb	sy
 80163f2:	f3bf 8f4f 	dsb	sy
 80163f6:	b662      	cpsie	i
 80163f8:	60bb      	str	r3, [r7, #8]
}
 80163fa:	bf00      	nop
 80163fc:	e7fe      	b.n	80163fc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80163fe:	693b      	ldr	r3, [r7, #16]
 8016400:	685a      	ldr	r2, [r3, #4]
 8016402:	4b11      	ldr	r3, [pc, #68]	; (8016448 <vPortFree+0xb4>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	4013      	ands	r3, r2
 8016408:	2b00      	cmp	r3, #0
 801640a:	d019      	beq.n	8016440 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801640c:	693b      	ldr	r3, [r7, #16]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d115      	bne.n	8016440 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016414:	693b      	ldr	r3, [r7, #16]
 8016416:	685a      	ldr	r2, [r3, #4]
 8016418:	4b0b      	ldr	r3, [pc, #44]	; (8016448 <vPortFree+0xb4>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	43db      	mvns	r3, r3
 801641e:	401a      	ands	r2, r3
 8016420:	693b      	ldr	r3, [r7, #16]
 8016422:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016424:	f7fe fe6a 	bl	80150fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016428:	693b      	ldr	r3, [r7, #16]
 801642a:	685a      	ldr	r2, [r3, #4]
 801642c:	4b07      	ldr	r3, [pc, #28]	; (801644c <vPortFree+0xb8>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	4413      	add	r3, r2
 8016432:	4a06      	ldr	r2, [pc, #24]	; (801644c <vPortFree+0xb8>)
 8016434:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016436:	6938      	ldr	r0, [r7, #16]
 8016438:	f000 f86c 	bl	8016514 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801643c:	f7fe fe6c 	bl	8015118 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016440:	bf00      	nop
 8016442:	3718      	adds	r7, #24
 8016444:	46bd      	mov	sp, r7
 8016446:	bd80      	pop	{r7, pc}
 8016448:	2000dbb0 	.word	0x2000dbb0
 801644c:	2000dba8 	.word	0x2000dba8

08016450 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016450:	b480      	push	{r7}
 8016452:	b085      	sub	sp, #20
 8016454:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801645a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801645c:	4b27      	ldr	r3, [pc, #156]	; (80164fc <prvHeapInit+0xac>)
 801645e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	f003 0307 	and.w	r3, r3, #7
 8016466:	2b00      	cmp	r3, #0
 8016468:	d00c      	beq.n	8016484 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	3307      	adds	r3, #7
 801646e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	f023 0307 	bic.w	r3, r3, #7
 8016476:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016478:	68ba      	ldr	r2, [r7, #8]
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	1ad3      	subs	r3, r2, r3
 801647e:	4a1f      	ldr	r2, [pc, #124]	; (80164fc <prvHeapInit+0xac>)
 8016480:	4413      	add	r3, r2
 8016482:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016488:	4a1d      	ldr	r2, [pc, #116]	; (8016500 <prvHeapInit+0xb0>)
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801648e:	4b1c      	ldr	r3, [pc, #112]	; (8016500 <prvHeapInit+0xb0>)
 8016490:	2200      	movs	r2, #0
 8016492:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	68ba      	ldr	r2, [r7, #8]
 8016498:	4413      	add	r3, r2
 801649a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801649c:	2208      	movs	r2, #8
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	1a9b      	subs	r3, r3, r2
 80164a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	f023 0307 	bic.w	r3, r3, #7
 80164aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	4a15      	ldr	r2, [pc, #84]	; (8016504 <prvHeapInit+0xb4>)
 80164b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80164b2:	4b14      	ldr	r3, [pc, #80]	; (8016504 <prvHeapInit+0xb4>)
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	2200      	movs	r2, #0
 80164b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80164ba:	4b12      	ldr	r3, [pc, #72]	; (8016504 <prvHeapInit+0xb4>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	2200      	movs	r2, #0
 80164c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	68fa      	ldr	r2, [r7, #12]
 80164ca:	1ad2      	subs	r2, r2, r3
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80164d0:	4b0c      	ldr	r3, [pc, #48]	; (8016504 <prvHeapInit+0xb4>)
 80164d2:	681a      	ldr	r2, [r3, #0]
 80164d4:	683b      	ldr	r3, [r7, #0]
 80164d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	685b      	ldr	r3, [r3, #4]
 80164dc:	4a0a      	ldr	r2, [pc, #40]	; (8016508 <prvHeapInit+0xb8>)
 80164de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	685b      	ldr	r3, [r3, #4]
 80164e4:	4a09      	ldr	r2, [pc, #36]	; (801650c <prvHeapInit+0xbc>)
 80164e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80164e8:	4b09      	ldr	r3, [pc, #36]	; (8016510 <prvHeapInit+0xc0>)
 80164ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80164ee:	601a      	str	r2, [r3, #0]
}
 80164f0:	bf00      	nop
 80164f2:	3714      	adds	r7, #20
 80164f4:	46bd      	mov	sp, r7
 80164f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fa:	4770      	bx	lr
 80164fc:	20005b9c 	.word	0x20005b9c
 8016500:	2000db9c 	.word	0x2000db9c
 8016504:	2000dba4 	.word	0x2000dba4
 8016508:	2000dbac 	.word	0x2000dbac
 801650c:	2000dba8 	.word	0x2000dba8
 8016510:	2000dbb0 	.word	0x2000dbb0

08016514 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016514:	b480      	push	{r7}
 8016516:	b085      	sub	sp, #20
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801651c:	4b28      	ldr	r3, [pc, #160]	; (80165c0 <prvInsertBlockIntoFreeList+0xac>)
 801651e:	60fb      	str	r3, [r7, #12]
 8016520:	e002      	b.n	8016528 <prvInsertBlockIntoFreeList+0x14>
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	60fb      	str	r3, [r7, #12]
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	687a      	ldr	r2, [r7, #4]
 801652e:	429a      	cmp	r2, r3
 8016530:	d8f7      	bhi.n	8016522 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	685b      	ldr	r3, [r3, #4]
 801653a:	68ba      	ldr	r2, [r7, #8]
 801653c:	4413      	add	r3, r2
 801653e:	687a      	ldr	r2, [r7, #4]
 8016540:	429a      	cmp	r2, r3
 8016542:	d108      	bne.n	8016556 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	685a      	ldr	r2, [r3, #4]
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	441a      	add	r2, r3
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	685b      	ldr	r3, [r3, #4]
 801655e:	68ba      	ldr	r2, [r7, #8]
 8016560:	441a      	add	r2, r3
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	429a      	cmp	r2, r3
 8016568:	d118      	bne.n	801659c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	681a      	ldr	r2, [r3, #0]
 801656e:	4b15      	ldr	r3, [pc, #84]	; (80165c4 <prvInsertBlockIntoFreeList+0xb0>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	429a      	cmp	r2, r3
 8016574:	d00d      	beq.n	8016592 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	685a      	ldr	r2, [r3, #4]
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	685b      	ldr	r3, [r3, #4]
 8016580:	441a      	add	r2, r3
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	681a      	ldr	r2, [r3, #0]
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	601a      	str	r2, [r3, #0]
 8016590:	e008      	b.n	80165a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016592:	4b0c      	ldr	r3, [pc, #48]	; (80165c4 <prvInsertBlockIntoFreeList+0xb0>)
 8016594:	681a      	ldr	r2, [r3, #0]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	601a      	str	r2, [r3, #0]
 801659a:	e003      	b.n	80165a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	681a      	ldr	r2, [r3, #0]
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80165a4:	68fa      	ldr	r2, [r7, #12]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	429a      	cmp	r2, r3
 80165aa:	d002      	beq.n	80165b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	687a      	ldr	r2, [r7, #4]
 80165b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80165b2:	bf00      	nop
 80165b4:	3714      	adds	r7, #20
 80165b6:	46bd      	mov	sp, r7
 80165b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165bc:	4770      	bx	lr
 80165be:	bf00      	nop
 80165c0:	2000db9c 	.word	0x2000db9c
 80165c4:	2000dba4 	.word	0x2000dba4

080165c8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b084      	sub	sp, #16
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
 80165d0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	330c      	adds	r3, #12
 80165d8:	461a      	mov	r2, r3
 80165da:	6839      	ldr	r1, [r7, #0]
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f001 fc17 	bl	8017e10 <tcpip_send_msg_wait_sem>
 80165e2:	4603      	mov	r3, r0
 80165e4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80165e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d103      	bne.n	80165f6 <netconn_apimsg+0x2e>
    return apimsg->err;
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80165f4:	e001      	b.n	80165fa <netconn_apimsg+0x32>
  }
  return err;
 80165f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80165fa:	4618      	mov	r0, r3
 80165fc:	3710      	adds	r7, #16
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
	...

08016604 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b08c      	sub	sp, #48	; 0x30
 8016608:	af00      	add	r7, sp, #0
 801660a:	4603      	mov	r3, r0
 801660c:	603a      	str	r2, [r7, #0]
 801660e:	71fb      	strb	r3, [r7, #7]
 8016610:	460b      	mov	r3, r1
 8016612:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8016614:	79fb      	ldrb	r3, [r7, #7]
 8016616:	6839      	ldr	r1, [r7, #0]
 8016618:	4618      	mov	r0, r3
 801661a:	f000 fd03 	bl	8017024 <netconn_alloc>
 801661e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8016620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016622:	2b00      	cmp	r3, #0
 8016624:	d054      	beq.n	80166d0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8016626:	79bb      	ldrb	r3, [r7, #6]
 8016628:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801662c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801662e:	f107 0308 	add.w	r3, r7, #8
 8016632:	4619      	mov	r1, r3
 8016634:	4829      	ldr	r0, [pc, #164]	; (80166dc <netconn_new_with_proto_and_callback+0xd8>)
 8016636:	f7ff ffc7 	bl	80165c8 <netconn_apimsg>
 801663a:	4603      	mov	r3, r0
 801663c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8016640:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8016644:	2b00      	cmp	r3, #0
 8016646:	d043      	beq.n	80166d0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8016648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801664a:	685b      	ldr	r3, [r3, #4]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d005      	beq.n	801665c <netconn_new_with_proto_and_callback+0x58>
 8016650:	4b23      	ldr	r3, [pc, #140]	; (80166e0 <netconn_new_with_proto_and_callback+0xdc>)
 8016652:	22a3      	movs	r2, #163	; 0xa3
 8016654:	4923      	ldr	r1, [pc, #140]	; (80166e4 <netconn_new_with_proto_and_callback+0xe0>)
 8016656:	4824      	ldr	r0, [pc, #144]	; (80166e8 <netconn_new_with_proto_and_callback+0xe4>)
 8016658:	f00d f8fa 	bl	8023850 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 801665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801665e:	3310      	adds	r3, #16
 8016660:	4618      	mov	r0, r3
 8016662:	f00c faf6 	bl	8022c52 <sys_mbox_valid>
 8016666:	4603      	mov	r3, r0
 8016668:	2b00      	cmp	r3, #0
 801666a:	d105      	bne.n	8016678 <netconn_new_with_proto_and_callback+0x74>
 801666c:	4b1c      	ldr	r3, [pc, #112]	; (80166e0 <netconn_new_with_proto_and_callback+0xdc>)
 801666e:	22a4      	movs	r2, #164	; 0xa4
 8016670:	491e      	ldr	r1, [pc, #120]	; (80166ec <netconn_new_with_proto_and_callback+0xe8>)
 8016672:	481d      	ldr	r0, [pc, #116]	; (80166e8 <netconn_new_with_proto_and_callback+0xe4>)
 8016674:	f00d f8ec 	bl	8023850 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8016678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801667a:	3314      	adds	r3, #20
 801667c:	4618      	mov	r0, r3
 801667e:	f00c fae8 	bl	8022c52 <sys_mbox_valid>
 8016682:	4603      	mov	r3, r0
 8016684:	2b00      	cmp	r3, #0
 8016686:	d005      	beq.n	8016694 <netconn_new_with_proto_and_callback+0x90>
 8016688:	4b15      	ldr	r3, [pc, #84]	; (80166e0 <netconn_new_with_proto_and_callback+0xdc>)
 801668a:	22a6      	movs	r2, #166	; 0xa6
 801668c:	4918      	ldr	r1, [pc, #96]	; (80166f0 <netconn_new_with_proto_and_callback+0xec>)
 801668e:	4816      	ldr	r0, [pc, #88]	; (80166e8 <netconn_new_with_proto_and_callback+0xe4>)
 8016690:	f00d f8de 	bl	8023850 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8016694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016696:	330c      	adds	r3, #12
 8016698:	4618      	mov	r0, r3
 801669a:	f00c fb6b 	bl	8022d74 <sys_sem_valid>
 801669e:	4603      	mov	r3, r0
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d105      	bne.n	80166b0 <netconn_new_with_proto_and_callback+0xac>
 80166a4:	4b0e      	ldr	r3, [pc, #56]	; (80166e0 <netconn_new_with_proto_and_callback+0xdc>)
 80166a6:	22a9      	movs	r2, #169	; 0xa9
 80166a8:	4912      	ldr	r1, [pc, #72]	; (80166f4 <netconn_new_with_proto_and_callback+0xf0>)
 80166aa:	480f      	ldr	r0, [pc, #60]	; (80166e8 <netconn_new_with_proto_and_callback+0xe4>)
 80166ac:	f00d f8d0 	bl	8023850 <iprintf>
      sys_sem_free(&conn->op_completed);
 80166b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b2:	330c      	adds	r3, #12
 80166b4:	4618      	mov	r0, r3
 80166b6:	f00c fb50 	bl	8022d5a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80166ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166bc:	3310      	adds	r3, #16
 80166be:	4618      	mov	r0, r3
 80166c0:	f00c fa5c 	bl	8022b7c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80166c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80166c6:	2007      	movs	r0, #7
 80166c8:	f002 f950 	bl	801896c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80166cc:	2300      	movs	r3, #0
 80166ce:	e000      	b.n	80166d2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80166d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80166d2:	4618      	mov	r0, r3
 80166d4:	3730      	adds	r7, #48	; 0x30
 80166d6:	46bd      	mov	sp, r7
 80166d8:	bd80      	pop	{r7, pc}
 80166da:	bf00      	nop
 80166dc:	08016ff9 	.word	0x08016ff9
 80166e0:	08024de8 	.word	0x08024de8
 80166e4:	08024e1c 	.word	0x08024e1c
 80166e8:	08024e40 	.word	0x08024e40
 80166ec:	08024e68 	.word	0x08024e68
 80166f0:	08024e80 	.word	0x08024e80
 80166f4:	08024ea4 	.word	0x08024ea4

080166f8 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b08e      	sub	sp, #56	; 0x38
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	60f8      	str	r0, [r7, #12]
 8016700:	60b9      	str	r1, [r7, #8]
 8016702:	4613      	mov	r3, r2
 8016704:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d109      	bne.n	8016720 <netconn_connect+0x28>
 801670c:	4b11      	ldr	r3, [pc, #68]	; (8016754 <netconn_connect+0x5c>)
 801670e:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8016712:	4911      	ldr	r1, [pc, #68]	; (8016758 <netconn_connect+0x60>)
 8016714:	4811      	ldr	r0, [pc, #68]	; (801675c <netconn_connect+0x64>)
 8016716:	f00d f89b 	bl	8023850 <iprintf>
 801671a:	f06f 030f 	mvn.w	r3, #15
 801671e:	e015      	b.n	801674c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8016720:	68bb      	ldr	r3, [r7, #8]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d101      	bne.n	801672a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8016726:	4b0e      	ldr	r3, [pc, #56]	; (8016760 <netconn_connect+0x68>)
 8016728:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801672e:	68bb      	ldr	r3, [r7, #8]
 8016730:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8016732:	88fb      	ldrh	r3, [r7, #6]
 8016734:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8016736:	f107 0314 	add.w	r3, r7, #20
 801673a:	4619      	mov	r1, r3
 801673c:	4809      	ldr	r0, [pc, #36]	; (8016764 <netconn_connect+0x6c>)
 801673e:	f7ff ff43 	bl	80165c8 <netconn_apimsg>
 8016742:	4603      	mov	r3, r0
 8016744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8016748:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801674c:	4618      	mov	r0, r3
 801674e:	3738      	adds	r7, #56	; 0x38
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}
 8016754:	08024de8 	.word	0x08024de8
 8016758:	08024f5c 	.word	0x08024f5c
 801675c:	08024e40 	.word	0x08024e40
 8016760:	0802826c 	.word	0x0802826c
 8016764:	080174f5 	.word	0x080174f5

08016768 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b088      	sub	sp, #32
 801676c:	af02      	add	r7, sp, #8
 801676e:	60f8      	str	r0, [r7, #12]
 8016770:	60b9      	str	r1, [r7, #8]
 8016772:	607a      	str	r2, [r7, #4]
 8016774:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8016776:	68bb      	ldr	r3, [r7, #8]
 8016778:	613b      	str	r3, [r7, #16]
  vector.len = size;
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 801677e:	78fa      	ldrb	r2, [r7, #3]
 8016780:	f107 0110 	add.w	r1, r7, #16
 8016784:	6a3b      	ldr	r3, [r7, #32]
 8016786:	9300      	str	r3, [sp, #0]
 8016788:	4613      	mov	r3, r2
 801678a:	2201      	movs	r2, #1
 801678c:	68f8      	ldr	r0, [r7, #12]
 801678e:	f000 f805 	bl	801679c <netconn_write_vectors_partly>
 8016792:	4603      	mov	r3, r0
}
 8016794:	4618      	mov	r0, r3
 8016796:	3718      	adds	r7, #24
 8016798:	46bd      	mov	sp, r7
 801679a:	bd80      	pop	{r7, pc}

0801679c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b092      	sub	sp, #72	; 0x48
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	60f8      	str	r0, [r7, #12]
 80167a4:	60b9      	str	r1, [r7, #8]
 80167a6:	4611      	mov	r1, r2
 80167a8:	461a      	mov	r2, r3
 80167aa:	460b      	mov	r3, r1
 80167ac:	80fb      	strh	r3, [r7, #6]
 80167ae:	4613      	mov	r3, r2
 80167b0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d109      	bne.n	80167cc <netconn_write_vectors_partly+0x30>
 80167b8:	4b4e      	ldr	r3, [pc, #312]	; (80168f4 <netconn_write_vectors_partly+0x158>)
 80167ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80167be:	494e      	ldr	r1, [pc, #312]	; (80168f8 <netconn_write_vectors_partly+0x15c>)
 80167c0:	484e      	ldr	r0, [pc, #312]	; (80168fc <netconn_write_vectors_partly+0x160>)
 80167c2:	f00d f845 	bl	8023850 <iprintf>
 80167c6:	f06f 030f 	mvn.w	r3, #15
 80167ca:	e08e      	b.n	80168ea <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	781b      	ldrb	r3, [r3, #0]
 80167d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80167d4:	2b10      	cmp	r3, #16
 80167d6:	d009      	beq.n	80167ec <netconn_write_vectors_partly+0x50>
 80167d8:	4b46      	ldr	r3, [pc, #280]	; (80168f4 <netconn_write_vectors_partly+0x158>)
 80167da:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80167de:	4948      	ldr	r1, [pc, #288]	; (8016900 <netconn_write_vectors_partly+0x164>)
 80167e0:	4846      	ldr	r0, [pc, #280]	; (80168fc <netconn_write_vectors_partly+0x160>)
 80167e2:	f00d f835 	bl	8023850 <iprintf>
 80167e6:	f06f 0305 	mvn.w	r3, #5
 80167ea:	e07e      	b.n	80168ea <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	7f1b      	ldrb	r3, [r3, #28]
 80167f0:	f003 0302 	and.w	r3, r3, #2
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d104      	bne.n	8016802 <netconn_write_vectors_partly+0x66>
 80167f8:	797b      	ldrb	r3, [r7, #5]
 80167fa:	f003 0304 	and.w	r3, r3, #4
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d001      	beq.n	8016806 <netconn_write_vectors_partly+0x6a>
 8016802:	2301      	movs	r3, #1
 8016804:	e000      	b.n	8016808 <netconn_write_vectors_partly+0x6c>
 8016806:	2300      	movs	r3, #0
 8016808:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 801680c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016810:	2b00      	cmp	r3, #0
 8016812:	d005      	beq.n	8016820 <netconn_write_vectors_partly+0x84>
 8016814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016816:	2b00      	cmp	r3, #0
 8016818:	d102      	bne.n	8016820 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 801681a:	f06f 0305 	mvn.w	r3, #5
 801681e:	e064      	b.n	80168ea <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8016820:	2300      	movs	r3, #0
 8016822:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8016824:	2300      	movs	r3, #0
 8016826:	643b      	str	r3, [r7, #64]	; 0x40
 8016828:	e015      	b.n	8016856 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 801682a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801682c:	00db      	lsls	r3, r3, #3
 801682e:	68ba      	ldr	r2, [r7, #8]
 8016830:	4413      	add	r3, r2
 8016832:	685b      	ldr	r3, [r3, #4]
 8016834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016836:	4413      	add	r3, r2
 8016838:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 801683a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801683c:	00db      	lsls	r3, r3, #3
 801683e:	68ba      	ldr	r2, [r7, #8]
 8016840:	4413      	add	r3, r2
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016846:	429a      	cmp	r2, r3
 8016848:	d202      	bcs.n	8016850 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 801684a:	f06f 0305 	mvn.w	r3, #5
 801684e:	e04c      	b.n	80168ea <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8016850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016852:	3301      	adds	r3, #1
 8016854:	643b      	str	r3, [r7, #64]	; 0x40
 8016856:	88fb      	ldrh	r3, [r7, #6]
 8016858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801685a:	429a      	cmp	r2, r3
 801685c:	dbe5      	blt.n	801682a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 801685e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016860:	2b00      	cmp	r3, #0
 8016862:	d101      	bne.n	8016868 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8016864:	2300      	movs	r3, #0
 8016866:	e040      	b.n	80168ea <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8016868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801686a:	2b00      	cmp	r3, #0
 801686c:	da0a      	bge.n	8016884 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 801686e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016870:	2b00      	cmp	r3, #0
 8016872:	d102      	bne.n	801687a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8016874:	f06f 0305 	mvn.w	r3, #5
 8016878:	e037      	b.n	80168ea <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 801687a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801687e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8016880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016882:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 801688c:	88fb      	ldrh	r3, [r7, #6]
 801688e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8016890:	2300      	movs	r3, #0
 8016892:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8016894:	797b      	ldrb	r3, [r7, #5]
 8016896:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 801689a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801689c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 801689e:	2300      	movs	r3, #0
 80168a0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80168a2:	f107 0314 	add.w	r3, r7, #20
 80168a6:	4619      	mov	r1, r3
 80168a8:	4816      	ldr	r0, [pc, #88]	; (8016904 <netconn_write_vectors_partly+0x168>)
 80168aa:	f7ff fe8d 	bl	80165c8 <netconn_apimsg>
 80168ae:	4603      	mov	r3, r0
 80168b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80168b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d114      	bne.n	80168e6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80168bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d002      	beq.n	80168c8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80168c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80168c6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80168c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d10a      	bne.n	80168e6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80168d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80168d4:	429a      	cmp	r2, r3
 80168d6:	d006      	beq.n	80168e6 <netconn_write_vectors_partly+0x14a>
 80168d8:	4b06      	ldr	r3, [pc, #24]	; (80168f4 <netconn_write_vectors_partly+0x158>)
 80168da:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80168de:	490a      	ldr	r1, [pc, #40]	; (8016908 <netconn_write_vectors_partly+0x16c>)
 80168e0:	4806      	ldr	r0, [pc, #24]	; (80168fc <netconn_write_vectors_partly+0x160>)
 80168e2:	f00c ffb5 	bl	8023850 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80168e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80168ea:	4618      	mov	r0, r3
 80168ec:	3748      	adds	r7, #72	; 0x48
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}
 80168f2:	bf00      	nop
 80168f4:	08024de8 	.word	0x08024de8
 80168f8:	080250c0 	.word	0x080250c0
 80168fc:	08024e40 	.word	0x08024e40
 8016900:	080250dc 	.word	0x080250dc
 8016904:	08017a09 	.word	0x08017a09
 8016908:	08025100 	.word	0x08025100

0801690c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b084      	sub	sp, #16
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d101      	bne.n	801691e <netconn_err+0x12>
    return ERR_OK;
 801691a:	2300      	movs	r3, #0
 801691c:	e00d      	b.n	801693a <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 801691e:	f00c faa7 	bl	8022e70 <sys_arch_protect>
 8016922:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	7a1b      	ldrb	r3, [r3, #8]
 8016928:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2200      	movs	r2, #0
 801692e:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8016930:	68f8      	ldr	r0, [r7, #12]
 8016932:	f00c faab 	bl	8022e8c <sys_arch_unprotect>
  return err;
 8016936:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801693a:	4618      	mov	r0, r3
 801693c:	3710      	adds	r7, #16
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}
	...

08016944 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b082      	sub	sp, #8
 8016948:	af00      	add	r7, sp, #0
 801694a:	4603      	mov	r3, r0
 801694c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 801694e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016952:	f113 0f0d 	cmn.w	r3, #13
 8016956:	d009      	beq.n	801696c <lwip_netconn_err_to_msg+0x28>
 8016958:	f113 0f0d 	cmn.w	r3, #13
 801695c:	dc0c      	bgt.n	8016978 <lwip_netconn_err_to_msg+0x34>
 801695e:	f113 0f0f 	cmn.w	r3, #15
 8016962:	d007      	beq.n	8016974 <lwip_netconn_err_to_msg+0x30>
 8016964:	f113 0f0e 	cmn.w	r3, #14
 8016968:	d002      	beq.n	8016970 <lwip_netconn_err_to_msg+0x2c>
 801696a:	e005      	b.n	8016978 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 801696c:	4b0a      	ldr	r3, [pc, #40]	; (8016998 <lwip_netconn_err_to_msg+0x54>)
 801696e:	e00e      	b.n	801698e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8016970:	4b0a      	ldr	r3, [pc, #40]	; (801699c <lwip_netconn_err_to_msg+0x58>)
 8016972:	e00c      	b.n	801698e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8016974:	4b0a      	ldr	r3, [pc, #40]	; (80169a0 <lwip_netconn_err_to_msg+0x5c>)
 8016976:	e00a      	b.n	801698e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8016978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d005      	beq.n	801698c <lwip_netconn_err_to_msg+0x48>
 8016980:	4b08      	ldr	r3, [pc, #32]	; (80169a4 <lwip_netconn_err_to_msg+0x60>)
 8016982:	227d      	movs	r2, #125	; 0x7d
 8016984:	4908      	ldr	r1, [pc, #32]	; (80169a8 <lwip_netconn_err_to_msg+0x64>)
 8016986:	4809      	ldr	r0, [pc, #36]	; (80169ac <lwip_netconn_err_to_msg+0x68>)
 8016988:	f00c ff62 	bl	8023850 <iprintf>
      return NULL;
 801698c:	2300      	movs	r3, #0
  }
}
 801698e:	4618      	mov	r0, r3
 8016990:	3708      	adds	r7, #8
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}
 8016996:	bf00      	nop
 8016998:	08028158 	.word	0x08028158
 801699c:	08028159 	.word	0x08028159
 80169a0:	0802815a 	.word	0x0802815a
 80169a4:	08025140 	.word	0x08025140
 80169a8:	08025174 	.word	0x08025174
 80169ac:	08025184 	.word	0x08025184

080169b0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b088      	sub	sp, #32
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	60f8      	str	r0, [r7, #12]
 80169b8:	60b9      	str	r1, [r7, #8]
 80169ba:	607a      	str	r2, [r7, #4]
 80169bc:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80169be:	68bb      	ldr	r3, [r7, #8]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d105      	bne.n	80169d0 <recv_udp+0x20>
 80169c4:	4b34      	ldr	r3, [pc, #208]	; (8016a98 <recv_udp+0xe8>)
 80169c6:	22e5      	movs	r2, #229	; 0xe5
 80169c8:	4934      	ldr	r1, [pc, #208]	; (8016a9c <recv_udp+0xec>)
 80169ca:	4835      	ldr	r0, [pc, #212]	; (8016aa0 <recv_udp+0xf0>)
 80169cc:	f00c ff40 	bl	8023850 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d105      	bne.n	80169e2 <recv_udp+0x32>
 80169d6:	4b30      	ldr	r3, [pc, #192]	; (8016a98 <recv_udp+0xe8>)
 80169d8:	22e6      	movs	r2, #230	; 0xe6
 80169da:	4932      	ldr	r1, [pc, #200]	; (8016aa4 <recv_udp+0xf4>)
 80169dc:	4830      	ldr	r0, [pc, #192]	; (8016aa0 <recv_udp+0xf0>)
 80169de:	f00c ff37 	bl	8023850 <iprintf>
  conn = (struct netconn *)arg;
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80169e6:	69fb      	ldr	r3, [r7, #28]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d103      	bne.n	80169f4 <recv_udp+0x44>
    pbuf_free(p);
 80169ec:	6878      	ldr	r0, [r7, #4]
 80169ee:	f002 fe61 	bl	80196b4 <pbuf_free>
    return;
 80169f2:	e04d      	b.n	8016a90 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80169f4:	69fb      	ldr	r3, [r7, #28]
 80169f6:	685b      	ldr	r3, [r3, #4]
 80169f8:	68ba      	ldr	r2, [r7, #8]
 80169fa:	429a      	cmp	r2, r3
 80169fc:	d005      	beq.n	8016a0a <recv_udp+0x5a>
 80169fe:	4b26      	ldr	r3, [pc, #152]	; (8016a98 <recv_udp+0xe8>)
 8016a00:	22ee      	movs	r2, #238	; 0xee
 8016a02:	4929      	ldr	r1, [pc, #164]	; (8016aa8 <recv_udp+0xf8>)
 8016a04:	4826      	ldr	r0, [pc, #152]	; (8016aa0 <recv_udp+0xf0>)
 8016a06:	f00c ff23 	bl	8023850 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8016a0a:	69fb      	ldr	r3, [r7, #28]
 8016a0c:	3310      	adds	r3, #16
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f00c f91f 	bl	8022c52 <sys_mbox_valid>
 8016a14:	4603      	mov	r3, r0
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d103      	bne.n	8016a22 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8016a1a:	6878      	ldr	r0, [r7, #4]
 8016a1c:	f002 fe4a 	bl	80196b4 <pbuf_free>
    return;
 8016a20:	e036      	b.n	8016a90 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8016a22:	2006      	movs	r0, #6
 8016a24:	f001 ff2c 	bl	8018880 <memp_malloc>
 8016a28:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8016a2a:	69bb      	ldr	r3, [r7, #24]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d103      	bne.n	8016a38 <recv_udp+0x88>
    pbuf_free(p);
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	f002 fe3f 	bl	80196b4 <pbuf_free>
    return;
 8016a36:	e02b      	b.n	8016a90 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8016a38:	69bb      	ldr	r3, [r7, #24]
 8016a3a:	687a      	ldr	r2, [r7, #4]
 8016a3c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8016a3e:	69bb      	ldr	r3, [r7, #24]
 8016a40:	687a      	ldr	r2, [r7, #4]
 8016a42:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8016a44:	683b      	ldr	r3, [r7, #0]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d002      	beq.n	8016a50 <recv_udp+0xa0>
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	e000      	b.n	8016a52 <recv_udp+0xa2>
 8016a50:	2300      	movs	r3, #0
 8016a52:	69ba      	ldr	r2, [r7, #24]
 8016a54:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8016a56:	69bb      	ldr	r3, [r7, #24]
 8016a58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8016a5a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	891b      	ldrh	r3, [r3, #8]
 8016a60:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8016a62:	69fb      	ldr	r3, [r7, #28]
 8016a64:	3310      	adds	r3, #16
 8016a66:	69b9      	ldr	r1, [r7, #24]
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f00c f899 	bl	8022ba0 <sys_mbox_trypost>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d003      	beq.n	8016a7c <recv_udp+0xcc>
    netbuf_delete(buf);
 8016a74:	69b8      	ldr	r0, [r7, #24]
 8016a76:	f001 f853 	bl	8017b20 <netbuf_delete>
    return;
 8016a7a:	e009      	b.n	8016a90 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8016a7c:	69fb      	ldr	r3, [r7, #28]
 8016a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d005      	beq.n	8016a90 <recv_udp+0xe0>
 8016a84:	69fb      	ldr	r3, [r7, #28]
 8016a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a88:	8afa      	ldrh	r2, [r7, #22]
 8016a8a:	2100      	movs	r1, #0
 8016a8c:	69f8      	ldr	r0, [r7, #28]
 8016a8e:	4798      	blx	r3
  }
}
 8016a90:	3720      	adds	r7, #32
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}
 8016a96:	bf00      	nop
 8016a98:	08025140 	.word	0x08025140
 8016a9c:	080251b8 	.word	0x080251b8
 8016aa0:	08025184 	.word	0x08025184
 8016aa4:	080251dc 	.word	0x080251dc
 8016aa8:	080251fc 	.word	0x080251fc

08016aac <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b088      	sub	sp, #32
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	60f8      	str	r0, [r7, #12]
 8016ab4:	60b9      	str	r1, [r7, #8]
 8016ab6:	607a      	str	r2, [r7, #4]
 8016ab8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8016aba:	68bb      	ldr	r3, [r7, #8]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d106      	bne.n	8016ace <recv_tcp+0x22>
 8016ac0:	4b36      	ldr	r3, [pc, #216]	; (8016b9c <recv_tcp+0xf0>)
 8016ac2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8016ac6:	4936      	ldr	r1, [pc, #216]	; (8016ba0 <recv_tcp+0xf4>)
 8016ac8:	4836      	ldr	r0, [pc, #216]	; (8016ba4 <recv_tcp+0xf8>)
 8016aca:	f00c fec1 	bl	8023850 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d106      	bne.n	8016ae2 <recv_tcp+0x36>
 8016ad4:	4b31      	ldr	r3, [pc, #196]	; (8016b9c <recv_tcp+0xf0>)
 8016ad6:	f240 122d 	movw	r2, #301	; 0x12d
 8016ada:	4933      	ldr	r1, [pc, #204]	; (8016ba8 <recv_tcp+0xfc>)
 8016adc:	4831      	ldr	r0, [pc, #196]	; (8016ba4 <recv_tcp+0xf8>)
 8016ade:	f00c feb7 	bl	8023850 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8016ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d006      	beq.n	8016af8 <recv_tcp+0x4c>
 8016aea:	4b2c      	ldr	r3, [pc, #176]	; (8016b9c <recv_tcp+0xf0>)
 8016aec:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8016af0:	492e      	ldr	r1, [pc, #184]	; (8016bac <recv_tcp+0x100>)
 8016af2:	482c      	ldr	r0, [pc, #176]	; (8016ba4 <recv_tcp+0xf8>)
 8016af4:	f00c feac 	bl	8023850 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8016afc:	697b      	ldr	r3, [r7, #20]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d102      	bne.n	8016b08 <recv_tcp+0x5c>
    return ERR_VAL;
 8016b02:	f06f 0305 	mvn.w	r3, #5
 8016b06:	e045      	b.n	8016b94 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	685b      	ldr	r3, [r3, #4]
 8016b0c:	68ba      	ldr	r2, [r7, #8]
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d006      	beq.n	8016b20 <recv_tcp+0x74>
 8016b12:	4b22      	ldr	r3, [pc, #136]	; (8016b9c <recv_tcp+0xf0>)
 8016b14:	f240 1235 	movw	r2, #309	; 0x135
 8016b18:	4925      	ldr	r1, [pc, #148]	; (8016bb0 <recv_tcp+0x104>)
 8016b1a:	4822      	ldr	r0, [pc, #136]	; (8016ba4 <recv_tcp+0xf8>)
 8016b1c:	f00c fe98 	bl	8023850 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	3310      	adds	r3, #16
 8016b24:	4618      	mov	r0, r3
 8016b26:	f00c f894 	bl	8022c52 <sys_mbox_valid>
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d10d      	bne.n	8016b4c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d008      	beq.n	8016b48 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	891b      	ldrh	r3, [r3, #8]
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	68b8      	ldr	r0, [r7, #8]
 8016b3e:	f003 fc0f 	bl	801a360 <tcp_recved>
      pbuf_free(p);
 8016b42:	6878      	ldr	r0, [r7, #4]
 8016b44:	f002 fdb6 	bl	80196b4 <pbuf_free>
    }
    return ERR_OK;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	e023      	b.n	8016b94 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d005      	beq.n	8016b5e <recv_tcp+0xb2>
    msg = p;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	891b      	ldrh	r3, [r3, #8]
 8016b5a:	83fb      	strh	r3, [r7, #30]
 8016b5c:	e003      	b.n	8016b66 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8016b5e:	4b15      	ldr	r3, [pc, #84]	; (8016bb4 <recv_tcp+0x108>)
 8016b60:	61bb      	str	r3, [r7, #24]
    len = 0;
 8016b62:	2300      	movs	r3, #0
 8016b64:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8016b66:	697b      	ldr	r3, [r7, #20]
 8016b68:	3310      	adds	r3, #16
 8016b6a:	69b9      	ldr	r1, [r7, #24]
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f00c f817 	bl	8022ba0 <sys_mbox_trypost>
 8016b72:	4603      	mov	r3, r0
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d002      	beq.n	8016b7e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8016b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b7c:	e00a      	b.n	8016b94 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8016b7e:	697b      	ldr	r3, [r7, #20]
 8016b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d005      	beq.n	8016b92 <recv_tcp+0xe6>
 8016b86:	697b      	ldr	r3, [r7, #20]
 8016b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b8a:	8bfa      	ldrh	r2, [r7, #30]
 8016b8c:	2100      	movs	r1, #0
 8016b8e:	6978      	ldr	r0, [r7, #20]
 8016b90:	4798      	blx	r3
  }

  return ERR_OK;
 8016b92:	2300      	movs	r3, #0
}
 8016b94:	4618      	mov	r0, r3
 8016b96:	3720      	adds	r7, #32
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	bd80      	pop	{r7, pc}
 8016b9c:	08025140 	.word	0x08025140
 8016ba0:	0802521c 	.word	0x0802521c
 8016ba4:	08025184 	.word	0x08025184
 8016ba8:	08025240 	.word	0x08025240
 8016bac:	08025260 	.word	0x08025260
 8016bb0:	08025278 	.word	0x08025278
 8016bb4:	0802815a 	.word	0x0802815a

08016bb8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b084      	sub	sp, #16
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
 8016bc0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d106      	bne.n	8016bda <poll_tcp+0x22>
 8016bcc:	4b29      	ldr	r3, [pc, #164]	; (8016c74 <poll_tcp+0xbc>)
 8016bce:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8016bd2:	4929      	ldr	r1, [pc, #164]	; (8016c78 <poll_tcp+0xc0>)
 8016bd4:	4829      	ldr	r0, [pc, #164]	; (8016c7c <poll_tcp+0xc4>)
 8016bd6:	f00c fe3b 	bl	8023850 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	785b      	ldrb	r3, [r3, #1]
 8016bde:	2b01      	cmp	r3, #1
 8016be0:	d104      	bne.n	8016bec <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8016be2:	2101      	movs	r1, #1
 8016be4:	68f8      	ldr	r0, [r7, #12]
 8016be6:	f000 fd43 	bl	8017670 <lwip_netconn_do_writemore>
 8016bea:	e016      	b.n	8016c1a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	785b      	ldrb	r3, [r3, #1]
 8016bf0:	2b04      	cmp	r3, #4
 8016bf2:	d112      	bne.n	8016c1a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	6a1b      	ldr	r3, [r3, #32]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d00a      	beq.n	8016c12 <poll_tcp+0x5a>
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	6a1b      	ldr	r3, [r3, #32]
 8016c00:	7a5b      	ldrb	r3, [r3, #9]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d005      	beq.n	8016c12 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	6a1b      	ldr	r3, [r3, #32]
 8016c0a:	7a5a      	ldrb	r2, [r3, #9]
 8016c0c:	3a01      	subs	r2, #1
 8016c0e:	b2d2      	uxtb	r2, r2
 8016c10:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8016c12:	2101      	movs	r1, #1
 8016c14:	68f8      	ldr	r0, [r7, #12]
 8016c16:	f000 fa73 	bl	8017100 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	7f1b      	ldrb	r3, [r3, #28]
 8016c1e:	f003 0310 	and.w	r3, r3, #16
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d021      	beq.n	8016c6a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	685b      	ldr	r3, [r3, #4]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d01d      	beq.n	8016c6a <poll_tcp+0xb2>
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	685b      	ldr	r3, [r3, #4]
 8016c32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016c36:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8016c3a:	d316      	bcc.n	8016c6a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	685b      	ldr	r3, [r3, #4]
 8016c40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8016c44:	2b04      	cmp	r3, #4
 8016c46:	d810      	bhi.n	8016c6a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	7f1b      	ldrb	r3, [r3, #28]
 8016c4c:	f023 0310 	bic.w	r3, r3, #16
 8016c50:	b2da      	uxtb	r2, r3
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d005      	beq.n	8016c6a <poll_tcp+0xb2>
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c62:	2200      	movs	r2, #0
 8016c64:	2102      	movs	r1, #2
 8016c66:	68f8      	ldr	r0, [r7, #12]
 8016c68:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8016c6a:	2300      	movs	r3, #0
}
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	3710      	adds	r7, #16
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bd80      	pop	{r7, pc}
 8016c74:	08025140 	.word	0x08025140
 8016c78:	08025298 	.word	0x08025298
 8016c7c:	08025184 	.word	0x08025184

08016c80 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b086      	sub	sp, #24
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	60f8      	str	r0, [r7, #12]
 8016c88:	60b9      	str	r1, [r7, #8]
 8016c8a:	4613      	mov	r3, r2
 8016c8c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8016c92:	697b      	ldr	r3, [r7, #20]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d106      	bne.n	8016ca6 <sent_tcp+0x26>
 8016c98:	4b20      	ldr	r3, [pc, #128]	; (8016d1c <sent_tcp+0x9c>)
 8016c9a:	f240 1293 	movw	r2, #403	; 0x193
 8016c9e:	4920      	ldr	r1, [pc, #128]	; (8016d20 <sent_tcp+0xa0>)
 8016ca0:	4820      	ldr	r0, [pc, #128]	; (8016d24 <sent_tcp+0xa4>)
 8016ca2:	f00c fdd5 	bl	8023850 <iprintf>

  if (conn) {
 8016ca6:	697b      	ldr	r3, [r7, #20]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d032      	beq.n	8016d12 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8016cac:	697b      	ldr	r3, [r7, #20]
 8016cae:	785b      	ldrb	r3, [r3, #1]
 8016cb0:	2b01      	cmp	r3, #1
 8016cb2:	d104      	bne.n	8016cbe <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8016cb4:	2101      	movs	r1, #1
 8016cb6:	6978      	ldr	r0, [r7, #20]
 8016cb8:	f000 fcda 	bl	8017670 <lwip_netconn_do_writemore>
 8016cbc:	e007      	b.n	8016cce <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8016cbe:	697b      	ldr	r3, [r7, #20]
 8016cc0:	785b      	ldrb	r3, [r3, #1]
 8016cc2:	2b04      	cmp	r3, #4
 8016cc4:	d103      	bne.n	8016cce <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8016cc6:	2101      	movs	r1, #1
 8016cc8:	6978      	ldr	r0, [r7, #20]
 8016cca:	f000 fa19 	bl	8017100 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8016cce:	697b      	ldr	r3, [r7, #20]
 8016cd0:	685b      	ldr	r3, [r3, #4]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d01d      	beq.n	8016d12 <sent_tcp+0x92>
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016cde:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8016ce2:	d316      	bcc.n	8016d12 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	685b      	ldr	r3, [r3, #4]
 8016ce8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8016cec:	2b04      	cmp	r3, #4
 8016cee:	d810      	bhi.n	8016d12 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8016cf0:	697b      	ldr	r3, [r7, #20]
 8016cf2:	7f1b      	ldrb	r3, [r3, #28]
 8016cf4:	f023 0310 	bic.w	r3, r3, #16
 8016cf8:	b2da      	uxtb	r2, r3
 8016cfa:	697b      	ldr	r3, [r7, #20]
 8016cfc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d005      	beq.n	8016d12 <sent_tcp+0x92>
 8016d06:	697b      	ldr	r3, [r7, #20]
 8016d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d0a:	88fa      	ldrh	r2, [r7, #6]
 8016d0c:	2102      	movs	r1, #2
 8016d0e:	6978      	ldr	r0, [r7, #20]
 8016d10:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8016d12:	2300      	movs	r3, #0
}
 8016d14:	4618      	mov	r0, r3
 8016d16:	3718      	adds	r7, #24
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	bd80      	pop	{r7, pc}
 8016d1c:	08025140 	.word	0x08025140
 8016d20:	08025298 	.word	0x08025298
 8016d24:	08025184 	.word	0x08025184

08016d28 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b088      	sub	sp, #32
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
 8016d30:	460b      	mov	r3, r1
 8016d32:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8016d38:	69fb      	ldr	r3, [r7, #28]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d106      	bne.n	8016d4c <err_tcp+0x24>
 8016d3e:	4b5f      	ldr	r3, [pc, #380]	; (8016ebc <err_tcp+0x194>)
 8016d40:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016d44:	495e      	ldr	r1, [pc, #376]	; (8016ec0 <err_tcp+0x198>)
 8016d46:	485f      	ldr	r0, [pc, #380]	; (8016ec4 <err_tcp+0x19c>)
 8016d48:	f00c fd82 	bl	8023850 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8016d4c:	f00c f890 	bl	8022e70 <sys_arch_protect>
 8016d50:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8016d52:	69fb      	ldr	r3, [r7, #28]
 8016d54:	2200      	movs	r2, #0
 8016d56:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8016d58:	69fb      	ldr	r3, [r7, #28]
 8016d5a:	78fa      	ldrb	r2, [r7, #3]
 8016d5c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8016d5e:	69fb      	ldr	r3, [r7, #28]
 8016d60:	7f1b      	ldrb	r3, [r3, #28]
 8016d62:	f043 0301 	orr.w	r3, r3, #1
 8016d66:	b2da      	uxtb	r2, r3
 8016d68:	69fb      	ldr	r3, [r7, #28]
 8016d6a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8016d6c:	69fb      	ldr	r3, [r7, #28]
 8016d6e:	785b      	ldrb	r3, [r3, #1]
 8016d70:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8016d72:	69fb      	ldr	r3, [r7, #28]
 8016d74:	2200      	movs	r2, #0
 8016d76:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8016d78:	69b8      	ldr	r0, [r7, #24]
 8016d7a:	f00c f887 	bl	8022e8c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8016d7e:	69fb      	ldr	r3, [r7, #28]
 8016d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d005      	beq.n	8016d92 <err_tcp+0x6a>
 8016d86:	69fb      	ldr	r3, [r7, #28]
 8016d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	2104      	movs	r1, #4
 8016d8e:	69f8      	ldr	r0, [r7, #28]
 8016d90:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8016d92:	69fb      	ldr	r3, [r7, #28]
 8016d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d005      	beq.n	8016da6 <err_tcp+0x7e>
 8016d9a:	69fb      	ldr	r3, [r7, #28]
 8016d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d9e:	2200      	movs	r2, #0
 8016da0:	2100      	movs	r1, #0
 8016da2:	69f8      	ldr	r0, [r7, #28]
 8016da4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8016da6:	69fb      	ldr	r3, [r7, #28]
 8016da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d005      	beq.n	8016dba <err_tcp+0x92>
 8016dae:	69fb      	ldr	r3, [r7, #28]
 8016db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016db2:	2200      	movs	r2, #0
 8016db4:	2102      	movs	r1, #2
 8016db6:	69f8      	ldr	r0, [r7, #28]
 8016db8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8016dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f7ff fdc0 	bl	8016944 <lwip_netconn_err_to_msg>
 8016dc4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8016dc6:	69fb      	ldr	r3, [r7, #28]
 8016dc8:	3310      	adds	r3, #16
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f00b ff41 	bl	8022c52 <sys_mbox_valid>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d005      	beq.n	8016de2 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8016dd6:	69fb      	ldr	r3, [r7, #28]
 8016dd8:	3310      	adds	r3, #16
 8016dda:	6939      	ldr	r1, [r7, #16]
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f00b fedf 	bl	8022ba0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8016de2:	69fb      	ldr	r3, [r7, #28]
 8016de4:	3314      	adds	r3, #20
 8016de6:	4618      	mov	r0, r3
 8016de8:	f00b ff33 	bl	8022c52 <sys_mbox_valid>
 8016dec:	4603      	mov	r3, r0
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d005      	beq.n	8016dfe <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8016df2:	69fb      	ldr	r3, [r7, #28]
 8016df4:	3314      	adds	r3, #20
 8016df6:	6939      	ldr	r1, [r7, #16]
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f00b fed1 	bl	8022ba0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8016dfe:	7dfb      	ldrb	r3, [r7, #23]
 8016e00:	2b01      	cmp	r3, #1
 8016e02:	d005      	beq.n	8016e10 <err_tcp+0xe8>
 8016e04:	7dfb      	ldrb	r3, [r7, #23]
 8016e06:	2b04      	cmp	r3, #4
 8016e08:	d002      	beq.n	8016e10 <err_tcp+0xe8>
 8016e0a:	7dfb      	ldrb	r3, [r7, #23]
 8016e0c:	2b03      	cmp	r3, #3
 8016e0e:	d143      	bne.n	8016e98 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8016e10:	69fb      	ldr	r3, [r7, #28]
 8016e12:	7f1b      	ldrb	r3, [r3, #28]
 8016e14:	f003 0304 	and.w	r3, r3, #4
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	bf14      	ite	ne
 8016e1c:	2301      	movne	r3, #1
 8016e1e:	2300      	moveq	r3, #0
 8016e20:	b2db      	uxtb	r3, r3
 8016e22:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8016e24:	69fb      	ldr	r3, [r7, #28]
 8016e26:	7f1b      	ldrb	r3, [r3, #28]
 8016e28:	f023 0304 	bic.w	r3, r3, #4
 8016e2c:	b2da      	uxtb	r2, r3
 8016e2e:	69fb      	ldr	r3, [r7, #28]
 8016e30:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d13b      	bne.n	8016eb0 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016e38:	69fb      	ldr	r3, [r7, #28]
 8016e3a:	6a1b      	ldr	r3, [r3, #32]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d106      	bne.n	8016e4e <err_tcp+0x126>
 8016e40:	4b1e      	ldr	r3, [pc, #120]	; (8016ebc <err_tcp+0x194>)
 8016e42:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016e46:	4920      	ldr	r1, [pc, #128]	; (8016ec8 <err_tcp+0x1a0>)
 8016e48:	481e      	ldr	r0, [pc, #120]	; (8016ec4 <err_tcp+0x19c>)
 8016e4a:	f00c fd01 	bl	8023850 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8016e4e:	7dfb      	ldrb	r3, [r7, #23]
 8016e50:	2b04      	cmp	r3, #4
 8016e52:	d104      	bne.n	8016e5e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8016e54:	69fb      	ldr	r3, [r7, #28]
 8016e56:	6a1b      	ldr	r3, [r3, #32]
 8016e58:	2200      	movs	r2, #0
 8016e5a:	711a      	strb	r2, [r3, #4]
 8016e5c:	e003      	b.n	8016e66 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8016e5e:	69fb      	ldr	r3, [r7, #28]
 8016e60:	6a1b      	ldr	r3, [r3, #32]
 8016e62:	78fa      	ldrb	r2, [r7, #3]
 8016e64:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016e66:	69fb      	ldr	r3, [r7, #28]
 8016e68:	6a1b      	ldr	r3, [r3, #32]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	330c      	adds	r3, #12
 8016e6e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8016e70:	68b8      	ldr	r0, [r7, #8]
 8016e72:	f00b ff7f 	bl	8022d74 <sys_sem_valid>
 8016e76:	4603      	mov	r3, r0
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d106      	bne.n	8016e8a <err_tcp+0x162>
 8016e7c:	4b0f      	ldr	r3, [pc, #60]	; (8016ebc <err_tcp+0x194>)
 8016e7e:	f240 12ef 	movw	r2, #495	; 0x1ef
 8016e82:	4912      	ldr	r1, [pc, #72]	; (8016ecc <err_tcp+0x1a4>)
 8016e84:	480f      	ldr	r0, [pc, #60]	; (8016ec4 <err_tcp+0x19c>)
 8016e86:	f00c fce3 	bl	8023850 <iprintf>
      conn->current_msg = NULL;
 8016e8a:	69fb      	ldr	r3, [r7, #28]
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8016e90:	68b8      	ldr	r0, [r7, #8]
 8016e92:	f00b ff55 	bl	8022d40 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8016e96:	e00b      	b.n	8016eb0 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8016e98:	69fb      	ldr	r3, [r7, #28]
 8016e9a:	6a1b      	ldr	r3, [r3, #32]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d008      	beq.n	8016eb2 <err_tcp+0x18a>
 8016ea0:	4b06      	ldr	r3, [pc, #24]	; (8016ebc <err_tcp+0x194>)
 8016ea2:	f240 12f7 	movw	r2, #503	; 0x1f7
 8016ea6:	490a      	ldr	r1, [pc, #40]	; (8016ed0 <err_tcp+0x1a8>)
 8016ea8:	4806      	ldr	r0, [pc, #24]	; (8016ec4 <err_tcp+0x19c>)
 8016eaa:	f00c fcd1 	bl	8023850 <iprintf>
  }
}
 8016eae:	e000      	b.n	8016eb2 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8016eb0:	bf00      	nop
}
 8016eb2:	bf00      	nop
 8016eb4:	3720      	adds	r7, #32
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	bd80      	pop	{r7, pc}
 8016eba:	bf00      	nop
 8016ebc:	08025140 	.word	0x08025140
 8016ec0:	08025298 	.word	0x08025298
 8016ec4:	08025184 	.word	0x08025184
 8016ec8:	080252a8 	.word	0x080252a8
 8016ecc:	080252c4 	.word	0x080252c4
 8016ed0:	080252e0 	.word	0x080252e0

08016ed4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b084      	sub	sp, #16
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	685b      	ldr	r3, [r3, #4]
 8016ee0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8016ee2:	6879      	ldr	r1, [r7, #4]
 8016ee4:	68f8      	ldr	r0, [r7, #12]
 8016ee6:	f004 fa19 	bl	801b31c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8016eea:	490a      	ldr	r1, [pc, #40]	; (8016f14 <setup_tcp+0x40>)
 8016eec:	68f8      	ldr	r0, [r7, #12]
 8016eee:	f004 fa27 	bl	801b340 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8016ef2:	4909      	ldr	r1, [pc, #36]	; (8016f18 <setup_tcp+0x44>)
 8016ef4:	68f8      	ldr	r0, [r7, #12]
 8016ef6:	f004 fa45 	bl	801b384 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8016efa:	2202      	movs	r2, #2
 8016efc:	4907      	ldr	r1, [pc, #28]	; (8016f1c <setup_tcp+0x48>)
 8016efe:	68f8      	ldr	r0, [r7, #12]
 8016f00:	f004 fa9c 	bl	801b43c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8016f04:	4906      	ldr	r1, [pc, #24]	; (8016f20 <setup_tcp+0x4c>)
 8016f06:	68f8      	ldr	r0, [r7, #12]
 8016f08:	f004 fa5e 	bl	801b3c8 <tcp_err>
}
 8016f0c:	bf00      	nop
 8016f0e:	3710      	adds	r7, #16
 8016f10:	46bd      	mov	sp, r7
 8016f12:	bd80      	pop	{r7, pc}
 8016f14:	08016aad 	.word	0x08016aad
 8016f18:	08016c81 	.word	0x08016c81
 8016f1c:	08016bb9 	.word	0x08016bb9
 8016f20:	08016d29 	.word	0x08016d29

08016f24 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8016f24:	b590      	push	{r4, r7, lr}
 8016f26:	b085      	sub	sp, #20
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	685b      	ldr	r3, [r3, #4]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d006      	beq.n	8016f48 <pcb_new+0x24>
 8016f3a:	4b2b      	ldr	r3, [pc, #172]	; (8016fe8 <pcb_new+0xc4>)
 8016f3c:	f240 2265 	movw	r2, #613	; 0x265
 8016f40:	492a      	ldr	r1, [pc, #168]	; (8016fec <pcb_new+0xc8>)
 8016f42:	482b      	ldr	r0, [pc, #172]	; (8016ff0 <pcb_new+0xcc>)
 8016f44:	f00c fc84 	bl	8023850 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	781b      	ldrb	r3, [r3, #0]
 8016f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016f52:	2b10      	cmp	r3, #16
 8016f54:	d022      	beq.n	8016f9c <pcb_new+0x78>
 8016f56:	2b20      	cmp	r3, #32
 8016f58:	d133      	bne.n	8016fc2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	681c      	ldr	r4, [r3, #0]
 8016f5e:	7bfb      	ldrb	r3, [r7, #15]
 8016f60:	4618      	mov	r0, r3
 8016f62:	f009 fae6 	bl	8020532 <udp_new_ip_type>
 8016f66:	4603      	mov	r3, r0
 8016f68:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	685b      	ldr	r3, [r3, #4]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d02a      	beq.n	8016fca <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	2b22      	cmp	r3, #34	; 0x22
 8016f7c:	d104      	bne.n	8016f88 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	685b      	ldr	r3, [r3, #4]
 8016f84:	2201      	movs	r2, #1
 8016f86:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	6858      	ldr	r0, [r3, #4]
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	461a      	mov	r2, r3
 8016f94:	4917      	ldr	r1, [pc, #92]	; (8016ff4 <pcb_new+0xd0>)
 8016f96:	f009 fa95 	bl	80204c4 <udp_recv>
      }
      break;
 8016f9a:	e016      	b.n	8016fca <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	681c      	ldr	r4, [r3, #0]
 8016fa0:	7bfb      	ldrb	r3, [r7, #15]
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f004 f9ac 	bl	801b300 <tcp_new_ip_type>
 8016fa8:	4603      	mov	r3, r0
 8016faa:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	685b      	ldr	r3, [r3, #4]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d00b      	beq.n	8016fce <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f7ff ff8a 	bl	8016ed4 <setup_tcp>
      }
      break;
 8016fc0:	e005      	b.n	8016fce <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	22fa      	movs	r2, #250	; 0xfa
 8016fc6:	711a      	strb	r2, [r3, #4]
      return;
 8016fc8:	e00a      	b.n	8016fe0 <pcb_new+0xbc>
      break;
 8016fca:	bf00      	nop
 8016fcc:	e000      	b.n	8016fd0 <pcb_new+0xac>
      break;
 8016fce:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	685b      	ldr	r3, [r3, #4]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d102      	bne.n	8016fe0 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	22ff      	movs	r2, #255	; 0xff
 8016fde:	711a      	strb	r2, [r3, #4]
  }
}
 8016fe0:	3714      	adds	r7, #20
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	bd90      	pop	{r4, r7, pc}
 8016fe6:	bf00      	nop
 8016fe8:	08025140 	.word	0x08025140
 8016fec:	08025324 	.word	0x08025324
 8016ff0:	08025184 	.word	0x08025184
 8016ff4:	080169b1 	.word	0x080169b1

08016ff8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b084      	sub	sp, #16
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	2200      	movs	r2, #0
 8017008:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	685b      	ldr	r3, [r3, #4]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d102      	bne.n	801701a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8017014:	68f8      	ldr	r0, [r7, #12]
 8017016:	f7ff ff85 	bl	8016f24 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 801701a:	bf00      	nop
 801701c:	3710      	adds	r7, #16
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}
	...

08017024 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	b086      	sub	sp, #24
 8017028:	af00      	add	r7, sp, #0
 801702a:	4603      	mov	r3, r0
 801702c:	6039      	str	r1, [r7, #0]
 801702e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8017030:	2300      	movs	r3, #0
 8017032:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8017034:	2007      	movs	r0, #7
 8017036:	f001 fc23 	bl	8018880 <memp_malloc>
 801703a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d101      	bne.n	8017046 <netconn_alloc+0x22>
    return NULL;
 8017042:	2300      	movs	r3, #0
 8017044:	e052      	b.n	80170ec <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	2200      	movs	r2, #0
 801704a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	79fa      	ldrb	r2, [r7, #7]
 8017050:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	2200      	movs	r2, #0
 8017056:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8017058:	79fb      	ldrb	r3, [r7, #7]
 801705a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801705e:	2b10      	cmp	r3, #16
 8017060:	d004      	beq.n	801706c <netconn_alloc+0x48>
 8017062:	2b20      	cmp	r3, #32
 8017064:	d105      	bne.n	8017072 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8017066:	2306      	movs	r3, #6
 8017068:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 801706a:	e00a      	b.n	8017082 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 801706c:	2306      	movs	r3, #6
 801706e:	617b      	str	r3, [r7, #20]
      break;
 8017070:	e007      	b.n	8017082 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8017072:	4b20      	ldr	r3, [pc, #128]	; (80170f4 <netconn_alloc+0xd0>)
 8017074:	f240 22e5 	movw	r2, #741	; 0x2e5
 8017078:	491f      	ldr	r1, [pc, #124]	; (80170f8 <netconn_alloc+0xd4>)
 801707a:	4820      	ldr	r0, [pc, #128]	; (80170fc <netconn_alloc+0xd8>)
 801707c:	f00c fbe8 	bl	8023850 <iprintf>
      goto free_and_return;
 8017080:	e02f      	b.n	80170e2 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	3310      	adds	r3, #16
 8017086:	6979      	ldr	r1, [r7, #20]
 8017088:	4618      	mov	r0, r3
 801708a:	f00b fd55 	bl	8022b38 <sys_mbox_new>
 801708e:	4603      	mov	r3, r0
 8017090:	2b00      	cmp	r3, #0
 8017092:	d125      	bne.n	80170e0 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	330c      	adds	r3, #12
 8017098:	2100      	movs	r1, #0
 801709a:	4618      	mov	r0, r3
 801709c:	f00b fdf7 	bl	8022c8e <sys_sem_new>
 80170a0:	4603      	mov	r3, r0
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d005      	beq.n	80170b2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	3310      	adds	r3, #16
 80170aa:	4618      	mov	r0, r3
 80170ac:	f00b fd66 	bl	8022b7c <sys_mbox_free>
    goto free_and_return;
 80170b0:	e017      	b.n	80170e2 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	3314      	adds	r3, #20
 80170b6:	4618      	mov	r0, r3
 80170b8:	f00b fddc 	bl	8022c74 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	2200      	movs	r2, #0
 80170c0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80170c8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	683a      	ldr	r2, [r7, #0]
 80170ce:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	2200      	movs	r2, #0
 80170d4:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	7cfa      	ldrb	r2, [r7, #19]
 80170da:	771a      	strb	r2, [r3, #28]
  return conn;
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	e005      	b.n	80170ec <netconn_alloc+0xc8>
    goto free_and_return;
 80170e0:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80170e2:	68f9      	ldr	r1, [r7, #12]
 80170e4:	2007      	movs	r0, #7
 80170e6:	f001 fc41 	bl	801896c <memp_free>
  return NULL;
 80170ea:	2300      	movs	r3, #0
}
 80170ec:	4618      	mov	r0, r3
 80170ee:	3718      	adds	r7, #24
 80170f0:	46bd      	mov	sp, r7
 80170f2:	bd80      	pop	{r7, pc}
 80170f4:	08025140 	.word	0x08025140
 80170f8:	08025344 	.word	0x08025344
 80170fc:	08025184 	.word	0x08025184

08017100 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b086      	sub	sp, #24
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
 8017108:	460b      	mov	r3, r1
 801710a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 801710c:	2300      	movs	r3, #0
 801710e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d106      	bne.n	8017124 <lwip_netconn_do_close_internal+0x24>
 8017116:	4b87      	ldr	r3, [pc, #540]	; (8017334 <lwip_netconn_do_close_internal+0x234>)
 8017118:	f240 32a2 	movw	r2, #930	; 0x3a2
 801711c:	4986      	ldr	r1, [pc, #536]	; (8017338 <lwip_netconn_do_close_internal+0x238>)
 801711e:	4887      	ldr	r0, [pc, #540]	; (801733c <lwip_netconn_do_close_internal+0x23c>)
 8017120:	f00c fb96 	bl	8023850 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801712c:	2b10      	cmp	r3, #16
 801712e:	d006      	beq.n	801713e <lwip_netconn_do_close_internal+0x3e>
 8017130:	4b80      	ldr	r3, [pc, #512]	; (8017334 <lwip_netconn_do_close_internal+0x234>)
 8017132:	f240 32a3 	movw	r2, #931	; 0x3a3
 8017136:	4982      	ldr	r1, [pc, #520]	; (8017340 <lwip_netconn_do_close_internal+0x240>)
 8017138:	4880      	ldr	r0, [pc, #512]	; (801733c <lwip_netconn_do_close_internal+0x23c>)
 801713a:	f00c fb89 	bl	8023850 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	785b      	ldrb	r3, [r3, #1]
 8017142:	2b04      	cmp	r3, #4
 8017144:	d006      	beq.n	8017154 <lwip_netconn_do_close_internal+0x54>
 8017146:	4b7b      	ldr	r3, [pc, #492]	; (8017334 <lwip_netconn_do_close_internal+0x234>)
 8017148:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 801714c:	497d      	ldr	r1, [pc, #500]	; (8017344 <lwip_netconn_do_close_internal+0x244>)
 801714e:	487b      	ldr	r0, [pc, #492]	; (801733c <lwip_netconn_do_close_internal+0x23c>)
 8017150:	f00c fb7e 	bl	8023850 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d106      	bne.n	801716a <lwip_netconn_do_close_internal+0x6a>
 801715c:	4b75      	ldr	r3, [pc, #468]	; (8017334 <lwip_netconn_do_close_internal+0x234>)
 801715e:	f240 32a5 	movw	r2, #933	; 0x3a5
 8017162:	4979      	ldr	r1, [pc, #484]	; (8017348 <lwip_netconn_do_close_internal+0x248>)
 8017164:	4875      	ldr	r0, [pc, #468]	; (801733c <lwip_netconn_do_close_internal+0x23c>)
 8017166:	f00c fb73 	bl	8023850 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	6a1b      	ldr	r3, [r3, #32]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d106      	bne.n	8017180 <lwip_netconn_do_close_internal+0x80>
 8017172:	4b70      	ldr	r3, [pc, #448]	; (8017334 <lwip_netconn_do_close_internal+0x234>)
 8017174:	f240 32a6 	movw	r2, #934	; 0x3a6
 8017178:	4974      	ldr	r1, [pc, #464]	; (801734c <lwip_netconn_do_close_internal+0x24c>)
 801717a:	4870      	ldr	r0, [pc, #448]	; (801733c <lwip_netconn_do_close_internal+0x23c>)
 801717c:	f00c fb68 	bl	8023850 <iprintf>

  tpcb = conn->pcb.tcp;
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	685b      	ldr	r3, [r3, #4]
 8017184:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	6a1b      	ldr	r3, [r3, #32]
 801718a:	7a1b      	ldrb	r3, [r3, #8]
 801718c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801718e:	7bfb      	ldrb	r3, [r7, #15]
 8017190:	f003 0301 	and.w	r3, r3, #1
 8017194:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8017196:	7bfb      	ldrb	r3, [r7, #15]
 8017198:	f003 0302 	and.w	r3, r3, #2
 801719c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801719e:	7bfb      	ldrb	r3, [r7, #15]
 80171a0:	2b03      	cmp	r3, #3
 80171a2:	d102      	bne.n	80171aa <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80171a4:	2301      	movs	r3, #1
 80171a6:	75bb      	strb	r3, [r7, #22]
 80171a8:	e01f      	b.n	80171ea <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80171aa:	7bbb      	ldrb	r3, [r7, #14]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d00e      	beq.n	80171ce <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80171b0:	693b      	ldr	r3, [r7, #16]
 80171b2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80171b4:	2b05      	cmp	r3, #5
 80171b6:	d007      	beq.n	80171c8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80171b8:	693b      	ldr	r3, [r7, #16]
 80171ba:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80171bc:	2b06      	cmp	r3, #6
 80171be:	d003      	beq.n	80171c8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80171c0:	693b      	ldr	r3, [r7, #16]
 80171c2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80171c4:	2b08      	cmp	r3, #8
 80171c6:	d102      	bne.n	80171ce <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80171c8:	2301      	movs	r3, #1
 80171ca:	75bb      	strb	r3, [r7, #22]
 80171cc:	e00d      	b.n	80171ea <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80171ce:	7b7b      	ldrb	r3, [r7, #13]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d008      	beq.n	80171e6 <lwip_netconn_do_close_internal+0xe6>
 80171d4:	693b      	ldr	r3, [r7, #16]
 80171d6:	8b5b      	ldrh	r3, [r3, #26]
 80171d8:	f003 0310 	and.w	r3, r3, #16
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d002      	beq.n	80171e6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80171e0:	2301      	movs	r3, #1
 80171e2:	75bb      	strb	r3, [r7, #22]
 80171e4:	e001      	b.n	80171ea <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80171e6:	2300      	movs	r3, #0
 80171e8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80171ea:	7dbb      	ldrb	r3, [r7, #22]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d003      	beq.n	80171f8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80171f0:	2100      	movs	r1, #0
 80171f2:	6938      	ldr	r0, [r7, #16]
 80171f4:	f004 f892 	bl	801b31c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80171f8:	693b      	ldr	r3, [r7, #16]
 80171fa:	7d1b      	ldrb	r3, [r3, #20]
 80171fc:	2b01      	cmp	r3, #1
 80171fe:	d104      	bne.n	801720a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8017200:	2100      	movs	r1, #0
 8017202:	6938      	ldr	r0, [r7, #16]
 8017204:	f004 f902 	bl	801b40c <tcp_accept>
 8017208:	e01d      	b.n	8017246 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801720a:	7bbb      	ldrb	r3, [r7, #14]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d007      	beq.n	8017220 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8017210:	2100      	movs	r1, #0
 8017212:	6938      	ldr	r0, [r7, #16]
 8017214:	f004 f894 	bl	801b340 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8017218:	2100      	movs	r1, #0
 801721a:	6938      	ldr	r0, [r7, #16]
 801721c:	f004 f8f6 	bl	801b40c <tcp_accept>
    }
    if (shut_tx) {
 8017220:	7b7b      	ldrb	r3, [r7, #13]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d003      	beq.n	801722e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8017226:	2100      	movs	r1, #0
 8017228:	6938      	ldr	r0, [r7, #16]
 801722a:	f004 f8ab 	bl	801b384 <tcp_sent>
    }
    if (shut_close) {
 801722e:	7dbb      	ldrb	r3, [r7, #22]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d008      	beq.n	8017246 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8017234:	2200      	movs	r2, #0
 8017236:	2100      	movs	r1, #0
 8017238:	6938      	ldr	r0, [r7, #16]
 801723a:	f004 f8ff 	bl	801b43c <tcp_poll>
      tcp_err(tpcb, NULL);
 801723e:	2100      	movs	r1, #0
 8017240:	6938      	ldr	r0, [r7, #16]
 8017242:	f004 f8c1 	bl	801b3c8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8017246:	7dbb      	ldrb	r3, [r7, #22]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d005      	beq.n	8017258 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 801724c:	6938      	ldr	r0, [r7, #16]
 801724e:	f002 fedb 	bl	801a008 <tcp_close>
 8017252:	4603      	mov	r3, r0
 8017254:	75fb      	strb	r3, [r7, #23]
 8017256:	e007      	b.n	8017268 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8017258:	7bbb      	ldrb	r3, [r7, #14]
 801725a:	7b7a      	ldrb	r2, [r7, #13]
 801725c:	4619      	mov	r1, r3
 801725e:	6938      	ldr	r0, [r7, #16]
 8017260:	f002 fefe 	bl	801a060 <tcp_shutdown>
 8017264:	4603      	mov	r3, r0
 8017266:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8017268:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d102      	bne.n	8017276 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8017270:	2301      	movs	r3, #1
 8017272:	757b      	strb	r3, [r7, #21]
 8017274:	e016      	b.n	80172a4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8017276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801727a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801727e:	d10f      	bne.n	80172a0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	6a1b      	ldr	r3, [r3, #32]
 8017284:	7a5b      	ldrb	r3, [r3, #9]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d10c      	bne.n	80172a4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 801728a:	2301      	movs	r3, #1
 801728c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 801728e:	7dbb      	ldrb	r3, [r7, #22]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d007      	beq.n	80172a4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8017294:	6938      	ldr	r0, [r7, #16]
 8017296:	f002 fffd 	bl	801a294 <tcp_abort>
          err = ERR_OK;
 801729a:	2300      	movs	r3, #0
 801729c:	75fb      	strb	r3, [r7, #23]
 801729e:	e001      	b.n	80172a4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80172a0:	2301      	movs	r3, #1
 80172a2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80172a4:	7d7b      	ldrb	r3, [r7, #21]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d052      	beq.n	8017350 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	6a1b      	ldr	r3, [r3, #32]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	330c      	adds	r3, #12
 80172b2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	6a1b      	ldr	r3, [r3, #32]
 80172b8:	7dfa      	ldrb	r2, [r7, #23]
 80172ba:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	2200      	movs	r2, #0
 80172c0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	2200      	movs	r2, #0
 80172c6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80172c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d129      	bne.n	8017324 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80172d0:	7dbb      	ldrb	r3, [r7, #22]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d00c      	beq.n	80172f0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	2200      	movs	r2, #0
 80172da:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d005      	beq.n	80172f0 <lwip_netconn_do_close_internal+0x1f0>
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172e8:	2200      	movs	r2, #0
 80172ea:	2104      	movs	r1, #4
 80172ec:	6878      	ldr	r0, [r7, #4]
 80172ee:	4798      	blx	r3
      }
      if (shut_rx) {
 80172f0:	7bbb      	ldrb	r3, [r7, #14]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d009      	beq.n	801730a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d005      	beq.n	801730a <lwip_netconn_do_close_internal+0x20a>
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017302:	2200      	movs	r2, #0
 8017304:	2100      	movs	r1, #0
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	4798      	blx	r3
      }
      if (shut_tx) {
 801730a:	7b7b      	ldrb	r3, [r7, #13]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d009      	beq.n	8017324 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017314:	2b00      	cmp	r3, #0
 8017316:	d005      	beq.n	8017324 <lwip_netconn_do_close_internal+0x224>
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801731c:	2200      	movs	r2, #0
 801731e:	2102      	movs	r1, #2
 8017320:	6878      	ldr	r0, [r7, #4]
 8017322:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8017324:	78fb      	ldrb	r3, [r7, #3]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d002      	beq.n	8017330 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801732a:	68b8      	ldr	r0, [r7, #8]
 801732c:	f00b fd08 	bl	8022d40 <sys_sem_signal>
    }
    return ERR_OK;
 8017330:	2300      	movs	r3, #0
 8017332:	e03c      	b.n	80173ae <lwip_netconn_do_close_internal+0x2ae>
 8017334:	08025140 	.word	0x08025140
 8017338:	08025414 	.word	0x08025414
 801733c:	08025184 	.word	0x08025184
 8017340:	08025424 	.word	0x08025424
 8017344:	08025444 	.word	0x08025444
 8017348:	08025468 	.word	0x08025468
 801734c:	080252a8 	.word	0x080252a8
  }
  if (!close_finished) {
 8017350:	7d7b      	ldrb	r3, [r7, #21]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d11e      	bne.n	8017394 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8017356:	693b      	ldr	r3, [r7, #16]
 8017358:	7d1b      	ldrb	r3, [r3, #20]
 801735a:	2b01      	cmp	r3, #1
 801735c:	d106      	bne.n	801736c <lwip_netconn_do_close_internal+0x26c>
 801735e:	4b16      	ldr	r3, [pc, #88]	; (80173b8 <lwip_netconn_do_close_internal+0x2b8>)
 8017360:	f240 4241 	movw	r2, #1089	; 0x441
 8017364:	4915      	ldr	r1, [pc, #84]	; (80173bc <lwip_netconn_do_close_internal+0x2bc>)
 8017366:	4816      	ldr	r0, [pc, #88]	; (80173c0 <lwip_netconn_do_close_internal+0x2c0>)
 8017368:	f00c fa72 	bl	8023850 <iprintf>
    if (shut_tx) {
 801736c:	7b7b      	ldrb	r3, [r7, #13]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d003      	beq.n	801737a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8017372:	4914      	ldr	r1, [pc, #80]	; (80173c4 <lwip_netconn_do_close_internal+0x2c4>)
 8017374:	6938      	ldr	r0, [r7, #16]
 8017376:	f004 f805 	bl	801b384 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 801737a:	2201      	movs	r2, #1
 801737c:	4912      	ldr	r1, [pc, #72]	; (80173c8 <lwip_netconn_do_close_internal+0x2c8>)
 801737e:	6938      	ldr	r0, [r7, #16]
 8017380:	f004 f85c 	bl	801b43c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8017384:	4911      	ldr	r1, [pc, #68]	; (80173cc <lwip_netconn_do_close_internal+0x2cc>)
 8017386:	6938      	ldr	r0, [r7, #16]
 8017388:	f004 f81e 	bl	801b3c8 <tcp_err>
    tcp_arg(tpcb, conn);
 801738c:	6879      	ldr	r1, [r7, #4]
 801738e:	6938      	ldr	r0, [r7, #16]
 8017390:	f003 ffc4 	bl	801b31c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8017394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d106      	bne.n	80173aa <lwip_netconn_do_close_internal+0x2aa>
 801739c:	4b06      	ldr	r3, [pc, #24]	; (80173b8 <lwip_netconn_do_close_internal+0x2b8>)
 801739e:	f240 424d 	movw	r2, #1101	; 0x44d
 80173a2:	490b      	ldr	r1, [pc, #44]	; (80173d0 <lwip_netconn_do_close_internal+0x2d0>)
 80173a4:	4806      	ldr	r0, [pc, #24]	; (80173c0 <lwip_netconn_do_close_internal+0x2c0>)
 80173a6:	f00c fa53 	bl	8023850 <iprintf>
  return err;
 80173aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80173ae:	4618      	mov	r0, r3
 80173b0:	3718      	adds	r7, #24
 80173b2:	46bd      	mov	sp, r7
 80173b4:	bd80      	pop	{r7, pc}
 80173b6:	bf00      	nop
 80173b8:	08025140 	.word	0x08025140
 80173bc:	0802547c 	.word	0x0802547c
 80173c0:	08025184 	.word	0x08025184
 80173c4:	08016c81 	.word	0x08016c81
 80173c8:	08016bb9 	.word	0x08016bb9
 80173cc:	08016d29 	.word	0x08016d29
 80173d0:	080254a0 	.word	0x080254a0

080173d4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b088      	sub	sp, #32
 80173d8:	af00      	add	r7, sp, #0
 80173da:	60f8      	str	r0, [r7, #12]
 80173dc:	60b9      	str	r1, [r7, #8]
 80173de:	4613      	mov	r3, r2
 80173e0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80173e2:	2300      	movs	r3, #0
 80173e4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80173ea:	69bb      	ldr	r3, [r7, #24]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d102      	bne.n	80173f6 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 80173f0:	f06f 0305 	mvn.w	r3, #5
 80173f4:	e070      	b.n	80174d8 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80173f6:	69bb      	ldr	r3, [r7, #24]
 80173f8:	785b      	ldrb	r3, [r3, #1]
 80173fa:	2b03      	cmp	r3, #3
 80173fc:	d006      	beq.n	801740c <lwip_netconn_do_connected+0x38>
 80173fe:	4b38      	ldr	r3, [pc, #224]	; (80174e0 <lwip_netconn_do_connected+0x10c>)
 8017400:	f240 5223 	movw	r2, #1315	; 0x523
 8017404:	4937      	ldr	r1, [pc, #220]	; (80174e4 <lwip_netconn_do_connected+0x110>)
 8017406:	4838      	ldr	r0, [pc, #224]	; (80174e8 <lwip_netconn_do_connected+0x114>)
 8017408:	f00c fa22 	bl	8023850 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 801740c:	69bb      	ldr	r3, [r7, #24]
 801740e:	6a1b      	ldr	r3, [r3, #32]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d10c      	bne.n	801742e <lwip_netconn_do_connected+0x5a>
 8017414:	69bb      	ldr	r3, [r7, #24]
 8017416:	7f1b      	ldrb	r3, [r3, #28]
 8017418:	f003 0304 	and.w	r3, r3, #4
 801741c:	2b00      	cmp	r3, #0
 801741e:	d106      	bne.n	801742e <lwip_netconn_do_connected+0x5a>
 8017420:	4b2f      	ldr	r3, [pc, #188]	; (80174e0 <lwip_netconn_do_connected+0x10c>)
 8017422:	f240 5224 	movw	r2, #1316	; 0x524
 8017426:	4931      	ldr	r1, [pc, #196]	; (80174ec <lwip_netconn_do_connected+0x118>)
 8017428:	482f      	ldr	r0, [pc, #188]	; (80174e8 <lwip_netconn_do_connected+0x114>)
 801742a:	f00c fa11 	bl	8023850 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 801742e:	69bb      	ldr	r3, [r7, #24]
 8017430:	6a1b      	ldr	r3, [r3, #32]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d008      	beq.n	8017448 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8017436:	69bb      	ldr	r3, [r7, #24]
 8017438:	6a1b      	ldr	r3, [r3, #32]
 801743a:	79fa      	ldrb	r2, [r7, #7]
 801743c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801743e:	69bb      	ldr	r3, [r7, #24]
 8017440:	6a1b      	ldr	r3, [r3, #32]
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	330c      	adds	r3, #12
 8017446:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8017448:	69bb      	ldr	r3, [r7, #24]
 801744a:	781b      	ldrb	r3, [r3, #0]
 801744c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017450:	2b10      	cmp	r3, #16
 8017452:	d106      	bne.n	8017462 <lwip_netconn_do_connected+0x8e>
 8017454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d102      	bne.n	8017462 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 801745c:	69b8      	ldr	r0, [r7, #24]
 801745e:	f7ff fd39 	bl	8016ed4 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8017462:	69bb      	ldr	r3, [r7, #24]
 8017464:	7f1b      	ldrb	r3, [r3, #28]
 8017466:	f003 0304 	and.w	r3, r3, #4
 801746a:	2b00      	cmp	r3, #0
 801746c:	bf0c      	ite	eq
 801746e:	2301      	moveq	r3, #1
 8017470:	2300      	movne	r3, #0
 8017472:	b2db      	uxtb	r3, r3
 8017474:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8017476:	69bb      	ldr	r3, [r7, #24]
 8017478:	7f1b      	ldrb	r3, [r3, #28]
 801747a:	f023 0304 	bic.w	r3, r3, #4
 801747e:	b2da      	uxtb	r2, r3
 8017480:	69bb      	ldr	r3, [r7, #24]
 8017482:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8017484:	697b      	ldr	r3, [r7, #20]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d002      	beq.n	8017490 <lwip_netconn_do_connected+0xbc>
 801748a:	69fb      	ldr	r3, [r7, #28]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d10c      	bne.n	80174aa <lwip_netconn_do_connected+0xd6>
 8017490:	697b      	ldr	r3, [r7, #20]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d102      	bne.n	801749c <lwip_netconn_do_connected+0xc8>
 8017496:	69fb      	ldr	r3, [r7, #28]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d006      	beq.n	80174aa <lwip_netconn_do_connected+0xd6>
 801749c:	4b10      	ldr	r3, [pc, #64]	; (80174e0 <lwip_netconn_do_connected+0x10c>)
 801749e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 80174a2:	4913      	ldr	r1, [pc, #76]	; (80174f0 <lwip_netconn_do_connected+0x11c>)
 80174a4:	4810      	ldr	r0, [pc, #64]	; (80174e8 <lwip_netconn_do_connected+0x114>)
 80174a6:	f00c f9d3 	bl	8023850 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80174aa:	69bb      	ldr	r3, [r7, #24]
 80174ac:	2200      	movs	r2, #0
 80174ae:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 80174b0:	69bb      	ldr	r3, [r7, #24]
 80174b2:	2200      	movs	r2, #0
 80174b4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80174b6:	69bb      	ldr	r3, [r7, #24]
 80174b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d005      	beq.n	80174ca <lwip_netconn_do_connected+0xf6>
 80174be:	69bb      	ldr	r3, [r7, #24]
 80174c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174c2:	2200      	movs	r2, #0
 80174c4:	2102      	movs	r1, #2
 80174c6:	69b8      	ldr	r0, [r7, #24]
 80174c8:	4798      	blx	r3

  if (was_blocking) {
 80174ca:	697b      	ldr	r3, [r7, #20]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d002      	beq.n	80174d6 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 80174d0:	69f8      	ldr	r0, [r7, #28]
 80174d2:	f00b fc35 	bl	8022d40 <sys_sem_signal>
  }
  return ERR_OK;
 80174d6:	2300      	movs	r3, #0
}
 80174d8:	4618      	mov	r0, r3
 80174da:	3720      	adds	r7, #32
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}
 80174e0:	08025140 	.word	0x08025140
 80174e4:	08025508 	.word	0x08025508
 80174e8:	08025184 	.word	0x08025184
 80174ec:	08025528 	.word	0x08025528
 80174f0:	08025568 	.word	0x08025568

080174f4 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b086      	sub	sp, #24
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8017500:	693b      	ldr	r3, [r7, #16]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	685b      	ldr	r3, [r3, #4]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d102      	bne.n	8017510 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 801750a:	23f1      	movs	r3, #241	; 0xf1
 801750c:	75fb      	strb	r3, [r7, #23]
 801750e:	e09b      	b.n	8017648 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8017510:	693b      	ldr	r3, [r7, #16]
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	781b      	ldrb	r3, [r3, #0]
 8017516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801751a:	2b10      	cmp	r3, #16
 801751c:	d00f      	beq.n	801753e <lwip_netconn_do_connect+0x4a>
 801751e:	2b20      	cmp	r3, #32
 8017520:	f040 8087 	bne.w	8017632 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8017524:	693b      	ldr	r3, [r7, #16]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	6858      	ldr	r0, [r3, #4]
 801752a:	693b      	ldr	r3, [r7, #16]
 801752c:	6899      	ldr	r1, [r3, #8]
 801752e:	693b      	ldr	r3, [r7, #16]
 8017530:	899b      	ldrh	r3, [r3, #12]
 8017532:	461a      	mov	r2, r3
 8017534:	f008 ff58 	bl	80203e8 <udp_connect>
 8017538:	4603      	mov	r3, r0
 801753a:	75fb      	strb	r3, [r7, #23]
        break;
 801753c:	e084      	b.n	8017648 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 801753e:	693b      	ldr	r3, [r7, #16]
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	785b      	ldrb	r3, [r3, #1]
 8017544:	2b03      	cmp	r3, #3
 8017546:	d102      	bne.n	801754e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8017548:	23f7      	movs	r3, #247	; 0xf7
 801754a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 801754c:	e07b      	b.n	8017646 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 801754e:	693b      	ldr	r3, [r7, #16]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	785b      	ldrb	r3, [r3, #1]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d002      	beq.n	801755e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8017558:	23f6      	movs	r3, #246	; 0xf6
 801755a:	75fb      	strb	r3, [r7, #23]
        break;
 801755c:	e073      	b.n	8017646 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 801755e:	693b      	ldr	r3, [r7, #16]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	4618      	mov	r0, r3
 8017564:	f7ff fcb6 	bl	8016ed4 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8017568:	693b      	ldr	r3, [r7, #16]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	6858      	ldr	r0, [r3, #4]
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	6899      	ldr	r1, [r3, #8]
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	899a      	ldrh	r2, [r3, #12]
 8017576:	4b38      	ldr	r3, [pc, #224]	; (8017658 <lwip_netconn_do_connect+0x164>)
 8017578:	f002 ff88 	bl	801a48c <tcp_connect>
 801757c:	4603      	mov	r3, r0
 801757e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8017580:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d15e      	bne.n	8017646 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8017588:	693b      	ldr	r3, [r7, #16]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	7f1b      	ldrb	r3, [r3, #28]
 801758e:	f003 0302 	and.w	r3, r3, #2
 8017592:	2b00      	cmp	r3, #0
 8017594:	bf14      	ite	ne
 8017596:	2301      	movne	r3, #1
 8017598:	2300      	moveq	r3, #0
 801759a:	b2db      	uxtb	r3, r3
 801759c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	2203      	movs	r2, #3
 80175a4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80175a6:	7bfb      	ldrb	r3, [r7, #15]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d009      	beq.n	80175c0 <lwip_netconn_do_connect+0xcc>
 80175ac:	693b      	ldr	r3, [r7, #16]
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	7f1a      	ldrb	r2, [r3, #28]
 80175b2:	693b      	ldr	r3, [r7, #16]
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	f042 0204 	orr.w	r2, r2, #4
 80175ba:	b2d2      	uxtb	r2, r2
 80175bc:	771a      	strb	r2, [r3, #28]
 80175be:	e008      	b.n	80175d2 <lwip_netconn_do_connect+0xde>
 80175c0:	693b      	ldr	r3, [r7, #16]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	7f1a      	ldrb	r2, [r3, #28]
 80175c6:	693b      	ldr	r3, [r7, #16]
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	f022 0204 	bic.w	r2, r2, #4
 80175ce:	b2d2      	uxtb	r2, r2
 80175d0:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 80175d2:	7bfb      	ldrb	r3, [r7, #15]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d002      	beq.n	80175de <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 80175d8:	23fb      	movs	r3, #251	; 0xfb
 80175da:	75fb      	strb	r3, [r7, #23]
        break;
 80175dc:	e033      	b.n	8017646 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	693a      	ldr	r2, [r7, #16]
 80175e4:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 80175e6:	693b      	ldr	r3, [r7, #16]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	785b      	ldrb	r3, [r3, #1]
 80175ec:	2b03      	cmp	r3, #3
 80175ee:	d006      	beq.n	80175fe <lwip_netconn_do_connect+0x10a>
 80175f0:	4b1a      	ldr	r3, [pc, #104]	; (801765c <lwip_netconn_do_connect+0x168>)
 80175f2:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80175f6:	491a      	ldr	r1, [pc, #104]	; (8017660 <lwip_netconn_do_connect+0x16c>)
 80175f8:	481a      	ldr	r0, [pc, #104]	; (8017664 <lwip_netconn_do_connect+0x170>)
 80175fa:	f00c f929 	bl	8023850 <iprintf>
              UNLOCK_TCPIP_CORE();
 80175fe:	481a      	ldr	r0, [pc, #104]	; (8017668 <lwip_netconn_do_connect+0x174>)
 8017600:	f00b fc03 	bl	8022e0a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8017604:	693b      	ldr	r3, [r7, #16]
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	330c      	adds	r3, #12
 801760a:	2100      	movs	r1, #0
 801760c:	4618      	mov	r0, r3
 801760e:	f00b fb66 	bl	8022cde <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8017612:	4815      	ldr	r0, [pc, #84]	; (8017668 <lwip_netconn_do_connect+0x174>)
 8017614:	f00b fbea 	bl	8022dec <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	785b      	ldrb	r3, [r3, #1]
 801761e:	2b03      	cmp	r3, #3
 8017620:	d116      	bne.n	8017650 <lwip_netconn_do_connect+0x15c>
 8017622:	4b0e      	ldr	r3, [pc, #56]	; (801765c <lwip_netconn_do_connect+0x168>)
 8017624:	f240 5274 	movw	r2, #1396	; 0x574
 8017628:	490d      	ldr	r1, [pc, #52]	; (8017660 <lwip_netconn_do_connect+0x16c>)
 801762a:	480e      	ldr	r0, [pc, #56]	; (8017664 <lwip_netconn_do_connect+0x170>)
 801762c:	f00c f910 	bl	8023850 <iprintf>
              return;
 8017630:	e00e      	b.n	8017650 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8017632:	4b0a      	ldr	r3, [pc, #40]	; (801765c <lwip_netconn_do_connect+0x168>)
 8017634:	f240 527d 	movw	r2, #1405	; 0x57d
 8017638:	490c      	ldr	r1, [pc, #48]	; (801766c <lwip_netconn_do_connect+0x178>)
 801763a:	480a      	ldr	r0, [pc, #40]	; (8017664 <lwip_netconn_do_connect+0x170>)
 801763c:	f00c f908 	bl	8023850 <iprintf>
 8017640:	23fa      	movs	r3, #250	; 0xfa
 8017642:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8017644:	e000      	b.n	8017648 <lwip_netconn_do_connect+0x154>
        break;
 8017646:	bf00      	nop
    }
  }
  msg->err = err;
 8017648:	693b      	ldr	r3, [r7, #16]
 801764a:	7dfa      	ldrb	r2, [r7, #23]
 801764c:	711a      	strb	r2, [r3, #4]
 801764e:	e000      	b.n	8017652 <lwip_netconn_do_connect+0x15e>
              return;
 8017650:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8017652:	3718      	adds	r7, #24
 8017654:	46bd      	mov	sp, r7
 8017656:	bd80      	pop	{r7, pc}
 8017658:	080173d5 	.word	0x080173d5
 801765c:	08025140 	.word	0x08025140
 8017660:	08025500 	.word	0x08025500
 8017664:	08025184 	.word	0x08025184
 8017668:	2000dbc0 	.word	0x2000dbc0
 801766c:	08025588 	.word	0x08025588

08017670 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8017670:	b580      	push	{r7, lr}
 8017672:	b088      	sub	sp, #32
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
 8017678:	460b      	mov	r3, r1
 801767a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801767c:	2300      	movs	r3, #0
 801767e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d106      	bne.n	8017694 <lwip_netconn_do_writemore+0x24>
 8017686:	4b96      	ldr	r3, [pc, #600]	; (80178e0 <lwip_netconn_do_writemore+0x270>)
 8017688:	f240 6273 	movw	r2, #1651	; 0x673
 801768c:	4995      	ldr	r1, [pc, #596]	; (80178e4 <lwip_netconn_do_writemore+0x274>)
 801768e:	4896      	ldr	r0, [pc, #600]	; (80178e8 <lwip_netconn_do_writemore+0x278>)
 8017690:	f00c f8de 	bl	8023850 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	785b      	ldrb	r3, [r3, #1]
 8017698:	2b01      	cmp	r3, #1
 801769a:	d006      	beq.n	80176aa <lwip_netconn_do_writemore+0x3a>
 801769c:	4b90      	ldr	r3, [pc, #576]	; (80178e0 <lwip_netconn_do_writemore+0x270>)
 801769e:	f240 6274 	movw	r2, #1652	; 0x674
 80176a2:	4992      	ldr	r1, [pc, #584]	; (80178ec <lwip_netconn_do_writemore+0x27c>)
 80176a4:	4890      	ldr	r0, [pc, #576]	; (80178e8 <lwip_netconn_do_writemore+0x278>)
 80176a6:	f00c f8d3 	bl	8023850 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	6a1b      	ldr	r3, [r3, #32]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d106      	bne.n	80176c0 <lwip_netconn_do_writemore+0x50>
 80176b2:	4b8b      	ldr	r3, [pc, #556]	; (80178e0 <lwip_netconn_do_writemore+0x270>)
 80176b4:	f240 6275 	movw	r2, #1653	; 0x675
 80176b8:	498d      	ldr	r1, [pc, #564]	; (80178f0 <lwip_netconn_do_writemore+0x280>)
 80176ba:	488b      	ldr	r0, [pc, #556]	; (80178e8 <lwip_netconn_do_writemore+0x278>)
 80176bc:	f00c f8c8 	bl	8023850 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	685b      	ldr	r3, [r3, #4]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d106      	bne.n	80176d6 <lwip_netconn_do_writemore+0x66>
 80176c8:	4b85      	ldr	r3, [pc, #532]	; (80178e0 <lwip_netconn_do_writemore+0x270>)
 80176ca:	f240 6276 	movw	r2, #1654	; 0x676
 80176ce:	4989      	ldr	r1, [pc, #548]	; (80178f4 <lwip_netconn_do_writemore+0x284>)
 80176d0:	4885      	ldr	r0, [pc, #532]	; (80178e8 <lwip_netconn_do_writemore+0x278>)
 80176d2:	f00c f8bd 	bl	8023850 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	6a1b      	ldr	r3, [r3, #32]
 80176da:	699a      	ldr	r2, [r3, #24]
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	6a1b      	ldr	r3, [r3, #32]
 80176e0:	695b      	ldr	r3, [r3, #20]
 80176e2:	429a      	cmp	r2, r3
 80176e4:	d306      	bcc.n	80176f4 <lwip_netconn_do_writemore+0x84>
 80176e6:	4b7e      	ldr	r3, [pc, #504]	; (80178e0 <lwip_netconn_do_writemore+0x270>)
 80176e8:	f240 6277 	movw	r2, #1655	; 0x677
 80176ec:	4982      	ldr	r1, [pc, #520]	; (80178f8 <lwip_netconn_do_writemore+0x288>)
 80176ee:	487e      	ldr	r0, [pc, #504]	; (80178e8 <lwip_netconn_do_writemore+0x278>)
 80176f0:	f00c f8ae 	bl	8023850 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	6a1b      	ldr	r3, [r3, #32]
 80176f8:	899b      	ldrh	r3, [r3, #12]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d106      	bne.n	801770c <lwip_netconn_do_writemore+0x9c>
 80176fe:	4b78      	ldr	r3, [pc, #480]	; (80178e0 <lwip_netconn_do_writemore+0x270>)
 8017700:	f240 6279 	movw	r2, #1657	; 0x679
 8017704:	497d      	ldr	r1, [pc, #500]	; (80178fc <lwip_netconn_do_writemore+0x28c>)
 8017706:	4878      	ldr	r0, [pc, #480]	; (80178e8 <lwip_netconn_do_writemore+0x278>)
 8017708:	f00c f8a2 	bl	8023850 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	6a1b      	ldr	r3, [r3, #32]
 8017710:	7f1b      	ldrb	r3, [r3, #28]
 8017712:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	7f1b      	ldrb	r3, [r3, #28]
 8017718:	f003 0302 	and.w	r3, r3, #2
 801771c:	2b00      	cmp	r3, #0
 801771e:	d104      	bne.n	801772a <lwip_netconn_do_writemore+0xba>
 8017720:	7ebb      	ldrb	r3, [r7, #26]
 8017722:	f003 0304 	and.w	r3, r3, #4
 8017726:	2b00      	cmp	r3, #0
 8017728:	d001      	beq.n	801772e <lwip_netconn_do_writemore+0xbe>
 801772a:	2301      	movs	r3, #1
 801772c:	e000      	b.n	8017730 <lwip_netconn_do_writemore+0xc0>
 801772e:	2300      	movs	r3, #0
 8017730:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	6a1b      	ldr	r3, [r3, #32]
 8017736:	689b      	ldr	r3, [r3, #8]
 8017738:	681a      	ldr	r2, [r3, #0]
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6a1b      	ldr	r3, [r3, #32]
 801773e:	691b      	ldr	r3, [r3, #16]
 8017740:	4413      	add	r3, r2
 8017742:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	6a1b      	ldr	r3, [r3, #32]
 8017748:	689b      	ldr	r3, [r3, #8]
 801774a:	685a      	ldr	r2, [r3, #4]
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	6a1b      	ldr	r3, [r3, #32]
 8017750:	691b      	ldr	r3, [r3, #16]
 8017752:	1ad3      	subs	r3, r2, r3
 8017754:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8017756:	693b      	ldr	r3, [r7, #16]
 8017758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801775c:	d307      	bcc.n	801776e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801775e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017762:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8017764:	7ebb      	ldrb	r3, [r7, #26]
 8017766:	f043 0302 	orr.w	r3, r3, #2
 801776a:	76bb      	strb	r3, [r7, #26]
 801776c:	e001      	b.n	8017772 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801776e:	693b      	ldr	r3, [r7, #16]
 8017770:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	685b      	ldr	r3, [r3, #4]
 8017776:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801777a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801777c:	89fa      	ldrh	r2, [r7, #14]
 801777e:	8bbb      	ldrh	r3, [r7, #28]
 8017780:	429a      	cmp	r2, r3
 8017782:	d216      	bcs.n	80177b2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8017784:	89fb      	ldrh	r3, [r7, #14]
 8017786:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8017788:	7e3b      	ldrb	r3, [r7, #24]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d00d      	beq.n	80177aa <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801778e:	8bbb      	ldrh	r3, [r7, #28]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d10e      	bne.n	80177b2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	6a1b      	ldr	r3, [r3, #32]
 8017798:	699b      	ldr	r3, [r3, #24]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d102      	bne.n	80177a4 <lwip_netconn_do_writemore+0x134>
 801779e:	f06f 0306 	mvn.w	r3, #6
 80177a2:	e000      	b.n	80177a6 <lwip_netconn_do_writemore+0x136>
 80177a4:	2300      	movs	r3, #0
 80177a6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80177a8:	e07d      	b.n	80178a6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80177aa:	7ebb      	ldrb	r3, [r7, #26]
 80177ac:	f043 0302 	orr.w	r3, r3, #2
 80177b0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	6a1b      	ldr	r3, [r3, #32]
 80177b6:	691a      	ldr	r2, [r3, #16]
 80177b8:	8bbb      	ldrh	r3, [r7, #28]
 80177ba:	441a      	add	r2, r3
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	6a1b      	ldr	r3, [r3, #32]
 80177c0:	689b      	ldr	r3, [r3, #8]
 80177c2:	685b      	ldr	r3, [r3, #4]
 80177c4:	429a      	cmp	r2, r3
 80177c6:	d906      	bls.n	80177d6 <lwip_netconn_do_writemore+0x166>
 80177c8:	4b45      	ldr	r3, [pc, #276]	; (80178e0 <lwip_netconn_do_writemore+0x270>)
 80177ca:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80177ce:	494c      	ldr	r1, [pc, #304]	; (8017900 <lwip_netconn_do_writemore+0x290>)
 80177d0:	4845      	ldr	r0, [pc, #276]	; (80178e8 <lwip_netconn_do_writemore+0x278>)
 80177d2:	f00c f83d 	bl	8023850 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80177d6:	8bbb      	ldrh	r3, [r7, #28]
 80177d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80177dc:	4293      	cmp	r3, r2
 80177de:	d103      	bne.n	80177e8 <lwip_netconn_do_writemore+0x178>
 80177e0:	693b      	ldr	r3, [r7, #16]
 80177e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80177e6:	d209      	bcs.n	80177fc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80177e8:	693b      	ldr	r3, [r7, #16]
 80177ea:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80177ec:	8bba      	ldrh	r2, [r7, #28]
 80177ee:	429a      	cmp	r2, r3
 80177f0:	d10b      	bne.n	801780a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	6a1b      	ldr	r3, [r3, #32]
 80177f6:	899b      	ldrh	r3, [r3, #12]
 80177f8:	2b01      	cmp	r3, #1
 80177fa:	d906      	bls.n	801780a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80177fc:	2301      	movs	r3, #1
 80177fe:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8017800:	7ebb      	ldrb	r3, [r7, #26]
 8017802:	f043 0302 	orr.w	r3, r3, #2
 8017806:	76bb      	strb	r3, [r7, #26]
 8017808:	e001      	b.n	801780e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 801780a:	2300      	movs	r3, #0
 801780c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	6858      	ldr	r0, [r3, #4]
 8017812:	7ebb      	ldrb	r3, [r7, #26]
 8017814:	8bba      	ldrh	r2, [r7, #28]
 8017816:	6979      	ldr	r1, [r7, #20]
 8017818:	f006 fcc2 	bl	801e1a0 <tcp_write>
 801781c:	4603      	mov	r3, r0
 801781e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8017820:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d12c      	bne.n	8017882 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	6a1b      	ldr	r3, [r3, #32]
 801782c:	6999      	ldr	r1, [r3, #24]
 801782e:	8bba      	ldrh	r2, [r7, #28]
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	6a1b      	ldr	r3, [r3, #32]
 8017834:	440a      	add	r2, r1
 8017836:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	6a1b      	ldr	r3, [r3, #32]
 801783c:	6919      	ldr	r1, [r3, #16]
 801783e:	8bba      	ldrh	r2, [r7, #28]
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	6a1b      	ldr	r3, [r3, #32]
 8017844:	440a      	add	r2, r1
 8017846:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	6a1b      	ldr	r3, [r3, #32]
 801784c:	691a      	ldr	r2, [r3, #16]
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	6a1b      	ldr	r3, [r3, #32]
 8017852:	689b      	ldr	r3, [r3, #8]
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	429a      	cmp	r2, r3
 8017858:	d113      	bne.n	8017882 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	6a1b      	ldr	r3, [r3, #32]
 801785e:	899a      	ldrh	r2, [r3, #12]
 8017860:	3a01      	subs	r2, #1
 8017862:	b292      	uxth	r2, r2
 8017864:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	6a1b      	ldr	r3, [r3, #32]
 801786a:	899b      	ldrh	r3, [r3, #12]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d008      	beq.n	8017882 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6a1b      	ldr	r3, [r3, #32]
 8017874:	689a      	ldr	r2, [r3, #8]
 8017876:	3208      	adds	r2, #8
 8017878:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	6a1b      	ldr	r3, [r3, #32]
 801787e:	2200      	movs	r2, #0
 8017880:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8017882:	7e7b      	ldrb	r3, [r7, #25]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d004      	beq.n	8017892 <lwip_netconn_do_writemore+0x222>
 8017888:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801788c:	2b00      	cmp	r3, #0
 801788e:	f43f af50 	beq.w	8017732 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8017892:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d004      	beq.n	80178a4 <lwip_netconn_do_writemore+0x234>
 801789a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801789e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80178a2:	d146      	bne.n	8017932 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80178a4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80178a6:	7e3b      	ldrb	r3, [r7, #24]
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d02b      	beq.n	8017904 <lwip_netconn_do_writemore+0x294>
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	6a1b      	ldr	r3, [r3, #32]
 80178b0:	699a      	ldr	r2, [r3, #24]
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	6a1b      	ldr	r3, [r3, #32]
 80178b6:	695b      	ldr	r3, [r3, #20]
 80178b8:	429a      	cmp	r2, r3
 80178ba:	d223      	bcs.n	8017904 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d005      	beq.n	80178d0 <lwip_netconn_do_writemore+0x260>
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178c8:	2200      	movs	r2, #0
 80178ca:	2103      	movs	r1, #3
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	7f1b      	ldrb	r3, [r3, #28]
 80178d4:	f043 0310 	orr.w	r3, r3, #16
 80178d8:	b2da      	uxtb	r2, r3
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	771a      	strb	r2, [r3, #28]
 80178de:	e028      	b.n	8017932 <lwip_netconn_do_writemore+0x2c2>
 80178e0:	08025140 	.word	0x08025140
 80178e4:	08025298 	.word	0x08025298
 80178e8:	08025184 	.word	0x08025184
 80178ec:	080255a0 	.word	0x080255a0
 80178f0:	080252a8 	.word	0x080252a8
 80178f4:	080255c0 	.word	0x080255c0
 80178f8:	080255d8 	.word	0x080255d8
 80178fc:	08025618 	.word	0x08025618
 8017900:	08025640 	.word	0x08025640
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	685b      	ldr	r3, [r3, #4]
 8017908:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801790c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8017910:	d305      	bcc.n	801791e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	685b      	ldr	r3, [r3, #4]
 8017916:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801791a:	2b04      	cmp	r3, #4
 801791c:	d909      	bls.n	8017932 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017922:	2b00      	cmp	r3, #0
 8017924:	d005      	beq.n	8017932 <lwip_netconn_do_writemore+0x2c2>
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801792a:	2200      	movs	r2, #0
 801792c:	2103      	movs	r1, #3
 801792e:	6878      	ldr	r0, [r7, #4]
 8017930:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8017932:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d11d      	bne.n	8017976 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	6a1b      	ldr	r3, [r3, #32]
 801793e:	699a      	ldr	r2, [r3, #24]
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	6a1b      	ldr	r3, [r3, #32]
 8017944:	695b      	ldr	r3, [r3, #20]
 8017946:	429a      	cmp	r2, r3
 8017948:	d002      	beq.n	8017950 <lwip_netconn_do_writemore+0x2e0>
 801794a:	7e3b      	ldrb	r3, [r7, #24]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d001      	beq.n	8017954 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8017950:	2301      	movs	r3, #1
 8017952:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	685b      	ldr	r3, [r3, #4]
 8017958:	4618      	mov	r0, r3
 801795a:	f007 fa0b 	bl	801ed74 <tcp_output>
 801795e:	4603      	mov	r3, r0
 8017960:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8017962:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8017966:	f113 0f04 	cmn.w	r3, #4
 801796a:	d12c      	bne.n	80179c6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801796c:	7b3b      	ldrb	r3, [r7, #12]
 801796e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8017970:	2301      	movs	r3, #1
 8017972:	76fb      	strb	r3, [r7, #27]
 8017974:	e027      	b.n	80179c6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8017976:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801797a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801797e:	d120      	bne.n	80179c2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	685b      	ldr	r3, [r3, #4]
 8017984:	4618      	mov	r0, r3
 8017986:	f007 f9f5 	bl	801ed74 <tcp_output>
 801798a:	4603      	mov	r3, r0
 801798c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801798e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8017992:	f113 0f04 	cmn.w	r3, #4
 8017996:	d104      	bne.n	80179a2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8017998:	7b7b      	ldrb	r3, [r7, #13]
 801799a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801799c:	2301      	movs	r3, #1
 801799e:	76fb      	strb	r3, [r7, #27]
 80179a0:	e011      	b.n	80179c6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80179a2:	7e3b      	ldrb	r3, [r7, #24]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d00e      	beq.n	80179c6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	6a1b      	ldr	r3, [r3, #32]
 80179ac:	699b      	ldr	r3, [r3, #24]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d102      	bne.n	80179b8 <lwip_netconn_do_writemore+0x348>
 80179b2:	f06f 0306 	mvn.w	r3, #6
 80179b6:	e000      	b.n	80179ba <lwip_netconn_do_writemore+0x34a>
 80179b8:	2300      	movs	r3, #0
 80179ba:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80179bc:	2301      	movs	r3, #1
 80179be:	76fb      	strb	r3, [r7, #27]
 80179c0:	e001      	b.n	80179c6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80179c2:	2301      	movs	r3, #1
 80179c4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80179c6:	7efb      	ldrb	r3, [r7, #27]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d015      	beq.n	80179f8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	6a1b      	ldr	r3, [r3, #32]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	330c      	adds	r3, #12
 80179d4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	6a1b      	ldr	r3, [r3, #32]
 80179da:	7ffa      	ldrb	r2, [r7, #31]
 80179dc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	2200      	movs	r2, #0
 80179e2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	2200      	movs	r2, #0
 80179e8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80179ea:	78fb      	ldrb	r3, [r7, #3]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d006      	beq.n	80179fe <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80179f0:	68b8      	ldr	r0, [r7, #8]
 80179f2:	f00b f9a5 	bl	8022d40 <sys_sem_signal>
 80179f6:	e002      	b.n	80179fe <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80179f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80179fc:	e000      	b.n	8017a00 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80179fe:	2300      	movs	r3, #0
}
 8017a00:	4618      	mov	r0, r3
 8017a02:	3720      	adds	r7, #32
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}

08017a08 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b084      	sub	sp, #16
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8017a14:	68bb      	ldr	r3, [r7, #8]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	4618      	mov	r0, r3
 8017a1a:	f7fe ff77 	bl	801690c <netconn_err>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8017a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d166      	bne.n	8017af8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8017a2a:	68bb      	ldr	r3, [r7, #8]
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	781b      	ldrb	r3, [r3, #0]
 8017a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017a34:	2b10      	cmp	r3, #16
 8017a36:	d15d      	bne.n	8017af4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	785b      	ldrb	r3, [r3, #1]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d002      	beq.n	8017a48 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8017a42:	23fb      	movs	r3, #251	; 0xfb
 8017a44:	73fb      	strb	r3, [r7, #15]
 8017a46:	e057      	b.n	8017af8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	685b      	ldr	r3, [r3, #4]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d04d      	beq.n	8017aee <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8017a52:	68bb      	ldr	r3, [r7, #8]
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	2201      	movs	r2, #1
 8017a58:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8017a5a:	68bb      	ldr	r3, [r7, #8]
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	6a1b      	ldr	r3, [r3, #32]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d006      	beq.n	8017a72 <lwip_netconn_do_write+0x6a>
 8017a64:	4b28      	ldr	r3, [pc, #160]	; (8017b08 <lwip_netconn_do_write+0x100>)
 8017a66:	f240 7223 	movw	r2, #1827	; 0x723
 8017a6a:	4928      	ldr	r1, [pc, #160]	; (8017b0c <lwip_netconn_do_write+0x104>)
 8017a6c:	4828      	ldr	r0, [pc, #160]	; (8017b10 <lwip_netconn_do_write+0x108>)
 8017a6e:	f00b feef 	bl	8023850 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8017a72:	68bb      	ldr	r3, [r7, #8]
 8017a74:	695b      	ldr	r3, [r3, #20]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d106      	bne.n	8017a88 <lwip_netconn_do_write+0x80>
 8017a7a:	4b23      	ldr	r3, [pc, #140]	; (8017b08 <lwip_netconn_do_write+0x100>)
 8017a7c:	f240 7224 	movw	r2, #1828	; 0x724
 8017a80:	4924      	ldr	r1, [pc, #144]	; (8017b14 <lwip_netconn_do_write+0x10c>)
 8017a82:	4823      	ldr	r0, [pc, #140]	; (8017b10 <lwip_netconn_do_write+0x108>)
 8017a84:	f00b fee4 	bl	8023850 <iprintf>
        msg->conn->current_msg = msg;
 8017a88:	68bb      	ldr	r3, [r7, #8]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	68ba      	ldr	r2, [r7, #8]
 8017a8e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8017a90:	68bb      	ldr	r3, [r7, #8]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	2100      	movs	r1, #0
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7ff fdea 	bl	8017670 <lwip_netconn_do_writemore>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d02e      	beq.n	8017b00 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8017aa2:	68bb      	ldr	r3, [r7, #8]
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	785b      	ldrb	r3, [r3, #1]
 8017aa8:	2b01      	cmp	r3, #1
 8017aaa:	d006      	beq.n	8017aba <lwip_netconn_do_write+0xb2>
 8017aac:	4b16      	ldr	r3, [pc, #88]	; (8017b08 <lwip_netconn_do_write+0x100>)
 8017aae:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8017ab2:	4919      	ldr	r1, [pc, #100]	; (8017b18 <lwip_netconn_do_write+0x110>)
 8017ab4:	4816      	ldr	r0, [pc, #88]	; (8017b10 <lwip_netconn_do_write+0x108>)
 8017ab6:	f00b fecb 	bl	8023850 <iprintf>
          UNLOCK_TCPIP_CORE();
 8017aba:	4818      	ldr	r0, [pc, #96]	; (8017b1c <lwip_netconn_do_write+0x114>)
 8017abc:	f00b f9a5 	bl	8022e0a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8017ac0:	68bb      	ldr	r3, [r7, #8]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	330c      	adds	r3, #12
 8017ac6:	2100      	movs	r1, #0
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f00b f908 	bl	8022cde <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8017ace:	4813      	ldr	r0, [pc, #76]	; (8017b1c <lwip_netconn_do_write+0x114>)
 8017ad0:	f00b f98c 	bl	8022dec <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8017ad4:	68bb      	ldr	r3, [r7, #8]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	785b      	ldrb	r3, [r3, #1]
 8017ada:	2b01      	cmp	r3, #1
 8017adc:	d110      	bne.n	8017b00 <lwip_netconn_do_write+0xf8>
 8017ade:	4b0a      	ldr	r3, [pc, #40]	; (8017b08 <lwip_netconn_do_write+0x100>)
 8017ae0:	f240 722c 	movw	r2, #1836	; 0x72c
 8017ae4:	490c      	ldr	r1, [pc, #48]	; (8017b18 <lwip_netconn_do_write+0x110>)
 8017ae6:	480a      	ldr	r0, [pc, #40]	; (8017b10 <lwip_netconn_do_write+0x108>)
 8017ae8:	f00b feb2 	bl	8023850 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8017aec:	e008      	b.n	8017b00 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8017aee:	23f5      	movs	r3, #245	; 0xf5
 8017af0:	73fb      	strb	r3, [r7, #15]
 8017af2:	e001      	b.n	8017af8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8017af4:	23fa      	movs	r3, #250	; 0xfa
 8017af6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8017af8:	68bb      	ldr	r3, [r7, #8]
 8017afa:	7bfa      	ldrb	r2, [r7, #15]
 8017afc:	711a      	strb	r2, [r3, #4]
 8017afe:	e000      	b.n	8017b02 <lwip_netconn_do_write+0xfa>
        return;
 8017b00:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8017b02:	3710      	adds	r7, #16
 8017b04:	46bd      	mov	sp, r7
 8017b06:	bd80      	pop	{r7, pc}
 8017b08:	08025140 	.word	0x08025140
 8017b0c:	080254e4 	.word	0x080254e4
 8017b10:	08025184 	.word	0x08025184
 8017b14:	0802566c 	.word	0x0802566c
 8017b18:	08025500 	.word	0x08025500
 8017b1c:	2000dbc0 	.word	0x2000dbc0

08017b20 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	b082      	sub	sp, #8
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d013      	beq.n	8017b56 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d00b      	beq.n	8017b4e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f001 fdba 	bl	80196b4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	2200      	movs	r2, #0
 8017b44:	605a      	str	r2, [r3, #4]
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	685a      	ldr	r2, [r3, #4]
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8017b4e:	6879      	ldr	r1, [r7, #4]
 8017b50:	2006      	movs	r0, #6
 8017b52:	f000 ff0b 	bl	801896c <memp_free>
  }
}
 8017b56:	bf00      	nop
 8017b58:	3708      	adds	r7, #8
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	bd80      	pop	{r7, pc}
	...

08017b60 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b084      	sub	sp, #16
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
 8017b68:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8017b6a:	f008 f9bb 	bl	801fee4 <sys_timeouts_sleeptime>
 8017b6e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b76:	d10b      	bne.n	8017b90 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8017b78:	4813      	ldr	r0, [pc, #76]	; (8017bc8 <tcpip_timeouts_mbox_fetch+0x68>)
 8017b7a:	f00b f946 	bl	8022e0a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8017b7e:	2200      	movs	r2, #0
 8017b80:	6839      	ldr	r1, [r7, #0]
 8017b82:	6878      	ldr	r0, [r7, #4]
 8017b84:	f00b f826 	bl	8022bd4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8017b88:	480f      	ldr	r0, [pc, #60]	; (8017bc8 <tcpip_timeouts_mbox_fetch+0x68>)
 8017b8a:	f00b f92f 	bl	8022dec <sys_mutex_lock>
    return;
 8017b8e:	e018      	b.n	8017bc2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d102      	bne.n	8017b9c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8017b96:	f008 f96b 	bl	801fe70 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8017b9a:	e7e6      	b.n	8017b6a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8017b9c:	480a      	ldr	r0, [pc, #40]	; (8017bc8 <tcpip_timeouts_mbox_fetch+0x68>)
 8017b9e:	f00b f934 	bl	8022e0a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8017ba2:	68fa      	ldr	r2, [r7, #12]
 8017ba4:	6839      	ldr	r1, [r7, #0]
 8017ba6:	6878      	ldr	r0, [r7, #4]
 8017ba8:	f00b f814 	bl	8022bd4 <sys_arch_mbox_fetch>
 8017bac:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8017bae:	4806      	ldr	r0, [pc, #24]	; (8017bc8 <tcpip_timeouts_mbox_fetch+0x68>)
 8017bb0:	f00b f91c 	bl	8022dec <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8017bb4:	68bb      	ldr	r3, [r7, #8]
 8017bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017bba:	d102      	bne.n	8017bc2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8017bbc:	f008 f958 	bl	801fe70 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8017bc0:	e7d3      	b.n	8017b6a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8017bc2:	3710      	adds	r7, #16
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd80      	pop	{r7, pc}
 8017bc8:	2000dbc0 	.word	0x2000dbc0

08017bcc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b084      	sub	sp, #16
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8017bd4:	4810      	ldr	r0, [pc, #64]	; (8017c18 <tcpip_thread+0x4c>)
 8017bd6:	f00b f909 	bl	8022dec <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8017bda:	4b10      	ldr	r3, [pc, #64]	; (8017c1c <tcpip_thread+0x50>)
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d005      	beq.n	8017bee <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8017be2:	4b0e      	ldr	r3, [pc, #56]	; (8017c1c <tcpip_thread+0x50>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	4a0e      	ldr	r2, [pc, #56]	; (8017c20 <tcpip_thread+0x54>)
 8017be8:	6812      	ldr	r2, [r2, #0]
 8017bea:	4610      	mov	r0, r2
 8017bec:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8017bee:	f107 030c 	add.w	r3, r7, #12
 8017bf2:	4619      	mov	r1, r3
 8017bf4:	480b      	ldr	r0, [pc, #44]	; (8017c24 <tcpip_thread+0x58>)
 8017bf6:	f7ff ffb3 	bl	8017b60 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d106      	bne.n	8017c0e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017c00:	4b09      	ldr	r3, [pc, #36]	; (8017c28 <tcpip_thread+0x5c>)
 8017c02:	2291      	movs	r2, #145	; 0x91
 8017c04:	4909      	ldr	r1, [pc, #36]	; (8017c2c <tcpip_thread+0x60>)
 8017c06:	480a      	ldr	r0, [pc, #40]	; (8017c30 <tcpip_thread+0x64>)
 8017c08:	f00b fe22 	bl	8023850 <iprintf>
      continue;
 8017c0c:	e003      	b.n	8017c16 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	4618      	mov	r0, r3
 8017c12:	f000 f80f 	bl	8017c34 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8017c16:	e7ea      	b.n	8017bee <tcpip_thread+0x22>
 8017c18:	2000dbc0 	.word	0x2000dbc0
 8017c1c:	2000dbb4 	.word	0x2000dbb4
 8017c20:	2000dbb8 	.word	0x2000dbb8
 8017c24:	2000dbbc 	.word	0x2000dbbc
 8017c28:	08025698 	.word	0x08025698
 8017c2c:	080256c8 	.word	0x080256c8
 8017c30:	080256e8 	.word	0x080256e8

08017c34 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b082      	sub	sp, #8
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	781b      	ldrb	r3, [r3, #0]
 8017c40:	2b02      	cmp	r3, #2
 8017c42:	d026      	beq.n	8017c92 <tcpip_thread_handle_msg+0x5e>
 8017c44:	2b02      	cmp	r3, #2
 8017c46:	dc2b      	bgt.n	8017ca0 <tcpip_thread_handle_msg+0x6c>
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d002      	beq.n	8017c52 <tcpip_thread_handle_msg+0x1e>
 8017c4c:	2b01      	cmp	r3, #1
 8017c4e:	d015      	beq.n	8017c7c <tcpip_thread_handle_msg+0x48>
 8017c50:	e026      	b.n	8017ca0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	68db      	ldr	r3, [r3, #12]
 8017c56:	687a      	ldr	r2, [r7, #4]
 8017c58:	6850      	ldr	r0, [r2, #4]
 8017c5a:	687a      	ldr	r2, [r7, #4]
 8017c5c:	6892      	ldr	r2, [r2, #8]
 8017c5e:	4611      	mov	r1, r2
 8017c60:	4798      	blx	r3
 8017c62:	4603      	mov	r3, r0
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d004      	beq.n	8017c72 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	685b      	ldr	r3, [r3, #4]
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f001 fd21 	bl	80196b4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8017c72:	6879      	ldr	r1, [r7, #4]
 8017c74:	2009      	movs	r0, #9
 8017c76:	f000 fe79 	bl	801896c <memp_free>
      break;
 8017c7a:	e018      	b.n	8017cae <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	685b      	ldr	r3, [r3, #4]
 8017c80:	687a      	ldr	r2, [r7, #4]
 8017c82:	6892      	ldr	r2, [r2, #8]
 8017c84:	4610      	mov	r0, r2
 8017c86:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017c88:	6879      	ldr	r1, [r7, #4]
 8017c8a:	2008      	movs	r0, #8
 8017c8c:	f000 fe6e 	bl	801896c <memp_free>
      break;
 8017c90:	e00d      	b.n	8017cae <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	685b      	ldr	r3, [r3, #4]
 8017c96:	687a      	ldr	r2, [r7, #4]
 8017c98:	6892      	ldr	r2, [r2, #8]
 8017c9a:	4610      	mov	r0, r2
 8017c9c:	4798      	blx	r3
      break;
 8017c9e:	e006      	b.n	8017cae <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017ca0:	4b05      	ldr	r3, [pc, #20]	; (8017cb8 <tcpip_thread_handle_msg+0x84>)
 8017ca2:	22cf      	movs	r2, #207	; 0xcf
 8017ca4:	4905      	ldr	r1, [pc, #20]	; (8017cbc <tcpip_thread_handle_msg+0x88>)
 8017ca6:	4806      	ldr	r0, [pc, #24]	; (8017cc0 <tcpip_thread_handle_msg+0x8c>)
 8017ca8:	f00b fdd2 	bl	8023850 <iprintf>
      break;
 8017cac:	bf00      	nop
  }
}
 8017cae:	bf00      	nop
 8017cb0:	3708      	adds	r7, #8
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	bd80      	pop	{r7, pc}
 8017cb6:	bf00      	nop
 8017cb8:	08025698 	.word	0x08025698
 8017cbc:	080256c8 	.word	0x080256c8
 8017cc0:	080256e8 	.word	0x080256e8

08017cc4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b086      	sub	sp, #24
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	60f8      	str	r0, [r7, #12]
 8017ccc:	60b9      	str	r1, [r7, #8]
 8017cce:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017cd0:	481a      	ldr	r0, [pc, #104]	; (8017d3c <tcpip_inpkt+0x78>)
 8017cd2:	f00a ffbe 	bl	8022c52 <sys_mbox_valid>
 8017cd6:	4603      	mov	r3, r0
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d105      	bne.n	8017ce8 <tcpip_inpkt+0x24>
 8017cdc:	4b18      	ldr	r3, [pc, #96]	; (8017d40 <tcpip_inpkt+0x7c>)
 8017cde:	22fc      	movs	r2, #252	; 0xfc
 8017ce0:	4918      	ldr	r1, [pc, #96]	; (8017d44 <tcpip_inpkt+0x80>)
 8017ce2:	4819      	ldr	r0, [pc, #100]	; (8017d48 <tcpip_inpkt+0x84>)
 8017ce4:	f00b fdb4 	bl	8023850 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8017ce8:	2009      	movs	r0, #9
 8017cea:	f000 fdc9 	bl	8018880 <memp_malloc>
 8017cee:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8017cf0:	697b      	ldr	r3, [r7, #20]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d102      	bne.n	8017cfc <tcpip_inpkt+0x38>
    return ERR_MEM;
 8017cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017cfa:	e01a      	b.n	8017d32 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8017cfc:	697b      	ldr	r3, [r7, #20]
 8017cfe:	2200      	movs	r2, #0
 8017d00:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8017d02:	697b      	ldr	r3, [r7, #20]
 8017d04:	68fa      	ldr	r2, [r7, #12]
 8017d06:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8017d08:	697b      	ldr	r3, [r7, #20]
 8017d0a:	68ba      	ldr	r2, [r7, #8]
 8017d0c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8017d0e:	697b      	ldr	r3, [r7, #20]
 8017d10:	687a      	ldr	r2, [r7, #4]
 8017d12:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017d14:	6979      	ldr	r1, [r7, #20]
 8017d16:	4809      	ldr	r0, [pc, #36]	; (8017d3c <tcpip_inpkt+0x78>)
 8017d18:	f00a ff42 	bl	8022ba0 <sys_mbox_trypost>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d006      	beq.n	8017d30 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8017d22:	6979      	ldr	r1, [r7, #20]
 8017d24:	2009      	movs	r0, #9
 8017d26:	f000 fe21 	bl	801896c <memp_free>
    return ERR_MEM;
 8017d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d2e:	e000      	b.n	8017d32 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8017d30:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8017d32:	4618      	mov	r0, r3
 8017d34:	3718      	adds	r7, #24
 8017d36:	46bd      	mov	sp, r7
 8017d38:	bd80      	pop	{r7, pc}
 8017d3a:	bf00      	nop
 8017d3c:	2000dbbc 	.word	0x2000dbbc
 8017d40:	08025698 	.word	0x08025698
 8017d44:	08025710 	.word	0x08025710
 8017d48:	080256e8 	.word	0x080256e8

08017d4c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b082      	sub	sp, #8
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
 8017d54:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8017d56:	683b      	ldr	r3, [r7, #0]
 8017d58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d5c:	f003 0318 	and.w	r3, r3, #24
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d006      	beq.n	8017d72 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8017d64:	4a08      	ldr	r2, [pc, #32]	; (8017d88 <tcpip_input+0x3c>)
 8017d66:	6839      	ldr	r1, [r7, #0]
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f7ff ffab 	bl	8017cc4 <tcpip_inpkt>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	e005      	b.n	8017d7e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8017d72:	4a06      	ldr	r2, [pc, #24]	; (8017d8c <tcpip_input+0x40>)
 8017d74:	6839      	ldr	r1, [r7, #0]
 8017d76:	6878      	ldr	r0, [r7, #4]
 8017d78:	f7ff ffa4 	bl	8017cc4 <tcpip_inpkt>
 8017d7c:	4603      	mov	r3, r0
}
 8017d7e:	4618      	mov	r0, r3
 8017d80:	3708      	adds	r7, #8
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bd80      	pop	{r7, pc}
 8017d86:	bf00      	nop
 8017d88:	0802298d 	.word	0x0802298d
 8017d8c:	08021895 	.word	0x08021895

08017d90 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b084      	sub	sp, #16
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
 8017d98:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017d9a:	4819      	ldr	r0, [pc, #100]	; (8017e00 <tcpip_try_callback+0x70>)
 8017d9c:	f00a ff59 	bl	8022c52 <sys_mbox_valid>
 8017da0:	4603      	mov	r3, r0
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d106      	bne.n	8017db4 <tcpip_try_callback+0x24>
 8017da6:	4b17      	ldr	r3, [pc, #92]	; (8017e04 <tcpip_try_callback+0x74>)
 8017da8:	f240 125d 	movw	r2, #349	; 0x15d
 8017dac:	4916      	ldr	r1, [pc, #88]	; (8017e08 <tcpip_try_callback+0x78>)
 8017dae:	4817      	ldr	r0, [pc, #92]	; (8017e0c <tcpip_try_callback+0x7c>)
 8017db0:	f00b fd4e 	bl	8023850 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8017db4:	2008      	movs	r0, #8
 8017db6:	f000 fd63 	bl	8018880 <memp_malloc>
 8017dba:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d102      	bne.n	8017dc8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8017dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017dc6:	e017      	b.n	8017df8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	2201      	movs	r2, #1
 8017dcc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	687a      	ldr	r2, [r7, #4]
 8017dd2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	683a      	ldr	r2, [r7, #0]
 8017dd8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017dda:	68f9      	ldr	r1, [r7, #12]
 8017ddc:	4808      	ldr	r0, [pc, #32]	; (8017e00 <tcpip_try_callback+0x70>)
 8017dde:	f00a fedf 	bl	8022ba0 <sys_mbox_trypost>
 8017de2:	4603      	mov	r3, r0
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d006      	beq.n	8017df6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8017de8:	68f9      	ldr	r1, [r7, #12]
 8017dea:	2008      	movs	r0, #8
 8017dec:	f000 fdbe 	bl	801896c <memp_free>
    return ERR_MEM;
 8017df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017df4:	e000      	b.n	8017df8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8017df6:	2300      	movs	r3, #0
}
 8017df8:	4618      	mov	r0, r3
 8017dfa:	3710      	adds	r7, #16
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}
 8017e00:	2000dbbc 	.word	0x2000dbbc
 8017e04:	08025698 	.word	0x08025698
 8017e08:	08025710 	.word	0x08025710
 8017e0c:	080256e8 	.word	0x080256e8

08017e10 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b084      	sub	sp, #16
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	60f8      	str	r0, [r7, #12]
 8017e18:	60b9      	str	r1, [r7, #8]
 8017e1a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8017e1c:	4806      	ldr	r0, [pc, #24]	; (8017e38 <tcpip_send_msg_wait_sem+0x28>)
 8017e1e:	f00a ffe5 	bl	8022dec <sys_mutex_lock>
  fn(apimsg);
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	68b8      	ldr	r0, [r7, #8]
 8017e26:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8017e28:	4803      	ldr	r0, [pc, #12]	; (8017e38 <tcpip_send_msg_wait_sem+0x28>)
 8017e2a:	f00a ffee 	bl	8022e0a <sys_mutex_unlock>
  return ERR_OK;
 8017e2e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8017e30:	4618      	mov	r0, r3
 8017e32:	3710      	adds	r7, #16
 8017e34:	46bd      	mov	sp, r7
 8017e36:	bd80      	pop	{r7, pc}
 8017e38:	2000dbc0 	.word	0x2000dbc0

08017e3c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8017e3c:	b580      	push	{r7, lr}
 8017e3e:	b084      	sub	sp, #16
 8017e40:	af02      	add	r7, sp, #8
 8017e42:	6078      	str	r0, [r7, #4]
 8017e44:	6039      	str	r1, [r7, #0]
  lwip_init();
 8017e46:	f000 f871 	bl	8017f2c <lwip_init>

  tcpip_init_done = initfunc;
 8017e4a:	4a17      	ldr	r2, [pc, #92]	; (8017ea8 <tcpip_init+0x6c>)
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8017e50:	4a16      	ldr	r2, [pc, #88]	; (8017eac <tcpip_init+0x70>)
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017e56:	2106      	movs	r1, #6
 8017e58:	4815      	ldr	r0, [pc, #84]	; (8017eb0 <tcpip_init+0x74>)
 8017e5a:	f00a fe6d 	bl	8022b38 <sys_mbox_new>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d006      	beq.n	8017e72 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8017e64:	4b13      	ldr	r3, [pc, #76]	; (8017eb4 <tcpip_init+0x78>)
 8017e66:	f240 2261 	movw	r2, #609	; 0x261
 8017e6a:	4913      	ldr	r1, [pc, #76]	; (8017eb8 <tcpip_init+0x7c>)
 8017e6c:	4813      	ldr	r0, [pc, #76]	; (8017ebc <tcpip_init+0x80>)
 8017e6e:	f00b fcef 	bl	8023850 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8017e72:	4813      	ldr	r0, [pc, #76]	; (8017ec0 <tcpip_init+0x84>)
 8017e74:	f00a ff9e 	bl	8022db4 <sys_mutex_new>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d006      	beq.n	8017e8c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8017e7e:	4b0d      	ldr	r3, [pc, #52]	; (8017eb4 <tcpip_init+0x78>)
 8017e80:	f240 2265 	movw	r2, #613	; 0x265
 8017e84:	490f      	ldr	r1, [pc, #60]	; (8017ec4 <tcpip_init+0x88>)
 8017e86:	480d      	ldr	r0, [pc, #52]	; (8017ebc <tcpip_init+0x80>)
 8017e88:	f00b fce2 	bl	8023850 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	9300      	str	r3, [sp, #0]
 8017e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e94:	2200      	movs	r2, #0
 8017e96:	490c      	ldr	r1, [pc, #48]	; (8017ec8 <tcpip_init+0x8c>)
 8017e98:	480c      	ldr	r0, [pc, #48]	; (8017ecc <tcpip_init+0x90>)
 8017e9a:	f00a ffc3 	bl	8022e24 <sys_thread_new>
}
 8017e9e:	bf00      	nop
 8017ea0:	3708      	adds	r7, #8
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}
 8017ea6:	bf00      	nop
 8017ea8:	2000dbb4 	.word	0x2000dbb4
 8017eac:	2000dbb8 	.word	0x2000dbb8
 8017eb0:	2000dbbc 	.word	0x2000dbbc
 8017eb4:	08025698 	.word	0x08025698
 8017eb8:	08025720 	.word	0x08025720
 8017ebc:	080256e8 	.word	0x080256e8
 8017ec0:	2000dbc0 	.word	0x2000dbc0
 8017ec4:	08025744 	.word	0x08025744
 8017ec8:	08017bcd 	.word	0x08017bcd
 8017ecc:	08025768 	.word	0x08025768

08017ed0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8017ed0:	b480      	push	{r7}
 8017ed2:	b083      	sub	sp, #12
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8017eda:	88fb      	ldrh	r3, [r7, #6]
 8017edc:	021b      	lsls	r3, r3, #8
 8017ede:	b21a      	sxth	r2, r3
 8017ee0:	88fb      	ldrh	r3, [r7, #6]
 8017ee2:	0a1b      	lsrs	r3, r3, #8
 8017ee4:	b29b      	uxth	r3, r3
 8017ee6:	b21b      	sxth	r3, r3
 8017ee8:	4313      	orrs	r3, r2
 8017eea:	b21b      	sxth	r3, r3
 8017eec:	b29b      	uxth	r3, r3
}
 8017eee:	4618      	mov	r0, r3
 8017ef0:	370c      	adds	r7, #12
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef8:	4770      	bx	lr

08017efa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8017efa:	b480      	push	{r7}
 8017efc:	b083      	sub	sp, #12
 8017efe:	af00      	add	r7, sp, #0
 8017f00:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	061a      	lsls	r2, r3, #24
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	021b      	lsls	r3, r3, #8
 8017f0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8017f0e:	431a      	orrs	r2, r3
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	0a1b      	lsrs	r3, r3, #8
 8017f14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017f18:	431a      	orrs	r2, r3
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	0e1b      	lsrs	r3, r3, #24
 8017f1e:	4313      	orrs	r3, r2
}
 8017f20:	4618      	mov	r0, r3
 8017f22:	370c      	adds	r7, #12
 8017f24:	46bd      	mov	sp, r7
 8017f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f2a:	4770      	bx	lr

08017f2c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b082      	sub	sp, #8
 8017f30:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8017f32:	2300      	movs	r3, #0
 8017f34:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8017f36:	f00a ff2f 	bl	8022d98 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8017f3a:	f000 f8d5 	bl	80180e8 <mem_init>
  memp_init();
 8017f3e:	f000 fc31 	bl	80187a4 <memp_init>
  pbuf_init();
  netif_init();
 8017f42:	f000 fd3d 	bl	80189c0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8017f46:	f008 f805 	bl	801ff54 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8017f4a:	f001 fe4d 	bl	8019be8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8017f4e:	f007 ff47 	bl	801fde0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8017f52:	bf00      	nop
 8017f54:	3708      	adds	r7, #8
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}
	...

08017f5c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8017f5c:	b480      	push	{r7}
 8017f5e:	b083      	sub	sp, #12
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	4603      	mov	r3, r0
 8017f64:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8017f66:	4b05      	ldr	r3, [pc, #20]	; (8017f7c <ptr_to_mem+0x20>)
 8017f68:	681a      	ldr	r2, [r3, #0]
 8017f6a:	88fb      	ldrh	r3, [r7, #6]
 8017f6c:	4413      	add	r3, r2
}
 8017f6e:	4618      	mov	r0, r3
 8017f70:	370c      	adds	r7, #12
 8017f72:	46bd      	mov	sp, r7
 8017f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f78:	4770      	bx	lr
 8017f7a:	bf00      	nop
 8017f7c:	2000e230 	.word	0x2000e230

08017f80 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8017f80:	b480      	push	{r7}
 8017f82:	b083      	sub	sp, #12
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8017f88:	4b05      	ldr	r3, [pc, #20]	; (8017fa0 <mem_to_ptr+0x20>)
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	687a      	ldr	r2, [r7, #4]
 8017f8e:	1ad3      	subs	r3, r2, r3
 8017f90:	b29b      	uxth	r3, r3
}
 8017f92:	4618      	mov	r0, r3
 8017f94:	370c      	adds	r7, #12
 8017f96:	46bd      	mov	sp, r7
 8017f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9c:	4770      	bx	lr
 8017f9e:	bf00      	nop
 8017fa0:	2000e230 	.word	0x2000e230

08017fa4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8017fa4:	b590      	push	{r4, r7, lr}
 8017fa6:	b085      	sub	sp, #20
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017fac:	4b45      	ldr	r3, [pc, #276]	; (80180c4 <plug_holes+0x120>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	687a      	ldr	r2, [r7, #4]
 8017fb2:	429a      	cmp	r2, r3
 8017fb4:	d206      	bcs.n	8017fc4 <plug_holes+0x20>
 8017fb6:	4b44      	ldr	r3, [pc, #272]	; (80180c8 <plug_holes+0x124>)
 8017fb8:	f240 12df 	movw	r2, #479	; 0x1df
 8017fbc:	4943      	ldr	r1, [pc, #268]	; (80180cc <plug_holes+0x128>)
 8017fbe:	4844      	ldr	r0, [pc, #272]	; (80180d0 <plug_holes+0x12c>)
 8017fc0:	f00b fc46 	bl	8023850 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017fc4:	4b43      	ldr	r3, [pc, #268]	; (80180d4 <plug_holes+0x130>)
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	687a      	ldr	r2, [r7, #4]
 8017fca:	429a      	cmp	r2, r3
 8017fcc:	d306      	bcc.n	8017fdc <plug_holes+0x38>
 8017fce:	4b3e      	ldr	r3, [pc, #248]	; (80180c8 <plug_holes+0x124>)
 8017fd0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017fd4:	4940      	ldr	r1, [pc, #256]	; (80180d8 <plug_holes+0x134>)
 8017fd6:	483e      	ldr	r0, [pc, #248]	; (80180d0 <plug_holes+0x12c>)
 8017fd8:	f00b fc3a 	bl	8023850 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	791b      	ldrb	r3, [r3, #4]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d006      	beq.n	8017ff2 <plug_holes+0x4e>
 8017fe4:	4b38      	ldr	r3, [pc, #224]	; (80180c8 <plug_holes+0x124>)
 8017fe6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8017fea:	493c      	ldr	r1, [pc, #240]	; (80180dc <plug_holes+0x138>)
 8017fec:	4838      	ldr	r0, [pc, #224]	; (80180d0 <plug_holes+0x12c>)
 8017fee:	f00b fc2f 	bl	8023850 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	881b      	ldrh	r3, [r3, #0]
 8017ff6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017ffa:	d906      	bls.n	801800a <plug_holes+0x66>
 8017ffc:	4b32      	ldr	r3, [pc, #200]	; (80180c8 <plug_holes+0x124>)
 8017ffe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8018002:	4937      	ldr	r1, [pc, #220]	; (80180e0 <plug_holes+0x13c>)
 8018004:	4832      	ldr	r0, [pc, #200]	; (80180d0 <plug_holes+0x12c>)
 8018006:	f00b fc23 	bl	8023850 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	881b      	ldrh	r3, [r3, #0]
 801800e:	4618      	mov	r0, r3
 8018010:	f7ff ffa4 	bl	8017f5c <ptr_to_mem>
 8018014:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8018016:	687a      	ldr	r2, [r7, #4]
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	429a      	cmp	r2, r3
 801801c:	d024      	beq.n	8018068 <plug_holes+0xc4>
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	791b      	ldrb	r3, [r3, #4]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d120      	bne.n	8018068 <plug_holes+0xc4>
 8018026:	4b2b      	ldr	r3, [pc, #172]	; (80180d4 <plug_holes+0x130>)
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	68fa      	ldr	r2, [r7, #12]
 801802c:	429a      	cmp	r2, r3
 801802e:	d01b      	beq.n	8018068 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8018030:	4b2c      	ldr	r3, [pc, #176]	; (80180e4 <plug_holes+0x140>)
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	68fa      	ldr	r2, [r7, #12]
 8018036:	429a      	cmp	r2, r3
 8018038:	d102      	bne.n	8018040 <plug_holes+0x9c>
      lfree = mem;
 801803a:	4a2a      	ldr	r2, [pc, #168]	; (80180e4 <plug_holes+0x140>)
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	881a      	ldrh	r2, [r3, #0]
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	881b      	ldrh	r3, [r3, #0]
 801804c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018050:	d00a      	beq.n	8018068 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	881b      	ldrh	r3, [r3, #0]
 8018056:	4618      	mov	r0, r3
 8018058:	f7ff ff80 	bl	8017f5c <ptr_to_mem>
 801805c:	4604      	mov	r4, r0
 801805e:	6878      	ldr	r0, [r7, #4]
 8018060:	f7ff ff8e 	bl	8017f80 <mem_to_ptr>
 8018064:	4603      	mov	r3, r0
 8018066:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	885b      	ldrh	r3, [r3, #2]
 801806c:	4618      	mov	r0, r3
 801806e:	f7ff ff75 	bl	8017f5c <ptr_to_mem>
 8018072:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8018074:	68ba      	ldr	r2, [r7, #8]
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	429a      	cmp	r2, r3
 801807a:	d01f      	beq.n	80180bc <plug_holes+0x118>
 801807c:	68bb      	ldr	r3, [r7, #8]
 801807e:	791b      	ldrb	r3, [r3, #4]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d11b      	bne.n	80180bc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8018084:	4b17      	ldr	r3, [pc, #92]	; (80180e4 <plug_holes+0x140>)
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	687a      	ldr	r2, [r7, #4]
 801808a:	429a      	cmp	r2, r3
 801808c:	d102      	bne.n	8018094 <plug_holes+0xf0>
      lfree = pmem;
 801808e:	4a15      	ldr	r2, [pc, #84]	; (80180e4 <plug_holes+0x140>)
 8018090:	68bb      	ldr	r3, [r7, #8]
 8018092:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	881a      	ldrh	r2, [r3, #0]
 8018098:	68bb      	ldr	r3, [r7, #8]
 801809a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	881b      	ldrh	r3, [r3, #0]
 80180a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80180a4:	d00a      	beq.n	80180bc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	881b      	ldrh	r3, [r3, #0]
 80180aa:	4618      	mov	r0, r3
 80180ac:	f7ff ff56 	bl	8017f5c <ptr_to_mem>
 80180b0:	4604      	mov	r4, r0
 80180b2:	68b8      	ldr	r0, [r7, #8]
 80180b4:	f7ff ff64 	bl	8017f80 <mem_to_ptr>
 80180b8:	4603      	mov	r3, r0
 80180ba:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80180bc:	bf00      	nop
 80180be:	3714      	adds	r7, #20
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd90      	pop	{r4, r7, pc}
 80180c4:	2000e230 	.word	0x2000e230
 80180c8:	08025778 	.word	0x08025778
 80180cc:	080257a8 	.word	0x080257a8
 80180d0:	080257c0 	.word	0x080257c0
 80180d4:	2000e234 	.word	0x2000e234
 80180d8:	080257e8 	.word	0x080257e8
 80180dc:	08025804 	.word	0x08025804
 80180e0:	08025820 	.word	0x08025820
 80180e4:	2000e23c 	.word	0x2000e23c

080180e8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b082      	sub	sp, #8
 80180ec:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80180ee:	4b1f      	ldr	r3, [pc, #124]	; (801816c <mem_init+0x84>)
 80180f0:	3303      	adds	r3, #3
 80180f2:	f023 0303 	bic.w	r3, r3, #3
 80180f6:	461a      	mov	r2, r3
 80180f8:	4b1d      	ldr	r3, [pc, #116]	; (8018170 <mem_init+0x88>)
 80180fa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80180fc:	4b1c      	ldr	r3, [pc, #112]	; (8018170 <mem_init+0x88>)
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8018108:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	2200      	movs	r2, #0
 801810e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	2200      	movs	r2, #0
 8018114:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8018116:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801811a:	f7ff ff1f 	bl	8017f5c <ptr_to_mem>
 801811e:	4603      	mov	r3, r0
 8018120:	4a14      	ldr	r2, [pc, #80]	; (8018174 <mem_init+0x8c>)
 8018122:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8018124:	4b13      	ldr	r3, [pc, #76]	; (8018174 <mem_init+0x8c>)
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	2201      	movs	r2, #1
 801812a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801812c:	4b11      	ldr	r3, [pc, #68]	; (8018174 <mem_init+0x8c>)
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8018134:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8018136:	4b0f      	ldr	r3, [pc, #60]	; (8018174 <mem_init+0x8c>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801813e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8018140:	4b0b      	ldr	r3, [pc, #44]	; (8018170 <mem_init+0x88>)
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	4a0c      	ldr	r2, [pc, #48]	; (8018178 <mem_init+0x90>)
 8018146:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8018148:	480c      	ldr	r0, [pc, #48]	; (801817c <mem_init+0x94>)
 801814a:	f00a fe33 	bl	8022db4 <sys_mutex_new>
 801814e:	4603      	mov	r3, r0
 8018150:	2b00      	cmp	r3, #0
 8018152:	d006      	beq.n	8018162 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8018154:	4b0a      	ldr	r3, [pc, #40]	; (8018180 <mem_init+0x98>)
 8018156:	f240 221f 	movw	r2, #543	; 0x21f
 801815a:	490a      	ldr	r1, [pc, #40]	; (8018184 <mem_init+0x9c>)
 801815c:	480a      	ldr	r0, [pc, #40]	; (8018188 <mem_init+0xa0>)
 801815e:	f00b fb77 	bl	8023850 <iprintf>
  }
}
 8018162:	bf00      	nop
 8018164:	3708      	adds	r7, #8
 8018166:	46bd      	mov	sp, r7
 8018168:	bd80      	pop	{r7, pc}
 801816a:	bf00      	nop
 801816c:	2000dbdc 	.word	0x2000dbdc
 8018170:	2000e230 	.word	0x2000e230
 8018174:	2000e234 	.word	0x2000e234
 8018178:	2000e23c 	.word	0x2000e23c
 801817c:	2000e238 	.word	0x2000e238
 8018180:	08025778 	.word	0x08025778
 8018184:	0802584c 	.word	0x0802584c
 8018188:	080257c0 	.word	0x080257c0

0801818c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b086      	sub	sp, #24
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8018194:	6878      	ldr	r0, [r7, #4]
 8018196:	f7ff fef3 	bl	8017f80 <mem_to_ptr>
 801819a:	4603      	mov	r3, r0
 801819c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	881b      	ldrh	r3, [r3, #0]
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7ff feda 	bl	8017f5c <ptr_to_mem>
 80181a8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	885b      	ldrh	r3, [r3, #2]
 80181ae:	4618      	mov	r0, r3
 80181b0:	f7ff fed4 	bl	8017f5c <ptr_to_mem>
 80181b4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	881b      	ldrh	r3, [r3, #0]
 80181ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80181be:	d818      	bhi.n	80181f2 <mem_link_valid+0x66>
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	885b      	ldrh	r3, [r3, #2]
 80181c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80181c8:	d813      	bhi.n	80181f2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80181ce:	8afa      	ldrh	r2, [r7, #22]
 80181d0:	429a      	cmp	r2, r3
 80181d2:	d004      	beq.n	80181de <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	881b      	ldrh	r3, [r3, #0]
 80181d8:	8afa      	ldrh	r2, [r7, #22]
 80181da:	429a      	cmp	r2, r3
 80181dc:	d109      	bne.n	80181f2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80181de:	4b08      	ldr	r3, [pc, #32]	; (8018200 <mem_link_valid+0x74>)
 80181e0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80181e2:	693a      	ldr	r2, [r7, #16]
 80181e4:	429a      	cmp	r2, r3
 80181e6:	d006      	beq.n	80181f6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80181e8:	693b      	ldr	r3, [r7, #16]
 80181ea:	885b      	ldrh	r3, [r3, #2]
 80181ec:	8afa      	ldrh	r2, [r7, #22]
 80181ee:	429a      	cmp	r2, r3
 80181f0:	d001      	beq.n	80181f6 <mem_link_valid+0x6a>
    return 0;
 80181f2:	2300      	movs	r3, #0
 80181f4:	e000      	b.n	80181f8 <mem_link_valid+0x6c>
  }
  return 1;
 80181f6:	2301      	movs	r3, #1
}
 80181f8:	4618      	mov	r0, r3
 80181fa:	3718      	adds	r7, #24
 80181fc:	46bd      	mov	sp, r7
 80181fe:	bd80      	pop	{r7, pc}
 8018200:	2000e234 	.word	0x2000e234

08018204 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8018204:	b580      	push	{r7, lr}
 8018206:	b088      	sub	sp, #32
 8018208:	af00      	add	r7, sp, #0
 801820a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d070      	beq.n	80182f4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	f003 0303 	and.w	r3, r3, #3
 8018218:	2b00      	cmp	r3, #0
 801821a:	d00d      	beq.n	8018238 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801821c:	4b37      	ldr	r3, [pc, #220]	; (80182fc <mem_free+0xf8>)
 801821e:	f240 2273 	movw	r2, #627	; 0x273
 8018222:	4937      	ldr	r1, [pc, #220]	; (8018300 <mem_free+0xfc>)
 8018224:	4837      	ldr	r0, [pc, #220]	; (8018304 <mem_free+0x100>)
 8018226:	f00b fb13 	bl	8023850 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801822a:	f00a fe21 	bl	8022e70 <sys_arch_protect>
 801822e:	60f8      	str	r0, [r7, #12]
 8018230:	68f8      	ldr	r0, [r7, #12]
 8018232:	f00a fe2b 	bl	8022e8c <sys_arch_unprotect>
    return;
 8018236:	e05e      	b.n	80182f6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	3b08      	subs	r3, #8
 801823c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801823e:	4b32      	ldr	r3, [pc, #200]	; (8018308 <mem_free+0x104>)
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	69fa      	ldr	r2, [r7, #28]
 8018244:	429a      	cmp	r2, r3
 8018246:	d306      	bcc.n	8018256 <mem_free+0x52>
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	f103 020c 	add.w	r2, r3, #12
 801824e:	4b2f      	ldr	r3, [pc, #188]	; (801830c <mem_free+0x108>)
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	429a      	cmp	r2, r3
 8018254:	d90d      	bls.n	8018272 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8018256:	4b29      	ldr	r3, [pc, #164]	; (80182fc <mem_free+0xf8>)
 8018258:	f240 227f 	movw	r2, #639	; 0x27f
 801825c:	492c      	ldr	r1, [pc, #176]	; (8018310 <mem_free+0x10c>)
 801825e:	4829      	ldr	r0, [pc, #164]	; (8018304 <mem_free+0x100>)
 8018260:	f00b faf6 	bl	8023850 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018264:	f00a fe04 	bl	8022e70 <sys_arch_protect>
 8018268:	6138      	str	r0, [r7, #16]
 801826a:	6938      	ldr	r0, [r7, #16]
 801826c:	f00a fe0e 	bl	8022e8c <sys_arch_unprotect>
    return;
 8018270:	e041      	b.n	80182f6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8018272:	4828      	ldr	r0, [pc, #160]	; (8018314 <mem_free+0x110>)
 8018274:	f00a fdba 	bl	8022dec <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8018278:	69fb      	ldr	r3, [r7, #28]
 801827a:	791b      	ldrb	r3, [r3, #4]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d110      	bne.n	80182a2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8018280:	4b1e      	ldr	r3, [pc, #120]	; (80182fc <mem_free+0xf8>)
 8018282:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8018286:	4924      	ldr	r1, [pc, #144]	; (8018318 <mem_free+0x114>)
 8018288:	481e      	ldr	r0, [pc, #120]	; (8018304 <mem_free+0x100>)
 801828a:	f00b fae1 	bl	8023850 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801828e:	4821      	ldr	r0, [pc, #132]	; (8018314 <mem_free+0x110>)
 8018290:	f00a fdbb 	bl	8022e0a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018294:	f00a fdec 	bl	8022e70 <sys_arch_protect>
 8018298:	6178      	str	r0, [r7, #20]
 801829a:	6978      	ldr	r0, [r7, #20]
 801829c:	f00a fdf6 	bl	8022e8c <sys_arch_unprotect>
    return;
 80182a0:	e029      	b.n	80182f6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80182a2:	69f8      	ldr	r0, [r7, #28]
 80182a4:	f7ff ff72 	bl	801818c <mem_link_valid>
 80182a8:	4603      	mov	r3, r0
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d110      	bne.n	80182d0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80182ae:	4b13      	ldr	r3, [pc, #76]	; (80182fc <mem_free+0xf8>)
 80182b0:	f240 2295 	movw	r2, #661	; 0x295
 80182b4:	4919      	ldr	r1, [pc, #100]	; (801831c <mem_free+0x118>)
 80182b6:	4813      	ldr	r0, [pc, #76]	; (8018304 <mem_free+0x100>)
 80182b8:	f00b faca 	bl	8023850 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80182bc:	4815      	ldr	r0, [pc, #84]	; (8018314 <mem_free+0x110>)
 80182be:	f00a fda4 	bl	8022e0a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80182c2:	f00a fdd5 	bl	8022e70 <sys_arch_protect>
 80182c6:	61b8      	str	r0, [r7, #24]
 80182c8:	69b8      	ldr	r0, [r7, #24]
 80182ca:	f00a fddf 	bl	8022e8c <sys_arch_unprotect>
    return;
 80182ce:	e012      	b.n	80182f6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80182d0:	69fb      	ldr	r3, [r7, #28]
 80182d2:	2200      	movs	r2, #0
 80182d4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80182d6:	4b12      	ldr	r3, [pc, #72]	; (8018320 <mem_free+0x11c>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	69fa      	ldr	r2, [r7, #28]
 80182dc:	429a      	cmp	r2, r3
 80182de:	d202      	bcs.n	80182e6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80182e0:	4a0f      	ldr	r2, [pc, #60]	; (8018320 <mem_free+0x11c>)
 80182e2:	69fb      	ldr	r3, [r7, #28]
 80182e4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80182e6:	69f8      	ldr	r0, [r7, #28]
 80182e8:	f7ff fe5c 	bl	8017fa4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80182ec:	4809      	ldr	r0, [pc, #36]	; (8018314 <mem_free+0x110>)
 80182ee:	f00a fd8c 	bl	8022e0a <sys_mutex_unlock>
 80182f2:	e000      	b.n	80182f6 <mem_free+0xf2>
    return;
 80182f4:	bf00      	nop
}
 80182f6:	3720      	adds	r7, #32
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}
 80182fc:	08025778 	.word	0x08025778
 8018300:	08025868 	.word	0x08025868
 8018304:	080257c0 	.word	0x080257c0
 8018308:	2000e230 	.word	0x2000e230
 801830c:	2000e234 	.word	0x2000e234
 8018310:	0802588c 	.word	0x0802588c
 8018314:	2000e238 	.word	0x2000e238
 8018318:	080258a8 	.word	0x080258a8
 801831c:	080258d0 	.word	0x080258d0
 8018320:	2000e23c 	.word	0x2000e23c

08018324 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b088      	sub	sp, #32
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
 801832c:	460b      	mov	r3, r1
 801832e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8018330:	887b      	ldrh	r3, [r7, #2]
 8018332:	3303      	adds	r3, #3
 8018334:	b29b      	uxth	r3, r3
 8018336:	f023 0303 	bic.w	r3, r3, #3
 801833a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801833c:	8bfb      	ldrh	r3, [r7, #30]
 801833e:	2b0b      	cmp	r3, #11
 8018340:	d801      	bhi.n	8018346 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8018342:	230c      	movs	r3, #12
 8018344:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8018346:	8bfb      	ldrh	r3, [r7, #30]
 8018348:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801834c:	d803      	bhi.n	8018356 <mem_trim+0x32>
 801834e:	8bfa      	ldrh	r2, [r7, #30]
 8018350:	887b      	ldrh	r3, [r7, #2]
 8018352:	429a      	cmp	r2, r3
 8018354:	d201      	bcs.n	801835a <mem_trim+0x36>
    return NULL;
 8018356:	2300      	movs	r3, #0
 8018358:	e0d8      	b.n	801850c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801835a:	4b6e      	ldr	r3, [pc, #440]	; (8018514 <mem_trim+0x1f0>)
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	687a      	ldr	r2, [r7, #4]
 8018360:	429a      	cmp	r2, r3
 8018362:	d304      	bcc.n	801836e <mem_trim+0x4a>
 8018364:	4b6c      	ldr	r3, [pc, #432]	; (8018518 <mem_trim+0x1f4>)
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	687a      	ldr	r2, [r7, #4]
 801836a:	429a      	cmp	r2, r3
 801836c:	d306      	bcc.n	801837c <mem_trim+0x58>
 801836e:	4b6b      	ldr	r3, [pc, #428]	; (801851c <mem_trim+0x1f8>)
 8018370:	f240 22d1 	movw	r2, #721	; 0x2d1
 8018374:	496a      	ldr	r1, [pc, #424]	; (8018520 <mem_trim+0x1fc>)
 8018376:	486b      	ldr	r0, [pc, #428]	; (8018524 <mem_trim+0x200>)
 8018378:	f00b fa6a 	bl	8023850 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801837c:	4b65      	ldr	r3, [pc, #404]	; (8018514 <mem_trim+0x1f0>)
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	687a      	ldr	r2, [r7, #4]
 8018382:	429a      	cmp	r2, r3
 8018384:	d304      	bcc.n	8018390 <mem_trim+0x6c>
 8018386:	4b64      	ldr	r3, [pc, #400]	; (8018518 <mem_trim+0x1f4>)
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	687a      	ldr	r2, [r7, #4]
 801838c:	429a      	cmp	r2, r3
 801838e:	d307      	bcc.n	80183a0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018390:	f00a fd6e 	bl	8022e70 <sys_arch_protect>
 8018394:	60b8      	str	r0, [r7, #8]
 8018396:	68b8      	ldr	r0, [r7, #8]
 8018398:	f00a fd78 	bl	8022e8c <sys_arch_unprotect>
    return rmem;
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	e0b5      	b.n	801850c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	3b08      	subs	r3, #8
 80183a4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80183a6:	69b8      	ldr	r0, [r7, #24]
 80183a8:	f7ff fdea 	bl	8017f80 <mem_to_ptr>
 80183ac:	4603      	mov	r3, r0
 80183ae:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80183b0:	69bb      	ldr	r3, [r7, #24]
 80183b2:	881a      	ldrh	r2, [r3, #0]
 80183b4:	8afb      	ldrh	r3, [r7, #22]
 80183b6:	1ad3      	subs	r3, r2, r3
 80183b8:	b29b      	uxth	r3, r3
 80183ba:	3b08      	subs	r3, #8
 80183bc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80183be:	8bfa      	ldrh	r2, [r7, #30]
 80183c0:	8abb      	ldrh	r3, [r7, #20]
 80183c2:	429a      	cmp	r2, r3
 80183c4:	d906      	bls.n	80183d4 <mem_trim+0xb0>
 80183c6:	4b55      	ldr	r3, [pc, #340]	; (801851c <mem_trim+0x1f8>)
 80183c8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80183cc:	4956      	ldr	r1, [pc, #344]	; (8018528 <mem_trim+0x204>)
 80183ce:	4855      	ldr	r0, [pc, #340]	; (8018524 <mem_trim+0x200>)
 80183d0:	f00b fa3e 	bl	8023850 <iprintf>
  if (newsize > size) {
 80183d4:	8bfa      	ldrh	r2, [r7, #30]
 80183d6:	8abb      	ldrh	r3, [r7, #20]
 80183d8:	429a      	cmp	r2, r3
 80183da:	d901      	bls.n	80183e0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80183dc:	2300      	movs	r3, #0
 80183de:	e095      	b.n	801850c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80183e0:	8bfa      	ldrh	r2, [r7, #30]
 80183e2:	8abb      	ldrh	r3, [r7, #20]
 80183e4:	429a      	cmp	r2, r3
 80183e6:	d101      	bne.n	80183ec <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	e08f      	b.n	801850c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80183ec:	484f      	ldr	r0, [pc, #316]	; (801852c <mem_trim+0x208>)
 80183ee:	f00a fcfd 	bl	8022dec <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80183f2:	69bb      	ldr	r3, [r7, #24]
 80183f4:	881b      	ldrh	r3, [r3, #0]
 80183f6:	4618      	mov	r0, r3
 80183f8:	f7ff fdb0 	bl	8017f5c <ptr_to_mem>
 80183fc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80183fe:	693b      	ldr	r3, [r7, #16]
 8018400:	791b      	ldrb	r3, [r3, #4]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d13f      	bne.n	8018486 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8018406:	69bb      	ldr	r3, [r7, #24]
 8018408:	881b      	ldrh	r3, [r3, #0]
 801840a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801840e:	d106      	bne.n	801841e <mem_trim+0xfa>
 8018410:	4b42      	ldr	r3, [pc, #264]	; (801851c <mem_trim+0x1f8>)
 8018412:	f240 22f5 	movw	r2, #757	; 0x2f5
 8018416:	4946      	ldr	r1, [pc, #280]	; (8018530 <mem_trim+0x20c>)
 8018418:	4842      	ldr	r0, [pc, #264]	; (8018524 <mem_trim+0x200>)
 801841a:	f00b fa19 	bl	8023850 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801841e:	693b      	ldr	r3, [r7, #16]
 8018420:	881b      	ldrh	r3, [r3, #0]
 8018422:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8018424:	8afa      	ldrh	r2, [r7, #22]
 8018426:	8bfb      	ldrh	r3, [r7, #30]
 8018428:	4413      	add	r3, r2
 801842a:	b29b      	uxth	r3, r3
 801842c:	3308      	adds	r3, #8
 801842e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8018430:	4b40      	ldr	r3, [pc, #256]	; (8018534 <mem_trim+0x210>)
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	693a      	ldr	r2, [r7, #16]
 8018436:	429a      	cmp	r2, r3
 8018438:	d106      	bne.n	8018448 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801843a:	89fb      	ldrh	r3, [r7, #14]
 801843c:	4618      	mov	r0, r3
 801843e:	f7ff fd8d 	bl	8017f5c <ptr_to_mem>
 8018442:	4603      	mov	r3, r0
 8018444:	4a3b      	ldr	r2, [pc, #236]	; (8018534 <mem_trim+0x210>)
 8018446:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8018448:	89fb      	ldrh	r3, [r7, #14]
 801844a:	4618      	mov	r0, r3
 801844c:	f7ff fd86 	bl	8017f5c <ptr_to_mem>
 8018450:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8018452:	693b      	ldr	r3, [r7, #16]
 8018454:	2200      	movs	r2, #0
 8018456:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8018458:	693b      	ldr	r3, [r7, #16]
 801845a:	89ba      	ldrh	r2, [r7, #12]
 801845c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801845e:	693b      	ldr	r3, [r7, #16]
 8018460:	8afa      	ldrh	r2, [r7, #22]
 8018462:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8018464:	69bb      	ldr	r3, [r7, #24]
 8018466:	89fa      	ldrh	r2, [r7, #14]
 8018468:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801846a:	693b      	ldr	r3, [r7, #16]
 801846c:	881b      	ldrh	r3, [r3, #0]
 801846e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018472:	d047      	beq.n	8018504 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8018474:	693b      	ldr	r3, [r7, #16]
 8018476:	881b      	ldrh	r3, [r3, #0]
 8018478:	4618      	mov	r0, r3
 801847a:	f7ff fd6f 	bl	8017f5c <ptr_to_mem>
 801847e:	4602      	mov	r2, r0
 8018480:	89fb      	ldrh	r3, [r7, #14]
 8018482:	8053      	strh	r3, [r2, #2]
 8018484:	e03e      	b.n	8018504 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8018486:	8bfb      	ldrh	r3, [r7, #30]
 8018488:	f103 0214 	add.w	r2, r3, #20
 801848c:	8abb      	ldrh	r3, [r7, #20]
 801848e:	429a      	cmp	r2, r3
 8018490:	d838      	bhi.n	8018504 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8018492:	8afa      	ldrh	r2, [r7, #22]
 8018494:	8bfb      	ldrh	r3, [r7, #30]
 8018496:	4413      	add	r3, r2
 8018498:	b29b      	uxth	r3, r3
 801849a:	3308      	adds	r3, #8
 801849c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801849e:	69bb      	ldr	r3, [r7, #24]
 80184a0:	881b      	ldrh	r3, [r3, #0]
 80184a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80184a6:	d106      	bne.n	80184b6 <mem_trim+0x192>
 80184a8:	4b1c      	ldr	r3, [pc, #112]	; (801851c <mem_trim+0x1f8>)
 80184aa:	f240 3216 	movw	r2, #790	; 0x316
 80184ae:	4920      	ldr	r1, [pc, #128]	; (8018530 <mem_trim+0x20c>)
 80184b0:	481c      	ldr	r0, [pc, #112]	; (8018524 <mem_trim+0x200>)
 80184b2:	f00b f9cd 	bl	8023850 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80184b6:	89fb      	ldrh	r3, [r7, #14]
 80184b8:	4618      	mov	r0, r3
 80184ba:	f7ff fd4f 	bl	8017f5c <ptr_to_mem>
 80184be:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80184c0:	4b1c      	ldr	r3, [pc, #112]	; (8018534 <mem_trim+0x210>)
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	693a      	ldr	r2, [r7, #16]
 80184c6:	429a      	cmp	r2, r3
 80184c8:	d202      	bcs.n	80184d0 <mem_trim+0x1ac>
      lfree = mem2;
 80184ca:	4a1a      	ldr	r2, [pc, #104]	; (8018534 <mem_trim+0x210>)
 80184cc:	693b      	ldr	r3, [r7, #16]
 80184ce:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80184d0:	693b      	ldr	r3, [r7, #16]
 80184d2:	2200      	movs	r2, #0
 80184d4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80184d6:	69bb      	ldr	r3, [r7, #24]
 80184d8:	881a      	ldrh	r2, [r3, #0]
 80184da:	693b      	ldr	r3, [r7, #16]
 80184dc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80184de:	693b      	ldr	r3, [r7, #16]
 80184e0:	8afa      	ldrh	r2, [r7, #22]
 80184e2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80184e4:	69bb      	ldr	r3, [r7, #24]
 80184e6:	89fa      	ldrh	r2, [r7, #14]
 80184e8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80184ea:	693b      	ldr	r3, [r7, #16]
 80184ec:	881b      	ldrh	r3, [r3, #0]
 80184ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80184f2:	d007      	beq.n	8018504 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80184f4:	693b      	ldr	r3, [r7, #16]
 80184f6:	881b      	ldrh	r3, [r3, #0]
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7ff fd2f 	bl	8017f5c <ptr_to_mem>
 80184fe:	4602      	mov	r2, r0
 8018500:	89fb      	ldrh	r3, [r7, #14]
 8018502:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8018504:	4809      	ldr	r0, [pc, #36]	; (801852c <mem_trim+0x208>)
 8018506:	f00a fc80 	bl	8022e0a <sys_mutex_unlock>
  return rmem;
 801850a:	687b      	ldr	r3, [r7, #4]
}
 801850c:	4618      	mov	r0, r3
 801850e:	3720      	adds	r7, #32
 8018510:	46bd      	mov	sp, r7
 8018512:	bd80      	pop	{r7, pc}
 8018514:	2000e230 	.word	0x2000e230
 8018518:	2000e234 	.word	0x2000e234
 801851c:	08025778 	.word	0x08025778
 8018520:	08025904 	.word	0x08025904
 8018524:	080257c0 	.word	0x080257c0
 8018528:	0802591c 	.word	0x0802591c
 801852c:	2000e238 	.word	0x2000e238
 8018530:	0802593c 	.word	0x0802593c
 8018534:	2000e23c 	.word	0x2000e23c

08018538 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b088      	sub	sp, #32
 801853c:	af00      	add	r7, sp, #0
 801853e:	4603      	mov	r3, r0
 8018540:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8018542:	88fb      	ldrh	r3, [r7, #6]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d101      	bne.n	801854c <mem_malloc+0x14>
    return NULL;
 8018548:	2300      	movs	r3, #0
 801854a:	e0e2      	b.n	8018712 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801854c:	88fb      	ldrh	r3, [r7, #6]
 801854e:	3303      	adds	r3, #3
 8018550:	b29b      	uxth	r3, r3
 8018552:	f023 0303 	bic.w	r3, r3, #3
 8018556:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8018558:	8bbb      	ldrh	r3, [r7, #28]
 801855a:	2b0b      	cmp	r3, #11
 801855c:	d801      	bhi.n	8018562 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801855e:	230c      	movs	r3, #12
 8018560:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8018562:	8bbb      	ldrh	r3, [r7, #28]
 8018564:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018568:	d803      	bhi.n	8018572 <mem_malloc+0x3a>
 801856a:	8bba      	ldrh	r2, [r7, #28]
 801856c:	88fb      	ldrh	r3, [r7, #6]
 801856e:	429a      	cmp	r2, r3
 8018570:	d201      	bcs.n	8018576 <mem_malloc+0x3e>
    return NULL;
 8018572:	2300      	movs	r3, #0
 8018574:	e0cd      	b.n	8018712 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8018576:	4869      	ldr	r0, [pc, #420]	; (801871c <mem_malloc+0x1e4>)
 8018578:	f00a fc38 	bl	8022dec <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801857c:	4b68      	ldr	r3, [pc, #416]	; (8018720 <mem_malloc+0x1e8>)
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	4618      	mov	r0, r3
 8018582:	f7ff fcfd 	bl	8017f80 <mem_to_ptr>
 8018586:	4603      	mov	r3, r0
 8018588:	83fb      	strh	r3, [r7, #30]
 801858a:	e0b7      	b.n	80186fc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801858c:	8bfb      	ldrh	r3, [r7, #30]
 801858e:	4618      	mov	r0, r3
 8018590:	f7ff fce4 	bl	8017f5c <ptr_to_mem>
 8018594:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8018596:	697b      	ldr	r3, [r7, #20]
 8018598:	791b      	ldrb	r3, [r3, #4]
 801859a:	2b00      	cmp	r3, #0
 801859c:	f040 80a7 	bne.w	80186ee <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80185a0:	697b      	ldr	r3, [r7, #20]
 80185a2:	881b      	ldrh	r3, [r3, #0]
 80185a4:	461a      	mov	r2, r3
 80185a6:	8bfb      	ldrh	r3, [r7, #30]
 80185a8:	1ad3      	subs	r3, r2, r3
 80185aa:	f1a3 0208 	sub.w	r2, r3, #8
 80185ae:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80185b0:	429a      	cmp	r2, r3
 80185b2:	f0c0 809c 	bcc.w	80186ee <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80185b6:	697b      	ldr	r3, [r7, #20]
 80185b8:	881b      	ldrh	r3, [r3, #0]
 80185ba:	461a      	mov	r2, r3
 80185bc:	8bfb      	ldrh	r3, [r7, #30]
 80185be:	1ad3      	subs	r3, r2, r3
 80185c0:	f1a3 0208 	sub.w	r2, r3, #8
 80185c4:	8bbb      	ldrh	r3, [r7, #28]
 80185c6:	3314      	adds	r3, #20
 80185c8:	429a      	cmp	r2, r3
 80185ca:	d333      	bcc.n	8018634 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80185cc:	8bfa      	ldrh	r2, [r7, #30]
 80185ce:	8bbb      	ldrh	r3, [r7, #28]
 80185d0:	4413      	add	r3, r2
 80185d2:	b29b      	uxth	r3, r3
 80185d4:	3308      	adds	r3, #8
 80185d6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80185d8:	8a7b      	ldrh	r3, [r7, #18]
 80185da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80185de:	d106      	bne.n	80185ee <mem_malloc+0xb6>
 80185e0:	4b50      	ldr	r3, [pc, #320]	; (8018724 <mem_malloc+0x1ec>)
 80185e2:	f240 3287 	movw	r2, #903	; 0x387
 80185e6:	4950      	ldr	r1, [pc, #320]	; (8018728 <mem_malloc+0x1f0>)
 80185e8:	4850      	ldr	r0, [pc, #320]	; (801872c <mem_malloc+0x1f4>)
 80185ea:	f00b f931 	bl	8023850 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80185ee:	8a7b      	ldrh	r3, [r7, #18]
 80185f0:	4618      	mov	r0, r3
 80185f2:	f7ff fcb3 	bl	8017f5c <ptr_to_mem>
 80185f6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	2200      	movs	r2, #0
 80185fc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80185fe:	697b      	ldr	r3, [r7, #20]
 8018600:	881a      	ldrh	r2, [r3, #0]
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	8bfa      	ldrh	r2, [r7, #30]
 801860a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801860c:	697b      	ldr	r3, [r7, #20]
 801860e:	8a7a      	ldrh	r2, [r7, #18]
 8018610:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8018612:	697b      	ldr	r3, [r7, #20]
 8018614:	2201      	movs	r2, #1
 8018616:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	881b      	ldrh	r3, [r3, #0]
 801861c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018620:	d00b      	beq.n	801863a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	881b      	ldrh	r3, [r3, #0]
 8018626:	4618      	mov	r0, r3
 8018628:	f7ff fc98 	bl	8017f5c <ptr_to_mem>
 801862c:	4602      	mov	r2, r0
 801862e:	8a7b      	ldrh	r3, [r7, #18]
 8018630:	8053      	strh	r3, [r2, #2]
 8018632:	e002      	b.n	801863a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8018634:	697b      	ldr	r3, [r7, #20]
 8018636:	2201      	movs	r2, #1
 8018638:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801863a:	4b39      	ldr	r3, [pc, #228]	; (8018720 <mem_malloc+0x1e8>)
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	697a      	ldr	r2, [r7, #20]
 8018640:	429a      	cmp	r2, r3
 8018642:	d127      	bne.n	8018694 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8018644:	4b36      	ldr	r3, [pc, #216]	; (8018720 <mem_malloc+0x1e8>)
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801864a:	e005      	b.n	8018658 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801864c:	69bb      	ldr	r3, [r7, #24]
 801864e:	881b      	ldrh	r3, [r3, #0]
 8018650:	4618      	mov	r0, r3
 8018652:	f7ff fc83 	bl	8017f5c <ptr_to_mem>
 8018656:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8018658:	69bb      	ldr	r3, [r7, #24]
 801865a:	791b      	ldrb	r3, [r3, #4]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d004      	beq.n	801866a <mem_malloc+0x132>
 8018660:	4b33      	ldr	r3, [pc, #204]	; (8018730 <mem_malloc+0x1f8>)
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	69ba      	ldr	r2, [r7, #24]
 8018666:	429a      	cmp	r2, r3
 8018668:	d1f0      	bne.n	801864c <mem_malloc+0x114>
          }
          lfree = cur;
 801866a:	4a2d      	ldr	r2, [pc, #180]	; (8018720 <mem_malloc+0x1e8>)
 801866c:	69bb      	ldr	r3, [r7, #24]
 801866e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8018670:	4b2b      	ldr	r3, [pc, #172]	; (8018720 <mem_malloc+0x1e8>)
 8018672:	681a      	ldr	r2, [r3, #0]
 8018674:	4b2e      	ldr	r3, [pc, #184]	; (8018730 <mem_malloc+0x1f8>)
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	429a      	cmp	r2, r3
 801867a:	d00b      	beq.n	8018694 <mem_malloc+0x15c>
 801867c:	4b28      	ldr	r3, [pc, #160]	; (8018720 <mem_malloc+0x1e8>)
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	791b      	ldrb	r3, [r3, #4]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d006      	beq.n	8018694 <mem_malloc+0x15c>
 8018686:	4b27      	ldr	r3, [pc, #156]	; (8018724 <mem_malloc+0x1ec>)
 8018688:	f240 32b5 	movw	r2, #949	; 0x3b5
 801868c:	4929      	ldr	r1, [pc, #164]	; (8018734 <mem_malloc+0x1fc>)
 801868e:	4827      	ldr	r0, [pc, #156]	; (801872c <mem_malloc+0x1f4>)
 8018690:	f00b f8de 	bl	8023850 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8018694:	4821      	ldr	r0, [pc, #132]	; (801871c <mem_malloc+0x1e4>)
 8018696:	f00a fbb8 	bl	8022e0a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801869a:	8bba      	ldrh	r2, [r7, #28]
 801869c:	697b      	ldr	r3, [r7, #20]
 801869e:	4413      	add	r3, r2
 80186a0:	3308      	adds	r3, #8
 80186a2:	4a23      	ldr	r2, [pc, #140]	; (8018730 <mem_malloc+0x1f8>)
 80186a4:	6812      	ldr	r2, [r2, #0]
 80186a6:	4293      	cmp	r3, r2
 80186a8:	d906      	bls.n	80186b8 <mem_malloc+0x180>
 80186aa:	4b1e      	ldr	r3, [pc, #120]	; (8018724 <mem_malloc+0x1ec>)
 80186ac:	f240 32b9 	movw	r2, #953	; 0x3b9
 80186b0:	4921      	ldr	r1, [pc, #132]	; (8018738 <mem_malloc+0x200>)
 80186b2:	481e      	ldr	r0, [pc, #120]	; (801872c <mem_malloc+0x1f4>)
 80186b4:	f00b f8cc 	bl	8023850 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80186b8:	697b      	ldr	r3, [r7, #20]
 80186ba:	f003 0303 	and.w	r3, r3, #3
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d006      	beq.n	80186d0 <mem_malloc+0x198>
 80186c2:	4b18      	ldr	r3, [pc, #96]	; (8018724 <mem_malloc+0x1ec>)
 80186c4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80186c8:	491c      	ldr	r1, [pc, #112]	; (801873c <mem_malloc+0x204>)
 80186ca:	4818      	ldr	r0, [pc, #96]	; (801872c <mem_malloc+0x1f4>)
 80186cc:	f00b f8c0 	bl	8023850 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80186d0:	697b      	ldr	r3, [r7, #20]
 80186d2:	f003 0303 	and.w	r3, r3, #3
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d006      	beq.n	80186e8 <mem_malloc+0x1b0>
 80186da:	4b12      	ldr	r3, [pc, #72]	; (8018724 <mem_malloc+0x1ec>)
 80186dc:	f240 32bd 	movw	r2, #957	; 0x3bd
 80186e0:	4917      	ldr	r1, [pc, #92]	; (8018740 <mem_malloc+0x208>)
 80186e2:	4812      	ldr	r0, [pc, #72]	; (801872c <mem_malloc+0x1f4>)
 80186e4:	f00b f8b4 	bl	8023850 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80186e8:	697b      	ldr	r3, [r7, #20]
 80186ea:	3308      	adds	r3, #8
 80186ec:	e011      	b.n	8018712 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80186ee:	8bfb      	ldrh	r3, [r7, #30]
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7ff fc33 	bl	8017f5c <ptr_to_mem>
 80186f6:	4603      	mov	r3, r0
 80186f8:	881b      	ldrh	r3, [r3, #0]
 80186fa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80186fc:	8bfa      	ldrh	r2, [r7, #30]
 80186fe:	8bbb      	ldrh	r3, [r7, #28]
 8018700:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8018704:	429a      	cmp	r2, r3
 8018706:	f4ff af41 	bcc.w	801858c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801870a:	4804      	ldr	r0, [pc, #16]	; (801871c <mem_malloc+0x1e4>)
 801870c:	f00a fb7d 	bl	8022e0a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8018710:	2300      	movs	r3, #0
}
 8018712:	4618      	mov	r0, r3
 8018714:	3720      	adds	r7, #32
 8018716:	46bd      	mov	sp, r7
 8018718:	bd80      	pop	{r7, pc}
 801871a:	bf00      	nop
 801871c:	2000e238 	.word	0x2000e238
 8018720:	2000e23c 	.word	0x2000e23c
 8018724:	08025778 	.word	0x08025778
 8018728:	0802593c 	.word	0x0802593c
 801872c:	080257c0 	.word	0x080257c0
 8018730:	2000e234 	.word	0x2000e234
 8018734:	08025950 	.word	0x08025950
 8018738:	0802596c 	.word	0x0802596c
 801873c:	0802599c 	.word	0x0802599c
 8018740:	080259cc 	.word	0x080259cc

08018744 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8018744:	b480      	push	{r7}
 8018746:	b085      	sub	sp, #20
 8018748:	af00      	add	r7, sp, #0
 801874a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	689b      	ldr	r3, [r3, #8]
 8018750:	2200      	movs	r2, #0
 8018752:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	685b      	ldr	r3, [r3, #4]
 8018758:	3303      	adds	r3, #3
 801875a:	f023 0303 	bic.w	r3, r3, #3
 801875e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8018760:	2300      	movs	r3, #0
 8018762:	60fb      	str	r3, [r7, #12]
 8018764:	e011      	b.n	801878a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	689b      	ldr	r3, [r3, #8]
 801876a:	681a      	ldr	r2, [r3, #0]
 801876c:	68bb      	ldr	r3, [r7, #8]
 801876e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	689b      	ldr	r3, [r3, #8]
 8018774:	68ba      	ldr	r2, [r7, #8]
 8018776:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	881b      	ldrh	r3, [r3, #0]
 801877c:	461a      	mov	r2, r3
 801877e:	68bb      	ldr	r3, [r7, #8]
 8018780:	4413      	add	r3, r2
 8018782:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	3301      	adds	r3, #1
 8018788:	60fb      	str	r3, [r7, #12]
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	885b      	ldrh	r3, [r3, #2]
 801878e:	461a      	mov	r2, r3
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	4293      	cmp	r3, r2
 8018794:	dbe7      	blt.n	8018766 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8018796:	bf00      	nop
 8018798:	bf00      	nop
 801879a:	3714      	adds	r7, #20
 801879c:	46bd      	mov	sp, r7
 801879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187a2:	4770      	bx	lr

080187a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b082      	sub	sp, #8
 80187a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80187aa:	2300      	movs	r3, #0
 80187ac:	80fb      	strh	r3, [r7, #6]
 80187ae:	e009      	b.n	80187c4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80187b0:	88fb      	ldrh	r3, [r7, #6]
 80187b2:	4a08      	ldr	r2, [pc, #32]	; (80187d4 <memp_init+0x30>)
 80187b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80187b8:	4618      	mov	r0, r3
 80187ba:	f7ff ffc3 	bl	8018744 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80187be:	88fb      	ldrh	r3, [r7, #6]
 80187c0:	3301      	adds	r3, #1
 80187c2:	80fb      	strh	r3, [r7, #6]
 80187c4:	88fb      	ldrh	r3, [r7, #6]
 80187c6:	2b0c      	cmp	r3, #12
 80187c8:	d9f2      	bls.n	80187b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80187ca:	bf00      	nop
 80187cc:	bf00      	nop
 80187ce:	3708      	adds	r7, #8
 80187d0:	46bd      	mov	sp, r7
 80187d2:	bd80      	pop	{r7, pc}
 80187d4:	080281f8 	.word	0x080281f8

080187d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b084      	sub	sp, #16
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80187e0:	f00a fb46 	bl	8022e70 <sys_arch_protect>
 80187e4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	689b      	ldr	r3, [r3, #8]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80187ee:	68bb      	ldr	r3, [r7, #8]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d015      	beq.n	8018820 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	689b      	ldr	r3, [r3, #8]
 80187f8:	68ba      	ldr	r2, [r7, #8]
 80187fa:	6812      	ldr	r2, [r2, #0]
 80187fc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80187fe:	68bb      	ldr	r3, [r7, #8]
 8018800:	f003 0303 	and.w	r3, r3, #3
 8018804:	2b00      	cmp	r3, #0
 8018806:	d006      	beq.n	8018816 <do_memp_malloc_pool+0x3e>
 8018808:	4b09      	ldr	r3, [pc, #36]	; (8018830 <do_memp_malloc_pool+0x58>)
 801880a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801880e:	4909      	ldr	r1, [pc, #36]	; (8018834 <do_memp_malloc_pool+0x5c>)
 8018810:	4809      	ldr	r0, [pc, #36]	; (8018838 <do_memp_malloc_pool+0x60>)
 8018812:	f00b f81d 	bl	8023850 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8018816:	68f8      	ldr	r0, [r7, #12]
 8018818:	f00a fb38 	bl	8022e8c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801881c:	68bb      	ldr	r3, [r7, #8]
 801881e:	e003      	b.n	8018828 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8018820:	68f8      	ldr	r0, [r7, #12]
 8018822:	f00a fb33 	bl	8022e8c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8018826:	2300      	movs	r3, #0
}
 8018828:	4618      	mov	r0, r3
 801882a:	3710      	adds	r7, #16
 801882c:	46bd      	mov	sp, r7
 801882e:	bd80      	pop	{r7, pc}
 8018830:	080259f0 	.word	0x080259f0
 8018834:	08025a20 	.word	0x08025a20
 8018838:	08025a44 	.word	0x08025a44

0801883c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801883c:	b580      	push	{r7, lr}
 801883e:	b082      	sub	sp, #8
 8018840:	af00      	add	r7, sp, #0
 8018842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d106      	bne.n	8018858 <memp_malloc_pool+0x1c>
 801884a:	4b0a      	ldr	r3, [pc, #40]	; (8018874 <memp_malloc_pool+0x38>)
 801884c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8018850:	4909      	ldr	r1, [pc, #36]	; (8018878 <memp_malloc_pool+0x3c>)
 8018852:	480a      	ldr	r0, [pc, #40]	; (801887c <memp_malloc_pool+0x40>)
 8018854:	f00a fffc 	bl	8023850 <iprintf>
  if (desc == NULL) {
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d101      	bne.n	8018862 <memp_malloc_pool+0x26>
    return NULL;
 801885e:	2300      	movs	r3, #0
 8018860:	e003      	b.n	801886a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8018862:	6878      	ldr	r0, [r7, #4]
 8018864:	f7ff ffb8 	bl	80187d8 <do_memp_malloc_pool>
 8018868:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801886a:	4618      	mov	r0, r3
 801886c:	3708      	adds	r7, #8
 801886e:	46bd      	mov	sp, r7
 8018870:	bd80      	pop	{r7, pc}
 8018872:	bf00      	nop
 8018874:	080259f0 	.word	0x080259f0
 8018878:	08025a6c 	.word	0x08025a6c
 801887c:	08025a44 	.word	0x08025a44

08018880 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b084      	sub	sp, #16
 8018884:	af00      	add	r7, sp, #0
 8018886:	4603      	mov	r3, r0
 8018888:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801888a:	79fb      	ldrb	r3, [r7, #7]
 801888c:	2b0c      	cmp	r3, #12
 801888e:	d908      	bls.n	80188a2 <memp_malloc+0x22>
 8018890:	4b0a      	ldr	r3, [pc, #40]	; (80188bc <memp_malloc+0x3c>)
 8018892:	f240 1257 	movw	r2, #343	; 0x157
 8018896:	490a      	ldr	r1, [pc, #40]	; (80188c0 <memp_malloc+0x40>)
 8018898:	480a      	ldr	r0, [pc, #40]	; (80188c4 <memp_malloc+0x44>)
 801889a:	f00a ffd9 	bl	8023850 <iprintf>
 801889e:	2300      	movs	r3, #0
 80188a0:	e008      	b.n	80188b4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80188a2:	79fb      	ldrb	r3, [r7, #7]
 80188a4:	4a08      	ldr	r2, [pc, #32]	; (80188c8 <memp_malloc+0x48>)
 80188a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80188aa:	4618      	mov	r0, r3
 80188ac:	f7ff ff94 	bl	80187d8 <do_memp_malloc_pool>
 80188b0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80188b2:	68fb      	ldr	r3, [r7, #12]
}
 80188b4:	4618      	mov	r0, r3
 80188b6:	3710      	adds	r7, #16
 80188b8:	46bd      	mov	sp, r7
 80188ba:	bd80      	pop	{r7, pc}
 80188bc:	080259f0 	.word	0x080259f0
 80188c0:	08025a80 	.word	0x08025a80
 80188c4:	08025a44 	.word	0x08025a44
 80188c8:	080281f8 	.word	0x080281f8

080188cc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80188cc:	b580      	push	{r7, lr}
 80188ce:	b084      	sub	sp, #16
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
 80188d4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80188d6:	683b      	ldr	r3, [r7, #0]
 80188d8:	f003 0303 	and.w	r3, r3, #3
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d006      	beq.n	80188ee <do_memp_free_pool+0x22>
 80188e0:	4b0d      	ldr	r3, [pc, #52]	; (8018918 <do_memp_free_pool+0x4c>)
 80188e2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80188e6:	490d      	ldr	r1, [pc, #52]	; (801891c <do_memp_free_pool+0x50>)
 80188e8:	480d      	ldr	r0, [pc, #52]	; (8018920 <do_memp_free_pool+0x54>)
 80188ea:	f00a ffb1 	bl	8023850 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80188f2:	f00a fabd 	bl	8022e70 <sys_arch_protect>
 80188f6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	689b      	ldr	r3, [r3, #8]
 80188fc:	681a      	ldr	r2, [r3, #0]
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	689b      	ldr	r3, [r3, #8]
 8018906:	68fa      	ldr	r2, [r7, #12]
 8018908:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801890a:	68b8      	ldr	r0, [r7, #8]
 801890c:	f00a fabe 	bl	8022e8c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8018910:	bf00      	nop
 8018912:	3710      	adds	r7, #16
 8018914:	46bd      	mov	sp, r7
 8018916:	bd80      	pop	{r7, pc}
 8018918:	080259f0 	.word	0x080259f0
 801891c:	08025aa0 	.word	0x08025aa0
 8018920:	08025a44 	.word	0x08025a44

08018924 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b082      	sub	sp, #8
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
 801892c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d106      	bne.n	8018942 <memp_free_pool+0x1e>
 8018934:	4b0a      	ldr	r3, [pc, #40]	; (8018960 <memp_free_pool+0x3c>)
 8018936:	f240 1295 	movw	r2, #405	; 0x195
 801893a:	490a      	ldr	r1, [pc, #40]	; (8018964 <memp_free_pool+0x40>)
 801893c:	480a      	ldr	r0, [pc, #40]	; (8018968 <memp_free_pool+0x44>)
 801893e:	f00a ff87 	bl	8023850 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	2b00      	cmp	r3, #0
 8018946:	d007      	beq.n	8018958 <memp_free_pool+0x34>
 8018948:	683b      	ldr	r3, [r7, #0]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d004      	beq.n	8018958 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801894e:	6839      	ldr	r1, [r7, #0]
 8018950:	6878      	ldr	r0, [r7, #4]
 8018952:	f7ff ffbb 	bl	80188cc <do_memp_free_pool>
 8018956:	e000      	b.n	801895a <memp_free_pool+0x36>
    return;
 8018958:	bf00      	nop
}
 801895a:	3708      	adds	r7, #8
 801895c:	46bd      	mov	sp, r7
 801895e:	bd80      	pop	{r7, pc}
 8018960:	080259f0 	.word	0x080259f0
 8018964:	08025a6c 	.word	0x08025a6c
 8018968:	08025a44 	.word	0x08025a44

0801896c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b082      	sub	sp, #8
 8018970:	af00      	add	r7, sp, #0
 8018972:	4603      	mov	r3, r0
 8018974:	6039      	str	r1, [r7, #0]
 8018976:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8018978:	79fb      	ldrb	r3, [r7, #7]
 801897a:	2b0c      	cmp	r3, #12
 801897c:	d907      	bls.n	801898e <memp_free+0x22>
 801897e:	4b0c      	ldr	r3, [pc, #48]	; (80189b0 <memp_free+0x44>)
 8018980:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8018984:	490b      	ldr	r1, [pc, #44]	; (80189b4 <memp_free+0x48>)
 8018986:	480c      	ldr	r0, [pc, #48]	; (80189b8 <memp_free+0x4c>)
 8018988:	f00a ff62 	bl	8023850 <iprintf>
 801898c:	e00c      	b.n	80189a8 <memp_free+0x3c>

  if (mem == NULL) {
 801898e:	683b      	ldr	r3, [r7, #0]
 8018990:	2b00      	cmp	r3, #0
 8018992:	d008      	beq.n	80189a6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8018994:	79fb      	ldrb	r3, [r7, #7]
 8018996:	4a09      	ldr	r2, [pc, #36]	; (80189bc <memp_free+0x50>)
 8018998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801899c:	6839      	ldr	r1, [r7, #0]
 801899e:	4618      	mov	r0, r3
 80189a0:	f7ff ff94 	bl	80188cc <do_memp_free_pool>
 80189a4:	e000      	b.n	80189a8 <memp_free+0x3c>
    return;
 80189a6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80189a8:	3708      	adds	r7, #8
 80189aa:	46bd      	mov	sp, r7
 80189ac:	bd80      	pop	{r7, pc}
 80189ae:	bf00      	nop
 80189b0:	080259f0 	.word	0x080259f0
 80189b4:	08025ac0 	.word	0x08025ac0
 80189b8:	08025a44 	.word	0x08025a44
 80189bc:	080281f8 	.word	0x080281f8

080189c0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80189c0:	b480      	push	{r7}
 80189c2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80189c4:	bf00      	nop
 80189c6:	46bd      	mov	sp, r7
 80189c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189cc:	4770      	bx	lr
	...

080189d0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b086      	sub	sp, #24
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	60f8      	str	r0, [r7, #12]
 80189d8:	60b9      	str	r1, [r7, #8]
 80189da:	607a      	str	r2, [r7, #4]
 80189dc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d108      	bne.n	80189f6 <netif_add+0x26>
 80189e4:	4b57      	ldr	r3, [pc, #348]	; (8018b44 <netif_add+0x174>)
 80189e6:	f240 1227 	movw	r2, #295	; 0x127
 80189ea:	4957      	ldr	r1, [pc, #348]	; (8018b48 <netif_add+0x178>)
 80189ec:	4857      	ldr	r0, [pc, #348]	; (8018b4c <netif_add+0x17c>)
 80189ee:	f00a ff2f 	bl	8023850 <iprintf>
 80189f2:	2300      	movs	r3, #0
 80189f4:	e0a2      	b.n	8018b3c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80189f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d108      	bne.n	8018a0e <netif_add+0x3e>
 80189fc:	4b51      	ldr	r3, [pc, #324]	; (8018b44 <netif_add+0x174>)
 80189fe:	f44f 7294 	mov.w	r2, #296	; 0x128
 8018a02:	4953      	ldr	r1, [pc, #332]	; (8018b50 <netif_add+0x180>)
 8018a04:	4851      	ldr	r0, [pc, #324]	; (8018b4c <netif_add+0x17c>)
 8018a06:	f00a ff23 	bl	8023850 <iprintf>
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	e096      	b.n	8018b3c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8018a0e:	68bb      	ldr	r3, [r7, #8]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d101      	bne.n	8018a18 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8018a14:	4b4f      	ldr	r3, [pc, #316]	; (8018b54 <netif_add+0x184>)
 8018a16:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d101      	bne.n	8018a22 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8018a1e:	4b4d      	ldr	r3, [pc, #308]	; (8018b54 <netif_add+0x184>)
 8018a20:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8018a22:	683b      	ldr	r3, [r7, #0]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d101      	bne.n	8018a2c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8018a28:	4b4a      	ldr	r3, [pc, #296]	; (8018b54 <netif_add+0x184>)
 8018a2a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	2200      	movs	r2, #0
 8018a30:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	2200      	movs	r2, #0
 8018a36:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	4a45      	ldr	r2, [pc, #276]	; (8018b58 <netif_add+0x188>)
 8018a42:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	2200      	movs	r2, #0
 8018a48:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	2200      	movs	r2, #0
 8018a4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	2200      	movs	r2, #0
 8018a56:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	6a3a      	ldr	r2, [r7, #32]
 8018a5c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8018a5e:	4b3f      	ldr	r3, [pc, #252]	; (8018b5c <netif_add+0x18c>)
 8018a60:	781a      	ldrb	r2, [r3, #0]
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018a6c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8018a6e:	683b      	ldr	r3, [r7, #0]
 8018a70:	687a      	ldr	r2, [r7, #4]
 8018a72:	68b9      	ldr	r1, [r7, #8]
 8018a74:	68f8      	ldr	r0, [r7, #12]
 8018a76:	f000 f913 	bl	8018ca0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8018a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a7c:	68f8      	ldr	r0, [r7, #12]
 8018a7e:	4798      	blx	r3
 8018a80:	4603      	mov	r3, r0
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d001      	beq.n	8018a8a <netif_add+0xba>
    return NULL;
 8018a86:	2300      	movs	r3, #0
 8018a88:	e058      	b.n	8018b3c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018a90:	2bff      	cmp	r3, #255	; 0xff
 8018a92:	d103      	bne.n	8018a9c <netif_add+0xcc>
        netif->num = 0;
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	2200      	movs	r2, #0
 8018a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8018aa0:	4b2f      	ldr	r3, [pc, #188]	; (8018b60 <netif_add+0x190>)
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	617b      	str	r3, [r7, #20]
 8018aa6:	e02b      	b.n	8018b00 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8018aa8:	697a      	ldr	r2, [r7, #20]
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	429a      	cmp	r2, r3
 8018aae:	d106      	bne.n	8018abe <netif_add+0xee>
 8018ab0:	4b24      	ldr	r3, [pc, #144]	; (8018b44 <netif_add+0x174>)
 8018ab2:	f240 128b 	movw	r2, #395	; 0x18b
 8018ab6:	492b      	ldr	r1, [pc, #172]	; (8018b64 <netif_add+0x194>)
 8018ab8:	4824      	ldr	r0, [pc, #144]	; (8018b4c <netif_add+0x17c>)
 8018aba:	f00a fec9 	bl	8023850 <iprintf>
        num_netifs++;
 8018abe:	693b      	ldr	r3, [r7, #16]
 8018ac0:	3301      	adds	r3, #1
 8018ac2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8018ac4:	693b      	ldr	r3, [r7, #16]
 8018ac6:	2bff      	cmp	r3, #255	; 0xff
 8018ac8:	dd06      	ble.n	8018ad8 <netif_add+0x108>
 8018aca:	4b1e      	ldr	r3, [pc, #120]	; (8018b44 <netif_add+0x174>)
 8018acc:	f240 128d 	movw	r2, #397	; 0x18d
 8018ad0:	4925      	ldr	r1, [pc, #148]	; (8018b68 <netif_add+0x198>)
 8018ad2:	481e      	ldr	r0, [pc, #120]	; (8018b4c <netif_add+0x17c>)
 8018ad4:	f00a febc 	bl	8023850 <iprintf>
        if (netif2->num == netif->num) {
 8018ad8:	697b      	ldr	r3, [r7, #20]
 8018ada:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018ae4:	429a      	cmp	r2, r3
 8018ae6:	d108      	bne.n	8018afa <netif_add+0x12a>
          netif->num++;
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018aee:	3301      	adds	r3, #1
 8018af0:	b2da      	uxtb	r2, r3
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8018af8:	e005      	b.n	8018b06 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8018afa:	697b      	ldr	r3, [r7, #20]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	617b      	str	r3, [r7, #20]
 8018b00:	697b      	ldr	r3, [r7, #20]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d1d0      	bne.n	8018aa8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8018b06:	697b      	ldr	r3, [r7, #20]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d1be      	bne.n	8018a8a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018b12:	2bfe      	cmp	r3, #254	; 0xfe
 8018b14:	d103      	bne.n	8018b1e <netif_add+0x14e>
    netif_num = 0;
 8018b16:	4b11      	ldr	r3, [pc, #68]	; (8018b5c <netif_add+0x18c>)
 8018b18:	2200      	movs	r2, #0
 8018b1a:	701a      	strb	r2, [r3, #0]
 8018b1c:	e006      	b.n	8018b2c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018b24:	3301      	adds	r3, #1
 8018b26:	b2da      	uxtb	r2, r3
 8018b28:	4b0c      	ldr	r3, [pc, #48]	; (8018b5c <netif_add+0x18c>)
 8018b2a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8018b2c:	4b0c      	ldr	r3, [pc, #48]	; (8018b60 <netif_add+0x190>)
 8018b2e:	681a      	ldr	r2, [r3, #0]
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8018b34:	4a0a      	ldr	r2, [pc, #40]	; (8018b60 <netif_add+0x190>)
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8018b3a:	68fb      	ldr	r3, [r7, #12]
}
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	3718      	adds	r7, #24
 8018b40:	46bd      	mov	sp, r7
 8018b42:	bd80      	pop	{r7, pc}
 8018b44:	08025adc 	.word	0x08025adc
 8018b48:	08025b70 	.word	0x08025b70
 8018b4c:	08025b2c 	.word	0x08025b2c
 8018b50:	08025b8c 	.word	0x08025b8c
 8018b54:	0802826c 	.word	0x0802826c
 8018b58:	08018f7b 	.word	0x08018f7b
 8018b5c:	20011314 	.word	0x20011314
 8018b60:	2001130c 	.word	0x2001130c
 8018b64:	08025bb0 	.word	0x08025bb0
 8018b68:	08025bc4 	.word	0x08025bc4

08018b6c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018b6c:	b580      	push	{r7, lr}
 8018b6e:	b082      	sub	sp, #8
 8018b70:	af00      	add	r7, sp, #0
 8018b72:	6078      	str	r0, [r7, #4]
 8018b74:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8018b76:	6839      	ldr	r1, [r7, #0]
 8018b78:	6878      	ldr	r0, [r7, #4]
 8018b7a:	f002 fe05 	bl	801b788 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8018b7e:	6839      	ldr	r1, [r7, #0]
 8018b80:	6878      	ldr	r0, [r7, #4]
 8018b82:	f007 fce3 	bl	802054c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8018b86:	bf00      	nop
 8018b88:	3708      	adds	r7, #8
 8018b8a:	46bd      	mov	sp, r7
 8018b8c:	bd80      	pop	{r7, pc}
	...

08018b90 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b086      	sub	sp, #24
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	60f8      	str	r0, [r7, #12]
 8018b98:	60b9      	str	r1, [r7, #8]
 8018b9a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8018b9c:	68bb      	ldr	r3, [r7, #8]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d106      	bne.n	8018bb0 <netif_do_set_ipaddr+0x20>
 8018ba2:	4b1d      	ldr	r3, [pc, #116]	; (8018c18 <netif_do_set_ipaddr+0x88>)
 8018ba4:	f240 12cb 	movw	r2, #459	; 0x1cb
 8018ba8:	491c      	ldr	r1, [pc, #112]	; (8018c1c <netif_do_set_ipaddr+0x8c>)
 8018baa:	481d      	ldr	r0, [pc, #116]	; (8018c20 <netif_do_set_ipaddr+0x90>)
 8018bac:	f00a fe50 	bl	8023850 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d106      	bne.n	8018bc4 <netif_do_set_ipaddr+0x34>
 8018bb6:	4b18      	ldr	r3, [pc, #96]	; (8018c18 <netif_do_set_ipaddr+0x88>)
 8018bb8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8018bbc:	4917      	ldr	r1, [pc, #92]	; (8018c1c <netif_do_set_ipaddr+0x8c>)
 8018bbe:	4818      	ldr	r0, [pc, #96]	; (8018c20 <netif_do_set_ipaddr+0x90>)
 8018bc0:	f00a fe46 	bl	8023850 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8018bc4:	68bb      	ldr	r3, [r7, #8]
 8018bc6:	681a      	ldr	r2, [r3, #0]
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	3304      	adds	r3, #4
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	429a      	cmp	r2, r3
 8018bd0:	d01c      	beq.n	8018c0c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8018bd2:	68bb      	ldr	r3, [r7, #8]
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	3304      	adds	r3, #4
 8018bdc:	681a      	ldr	r2, [r3, #0]
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8018be2:	f107 0314 	add.w	r3, r7, #20
 8018be6:	4619      	mov	r1, r3
 8018be8:	6878      	ldr	r0, [r7, #4]
 8018bea:	f7ff ffbf 	bl	8018b6c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8018bee:	68bb      	ldr	r3, [r7, #8]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d002      	beq.n	8018bfa <netif_do_set_ipaddr+0x6a>
 8018bf4:	68bb      	ldr	r3, [r7, #8]
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	e000      	b.n	8018bfc <netif_do_set_ipaddr+0x6c>
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	68fa      	ldr	r2, [r7, #12]
 8018bfe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8018c00:	2101      	movs	r1, #1
 8018c02:	68f8      	ldr	r0, [r7, #12]
 8018c04:	f000 f8d2 	bl	8018dac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8018c08:	2301      	movs	r3, #1
 8018c0a:	e000      	b.n	8018c0e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8018c0c:	2300      	movs	r3, #0
}
 8018c0e:	4618      	mov	r0, r3
 8018c10:	3718      	adds	r7, #24
 8018c12:	46bd      	mov	sp, r7
 8018c14:	bd80      	pop	{r7, pc}
 8018c16:	bf00      	nop
 8018c18:	08025adc 	.word	0x08025adc
 8018c1c:	08025bf4 	.word	0x08025bf4
 8018c20:	08025b2c 	.word	0x08025b2c

08018c24 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8018c24:	b480      	push	{r7}
 8018c26:	b085      	sub	sp, #20
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	60f8      	str	r0, [r7, #12]
 8018c2c:	60b9      	str	r1, [r7, #8]
 8018c2e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8018c30:	68bb      	ldr	r3, [r7, #8]
 8018c32:	681a      	ldr	r2, [r3, #0]
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	3308      	adds	r3, #8
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	429a      	cmp	r2, r3
 8018c3c:	d00a      	beq.n	8018c54 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8018c3e:	68bb      	ldr	r3, [r7, #8]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d002      	beq.n	8018c4a <netif_do_set_netmask+0x26>
 8018c44:	68bb      	ldr	r3, [r7, #8]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	e000      	b.n	8018c4c <netif_do_set_netmask+0x28>
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	68fa      	ldr	r2, [r7, #12]
 8018c4e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8018c50:	2301      	movs	r3, #1
 8018c52:	e000      	b.n	8018c56 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8018c54:	2300      	movs	r3, #0
}
 8018c56:	4618      	mov	r0, r3
 8018c58:	3714      	adds	r7, #20
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c60:	4770      	bx	lr

08018c62 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8018c62:	b480      	push	{r7}
 8018c64:	b085      	sub	sp, #20
 8018c66:	af00      	add	r7, sp, #0
 8018c68:	60f8      	str	r0, [r7, #12]
 8018c6a:	60b9      	str	r1, [r7, #8]
 8018c6c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8018c6e:	68bb      	ldr	r3, [r7, #8]
 8018c70:	681a      	ldr	r2, [r3, #0]
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	330c      	adds	r3, #12
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	429a      	cmp	r2, r3
 8018c7a:	d00a      	beq.n	8018c92 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8018c7c:	68bb      	ldr	r3, [r7, #8]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d002      	beq.n	8018c88 <netif_do_set_gw+0x26>
 8018c82:	68bb      	ldr	r3, [r7, #8]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	e000      	b.n	8018c8a <netif_do_set_gw+0x28>
 8018c88:	2300      	movs	r3, #0
 8018c8a:	68fa      	ldr	r2, [r7, #12]
 8018c8c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8018c8e:	2301      	movs	r3, #1
 8018c90:	e000      	b.n	8018c94 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8018c92:	2300      	movs	r3, #0
}
 8018c94:	4618      	mov	r0, r3
 8018c96:	3714      	adds	r7, #20
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9e:	4770      	bx	lr

08018ca0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b088      	sub	sp, #32
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	60f8      	str	r0, [r7, #12]
 8018ca8:	60b9      	str	r1, [r7, #8]
 8018caa:	607a      	str	r2, [r7, #4]
 8018cac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8018cae:	2300      	movs	r3, #0
 8018cb0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018cb6:	68bb      	ldr	r3, [r7, #8]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d101      	bne.n	8018cc0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8018cbc:	4b1c      	ldr	r3, [pc, #112]	; (8018d30 <netif_set_addr+0x90>)
 8018cbe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d101      	bne.n	8018cca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8018cc6:	4b1a      	ldr	r3, [pc, #104]	; (8018d30 <netif_set_addr+0x90>)
 8018cc8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d101      	bne.n	8018cd4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8018cd0:	4b17      	ldr	r3, [pc, #92]	; (8018d30 <netif_set_addr+0x90>)
 8018cd2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8018cd4:	68bb      	ldr	r3, [r7, #8]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d003      	beq.n	8018ce2 <netif_set_addr+0x42>
 8018cda:	68bb      	ldr	r3, [r7, #8]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d101      	bne.n	8018ce6 <netif_set_addr+0x46>
 8018ce2:	2301      	movs	r3, #1
 8018ce4:	e000      	b.n	8018ce8 <netif_set_addr+0x48>
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8018cea:	697b      	ldr	r3, [r7, #20]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d006      	beq.n	8018cfe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018cf0:	f107 0310 	add.w	r3, r7, #16
 8018cf4:	461a      	mov	r2, r3
 8018cf6:	68b9      	ldr	r1, [r7, #8]
 8018cf8:	68f8      	ldr	r0, [r7, #12]
 8018cfa:	f7ff ff49 	bl	8018b90 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8018cfe:	69fa      	ldr	r2, [r7, #28]
 8018d00:	6879      	ldr	r1, [r7, #4]
 8018d02:	68f8      	ldr	r0, [r7, #12]
 8018d04:	f7ff ff8e 	bl	8018c24 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8018d08:	69ba      	ldr	r2, [r7, #24]
 8018d0a:	6839      	ldr	r1, [r7, #0]
 8018d0c:	68f8      	ldr	r0, [r7, #12]
 8018d0e:	f7ff ffa8 	bl	8018c62 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8018d12:	697b      	ldr	r3, [r7, #20]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d106      	bne.n	8018d26 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018d18:	f107 0310 	add.w	r3, r7, #16
 8018d1c:	461a      	mov	r2, r3
 8018d1e:	68b9      	ldr	r1, [r7, #8]
 8018d20:	68f8      	ldr	r0, [r7, #12]
 8018d22:	f7ff ff35 	bl	8018b90 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8018d26:	bf00      	nop
 8018d28:	3720      	adds	r7, #32
 8018d2a:	46bd      	mov	sp, r7
 8018d2c:	bd80      	pop	{r7, pc}
 8018d2e:	bf00      	nop
 8018d30:	0802826c 	.word	0x0802826c

08018d34 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8018d34:	b480      	push	{r7}
 8018d36:	b083      	sub	sp, #12
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8018d3c:	4a04      	ldr	r2, [pc, #16]	; (8018d50 <netif_set_default+0x1c>)
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8018d42:	bf00      	nop
 8018d44:	370c      	adds	r7, #12
 8018d46:	46bd      	mov	sp, r7
 8018d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4c:	4770      	bx	lr
 8018d4e:	bf00      	nop
 8018d50:	20011310 	.word	0x20011310

08018d54 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b082      	sub	sp, #8
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d107      	bne.n	8018d72 <netif_set_up+0x1e>
 8018d62:	4b0f      	ldr	r3, [pc, #60]	; (8018da0 <netif_set_up+0x4c>)
 8018d64:	f44f 7254 	mov.w	r2, #848	; 0x350
 8018d68:	490e      	ldr	r1, [pc, #56]	; (8018da4 <netif_set_up+0x50>)
 8018d6a:	480f      	ldr	r0, [pc, #60]	; (8018da8 <netif_set_up+0x54>)
 8018d6c:	f00a fd70 	bl	8023850 <iprintf>
 8018d70:	e013      	b.n	8018d9a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018d78:	f003 0301 	and.w	r3, r3, #1
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d10c      	bne.n	8018d9a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018d86:	f043 0301 	orr.w	r3, r3, #1
 8018d8a:	b2da      	uxtb	r2, r3
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8018d92:	2103      	movs	r1, #3
 8018d94:	6878      	ldr	r0, [r7, #4]
 8018d96:	f000 f809 	bl	8018dac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8018d9a:	3708      	adds	r7, #8
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}
 8018da0:	08025adc 	.word	0x08025adc
 8018da4:	08025c64 	.word	0x08025c64
 8018da8:	08025b2c 	.word	0x08025b2c

08018dac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b082      	sub	sp, #8
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
 8018db4:	460b      	mov	r3, r1
 8018db6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d106      	bne.n	8018dcc <netif_issue_reports+0x20>
 8018dbe:	4b18      	ldr	r3, [pc, #96]	; (8018e20 <netif_issue_reports+0x74>)
 8018dc0:	f240 326d 	movw	r2, #877	; 0x36d
 8018dc4:	4917      	ldr	r1, [pc, #92]	; (8018e24 <netif_issue_reports+0x78>)
 8018dc6:	4818      	ldr	r0, [pc, #96]	; (8018e28 <netif_issue_reports+0x7c>)
 8018dc8:	f00a fd42 	bl	8023850 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018dd2:	f003 0304 	and.w	r3, r3, #4
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d01e      	beq.n	8018e18 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018de0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d017      	beq.n	8018e18 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018de8:	78fb      	ldrb	r3, [r7, #3]
 8018dea:	f003 0301 	and.w	r3, r3, #1
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d013      	beq.n	8018e1a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	3304      	adds	r3, #4
 8018df6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d00e      	beq.n	8018e1a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018e02:	f003 0308 	and.w	r3, r3, #8
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d007      	beq.n	8018e1a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	3304      	adds	r3, #4
 8018e0e:	4619      	mov	r1, r3
 8018e10:	6878      	ldr	r0, [r7, #4]
 8018e12:	f008 fb05 	bl	8021420 <etharp_request>
 8018e16:	e000      	b.n	8018e1a <netif_issue_reports+0x6e>
    return;
 8018e18:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8018e1a:	3708      	adds	r7, #8
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	bd80      	pop	{r7, pc}
 8018e20:	08025adc 	.word	0x08025adc
 8018e24:	08025c80 	.word	0x08025c80
 8018e28:	08025b2c 	.word	0x08025b2c

08018e2c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b082      	sub	sp, #8
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d107      	bne.n	8018e4a <netif_set_down+0x1e>
 8018e3a:	4b12      	ldr	r3, [pc, #72]	; (8018e84 <netif_set_down+0x58>)
 8018e3c:	f240 329b 	movw	r2, #923	; 0x39b
 8018e40:	4911      	ldr	r1, [pc, #68]	; (8018e88 <netif_set_down+0x5c>)
 8018e42:	4812      	ldr	r0, [pc, #72]	; (8018e8c <netif_set_down+0x60>)
 8018e44:	f00a fd04 	bl	8023850 <iprintf>
 8018e48:	e019      	b.n	8018e7e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018e50:	f003 0301 	and.w	r3, r3, #1
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d012      	beq.n	8018e7e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018e5e:	f023 0301 	bic.w	r3, r3, #1
 8018e62:	b2da      	uxtb	r2, r3
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018e70:	f003 0308 	and.w	r3, r3, #8
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d002      	beq.n	8018e7e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8018e78:	6878      	ldr	r0, [r7, #4]
 8018e7a:	f007 fe8f 	bl	8020b9c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8018e7e:	3708      	adds	r7, #8
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bd80      	pop	{r7, pc}
 8018e84:	08025adc 	.word	0x08025adc
 8018e88:	08025ca4 	.word	0x08025ca4
 8018e8c:	08025b2c 	.word	0x08025b2c

08018e90 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b082      	sub	sp, #8
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d107      	bne.n	8018eae <netif_set_link_up+0x1e>
 8018e9e:	4b13      	ldr	r3, [pc, #76]	; (8018eec <netif_set_link_up+0x5c>)
 8018ea0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8018ea4:	4912      	ldr	r1, [pc, #72]	; (8018ef0 <netif_set_link_up+0x60>)
 8018ea6:	4813      	ldr	r0, [pc, #76]	; (8018ef4 <netif_set_link_up+0x64>)
 8018ea8:	f00a fcd2 	bl	8023850 <iprintf>
 8018eac:	e01b      	b.n	8018ee6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018eb4:	f003 0304 	and.w	r3, r3, #4
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d114      	bne.n	8018ee6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018ec2:	f043 0304 	orr.w	r3, r3, #4
 8018ec6:	b2da      	uxtb	r2, r3
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8018ece:	2103      	movs	r1, #3
 8018ed0:	6878      	ldr	r0, [r7, #4]
 8018ed2:	f7ff ff6b 	bl	8018dac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	69db      	ldr	r3, [r3, #28]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d003      	beq.n	8018ee6 <netif_set_link_up+0x56>
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	69db      	ldr	r3, [r3, #28]
 8018ee2:	6878      	ldr	r0, [r7, #4]
 8018ee4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8018ee6:	3708      	adds	r7, #8
 8018ee8:	46bd      	mov	sp, r7
 8018eea:	bd80      	pop	{r7, pc}
 8018eec:	08025adc 	.word	0x08025adc
 8018ef0:	08025cc4 	.word	0x08025cc4
 8018ef4:	08025b2c 	.word	0x08025b2c

08018ef8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8018ef8:	b580      	push	{r7, lr}
 8018efa:	b082      	sub	sp, #8
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d107      	bne.n	8018f16 <netif_set_link_down+0x1e>
 8018f06:	4b11      	ldr	r3, [pc, #68]	; (8018f4c <netif_set_link_down+0x54>)
 8018f08:	f240 4206 	movw	r2, #1030	; 0x406
 8018f0c:	4910      	ldr	r1, [pc, #64]	; (8018f50 <netif_set_link_down+0x58>)
 8018f0e:	4811      	ldr	r0, [pc, #68]	; (8018f54 <netif_set_link_down+0x5c>)
 8018f10:	f00a fc9e 	bl	8023850 <iprintf>
 8018f14:	e017      	b.n	8018f46 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018f1c:	f003 0304 	and.w	r3, r3, #4
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d010      	beq.n	8018f46 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018f2a:	f023 0304 	bic.w	r3, r3, #4
 8018f2e:	b2da      	uxtb	r2, r3
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	69db      	ldr	r3, [r3, #28]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d003      	beq.n	8018f46 <netif_set_link_down+0x4e>
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	69db      	ldr	r3, [r3, #28]
 8018f42:	6878      	ldr	r0, [r7, #4]
 8018f44:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8018f46:	3708      	adds	r7, #8
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bd80      	pop	{r7, pc}
 8018f4c:	08025adc 	.word	0x08025adc
 8018f50:	08025ce8 	.word	0x08025ce8
 8018f54:	08025b2c 	.word	0x08025b2c

08018f58 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8018f58:	b480      	push	{r7}
 8018f5a:	b083      	sub	sp, #12
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	6078      	str	r0, [r7, #4]
 8018f60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d002      	beq.n	8018f6e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	683a      	ldr	r2, [r7, #0]
 8018f6c:	61da      	str	r2, [r3, #28]
  }
}
 8018f6e:	bf00      	nop
 8018f70:	370c      	adds	r7, #12
 8018f72:	46bd      	mov	sp, r7
 8018f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f78:	4770      	bx	lr

08018f7a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8018f7a:	b480      	push	{r7}
 8018f7c:	b085      	sub	sp, #20
 8018f7e:	af00      	add	r7, sp, #0
 8018f80:	60f8      	str	r0, [r7, #12]
 8018f82:	60b9      	str	r1, [r7, #8]
 8018f84:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8018f86:	f06f 030b 	mvn.w	r3, #11
}
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	3714      	adds	r7, #20
 8018f8e:	46bd      	mov	sp, r7
 8018f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f94:	4770      	bx	lr
	...

08018f98 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8018f98:	b480      	push	{r7}
 8018f9a:	b085      	sub	sp, #20
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8018fa2:	79fb      	ldrb	r3, [r7, #7]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d013      	beq.n	8018fd0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8018fa8:	4b0d      	ldr	r3, [pc, #52]	; (8018fe0 <netif_get_by_index+0x48>)
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	60fb      	str	r3, [r7, #12]
 8018fae:	e00c      	b.n	8018fca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018fb6:	3301      	adds	r3, #1
 8018fb8:	b2db      	uxtb	r3, r3
 8018fba:	79fa      	ldrb	r2, [r7, #7]
 8018fbc:	429a      	cmp	r2, r3
 8018fbe:	d101      	bne.n	8018fc4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	e006      	b.n	8018fd2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	60fb      	str	r3, [r7, #12]
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d1ef      	bne.n	8018fb0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8018fd0:	2300      	movs	r3, #0
}
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	3714      	adds	r7, #20
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fdc:	4770      	bx	lr
 8018fde:	bf00      	nop
 8018fe0:	2001130c 	.word	0x2001130c

08018fe4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b082      	sub	sp, #8
 8018fe8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8018fea:	f009 ff41 	bl	8022e70 <sys_arch_protect>
 8018fee:	6038      	str	r0, [r7, #0]
 8018ff0:	4b0d      	ldr	r3, [pc, #52]	; (8019028 <pbuf_free_ooseq+0x44>)
 8018ff2:	2200      	movs	r2, #0
 8018ff4:	701a      	strb	r2, [r3, #0]
 8018ff6:	6838      	ldr	r0, [r7, #0]
 8018ff8:	f009 ff48 	bl	8022e8c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018ffc:	4b0b      	ldr	r3, [pc, #44]	; (801902c <pbuf_free_ooseq+0x48>)
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	607b      	str	r3, [r7, #4]
 8019002:	e00a      	b.n	801901a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019008:	2b00      	cmp	r3, #0
 801900a:	d003      	beq.n	8019014 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801900c:	6878      	ldr	r0, [r7, #4]
 801900e:	f002 fbf9 	bl	801b804 <tcp_free_ooseq>
      return;
 8019012:	e005      	b.n	8019020 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	68db      	ldr	r3, [r3, #12]
 8019018:	607b      	str	r3, [r7, #4]
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d1f1      	bne.n	8019004 <pbuf_free_ooseq+0x20>
    }
  }
}
 8019020:	3708      	adds	r7, #8
 8019022:	46bd      	mov	sp, r7
 8019024:	bd80      	pop	{r7, pc}
 8019026:	bf00      	nop
 8019028:	20011315 	.word	0x20011315
 801902c:	20011324 	.word	0x20011324

08019030 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b082      	sub	sp, #8
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8019038:	f7ff ffd4 	bl	8018fe4 <pbuf_free_ooseq>
}
 801903c:	bf00      	nop
 801903e:	3708      	adds	r7, #8
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}

08019044 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8019044:	b580      	push	{r7, lr}
 8019046:	b082      	sub	sp, #8
 8019048:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801904a:	f009 ff11 	bl	8022e70 <sys_arch_protect>
 801904e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8019050:	4b0f      	ldr	r3, [pc, #60]	; (8019090 <pbuf_pool_is_empty+0x4c>)
 8019052:	781b      	ldrb	r3, [r3, #0]
 8019054:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8019056:	4b0e      	ldr	r3, [pc, #56]	; (8019090 <pbuf_pool_is_empty+0x4c>)
 8019058:	2201      	movs	r2, #1
 801905a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801905c:	6878      	ldr	r0, [r7, #4]
 801905e:	f009 ff15 	bl	8022e8c <sys_arch_unprotect>

  if (!queued) {
 8019062:	78fb      	ldrb	r3, [r7, #3]
 8019064:	2b00      	cmp	r3, #0
 8019066:	d10f      	bne.n	8019088 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8019068:	2100      	movs	r1, #0
 801906a:	480a      	ldr	r0, [pc, #40]	; (8019094 <pbuf_pool_is_empty+0x50>)
 801906c:	f7fe fe90 	bl	8017d90 <tcpip_try_callback>
 8019070:	4603      	mov	r3, r0
 8019072:	2b00      	cmp	r3, #0
 8019074:	d008      	beq.n	8019088 <pbuf_pool_is_empty+0x44>
 8019076:	f009 fefb 	bl	8022e70 <sys_arch_protect>
 801907a:	6078      	str	r0, [r7, #4]
 801907c:	4b04      	ldr	r3, [pc, #16]	; (8019090 <pbuf_pool_is_empty+0x4c>)
 801907e:	2200      	movs	r2, #0
 8019080:	701a      	strb	r2, [r3, #0]
 8019082:	6878      	ldr	r0, [r7, #4]
 8019084:	f009 ff02 	bl	8022e8c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8019088:	bf00      	nop
 801908a:	3708      	adds	r7, #8
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}
 8019090:	20011315 	.word	0x20011315
 8019094:	08019031 	.word	0x08019031

08019098 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8019098:	b480      	push	{r7}
 801909a:	b085      	sub	sp, #20
 801909c:	af00      	add	r7, sp, #0
 801909e:	60f8      	str	r0, [r7, #12]
 80190a0:	60b9      	str	r1, [r7, #8]
 80190a2:	4611      	mov	r1, r2
 80190a4:	461a      	mov	r2, r3
 80190a6:	460b      	mov	r3, r1
 80190a8:	80fb      	strh	r3, [r7, #6]
 80190aa:	4613      	mov	r3, r2
 80190ac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	2200      	movs	r2, #0
 80190b2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	68ba      	ldr	r2, [r7, #8]
 80190b8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	88fa      	ldrh	r2, [r7, #6]
 80190be:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	88ba      	ldrh	r2, [r7, #4]
 80190c4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80190c6:	8b3b      	ldrh	r3, [r7, #24]
 80190c8:	b2da      	uxtb	r2, r3
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	7f3a      	ldrb	r2, [r7, #28]
 80190d2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	2201      	movs	r2, #1
 80190d8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	2200      	movs	r2, #0
 80190de:	73da      	strb	r2, [r3, #15]
}
 80190e0:	bf00      	nop
 80190e2:	3714      	adds	r7, #20
 80190e4:	46bd      	mov	sp, r7
 80190e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ea:	4770      	bx	lr

080190ec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b08c      	sub	sp, #48	; 0x30
 80190f0:	af02      	add	r7, sp, #8
 80190f2:	4603      	mov	r3, r0
 80190f4:	71fb      	strb	r3, [r7, #7]
 80190f6:	460b      	mov	r3, r1
 80190f8:	80bb      	strh	r3, [r7, #4]
 80190fa:	4613      	mov	r3, r2
 80190fc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80190fe:	79fb      	ldrb	r3, [r7, #7]
 8019100:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8019102:	887b      	ldrh	r3, [r7, #2]
 8019104:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8019108:	d07f      	beq.n	801920a <pbuf_alloc+0x11e>
 801910a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801910e:	f300 80c8 	bgt.w	80192a2 <pbuf_alloc+0x1b6>
 8019112:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8019116:	d010      	beq.n	801913a <pbuf_alloc+0x4e>
 8019118:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801911c:	f300 80c1 	bgt.w	80192a2 <pbuf_alloc+0x1b6>
 8019120:	2b01      	cmp	r3, #1
 8019122:	d002      	beq.n	801912a <pbuf_alloc+0x3e>
 8019124:	2b41      	cmp	r3, #65	; 0x41
 8019126:	f040 80bc 	bne.w	80192a2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801912a:	887a      	ldrh	r2, [r7, #2]
 801912c:	88bb      	ldrh	r3, [r7, #4]
 801912e:	4619      	mov	r1, r3
 8019130:	2000      	movs	r0, #0
 8019132:	f000 f8d1 	bl	80192d8 <pbuf_alloc_reference>
 8019136:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8019138:	e0bd      	b.n	80192b6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801913a:	2300      	movs	r3, #0
 801913c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801913e:	2300      	movs	r3, #0
 8019140:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8019142:	88bb      	ldrh	r3, [r7, #4]
 8019144:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8019146:	200c      	movs	r0, #12
 8019148:	f7ff fb9a 	bl	8018880 <memp_malloc>
 801914c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801914e:	693b      	ldr	r3, [r7, #16]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d109      	bne.n	8019168 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8019154:	f7ff ff76 	bl	8019044 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8019158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801915a:	2b00      	cmp	r3, #0
 801915c:	d002      	beq.n	8019164 <pbuf_alloc+0x78>
            pbuf_free(p);
 801915e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019160:	f000 faa8 	bl	80196b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8019164:	2300      	movs	r3, #0
 8019166:	e0a7      	b.n	80192b8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019168:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801916a:	3303      	adds	r3, #3
 801916c:	b29b      	uxth	r3, r3
 801916e:	f023 0303 	bic.w	r3, r3, #3
 8019172:	b29b      	uxth	r3, r3
 8019174:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8019178:	b29b      	uxth	r3, r3
 801917a:	8b7a      	ldrh	r2, [r7, #26]
 801917c:	4293      	cmp	r3, r2
 801917e:	bf28      	it	cs
 8019180:	4613      	movcs	r3, r2
 8019182:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019186:	3310      	adds	r3, #16
 8019188:	693a      	ldr	r2, [r7, #16]
 801918a:	4413      	add	r3, r2
 801918c:	3303      	adds	r3, #3
 801918e:	f023 0303 	bic.w	r3, r3, #3
 8019192:	4618      	mov	r0, r3
 8019194:	89f9      	ldrh	r1, [r7, #14]
 8019196:	8b7a      	ldrh	r2, [r7, #26]
 8019198:	2300      	movs	r3, #0
 801919a:	9301      	str	r3, [sp, #4]
 801919c:	887b      	ldrh	r3, [r7, #2]
 801919e:	9300      	str	r3, [sp, #0]
 80191a0:	460b      	mov	r3, r1
 80191a2:	4601      	mov	r1, r0
 80191a4:	6938      	ldr	r0, [r7, #16]
 80191a6:	f7ff ff77 	bl	8019098 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80191aa:	693b      	ldr	r3, [r7, #16]
 80191ac:	685b      	ldr	r3, [r3, #4]
 80191ae:	f003 0303 	and.w	r3, r3, #3
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d006      	beq.n	80191c4 <pbuf_alloc+0xd8>
 80191b6:	4b42      	ldr	r3, [pc, #264]	; (80192c0 <pbuf_alloc+0x1d4>)
 80191b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80191bc:	4941      	ldr	r1, [pc, #260]	; (80192c4 <pbuf_alloc+0x1d8>)
 80191be:	4842      	ldr	r0, [pc, #264]	; (80192c8 <pbuf_alloc+0x1dc>)
 80191c0:	f00a fb46 	bl	8023850 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80191c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191c6:	3303      	adds	r3, #3
 80191c8:	f023 0303 	bic.w	r3, r3, #3
 80191cc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80191d0:	d106      	bne.n	80191e0 <pbuf_alloc+0xf4>
 80191d2:	4b3b      	ldr	r3, [pc, #236]	; (80192c0 <pbuf_alloc+0x1d4>)
 80191d4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80191d8:	493c      	ldr	r1, [pc, #240]	; (80192cc <pbuf_alloc+0x1e0>)
 80191da:	483b      	ldr	r0, [pc, #236]	; (80192c8 <pbuf_alloc+0x1dc>)
 80191dc:	f00a fb38 	bl	8023850 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80191e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d102      	bne.n	80191ec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80191e6:	693b      	ldr	r3, [r7, #16]
 80191e8:	627b      	str	r3, [r7, #36]	; 0x24
 80191ea:	e002      	b.n	80191f2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80191ec:	69fb      	ldr	r3, [r7, #28]
 80191ee:	693a      	ldr	r2, [r7, #16]
 80191f0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80191f2:	693b      	ldr	r3, [r7, #16]
 80191f4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80191f6:	8b7a      	ldrh	r2, [r7, #26]
 80191f8:	89fb      	ldrh	r3, [r7, #14]
 80191fa:	1ad3      	subs	r3, r2, r3
 80191fc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80191fe:	2300      	movs	r3, #0
 8019200:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8019202:	8b7b      	ldrh	r3, [r7, #26]
 8019204:	2b00      	cmp	r3, #0
 8019206:	d19e      	bne.n	8019146 <pbuf_alloc+0x5a>
      break;
 8019208:	e055      	b.n	80192b6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801920a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801920c:	3303      	adds	r3, #3
 801920e:	b29b      	uxth	r3, r3
 8019210:	f023 0303 	bic.w	r3, r3, #3
 8019214:	b29a      	uxth	r2, r3
 8019216:	88bb      	ldrh	r3, [r7, #4]
 8019218:	3303      	adds	r3, #3
 801921a:	b29b      	uxth	r3, r3
 801921c:	f023 0303 	bic.w	r3, r3, #3
 8019220:	b29b      	uxth	r3, r3
 8019222:	4413      	add	r3, r2
 8019224:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8019226:	8b3b      	ldrh	r3, [r7, #24]
 8019228:	3310      	adds	r3, #16
 801922a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801922c:	8b3a      	ldrh	r2, [r7, #24]
 801922e:	88bb      	ldrh	r3, [r7, #4]
 8019230:	3303      	adds	r3, #3
 8019232:	f023 0303 	bic.w	r3, r3, #3
 8019236:	429a      	cmp	r2, r3
 8019238:	d306      	bcc.n	8019248 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801923a:	8afa      	ldrh	r2, [r7, #22]
 801923c:	88bb      	ldrh	r3, [r7, #4]
 801923e:	3303      	adds	r3, #3
 8019240:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019244:	429a      	cmp	r2, r3
 8019246:	d201      	bcs.n	801924c <pbuf_alloc+0x160>
        return NULL;
 8019248:	2300      	movs	r3, #0
 801924a:	e035      	b.n	80192b8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801924c:	8afb      	ldrh	r3, [r7, #22]
 801924e:	4618      	mov	r0, r3
 8019250:	f7ff f972 	bl	8018538 <mem_malloc>
 8019254:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8019256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019258:	2b00      	cmp	r3, #0
 801925a:	d101      	bne.n	8019260 <pbuf_alloc+0x174>
        return NULL;
 801925c:	2300      	movs	r3, #0
 801925e:	e02b      	b.n	80192b8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019262:	3310      	adds	r3, #16
 8019264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019266:	4413      	add	r3, r2
 8019268:	3303      	adds	r3, #3
 801926a:	f023 0303 	bic.w	r3, r3, #3
 801926e:	4618      	mov	r0, r3
 8019270:	88b9      	ldrh	r1, [r7, #4]
 8019272:	88ba      	ldrh	r2, [r7, #4]
 8019274:	2300      	movs	r3, #0
 8019276:	9301      	str	r3, [sp, #4]
 8019278:	887b      	ldrh	r3, [r7, #2]
 801927a:	9300      	str	r3, [sp, #0]
 801927c:	460b      	mov	r3, r1
 801927e:	4601      	mov	r1, r0
 8019280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019282:	f7ff ff09 	bl	8019098 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8019286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019288:	685b      	ldr	r3, [r3, #4]
 801928a:	f003 0303 	and.w	r3, r3, #3
 801928e:	2b00      	cmp	r3, #0
 8019290:	d010      	beq.n	80192b4 <pbuf_alloc+0x1c8>
 8019292:	4b0b      	ldr	r3, [pc, #44]	; (80192c0 <pbuf_alloc+0x1d4>)
 8019294:	f44f 7291 	mov.w	r2, #290	; 0x122
 8019298:	490d      	ldr	r1, [pc, #52]	; (80192d0 <pbuf_alloc+0x1e4>)
 801929a:	480b      	ldr	r0, [pc, #44]	; (80192c8 <pbuf_alloc+0x1dc>)
 801929c:	f00a fad8 	bl	8023850 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80192a0:	e008      	b.n	80192b4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80192a2:	4b07      	ldr	r3, [pc, #28]	; (80192c0 <pbuf_alloc+0x1d4>)
 80192a4:	f240 1227 	movw	r2, #295	; 0x127
 80192a8:	490a      	ldr	r1, [pc, #40]	; (80192d4 <pbuf_alloc+0x1e8>)
 80192aa:	4807      	ldr	r0, [pc, #28]	; (80192c8 <pbuf_alloc+0x1dc>)
 80192ac:	f00a fad0 	bl	8023850 <iprintf>
      return NULL;
 80192b0:	2300      	movs	r3, #0
 80192b2:	e001      	b.n	80192b8 <pbuf_alloc+0x1cc>
      break;
 80192b4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80192b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80192b8:	4618      	mov	r0, r3
 80192ba:	3728      	adds	r7, #40	; 0x28
 80192bc:	46bd      	mov	sp, r7
 80192be:	bd80      	pop	{r7, pc}
 80192c0:	08025d0c 	.word	0x08025d0c
 80192c4:	08025d3c 	.word	0x08025d3c
 80192c8:	08025d6c 	.word	0x08025d6c
 80192cc:	08025d94 	.word	0x08025d94
 80192d0:	08025dc8 	.word	0x08025dc8
 80192d4:	08025df4 	.word	0x08025df4

080192d8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80192d8:	b580      	push	{r7, lr}
 80192da:	b086      	sub	sp, #24
 80192dc:	af02      	add	r7, sp, #8
 80192de:	6078      	str	r0, [r7, #4]
 80192e0:	460b      	mov	r3, r1
 80192e2:	807b      	strh	r3, [r7, #2]
 80192e4:	4613      	mov	r3, r2
 80192e6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80192e8:	883b      	ldrh	r3, [r7, #0]
 80192ea:	2b41      	cmp	r3, #65	; 0x41
 80192ec:	d009      	beq.n	8019302 <pbuf_alloc_reference+0x2a>
 80192ee:	883b      	ldrh	r3, [r7, #0]
 80192f0:	2b01      	cmp	r3, #1
 80192f2:	d006      	beq.n	8019302 <pbuf_alloc_reference+0x2a>
 80192f4:	4b0f      	ldr	r3, [pc, #60]	; (8019334 <pbuf_alloc_reference+0x5c>)
 80192f6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80192fa:	490f      	ldr	r1, [pc, #60]	; (8019338 <pbuf_alloc_reference+0x60>)
 80192fc:	480f      	ldr	r0, [pc, #60]	; (801933c <pbuf_alloc_reference+0x64>)
 80192fe:	f00a faa7 	bl	8023850 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8019302:	200b      	movs	r0, #11
 8019304:	f7ff fabc 	bl	8018880 <memp_malloc>
 8019308:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d101      	bne.n	8019314 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8019310:	2300      	movs	r3, #0
 8019312:	e00b      	b.n	801932c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8019314:	8879      	ldrh	r1, [r7, #2]
 8019316:	887a      	ldrh	r2, [r7, #2]
 8019318:	2300      	movs	r3, #0
 801931a:	9301      	str	r3, [sp, #4]
 801931c:	883b      	ldrh	r3, [r7, #0]
 801931e:	9300      	str	r3, [sp, #0]
 8019320:	460b      	mov	r3, r1
 8019322:	6879      	ldr	r1, [r7, #4]
 8019324:	68f8      	ldr	r0, [r7, #12]
 8019326:	f7ff feb7 	bl	8019098 <pbuf_init_alloced_pbuf>
  return p;
 801932a:	68fb      	ldr	r3, [r7, #12]
}
 801932c:	4618      	mov	r0, r3
 801932e:	3710      	adds	r7, #16
 8019330:	46bd      	mov	sp, r7
 8019332:	bd80      	pop	{r7, pc}
 8019334:	08025d0c 	.word	0x08025d0c
 8019338:	08025e10 	.word	0x08025e10
 801933c:	08025d6c 	.word	0x08025d6c

08019340 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b088      	sub	sp, #32
 8019344:	af02      	add	r7, sp, #8
 8019346:	607b      	str	r3, [r7, #4]
 8019348:	4603      	mov	r3, r0
 801934a:	73fb      	strb	r3, [r7, #15]
 801934c:	460b      	mov	r3, r1
 801934e:	81bb      	strh	r3, [r7, #12]
 8019350:	4613      	mov	r3, r2
 8019352:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8019354:	7bfb      	ldrb	r3, [r7, #15]
 8019356:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8019358:	8a7b      	ldrh	r3, [r7, #18]
 801935a:	3303      	adds	r3, #3
 801935c:	f023 0203 	bic.w	r2, r3, #3
 8019360:	89bb      	ldrh	r3, [r7, #12]
 8019362:	441a      	add	r2, r3
 8019364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019366:	429a      	cmp	r2, r3
 8019368:	d901      	bls.n	801936e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801936a:	2300      	movs	r3, #0
 801936c:	e018      	b.n	80193a0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801936e:	6a3b      	ldr	r3, [r7, #32]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d007      	beq.n	8019384 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8019374:	8a7b      	ldrh	r3, [r7, #18]
 8019376:	3303      	adds	r3, #3
 8019378:	f023 0303 	bic.w	r3, r3, #3
 801937c:	6a3a      	ldr	r2, [r7, #32]
 801937e:	4413      	add	r3, r2
 8019380:	617b      	str	r3, [r7, #20]
 8019382:	e001      	b.n	8019388 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8019384:	2300      	movs	r3, #0
 8019386:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8019388:	6878      	ldr	r0, [r7, #4]
 801938a:	89b9      	ldrh	r1, [r7, #12]
 801938c:	89ba      	ldrh	r2, [r7, #12]
 801938e:	2302      	movs	r3, #2
 8019390:	9301      	str	r3, [sp, #4]
 8019392:	897b      	ldrh	r3, [r7, #10]
 8019394:	9300      	str	r3, [sp, #0]
 8019396:	460b      	mov	r3, r1
 8019398:	6979      	ldr	r1, [r7, #20]
 801939a:	f7ff fe7d 	bl	8019098 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801939e:	687b      	ldr	r3, [r7, #4]
}
 80193a0:	4618      	mov	r0, r3
 80193a2:	3718      	adds	r7, #24
 80193a4:	46bd      	mov	sp, r7
 80193a6:	bd80      	pop	{r7, pc}

080193a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b084      	sub	sp, #16
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
 80193b0:	460b      	mov	r3, r1
 80193b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d106      	bne.n	80193c8 <pbuf_realloc+0x20>
 80193ba:	4b3a      	ldr	r3, [pc, #232]	; (80194a4 <pbuf_realloc+0xfc>)
 80193bc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80193c0:	4939      	ldr	r1, [pc, #228]	; (80194a8 <pbuf_realloc+0x100>)
 80193c2:	483a      	ldr	r0, [pc, #232]	; (80194ac <pbuf_realloc+0x104>)
 80193c4:	f00a fa44 	bl	8023850 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	891b      	ldrh	r3, [r3, #8]
 80193cc:	887a      	ldrh	r2, [r7, #2]
 80193ce:	429a      	cmp	r2, r3
 80193d0:	d263      	bcs.n	801949a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	891a      	ldrh	r2, [r3, #8]
 80193d6:	887b      	ldrh	r3, [r7, #2]
 80193d8:	1ad3      	subs	r3, r2, r3
 80193da:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80193dc:	887b      	ldrh	r3, [r7, #2]
 80193de:	817b      	strh	r3, [r7, #10]
  q = p;
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80193e4:	e018      	b.n	8019418 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	895b      	ldrh	r3, [r3, #10]
 80193ea:	897a      	ldrh	r2, [r7, #10]
 80193ec:	1ad3      	subs	r3, r2, r3
 80193ee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80193f0:	68fb      	ldr	r3, [r7, #12]
 80193f2:	891a      	ldrh	r2, [r3, #8]
 80193f4:	893b      	ldrh	r3, [r7, #8]
 80193f6:	1ad3      	subs	r3, r2, r3
 80193f8:	b29a      	uxth	r2, r3
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	2b00      	cmp	r3, #0
 8019408:	d106      	bne.n	8019418 <pbuf_realloc+0x70>
 801940a:	4b26      	ldr	r3, [pc, #152]	; (80194a4 <pbuf_realloc+0xfc>)
 801940c:	f240 12af 	movw	r2, #431	; 0x1af
 8019410:	4927      	ldr	r1, [pc, #156]	; (80194b0 <pbuf_realloc+0x108>)
 8019412:	4826      	ldr	r0, [pc, #152]	; (80194ac <pbuf_realloc+0x104>)
 8019414:	f00a fa1c 	bl	8023850 <iprintf>
  while (rem_len > q->len) {
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	895b      	ldrh	r3, [r3, #10]
 801941c:	897a      	ldrh	r2, [r7, #10]
 801941e:	429a      	cmp	r2, r3
 8019420:	d8e1      	bhi.n	80193e6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	7b1b      	ldrb	r3, [r3, #12]
 8019426:	f003 030f 	and.w	r3, r3, #15
 801942a:	2b00      	cmp	r3, #0
 801942c:	d121      	bne.n	8019472 <pbuf_realloc+0xca>
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	895b      	ldrh	r3, [r3, #10]
 8019432:	897a      	ldrh	r2, [r7, #10]
 8019434:	429a      	cmp	r2, r3
 8019436:	d01c      	beq.n	8019472 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	7b5b      	ldrb	r3, [r3, #13]
 801943c:	f003 0302 	and.w	r3, r3, #2
 8019440:	2b00      	cmp	r3, #0
 8019442:	d116      	bne.n	8019472 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8019444:	68fb      	ldr	r3, [r7, #12]
 8019446:	685a      	ldr	r2, [r3, #4]
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	1ad3      	subs	r3, r2, r3
 801944c:	b29a      	uxth	r2, r3
 801944e:	897b      	ldrh	r3, [r7, #10]
 8019450:	4413      	add	r3, r2
 8019452:	b29b      	uxth	r3, r3
 8019454:	4619      	mov	r1, r3
 8019456:	68f8      	ldr	r0, [r7, #12]
 8019458:	f7fe ff64 	bl	8018324 <mem_trim>
 801945c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d106      	bne.n	8019472 <pbuf_realloc+0xca>
 8019464:	4b0f      	ldr	r3, [pc, #60]	; (80194a4 <pbuf_realloc+0xfc>)
 8019466:	f240 12bd 	movw	r2, #445	; 0x1bd
 801946a:	4912      	ldr	r1, [pc, #72]	; (80194b4 <pbuf_realloc+0x10c>)
 801946c:	480f      	ldr	r0, [pc, #60]	; (80194ac <pbuf_realloc+0x104>)
 801946e:	f00a f9ef 	bl	8023850 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	897a      	ldrh	r2, [r7, #10]
 8019476:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	895a      	ldrh	r2, [r3, #10]
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d004      	beq.n	8019492 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8019488:	68fb      	ldr	r3, [r7, #12]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	4618      	mov	r0, r3
 801948e:	f000 f911 	bl	80196b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	2200      	movs	r2, #0
 8019496:	601a      	str	r2, [r3, #0]
 8019498:	e000      	b.n	801949c <pbuf_realloc+0xf4>
    return;
 801949a:	bf00      	nop

}
 801949c:	3710      	adds	r7, #16
 801949e:	46bd      	mov	sp, r7
 80194a0:	bd80      	pop	{r7, pc}
 80194a2:	bf00      	nop
 80194a4:	08025d0c 	.word	0x08025d0c
 80194a8:	08025e24 	.word	0x08025e24
 80194ac:	08025d6c 	.word	0x08025d6c
 80194b0:	08025e3c 	.word	0x08025e3c
 80194b4:	08025e54 	.word	0x08025e54

080194b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b086      	sub	sp, #24
 80194bc:	af00      	add	r7, sp, #0
 80194be:	60f8      	str	r0, [r7, #12]
 80194c0:	60b9      	str	r1, [r7, #8]
 80194c2:	4613      	mov	r3, r2
 80194c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80194c6:	68fb      	ldr	r3, [r7, #12]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d106      	bne.n	80194da <pbuf_add_header_impl+0x22>
 80194cc:	4b2b      	ldr	r3, [pc, #172]	; (801957c <pbuf_add_header_impl+0xc4>)
 80194ce:	f240 12df 	movw	r2, #479	; 0x1df
 80194d2:	492b      	ldr	r1, [pc, #172]	; (8019580 <pbuf_add_header_impl+0xc8>)
 80194d4:	482b      	ldr	r0, [pc, #172]	; (8019584 <pbuf_add_header_impl+0xcc>)
 80194d6:	f00a f9bb 	bl	8023850 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80194da:	68fb      	ldr	r3, [r7, #12]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d003      	beq.n	80194e8 <pbuf_add_header_impl+0x30>
 80194e0:	68bb      	ldr	r3, [r7, #8]
 80194e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80194e6:	d301      	bcc.n	80194ec <pbuf_add_header_impl+0x34>
    return 1;
 80194e8:	2301      	movs	r3, #1
 80194ea:	e043      	b.n	8019574 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80194ec:	68bb      	ldr	r3, [r7, #8]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d101      	bne.n	80194f6 <pbuf_add_header_impl+0x3e>
    return 0;
 80194f2:	2300      	movs	r3, #0
 80194f4:	e03e      	b.n	8019574 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80194f6:	68bb      	ldr	r3, [r7, #8]
 80194f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	891a      	ldrh	r2, [r3, #8]
 80194fe:	8a7b      	ldrh	r3, [r7, #18]
 8019500:	4413      	add	r3, r2
 8019502:	b29b      	uxth	r3, r3
 8019504:	8a7a      	ldrh	r2, [r7, #18]
 8019506:	429a      	cmp	r2, r3
 8019508:	d901      	bls.n	801950e <pbuf_add_header_impl+0x56>
    return 1;
 801950a:	2301      	movs	r3, #1
 801950c:	e032      	b.n	8019574 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	7b1b      	ldrb	r3, [r3, #12]
 8019512:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8019514:	8a3b      	ldrh	r3, [r7, #16]
 8019516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801951a:	2b00      	cmp	r3, #0
 801951c:	d00c      	beq.n	8019538 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	685a      	ldr	r2, [r3, #4]
 8019522:	68bb      	ldr	r3, [r7, #8]
 8019524:	425b      	negs	r3, r3
 8019526:	4413      	add	r3, r2
 8019528:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	3310      	adds	r3, #16
 801952e:	697a      	ldr	r2, [r7, #20]
 8019530:	429a      	cmp	r2, r3
 8019532:	d20d      	bcs.n	8019550 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8019534:	2301      	movs	r3, #1
 8019536:	e01d      	b.n	8019574 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8019538:	79fb      	ldrb	r3, [r7, #7]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d006      	beq.n	801954c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	685a      	ldr	r2, [r3, #4]
 8019542:	68bb      	ldr	r3, [r7, #8]
 8019544:	425b      	negs	r3, r3
 8019546:	4413      	add	r3, r2
 8019548:	617b      	str	r3, [r7, #20]
 801954a:	e001      	b.n	8019550 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801954c:	2301      	movs	r3, #1
 801954e:	e011      	b.n	8019574 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	697a      	ldr	r2, [r7, #20]
 8019554:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8019556:	68fb      	ldr	r3, [r7, #12]
 8019558:	895a      	ldrh	r2, [r3, #10]
 801955a:	8a7b      	ldrh	r3, [r7, #18]
 801955c:	4413      	add	r3, r2
 801955e:	b29a      	uxth	r2, r3
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	891a      	ldrh	r2, [r3, #8]
 8019568:	8a7b      	ldrh	r3, [r7, #18]
 801956a:	4413      	add	r3, r2
 801956c:	b29a      	uxth	r2, r3
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	811a      	strh	r2, [r3, #8]


  return 0;
 8019572:	2300      	movs	r3, #0
}
 8019574:	4618      	mov	r0, r3
 8019576:	3718      	adds	r7, #24
 8019578:	46bd      	mov	sp, r7
 801957a:	bd80      	pop	{r7, pc}
 801957c:	08025d0c 	.word	0x08025d0c
 8019580:	08025e70 	.word	0x08025e70
 8019584:	08025d6c 	.word	0x08025d6c

08019588 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8019588:	b580      	push	{r7, lr}
 801958a:	b082      	sub	sp, #8
 801958c:	af00      	add	r7, sp, #0
 801958e:	6078      	str	r0, [r7, #4]
 8019590:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8019592:	2200      	movs	r2, #0
 8019594:	6839      	ldr	r1, [r7, #0]
 8019596:	6878      	ldr	r0, [r7, #4]
 8019598:	f7ff ff8e 	bl	80194b8 <pbuf_add_header_impl>
 801959c:	4603      	mov	r3, r0
}
 801959e:	4618      	mov	r0, r3
 80195a0:	3708      	adds	r7, #8
 80195a2:	46bd      	mov	sp, r7
 80195a4:	bd80      	pop	{r7, pc}
	...

080195a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b084      	sub	sp, #16
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	6078      	str	r0, [r7, #4]
 80195b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d106      	bne.n	80195c6 <pbuf_remove_header+0x1e>
 80195b8:	4b20      	ldr	r3, [pc, #128]	; (801963c <pbuf_remove_header+0x94>)
 80195ba:	f240 224b 	movw	r2, #587	; 0x24b
 80195be:	4920      	ldr	r1, [pc, #128]	; (8019640 <pbuf_remove_header+0x98>)
 80195c0:	4820      	ldr	r0, [pc, #128]	; (8019644 <pbuf_remove_header+0x9c>)
 80195c2:	f00a f945 	bl	8023850 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d003      	beq.n	80195d4 <pbuf_remove_header+0x2c>
 80195cc:	683b      	ldr	r3, [r7, #0]
 80195ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80195d2:	d301      	bcc.n	80195d8 <pbuf_remove_header+0x30>
    return 1;
 80195d4:	2301      	movs	r3, #1
 80195d6:	e02c      	b.n	8019632 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d101      	bne.n	80195e2 <pbuf_remove_header+0x3a>
    return 0;
 80195de:	2300      	movs	r3, #0
 80195e0:	e027      	b.n	8019632 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80195e2:	683b      	ldr	r3, [r7, #0]
 80195e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	895b      	ldrh	r3, [r3, #10]
 80195ea:	89fa      	ldrh	r2, [r7, #14]
 80195ec:	429a      	cmp	r2, r3
 80195ee:	d908      	bls.n	8019602 <pbuf_remove_header+0x5a>
 80195f0:	4b12      	ldr	r3, [pc, #72]	; (801963c <pbuf_remove_header+0x94>)
 80195f2:	f240 2255 	movw	r2, #597	; 0x255
 80195f6:	4914      	ldr	r1, [pc, #80]	; (8019648 <pbuf_remove_header+0xa0>)
 80195f8:	4812      	ldr	r0, [pc, #72]	; (8019644 <pbuf_remove_header+0x9c>)
 80195fa:	f00a f929 	bl	8023850 <iprintf>
 80195fe:	2301      	movs	r3, #1
 8019600:	e017      	b.n	8019632 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	685b      	ldr	r3, [r3, #4]
 8019606:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	685a      	ldr	r2, [r3, #4]
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	441a      	add	r2, r3
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	895a      	ldrh	r2, [r3, #10]
 8019618:	89fb      	ldrh	r3, [r7, #14]
 801961a:	1ad3      	subs	r3, r2, r3
 801961c:	b29a      	uxth	r2, r3
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	891a      	ldrh	r2, [r3, #8]
 8019626:	89fb      	ldrh	r3, [r7, #14]
 8019628:	1ad3      	subs	r3, r2, r3
 801962a:	b29a      	uxth	r2, r3
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8019630:	2300      	movs	r3, #0
}
 8019632:	4618      	mov	r0, r3
 8019634:	3710      	adds	r7, #16
 8019636:	46bd      	mov	sp, r7
 8019638:	bd80      	pop	{r7, pc}
 801963a:	bf00      	nop
 801963c:	08025d0c 	.word	0x08025d0c
 8019640:	08025e70 	.word	0x08025e70
 8019644:	08025d6c 	.word	0x08025d6c
 8019648:	08025e7c 	.word	0x08025e7c

0801964c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b082      	sub	sp, #8
 8019650:	af00      	add	r7, sp, #0
 8019652:	6078      	str	r0, [r7, #4]
 8019654:	460b      	mov	r3, r1
 8019656:	807b      	strh	r3, [r7, #2]
 8019658:	4613      	mov	r3, r2
 801965a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801965c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019660:	2b00      	cmp	r3, #0
 8019662:	da08      	bge.n	8019676 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8019664:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019668:	425b      	negs	r3, r3
 801966a:	4619      	mov	r1, r3
 801966c:	6878      	ldr	r0, [r7, #4]
 801966e:	f7ff ff9b 	bl	80195a8 <pbuf_remove_header>
 8019672:	4603      	mov	r3, r0
 8019674:	e007      	b.n	8019686 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8019676:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801967a:	787a      	ldrb	r2, [r7, #1]
 801967c:	4619      	mov	r1, r3
 801967e:	6878      	ldr	r0, [r7, #4]
 8019680:	f7ff ff1a 	bl	80194b8 <pbuf_add_header_impl>
 8019684:	4603      	mov	r3, r0
  }
}
 8019686:	4618      	mov	r0, r3
 8019688:	3708      	adds	r7, #8
 801968a:	46bd      	mov	sp, r7
 801968c:	bd80      	pop	{r7, pc}

0801968e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801968e:	b580      	push	{r7, lr}
 8019690:	b082      	sub	sp, #8
 8019692:	af00      	add	r7, sp, #0
 8019694:	6078      	str	r0, [r7, #4]
 8019696:	460b      	mov	r3, r1
 8019698:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801969a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801969e:	2201      	movs	r2, #1
 80196a0:	4619      	mov	r1, r3
 80196a2:	6878      	ldr	r0, [r7, #4]
 80196a4:	f7ff ffd2 	bl	801964c <pbuf_header_impl>
 80196a8:	4603      	mov	r3, r0
}
 80196aa:	4618      	mov	r0, r3
 80196ac:	3708      	adds	r7, #8
 80196ae:	46bd      	mov	sp, r7
 80196b0:	bd80      	pop	{r7, pc}
	...

080196b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b088      	sub	sp, #32
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d10b      	bne.n	80196da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d106      	bne.n	80196d6 <pbuf_free+0x22>
 80196c8:	4b3b      	ldr	r3, [pc, #236]	; (80197b8 <pbuf_free+0x104>)
 80196ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80196ce:	493b      	ldr	r1, [pc, #236]	; (80197bc <pbuf_free+0x108>)
 80196d0:	483b      	ldr	r0, [pc, #236]	; (80197c0 <pbuf_free+0x10c>)
 80196d2:	f00a f8bd 	bl	8023850 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80196d6:	2300      	movs	r3, #0
 80196d8:	e069      	b.n	80197ae <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80196da:	2300      	movs	r3, #0
 80196dc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80196de:	e062      	b.n	80197a6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80196e0:	f009 fbc6 	bl	8022e70 <sys_arch_protect>
 80196e4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	7b9b      	ldrb	r3, [r3, #14]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d106      	bne.n	80196fc <pbuf_free+0x48>
 80196ee:	4b32      	ldr	r3, [pc, #200]	; (80197b8 <pbuf_free+0x104>)
 80196f0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80196f4:	4933      	ldr	r1, [pc, #204]	; (80197c4 <pbuf_free+0x110>)
 80196f6:	4832      	ldr	r0, [pc, #200]	; (80197c0 <pbuf_free+0x10c>)
 80196f8:	f00a f8aa 	bl	8023850 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	7b9b      	ldrb	r3, [r3, #14]
 8019700:	3b01      	subs	r3, #1
 8019702:	b2da      	uxtb	r2, r3
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	739a      	strb	r2, [r3, #14]
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	7b9b      	ldrb	r3, [r3, #14]
 801970c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801970e:	69b8      	ldr	r0, [r7, #24]
 8019710:	f009 fbbc 	bl	8022e8c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8019714:	7dfb      	ldrb	r3, [r7, #23]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d143      	bne.n	80197a2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	7b1b      	ldrb	r3, [r3, #12]
 8019724:	f003 030f 	and.w	r3, r3, #15
 8019728:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	7b5b      	ldrb	r3, [r3, #13]
 801972e:	f003 0302 	and.w	r3, r3, #2
 8019732:	2b00      	cmp	r3, #0
 8019734:	d011      	beq.n	801975a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801973a:	68bb      	ldr	r3, [r7, #8]
 801973c:	691b      	ldr	r3, [r3, #16]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d106      	bne.n	8019750 <pbuf_free+0x9c>
 8019742:	4b1d      	ldr	r3, [pc, #116]	; (80197b8 <pbuf_free+0x104>)
 8019744:	f240 22ff 	movw	r2, #767	; 0x2ff
 8019748:	491f      	ldr	r1, [pc, #124]	; (80197c8 <pbuf_free+0x114>)
 801974a:	481d      	ldr	r0, [pc, #116]	; (80197c0 <pbuf_free+0x10c>)
 801974c:	f00a f880 	bl	8023850 <iprintf>
        pc->custom_free_function(p);
 8019750:	68bb      	ldr	r3, [r7, #8]
 8019752:	691b      	ldr	r3, [r3, #16]
 8019754:	6878      	ldr	r0, [r7, #4]
 8019756:	4798      	blx	r3
 8019758:	e01d      	b.n	8019796 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801975a:	7bfb      	ldrb	r3, [r7, #15]
 801975c:	2b02      	cmp	r3, #2
 801975e:	d104      	bne.n	801976a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8019760:	6879      	ldr	r1, [r7, #4]
 8019762:	200c      	movs	r0, #12
 8019764:	f7ff f902 	bl	801896c <memp_free>
 8019768:	e015      	b.n	8019796 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801976a:	7bfb      	ldrb	r3, [r7, #15]
 801976c:	2b01      	cmp	r3, #1
 801976e:	d104      	bne.n	801977a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8019770:	6879      	ldr	r1, [r7, #4]
 8019772:	200b      	movs	r0, #11
 8019774:	f7ff f8fa 	bl	801896c <memp_free>
 8019778:	e00d      	b.n	8019796 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801977a:	7bfb      	ldrb	r3, [r7, #15]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d103      	bne.n	8019788 <pbuf_free+0xd4>
          mem_free(p);
 8019780:	6878      	ldr	r0, [r7, #4]
 8019782:	f7fe fd3f 	bl	8018204 <mem_free>
 8019786:	e006      	b.n	8019796 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8019788:	4b0b      	ldr	r3, [pc, #44]	; (80197b8 <pbuf_free+0x104>)
 801978a:	f240 320f 	movw	r2, #783	; 0x30f
 801978e:	490f      	ldr	r1, [pc, #60]	; (80197cc <pbuf_free+0x118>)
 8019790:	480b      	ldr	r0, [pc, #44]	; (80197c0 <pbuf_free+0x10c>)
 8019792:	f00a f85d 	bl	8023850 <iprintf>
        }
      }
      count++;
 8019796:	7ffb      	ldrb	r3, [r7, #31]
 8019798:	3301      	adds	r3, #1
 801979a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801979c:	693b      	ldr	r3, [r7, #16]
 801979e:	607b      	str	r3, [r7, #4]
 80197a0:	e001      	b.n	80197a6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80197a2:	2300      	movs	r3, #0
 80197a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d199      	bne.n	80196e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80197ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80197ae:	4618      	mov	r0, r3
 80197b0:	3720      	adds	r7, #32
 80197b2:	46bd      	mov	sp, r7
 80197b4:	bd80      	pop	{r7, pc}
 80197b6:	bf00      	nop
 80197b8:	08025d0c 	.word	0x08025d0c
 80197bc:	08025e70 	.word	0x08025e70
 80197c0:	08025d6c 	.word	0x08025d6c
 80197c4:	08025e9c 	.word	0x08025e9c
 80197c8:	08025eb4 	.word	0x08025eb4
 80197cc:	08025ed8 	.word	0x08025ed8

080197d0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80197d0:	b480      	push	{r7}
 80197d2:	b085      	sub	sp, #20
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80197d8:	2300      	movs	r3, #0
 80197da:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80197dc:	e005      	b.n	80197ea <pbuf_clen+0x1a>
    ++len;
 80197de:	89fb      	ldrh	r3, [r7, #14]
 80197e0:	3301      	adds	r3, #1
 80197e2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d1f6      	bne.n	80197de <pbuf_clen+0xe>
  }
  return len;
 80197f0:	89fb      	ldrh	r3, [r7, #14]
}
 80197f2:	4618      	mov	r0, r3
 80197f4:	3714      	adds	r7, #20
 80197f6:	46bd      	mov	sp, r7
 80197f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197fc:	4770      	bx	lr
	...

08019800 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8019800:	b580      	push	{r7, lr}
 8019802:	b084      	sub	sp, #16
 8019804:	af00      	add	r7, sp, #0
 8019806:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d016      	beq.n	801983c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801980e:	f009 fb2f 	bl	8022e70 <sys_arch_protect>
 8019812:	60f8      	str	r0, [r7, #12]
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	7b9b      	ldrb	r3, [r3, #14]
 8019818:	3301      	adds	r3, #1
 801981a:	b2da      	uxtb	r2, r3
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	739a      	strb	r2, [r3, #14]
 8019820:	68f8      	ldr	r0, [r7, #12]
 8019822:	f009 fb33 	bl	8022e8c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	7b9b      	ldrb	r3, [r3, #14]
 801982a:	2b00      	cmp	r3, #0
 801982c:	d106      	bne.n	801983c <pbuf_ref+0x3c>
 801982e:	4b05      	ldr	r3, [pc, #20]	; (8019844 <pbuf_ref+0x44>)
 8019830:	f240 3242 	movw	r2, #834	; 0x342
 8019834:	4904      	ldr	r1, [pc, #16]	; (8019848 <pbuf_ref+0x48>)
 8019836:	4805      	ldr	r0, [pc, #20]	; (801984c <pbuf_ref+0x4c>)
 8019838:	f00a f80a 	bl	8023850 <iprintf>
  }
}
 801983c:	bf00      	nop
 801983e:	3710      	adds	r7, #16
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}
 8019844:	08025d0c 	.word	0x08025d0c
 8019848:	08025eec 	.word	0x08025eec
 801984c:	08025d6c 	.word	0x08025d6c

08019850 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8019850:	b580      	push	{r7, lr}
 8019852:	b084      	sub	sp, #16
 8019854:	af00      	add	r7, sp, #0
 8019856:	6078      	str	r0, [r7, #4]
 8019858:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d002      	beq.n	8019866 <pbuf_cat+0x16>
 8019860:	683b      	ldr	r3, [r7, #0]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d107      	bne.n	8019876 <pbuf_cat+0x26>
 8019866:	4b20      	ldr	r3, [pc, #128]	; (80198e8 <pbuf_cat+0x98>)
 8019868:	f240 3259 	movw	r2, #857	; 0x359
 801986c:	491f      	ldr	r1, [pc, #124]	; (80198ec <pbuf_cat+0x9c>)
 801986e:	4820      	ldr	r0, [pc, #128]	; (80198f0 <pbuf_cat+0xa0>)
 8019870:	f009 ffee 	bl	8023850 <iprintf>
 8019874:	e034      	b.n	80198e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	60fb      	str	r3, [r7, #12]
 801987a:	e00a      	b.n	8019892 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	891a      	ldrh	r2, [r3, #8]
 8019880:	683b      	ldr	r3, [r7, #0]
 8019882:	891b      	ldrh	r3, [r3, #8]
 8019884:	4413      	add	r3, r2
 8019886:	b29a      	uxth	r2, r3
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	60fb      	str	r3, [r7, #12]
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d1f0      	bne.n	801987c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	891a      	ldrh	r2, [r3, #8]
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	895b      	ldrh	r3, [r3, #10]
 80198a2:	429a      	cmp	r2, r3
 80198a4:	d006      	beq.n	80198b4 <pbuf_cat+0x64>
 80198a6:	4b10      	ldr	r3, [pc, #64]	; (80198e8 <pbuf_cat+0x98>)
 80198a8:	f240 3262 	movw	r2, #866	; 0x362
 80198ac:	4911      	ldr	r1, [pc, #68]	; (80198f4 <pbuf_cat+0xa4>)
 80198ae:	4810      	ldr	r0, [pc, #64]	; (80198f0 <pbuf_cat+0xa0>)
 80198b0:	f009 ffce 	bl	8023850 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d006      	beq.n	80198ca <pbuf_cat+0x7a>
 80198bc:	4b0a      	ldr	r3, [pc, #40]	; (80198e8 <pbuf_cat+0x98>)
 80198be:	f240 3263 	movw	r2, #867	; 0x363
 80198c2:	490d      	ldr	r1, [pc, #52]	; (80198f8 <pbuf_cat+0xa8>)
 80198c4:	480a      	ldr	r0, [pc, #40]	; (80198f0 <pbuf_cat+0xa0>)
 80198c6:	f009 ffc3 	bl	8023850 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	891a      	ldrh	r2, [r3, #8]
 80198ce:	683b      	ldr	r3, [r7, #0]
 80198d0:	891b      	ldrh	r3, [r3, #8]
 80198d2:	4413      	add	r3, r2
 80198d4:	b29a      	uxth	r2, r3
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	683a      	ldr	r2, [r7, #0]
 80198de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80198e0:	3710      	adds	r7, #16
 80198e2:	46bd      	mov	sp, r7
 80198e4:	bd80      	pop	{r7, pc}
 80198e6:	bf00      	nop
 80198e8:	08025d0c 	.word	0x08025d0c
 80198ec:	08025f00 	.word	0x08025f00
 80198f0:	08025d6c 	.word	0x08025d6c
 80198f4:	08025f38 	.word	0x08025f38
 80198f8:	08025f68 	.word	0x08025f68

080198fc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b086      	sub	sp, #24
 8019900:	af00      	add	r7, sp, #0
 8019902:	6078      	str	r0, [r7, #4]
 8019904:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8019906:	2300      	movs	r3, #0
 8019908:	617b      	str	r3, [r7, #20]
 801990a:	2300      	movs	r3, #0
 801990c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	2b00      	cmp	r3, #0
 8019912:	d008      	beq.n	8019926 <pbuf_copy+0x2a>
 8019914:	683b      	ldr	r3, [r7, #0]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d005      	beq.n	8019926 <pbuf_copy+0x2a>
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	891a      	ldrh	r2, [r3, #8]
 801991e:	683b      	ldr	r3, [r7, #0]
 8019920:	891b      	ldrh	r3, [r3, #8]
 8019922:	429a      	cmp	r2, r3
 8019924:	d209      	bcs.n	801993a <pbuf_copy+0x3e>
 8019926:	4b57      	ldr	r3, [pc, #348]	; (8019a84 <pbuf_copy+0x188>)
 8019928:	f240 32c9 	movw	r2, #969	; 0x3c9
 801992c:	4956      	ldr	r1, [pc, #344]	; (8019a88 <pbuf_copy+0x18c>)
 801992e:	4857      	ldr	r0, [pc, #348]	; (8019a8c <pbuf_copy+0x190>)
 8019930:	f009 ff8e 	bl	8023850 <iprintf>
 8019934:	f06f 030f 	mvn.w	r3, #15
 8019938:	e09f      	b.n	8019a7a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	895b      	ldrh	r3, [r3, #10]
 801993e:	461a      	mov	r2, r3
 8019940:	697b      	ldr	r3, [r7, #20]
 8019942:	1ad2      	subs	r2, r2, r3
 8019944:	683b      	ldr	r3, [r7, #0]
 8019946:	895b      	ldrh	r3, [r3, #10]
 8019948:	4619      	mov	r1, r3
 801994a:	693b      	ldr	r3, [r7, #16]
 801994c:	1acb      	subs	r3, r1, r3
 801994e:	429a      	cmp	r2, r3
 8019950:	d306      	bcc.n	8019960 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8019952:	683b      	ldr	r3, [r7, #0]
 8019954:	895b      	ldrh	r3, [r3, #10]
 8019956:	461a      	mov	r2, r3
 8019958:	693b      	ldr	r3, [r7, #16]
 801995a:	1ad3      	subs	r3, r2, r3
 801995c:	60fb      	str	r3, [r7, #12]
 801995e:	e005      	b.n	801996c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	895b      	ldrh	r3, [r3, #10]
 8019964:	461a      	mov	r2, r3
 8019966:	697b      	ldr	r3, [r7, #20]
 8019968:	1ad3      	subs	r3, r2, r3
 801996a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	685a      	ldr	r2, [r3, #4]
 8019970:	697b      	ldr	r3, [r7, #20]
 8019972:	18d0      	adds	r0, r2, r3
 8019974:	683b      	ldr	r3, [r7, #0]
 8019976:	685a      	ldr	r2, [r3, #4]
 8019978:	693b      	ldr	r3, [r7, #16]
 801997a:	4413      	add	r3, r2
 801997c:	68fa      	ldr	r2, [r7, #12]
 801997e:	4619      	mov	r1, r3
 8019980:	f00a f859 	bl	8023a36 <memcpy>
    offset_to += len;
 8019984:	697a      	ldr	r2, [r7, #20]
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	4413      	add	r3, r2
 801998a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801998c:	693a      	ldr	r2, [r7, #16]
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	4413      	add	r3, r2
 8019992:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	895b      	ldrh	r3, [r3, #10]
 8019998:	461a      	mov	r2, r3
 801999a:	697b      	ldr	r3, [r7, #20]
 801999c:	4293      	cmp	r3, r2
 801999e:	d906      	bls.n	80199ae <pbuf_copy+0xb2>
 80199a0:	4b38      	ldr	r3, [pc, #224]	; (8019a84 <pbuf_copy+0x188>)
 80199a2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80199a6:	493a      	ldr	r1, [pc, #232]	; (8019a90 <pbuf_copy+0x194>)
 80199a8:	4838      	ldr	r0, [pc, #224]	; (8019a8c <pbuf_copy+0x190>)
 80199aa:	f009 ff51 	bl	8023850 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80199ae:	683b      	ldr	r3, [r7, #0]
 80199b0:	895b      	ldrh	r3, [r3, #10]
 80199b2:	461a      	mov	r2, r3
 80199b4:	693b      	ldr	r3, [r7, #16]
 80199b6:	4293      	cmp	r3, r2
 80199b8:	d906      	bls.n	80199c8 <pbuf_copy+0xcc>
 80199ba:	4b32      	ldr	r3, [pc, #200]	; (8019a84 <pbuf_copy+0x188>)
 80199bc:	f240 32da 	movw	r2, #986	; 0x3da
 80199c0:	4934      	ldr	r1, [pc, #208]	; (8019a94 <pbuf_copy+0x198>)
 80199c2:	4832      	ldr	r0, [pc, #200]	; (8019a8c <pbuf_copy+0x190>)
 80199c4:	f009 ff44 	bl	8023850 <iprintf>
    if (offset_from >= p_from->len) {
 80199c8:	683b      	ldr	r3, [r7, #0]
 80199ca:	895b      	ldrh	r3, [r3, #10]
 80199cc:	461a      	mov	r2, r3
 80199ce:	693b      	ldr	r3, [r7, #16]
 80199d0:	4293      	cmp	r3, r2
 80199d2:	d304      	bcc.n	80199de <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80199d4:	2300      	movs	r3, #0
 80199d6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80199d8:	683b      	ldr	r3, [r7, #0]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	895b      	ldrh	r3, [r3, #10]
 80199e2:	461a      	mov	r2, r3
 80199e4:	697b      	ldr	r3, [r7, #20]
 80199e6:	4293      	cmp	r3, r2
 80199e8:	d114      	bne.n	8019a14 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80199ea:	2300      	movs	r3, #0
 80199ec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d10c      	bne.n	8019a14 <pbuf_copy+0x118>
 80199fa:	683b      	ldr	r3, [r7, #0]
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d009      	beq.n	8019a14 <pbuf_copy+0x118>
 8019a00:	4b20      	ldr	r3, [pc, #128]	; (8019a84 <pbuf_copy+0x188>)
 8019a02:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8019a06:	4924      	ldr	r1, [pc, #144]	; (8019a98 <pbuf_copy+0x19c>)
 8019a08:	4820      	ldr	r0, [pc, #128]	; (8019a8c <pbuf_copy+0x190>)
 8019a0a:	f009 ff21 	bl	8023850 <iprintf>
 8019a0e:	f06f 030f 	mvn.w	r3, #15
 8019a12:	e032      	b.n	8019a7a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019a14:	683b      	ldr	r3, [r7, #0]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d013      	beq.n	8019a42 <pbuf_copy+0x146>
 8019a1a:	683b      	ldr	r3, [r7, #0]
 8019a1c:	895a      	ldrh	r2, [r3, #10]
 8019a1e:	683b      	ldr	r3, [r7, #0]
 8019a20:	891b      	ldrh	r3, [r3, #8]
 8019a22:	429a      	cmp	r2, r3
 8019a24:	d10d      	bne.n	8019a42 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019a26:	683b      	ldr	r3, [r7, #0]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d009      	beq.n	8019a42 <pbuf_copy+0x146>
 8019a2e:	4b15      	ldr	r3, [pc, #84]	; (8019a84 <pbuf_copy+0x188>)
 8019a30:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8019a34:	4919      	ldr	r1, [pc, #100]	; (8019a9c <pbuf_copy+0x1a0>)
 8019a36:	4815      	ldr	r0, [pc, #84]	; (8019a8c <pbuf_copy+0x190>)
 8019a38:	f009 ff0a 	bl	8023850 <iprintf>
 8019a3c:	f06f 0305 	mvn.w	r3, #5
 8019a40:	e01b      	b.n	8019a7a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d013      	beq.n	8019a70 <pbuf_copy+0x174>
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	895a      	ldrh	r2, [r3, #10]
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	891b      	ldrh	r3, [r3, #8]
 8019a50:	429a      	cmp	r2, r3
 8019a52:	d10d      	bne.n	8019a70 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d009      	beq.n	8019a70 <pbuf_copy+0x174>
 8019a5c:	4b09      	ldr	r3, [pc, #36]	; (8019a84 <pbuf_copy+0x188>)
 8019a5e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8019a62:	490e      	ldr	r1, [pc, #56]	; (8019a9c <pbuf_copy+0x1a0>)
 8019a64:	4809      	ldr	r0, [pc, #36]	; (8019a8c <pbuf_copy+0x190>)
 8019a66:	f009 fef3 	bl	8023850 <iprintf>
 8019a6a:	f06f 0305 	mvn.w	r3, #5
 8019a6e:	e004      	b.n	8019a7a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8019a70:	683b      	ldr	r3, [r7, #0]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	f47f af61 	bne.w	801993a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8019a78:	2300      	movs	r3, #0
}
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	3718      	adds	r7, #24
 8019a7e:	46bd      	mov	sp, r7
 8019a80:	bd80      	pop	{r7, pc}
 8019a82:	bf00      	nop
 8019a84:	08025d0c 	.word	0x08025d0c
 8019a88:	08025fb4 	.word	0x08025fb4
 8019a8c:	08025d6c 	.word	0x08025d6c
 8019a90:	08025fe4 	.word	0x08025fe4
 8019a94:	08025ffc 	.word	0x08025ffc
 8019a98:	08026018 	.word	0x08026018
 8019a9c:	08026028 	.word	0x08026028

08019aa0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b088      	sub	sp, #32
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	60f8      	str	r0, [r7, #12]
 8019aa8:	60b9      	str	r1, [r7, #8]
 8019aaa:	4611      	mov	r1, r2
 8019aac:	461a      	mov	r2, r3
 8019aae:	460b      	mov	r3, r1
 8019ab0:	80fb      	strh	r3, [r7, #6]
 8019ab2:	4613      	mov	r3, r2
 8019ab4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8019ab6:	2300      	movs	r3, #0
 8019ab8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8019aba:	2300      	movs	r3, #0
 8019abc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d108      	bne.n	8019ad6 <pbuf_copy_partial+0x36>
 8019ac4:	4b2b      	ldr	r3, [pc, #172]	; (8019b74 <pbuf_copy_partial+0xd4>)
 8019ac6:	f240 420a 	movw	r2, #1034	; 0x40a
 8019aca:	492b      	ldr	r1, [pc, #172]	; (8019b78 <pbuf_copy_partial+0xd8>)
 8019acc:	482b      	ldr	r0, [pc, #172]	; (8019b7c <pbuf_copy_partial+0xdc>)
 8019ace:	f009 febf 	bl	8023850 <iprintf>
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	e04a      	b.n	8019b6c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8019ad6:	68bb      	ldr	r3, [r7, #8]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d108      	bne.n	8019aee <pbuf_copy_partial+0x4e>
 8019adc:	4b25      	ldr	r3, [pc, #148]	; (8019b74 <pbuf_copy_partial+0xd4>)
 8019ade:	f240 420b 	movw	r2, #1035	; 0x40b
 8019ae2:	4927      	ldr	r1, [pc, #156]	; (8019b80 <pbuf_copy_partial+0xe0>)
 8019ae4:	4825      	ldr	r0, [pc, #148]	; (8019b7c <pbuf_copy_partial+0xdc>)
 8019ae6:	f009 feb3 	bl	8023850 <iprintf>
 8019aea:	2300      	movs	r3, #0
 8019aec:	e03e      	b.n	8019b6c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	61fb      	str	r3, [r7, #28]
 8019af2:	e034      	b.n	8019b5e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8019af4:	88bb      	ldrh	r3, [r7, #4]
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d00a      	beq.n	8019b10 <pbuf_copy_partial+0x70>
 8019afa:	69fb      	ldr	r3, [r7, #28]
 8019afc:	895b      	ldrh	r3, [r3, #10]
 8019afe:	88ba      	ldrh	r2, [r7, #4]
 8019b00:	429a      	cmp	r2, r3
 8019b02:	d305      	bcc.n	8019b10 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8019b04:	69fb      	ldr	r3, [r7, #28]
 8019b06:	895b      	ldrh	r3, [r3, #10]
 8019b08:	88ba      	ldrh	r2, [r7, #4]
 8019b0a:	1ad3      	subs	r3, r2, r3
 8019b0c:	80bb      	strh	r3, [r7, #4]
 8019b0e:	e023      	b.n	8019b58 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8019b10:	69fb      	ldr	r3, [r7, #28]
 8019b12:	895a      	ldrh	r2, [r3, #10]
 8019b14:	88bb      	ldrh	r3, [r7, #4]
 8019b16:	1ad3      	subs	r3, r2, r3
 8019b18:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8019b1a:	8b3a      	ldrh	r2, [r7, #24]
 8019b1c:	88fb      	ldrh	r3, [r7, #6]
 8019b1e:	429a      	cmp	r2, r3
 8019b20:	d901      	bls.n	8019b26 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8019b22:	88fb      	ldrh	r3, [r7, #6]
 8019b24:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8019b26:	8b7b      	ldrh	r3, [r7, #26]
 8019b28:	68ba      	ldr	r2, [r7, #8]
 8019b2a:	18d0      	adds	r0, r2, r3
 8019b2c:	69fb      	ldr	r3, [r7, #28]
 8019b2e:	685a      	ldr	r2, [r3, #4]
 8019b30:	88bb      	ldrh	r3, [r7, #4]
 8019b32:	4413      	add	r3, r2
 8019b34:	8b3a      	ldrh	r2, [r7, #24]
 8019b36:	4619      	mov	r1, r3
 8019b38:	f009 ff7d 	bl	8023a36 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8019b3c:	8afa      	ldrh	r2, [r7, #22]
 8019b3e:	8b3b      	ldrh	r3, [r7, #24]
 8019b40:	4413      	add	r3, r2
 8019b42:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8019b44:	8b7a      	ldrh	r2, [r7, #26]
 8019b46:	8b3b      	ldrh	r3, [r7, #24]
 8019b48:	4413      	add	r3, r2
 8019b4a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8019b4c:	88fa      	ldrh	r2, [r7, #6]
 8019b4e:	8b3b      	ldrh	r3, [r7, #24]
 8019b50:	1ad3      	subs	r3, r2, r3
 8019b52:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8019b54:	2300      	movs	r3, #0
 8019b56:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8019b58:	69fb      	ldr	r3, [r7, #28]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	61fb      	str	r3, [r7, #28]
 8019b5e:	88fb      	ldrh	r3, [r7, #6]
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d002      	beq.n	8019b6a <pbuf_copy_partial+0xca>
 8019b64:	69fb      	ldr	r3, [r7, #28]
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d1c4      	bne.n	8019af4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8019b6a:	8afb      	ldrh	r3, [r7, #22]
}
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	3720      	adds	r7, #32
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}
 8019b74:	08025d0c 	.word	0x08025d0c
 8019b78:	08026054 	.word	0x08026054
 8019b7c:	08025d6c 	.word	0x08025d6c
 8019b80:	08026074 	.word	0x08026074

08019b84 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b084      	sub	sp, #16
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	603a      	str	r2, [r7, #0]
 8019b8e:	71fb      	strb	r3, [r7, #7]
 8019b90:	460b      	mov	r3, r1
 8019b92:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8019b94:	683b      	ldr	r3, [r7, #0]
 8019b96:	8919      	ldrh	r1, [r3, #8]
 8019b98:	88ba      	ldrh	r2, [r7, #4]
 8019b9a:	79fb      	ldrb	r3, [r7, #7]
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	f7ff faa5 	bl	80190ec <pbuf_alloc>
 8019ba2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d101      	bne.n	8019bae <pbuf_clone+0x2a>
    return NULL;
 8019baa:	2300      	movs	r3, #0
 8019bac:	e011      	b.n	8019bd2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8019bae:	6839      	ldr	r1, [r7, #0]
 8019bb0:	68f8      	ldr	r0, [r7, #12]
 8019bb2:	f7ff fea3 	bl	80198fc <pbuf_copy>
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8019bba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d006      	beq.n	8019bd0 <pbuf_clone+0x4c>
 8019bc2:	4b06      	ldr	r3, [pc, #24]	; (8019bdc <pbuf_clone+0x58>)
 8019bc4:	f240 5224 	movw	r2, #1316	; 0x524
 8019bc8:	4905      	ldr	r1, [pc, #20]	; (8019be0 <pbuf_clone+0x5c>)
 8019bca:	4806      	ldr	r0, [pc, #24]	; (8019be4 <pbuf_clone+0x60>)
 8019bcc:	f009 fe40 	bl	8023850 <iprintf>
  return q;
 8019bd0:	68fb      	ldr	r3, [r7, #12]
}
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	3710      	adds	r7, #16
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	bd80      	pop	{r7, pc}
 8019bda:	bf00      	nop
 8019bdc:	08025d0c 	.word	0x08025d0c
 8019be0:	08026180 	.word	0x08026180
 8019be4:	08025d6c 	.word	0x08025d6c

08019be8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8019be8:	b580      	push	{r7, lr}
 8019bea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019bec:	f009 fd30 	bl	8023650 <rand>
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	b29b      	uxth	r3, r3
 8019bf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019bf8:	b29b      	uxth	r3, r3
 8019bfa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8019bfe:	b29a      	uxth	r2, r3
 8019c00:	4b01      	ldr	r3, [pc, #4]	; (8019c08 <tcp_init+0x20>)
 8019c02:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019c04:	bf00      	nop
 8019c06:	bd80      	pop	{r7, pc}
 8019c08:	20000044 	.word	0x20000044

08019c0c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	b082      	sub	sp, #8
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	7d1b      	ldrb	r3, [r3, #20]
 8019c18:	2b01      	cmp	r3, #1
 8019c1a:	d105      	bne.n	8019c28 <tcp_free+0x1c>
 8019c1c:	4b06      	ldr	r3, [pc, #24]	; (8019c38 <tcp_free+0x2c>)
 8019c1e:	22d4      	movs	r2, #212	; 0xd4
 8019c20:	4906      	ldr	r1, [pc, #24]	; (8019c3c <tcp_free+0x30>)
 8019c22:	4807      	ldr	r0, [pc, #28]	; (8019c40 <tcp_free+0x34>)
 8019c24:	f009 fe14 	bl	8023850 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8019c28:	6879      	ldr	r1, [r7, #4]
 8019c2a:	2001      	movs	r0, #1
 8019c2c:	f7fe fe9e 	bl	801896c <memp_free>
}
 8019c30:	bf00      	nop
 8019c32:	3708      	adds	r7, #8
 8019c34:	46bd      	mov	sp, r7
 8019c36:	bd80      	pop	{r7, pc}
 8019c38:	0802620c 	.word	0x0802620c
 8019c3c:	0802623c 	.word	0x0802623c
 8019c40:	08026250 	.word	0x08026250

08019c44 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8019c44:	b580      	push	{r7, lr}
 8019c46:	b082      	sub	sp, #8
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	7d1b      	ldrb	r3, [r3, #20]
 8019c50:	2b01      	cmp	r3, #1
 8019c52:	d105      	bne.n	8019c60 <tcp_free_listen+0x1c>
 8019c54:	4b06      	ldr	r3, [pc, #24]	; (8019c70 <tcp_free_listen+0x2c>)
 8019c56:	22df      	movs	r2, #223	; 0xdf
 8019c58:	4906      	ldr	r1, [pc, #24]	; (8019c74 <tcp_free_listen+0x30>)
 8019c5a:	4807      	ldr	r0, [pc, #28]	; (8019c78 <tcp_free_listen+0x34>)
 8019c5c:	f009 fdf8 	bl	8023850 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8019c60:	6879      	ldr	r1, [r7, #4]
 8019c62:	2002      	movs	r0, #2
 8019c64:	f7fe fe82 	bl	801896c <memp_free>
}
 8019c68:	bf00      	nop
 8019c6a:	3708      	adds	r7, #8
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bd80      	pop	{r7, pc}
 8019c70:	0802620c 	.word	0x0802620c
 8019c74:	08026278 	.word	0x08026278
 8019c78:	08026250 	.word	0x08026250

08019c7c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8019c80:	f001 f85c 	bl	801ad3c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8019c84:	4b07      	ldr	r3, [pc, #28]	; (8019ca4 <tcp_tmr+0x28>)
 8019c86:	781b      	ldrb	r3, [r3, #0]
 8019c88:	3301      	adds	r3, #1
 8019c8a:	b2da      	uxtb	r2, r3
 8019c8c:	4b05      	ldr	r3, [pc, #20]	; (8019ca4 <tcp_tmr+0x28>)
 8019c8e:	701a      	strb	r2, [r3, #0]
 8019c90:	4b04      	ldr	r3, [pc, #16]	; (8019ca4 <tcp_tmr+0x28>)
 8019c92:	781b      	ldrb	r3, [r3, #0]
 8019c94:	f003 0301 	and.w	r3, r3, #1
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d001      	beq.n	8019ca0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8019c9c:	f000 fd0e 	bl	801a6bc <tcp_slowtmr>
  }
}
 8019ca0:	bf00      	nop
 8019ca2:	bd80      	pop	{r7, pc}
 8019ca4:	2001132d 	.word	0x2001132d

08019ca8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	b084      	sub	sp, #16
 8019cac:	af00      	add	r7, sp, #0
 8019cae:	6078      	str	r0, [r7, #4]
 8019cb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8019cb2:	683b      	ldr	r3, [r7, #0]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d105      	bne.n	8019cc4 <tcp_remove_listener+0x1c>
 8019cb8:	4b0d      	ldr	r3, [pc, #52]	; (8019cf0 <tcp_remove_listener+0x48>)
 8019cba:	22ff      	movs	r2, #255	; 0xff
 8019cbc:	490d      	ldr	r1, [pc, #52]	; (8019cf4 <tcp_remove_listener+0x4c>)
 8019cbe:	480e      	ldr	r0, [pc, #56]	; (8019cf8 <tcp_remove_listener+0x50>)
 8019cc0:	f009 fdc6 	bl	8023850 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	60fb      	str	r3, [r7, #12]
 8019cc8:	e00a      	b.n	8019ce0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019cce:	683a      	ldr	r2, [r7, #0]
 8019cd0:	429a      	cmp	r2, r3
 8019cd2:	d102      	bne.n	8019cda <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	2200      	movs	r2, #0
 8019cd8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	68db      	ldr	r3, [r3, #12]
 8019cde:	60fb      	str	r3, [r7, #12]
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d1f1      	bne.n	8019cca <tcp_remove_listener+0x22>
    }
  }
}
 8019ce6:	bf00      	nop
 8019ce8:	bf00      	nop
 8019cea:	3710      	adds	r7, #16
 8019cec:	46bd      	mov	sp, r7
 8019cee:	bd80      	pop	{r7, pc}
 8019cf0:	0802620c 	.word	0x0802620c
 8019cf4:	08026294 	.word	0x08026294
 8019cf8:	08026250 	.word	0x08026250

08019cfc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8019cfc:	b580      	push	{r7, lr}
 8019cfe:	b084      	sub	sp, #16
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d106      	bne.n	8019d18 <tcp_listen_closed+0x1c>
 8019d0a:	4b14      	ldr	r3, [pc, #80]	; (8019d5c <tcp_listen_closed+0x60>)
 8019d0c:	f240 1211 	movw	r2, #273	; 0x111
 8019d10:	4913      	ldr	r1, [pc, #76]	; (8019d60 <tcp_listen_closed+0x64>)
 8019d12:	4814      	ldr	r0, [pc, #80]	; (8019d64 <tcp_listen_closed+0x68>)
 8019d14:	f009 fd9c 	bl	8023850 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	7d1b      	ldrb	r3, [r3, #20]
 8019d1c:	2b01      	cmp	r3, #1
 8019d1e:	d006      	beq.n	8019d2e <tcp_listen_closed+0x32>
 8019d20:	4b0e      	ldr	r3, [pc, #56]	; (8019d5c <tcp_listen_closed+0x60>)
 8019d22:	f44f 7289 	mov.w	r2, #274	; 0x112
 8019d26:	4910      	ldr	r1, [pc, #64]	; (8019d68 <tcp_listen_closed+0x6c>)
 8019d28:	480e      	ldr	r0, [pc, #56]	; (8019d64 <tcp_listen_closed+0x68>)
 8019d2a:	f009 fd91 	bl	8023850 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8019d2e:	2301      	movs	r3, #1
 8019d30:	60fb      	str	r3, [r7, #12]
 8019d32:	e00b      	b.n	8019d4c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8019d34:	4a0d      	ldr	r2, [pc, #52]	; (8019d6c <tcp_listen_closed+0x70>)
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	6879      	ldr	r1, [r7, #4]
 8019d40:	4618      	mov	r0, r3
 8019d42:	f7ff ffb1 	bl	8019ca8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	3301      	adds	r3, #1
 8019d4a:	60fb      	str	r3, [r7, #12]
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	2b03      	cmp	r3, #3
 8019d50:	d9f0      	bls.n	8019d34 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8019d52:	bf00      	nop
 8019d54:	bf00      	nop
 8019d56:	3710      	adds	r7, #16
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bd80      	pop	{r7, pc}
 8019d5c:	0802620c 	.word	0x0802620c
 8019d60:	080262bc 	.word	0x080262bc
 8019d64:	08026250 	.word	0x08026250
 8019d68:	080262c8 	.word	0x080262c8
 8019d6c:	08028244 	.word	0x08028244

08019d70 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8019d70:	b5b0      	push	{r4, r5, r7, lr}
 8019d72:	b088      	sub	sp, #32
 8019d74:	af04      	add	r7, sp, #16
 8019d76:	6078      	str	r0, [r7, #4]
 8019d78:	460b      	mov	r3, r1
 8019d7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d106      	bne.n	8019d90 <tcp_close_shutdown+0x20>
 8019d82:	4b63      	ldr	r3, [pc, #396]	; (8019f10 <tcp_close_shutdown+0x1a0>)
 8019d84:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8019d88:	4962      	ldr	r1, [pc, #392]	; (8019f14 <tcp_close_shutdown+0x1a4>)
 8019d8a:	4863      	ldr	r0, [pc, #396]	; (8019f18 <tcp_close_shutdown+0x1a8>)
 8019d8c:	f009 fd60 	bl	8023850 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8019d90:	78fb      	ldrb	r3, [r7, #3]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d066      	beq.n	8019e64 <tcp_close_shutdown+0xf4>
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	7d1b      	ldrb	r3, [r3, #20]
 8019d9a:	2b04      	cmp	r3, #4
 8019d9c:	d003      	beq.n	8019da6 <tcp_close_shutdown+0x36>
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	7d1b      	ldrb	r3, [r3, #20]
 8019da2:	2b07      	cmp	r3, #7
 8019da4:	d15e      	bne.n	8019e64 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d104      	bne.n	8019db8 <tcp_close_shutdown+0x48>
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019db2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019db6:	d055      	beq.n	8019e64 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	8b5b      	ldrh	r3, [r3, #26]
 8019dbc:	f003 0310 	and.w	r3, r3, #16
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d106      	bne.n	8019dd2 <tcp_close_shutdown+0x62>
 8019dc4:	4b52      	ldr	r3, [pc, #328]	; (8019f10 <tcp_close_shutdown+0x1a0>)
 8019dc6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8019dca:	4954      	ldr	r1, [pc, #336]	; (8019f1c <tcp_close_shutdown+0x1ac>)
 8019dcc:	4852      	ldr	r0, [pc, #328]	; (8019f18 <tcp_close_shutdown+0x1a8>)
 8019dce:	f009 fd3f 	bl	8023850 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019dda:	687d      	ldr	r5, [r7, #4]
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	3304      	adds	r3, #4
 8019de0:	687a      	ldr	r2, [r7, #4]
 8019de2:	8ad2      	ldrh	r2, [r2, #22]
 8019de4:	6879      	ldr	r1, [r7, #4]
 8019de6:	8b09      	ldrh	r1, [r1, #24]
 8019de8:	9102      	str	r1, [sp, #8]
 8019dea:	9201      	str	r2, [sp, #4]
 8019dec:	9300      	str	r3, [sp, #0]
 8019dee:	462b      	mov	r3, r5
 8019df0:	4622      	mov	r2, r4
 8019df2:	4601      	mov	r1, r0
 8019df4:	6878      	ldr	r0, [r7, #4]
 8019df6:	f005 fd71 	bl	801f8dc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8019dfa:	6878      	ldr	r0, [r7, #4]
 8019dfc:	f001 fb4e 	bl	801b49c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8019e00:	4b47      	ldr	r3, [pc, #284]	; (8019f20 <tcp_close_shutdown+0x1b0>)
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	687a      	ldr	r2, [r7, #4]
 8019e06:	429a      	cmp	r2, r3
 8019e08:	d105      	bne.n	8019e16 <tcp_close_shutdown+0xa6>
 8019e0a:	4b45      	ldr	r3, [pc, #276]	; (8019f20 <tcp_close_shutdown+0x1b0>)
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	68db      	ldr	r3, [r3, #12]
 8019e10:	4a43      	ldr	r2, [pc, #268]	; (8019f20 <tcp_close_shutdown+0x1b0>)
 8019e12:	6013      	str	r3, [r2, #0]
 8019e14:	e013      	b.n	8019e3e <tcp_close_shutdown+0xce>
 8019e16:	4b42      	ldr	r3, [pc, #264]	; (8019f20 <tcp_close_shutdown+0x1b0>)
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	60fb      	str	r3, [r7, #12]
 8019e1c:	e00c      	b.n	8019e38 <tcp_close_shutdown+0xc8>
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	68db      	ldr	r3, [r3, #12]
 8019e22:	687a      	ldr	r2, [r7, #4]
 8019e24:	429a      	cmp	r2, r3
 8019e26:	d104      	bne.n	8019e32 <tcp_close_shutdown+0xc2>
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	68da      	ldr	r2, [r3, #12]
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	60da      	str	r2, [r3, #12]
 8019e30:	e005      	b.n	8019e3e <tcp_close_shutdown+0xce>
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	68db      	ldr	r3, [r3, #12]
 8019e36:	60fb      	str	r3, [r7, #12]
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d1ef      	bne.n	8019e1e <tcp_close_shutdown+0xae>
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	2200      	movs	r2, #0
 8019e42:	60da      	str	r2, [r3, #12]
 8019e44:	4b37      	ldr	r3, [pc, #220]	; (8019f24 <tcp_close_shutdown+0x1b4>)
 8019e46:	2201      	movs	r2, #1
 8019e48:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8019e4a:	4b37      	ldr	r3, [pc, #220]	; (8019f28 <tcp_close_shutdown+0x1b8>)
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	687a      	ldr	r2, [r7, #4]
 8019e50:	429a      	cmp	r2, r3
 8019e52:	d102      	bne.n	8019e5a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8019e54:	f003 ffe6 	bl	801de24 <tcp_trigger_input_pcb_close>
 8019e58:	e002      	b.n	8019e60 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8019e5a:	6878      	ldr	r0, [r7, #4]
 8019e5c:	f7ff fed6 	bl	8019c0c <tcp_free>
      }
      return ERR_OK;
 8019e60:	2300      	movs	r3, #0
 8019e62:	e050      	b.n	8019f06 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	7d1b      	ldrb	r3, [r3, #20]
 8019e68:	2b02      	cmp	r3, #2
 8019e6a:	d03b      	beq.n	8019ee4 <tcp_close_shutdown+0x174>
 8019e6c:	2b02      	cmp	r3, #2
 8019e6e:	dc44      	bgt.n	8019efa <tcp_close_shutdown+0x18a>
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d002      	beq.n	8019e7a <tcp_close_shutdown+0x10a>
 8019e74:	2b01      	cmp	r3, #1
 8019e76:	d02a      	beq.n	8019ece <tcp_close_shutdown+0x15e>
 8019e78:	e03f      	b.n	8019efa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	8adb      	ldrh	r3, [r3, #22]
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d021      	beq.n	8019ec6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019e82:	4b2a      	ldr	r3, [pc, #168]	; (8019f2c <tcp_close_shutdown+0x1bc>)
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	687a      	ldr	r2, [r7, #4]
 8019e88:	429a      	cmp	r2, r3
 8019e8a:	d105      	bne.n	8019e98 <tcp_close_shutdown+0x128>
 8019e8c:	4b27      	ldr	r3, [pc, #156]	; (8019f2c <tcp_close_shutdown+0x1bc>)
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	68db      	ldr	r3, [r3, #12]
 8019e92:	4a26      	ldr	r2, [pc, #152]	; (8019f2c <tcp_close_shutdown+0x1bc>)
 8019e94:	6013      	str	r3, [r2, #0]
 8019e96:	e013      	b.n	8019ec0 <tcp_close_shutdown+0x150>
 8019e98:	4b24      	ldr	r3, [pc, #144]	; (8019f2c <tcp_close_shutdown+0x1bc>)
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	60bb      	str	r3, [r7, #8]
 8019e9e:	e00c      	b.n	8019eba <tcp_close_shutdown+0x14a>
 8019ea0:	68bb      	ldr	r3, [r7, #8]
 8019ea2:	68db      	ldr	r3, [r3, #12]
 8019ea4:	687a      	ldr	r2, [r7, #4]
 8019ea6:	429a      	cmp	r2, r3
 8019ea8:	d104      	bne.n	8019eb4 <tcp_close_shutdown+0x144>
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	68da      	ldr	r2, [r3, #12]
 8019eae:	68bb      	ldr	r3, [r7, #8]
 8019eb0:	60da      	str	r2, [r3, #12]
 8019eb2:	e005      	b.n	8019ec0 <tcp_close_shutdown+0x150>
 8019eb4:	68bb      	ldr	r3, [r7, #8]
 8019eb6:	68db      	ldr	r3, [r3, #12]
 8019eb8:	60bb      	str	r3, [r7, #8]
 8019eba:	68bb      	ldr	r3, [r7, #8]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d1ef      	bne.n	8019ea0 <tcp_close_shutdown+0x130>
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	2200      	movs	r2, #0
 8019ec4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8019ec6:	6878      	ldr	r0, [r7, #4]
 8019ec8:	f7ff fea0 	bl	8019c0c <tcp_free>
      break;
 8019ecc:	e01a      	b.n	8019f04 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8019ece:	6878      	ldr	r0, [r7, #4]
 8019ed0:	f7ff ff14 	bl	8019cfc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8019ed4:	6879      	ldr	r1, [r7, #4]
 8019ed6:	4816      	ldr	r0, [pc, #88]	; (8019f30 <tcp_close_shutdown+0x1c0>)
 8019ed8:	f001 fb30 	bl	801b53c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8019edc:	6878      	ldr	r0, [r7, #4]
 8019ede:	f7ff feb1 	bl	8019c44 <tcp_free_listen>
      break;
 8019ee2:	e00f      	b.n	8019f04 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019ee4:	6879      	ldr	r1, [r7, #4]
 8019ee6:	480e      	ldr	r0, [pc, #56]	; (8019f20 <tcp_close_shutdown+0x1b0>)
 8019ee8:	f001 fb28 	bl	801b53c <tcp_pcb_remove>
 8019eec:	4b0d      	ldr	r3, [pc, #52]	; (8019f24 <tcp_close_shutdown+0x1b4>)
 8019eee:	2201      	movs	r2, #1
 8019ef0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8019ef2:	6878      	ldr	r0, [r7, #4]
 8019ef4:	f7ff fe8a 	bl	8019c0c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8019ef8:	e004      	b.n	8019f04 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8019efa:	6878      	ldr	r0, [r7, #4]
 8019efc:	f000 f81a 	bl	8019f34 <tcp_close_shutdown_fin>
 8019f00:	4603      	mov	r3, r0
 8019f02:	e000      	b.n	8019f06 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8019f04:	2300      	movs	r3, #0
}
 8019f06:	4618      	mov	r0, r3
 8019f08:	3710      	adds	r7, #16
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8019f0e:	bf00      	nop
 8019f10:	0802620c 	.word	0x0802620c
 8019f14:	080262e0 	.word	0x080262e0
 8019f18:	08026250 	.word	0x08026250
 8019f1c:	08026300 	.word	0x08026300
 8019f20:	20011324 	.word	0x20011324
 8019f24:	2001132c 	.word	0x2001132c
 8019f28:	20011364 	.word	0x20011364
 8019f2c:	2001131c 	.word	0x2001131c
 8019f30:	20011320 	.word	0x20011320

08019f34 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8019f34:	b580      	push	{r7, lr}
 8019f36:	b084      	sub	sp, #16
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d106      	bne.n	8019f50 <tcp_close_shutdown_fin+0x1c>
 8019f42:	4b2e      	ldr	r3, [pc, #184]	; (8019ffc <tcp_close_shutdown_fin+0xc8>)
 8019f44:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8019f48:	492d      	ldr	r1, [pc, #180]	; (801a000 <tcp_close_shutdown_fin+0xcc>)
 8019f4a:	482e      	ldr	r0, [pc, #184]	; (801a004 <tcp_close_shutdown_fin+0xd0>)
 8019f4c:	f009 fc80 	bl	8023850 <iprintf>

  switch (pcb->state) {
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	7d1b      	ldrb	r3, [r3, #20]
 8019f54:	2b07      	cmp	r3, #7
 8019f56:	d020      	beq.n	8019f9a <tcp_close_shutdown_fin+0x66>
 8019f58:	2b07      	cmp	r3, #7
 8019f5a:	dc2b      	bgt.n	8019fb4 <tcp_close_shutdown_fin+0x80>
 8019f5c:	2b03      	cmp	r3, #3
 8019f5e:	d002      	beq.n	8019f66 <tcp_close_shutdown_fin+0x32>
 8019f60:	2b04      	cmp	r3, #4
 8019f62:	d00d      	beq.n	8019f80 <tcp_close_shutdown_fin+0x4c>
 8019f64:	e026      	b.n	8019fb4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8019f66:	6878      	ldr	r0, [r7, #4]
 8019f68:	f004 fdc6 	bl	801eaf8 <tcp_send_fin>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d11f      	bne.n	8019fb8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	2205      	movs	r2, #5
 8019f7c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019f7e:	e01b      	b.n	8019fb8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8019f80:	6878      	ldr	r0, [r7, #4]
 8019f82:	f004 fdb9 	bl	801eaf8 <tcp_send_fin>
 8019f86:	4603      	mov	r3, r0
 8019f88:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d114      	bne.n	8019fbc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	2205      	movs	r2, #5
 8019f96:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019f98:	e010      	b.n	8019fbc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8019f9a:	6878      	ldr	r0, [r7, #4]
 8019f9c:	f004 fdac 	bl	801eaf8 <tcp_send_fin>
 8019fa0:	4603      	mov	r3, r0
 8019fa2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d109      	bne.n	8019fc0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	2209      	movs	r2, #9
 8019fb0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019fb2:	e005      	b.n	8019fc0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	e01c      	b.n	8019ff2 <tcp_close_shutdown_fin+0xbe>
      break;
 8019fb8:	bf00      	nop
 8019fba:	e002      	b.n	8019fc2 <tcp_close_shutdown_fin+0x8e>
      break;
 8019fbc:	bf00      	nop
 8019fbe:	e000      	b.n	8019fc2 <tcp_close_shutdown_fin+0x8e>
      break;
 8019fc0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8019fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d103      	bne.n	8019fd2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8019fca:	6878      	ldr	r0, [r7, #4]
 8019fcc:	f004 fed2 	bl	801ed74 <tcp_output>
 8019fd0:	e00d      	b.n	8019fee <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8019fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019fda:	d108      	bne.n	8019fee <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	8b5b      	ldrh	r3, [r3, #26]
 8019fe0:	f043 0308 	orr.w	r3, r3, #8
 8019fe4:	b29a      	uxth	r2, r3
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8019fea:	2300      	movs	r3, #0
 8019fec:	e001      	b.n	8019ff2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8019fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	3710      	adds	r7, #16
 8019ff6:	46bd      	mov	sp, r7
 8019ff8:	bd80      	pop	{r7, pc}
 8019ffa:	bf00      	nop
 8019ffc:	0802620c 	.word	0x0802620c
 801a000:	080262bc 	.word	0x080262bc
 801a004:	08026250 	.word	0x08026250

0801a008 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b082      	sub	sp, #8
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d109      	bne.n	801a02a <tcp_close+0x22>
 801a016:	4b0f      	ldr	r3, [pc, #60]	; (801a054 <tcp_close+0x4c>)
 801a018:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801a01c:	490e      	ldr	r1, [pc, #56]	; (801a058 <tcp_close+0x50>)
 801a01e:	480f      	ldr	r0, [pc, #60]	; (801a05c <tcp_close+0x54>)
 801a020:	f009 fc16 	bl	8023850 <iprintf>
 801a024:	f06f 030f 	mvn.w	r3, #15
 801a028:	e00f      	b.n	801a04a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	7d1b      	ldrb	r3, [r3, #20]
 801a02e:	2b01      	cmp	r3, #1
 801a030:	d006      	beq.n	801a040 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	8b5b      	ldrh	r3, [r3, #26]
 801a036:	f043 0310 	orr.w	r3, r3, #16
 801a03a:	b29a      	uxth	r2, r3
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801a040:	2101      	movs	r1, #1
 801a042:	6878      	ldr	r0, [r7, #4]
 801a044:	f7ff fe94 	bl	8019d70 <tcp_close_shutdown>
 801a048:	4603      	mov	r3, r0
}
 801a04a:	4618      	mov	r0, r3
 801a04c:	3708      	adds	r7, #8
 801a04e:	46bd      	mov	sp, r7
 801a050:	bd80      	pop	{r7, pc}
 801a052:	bf00      	nop
 801a054:	0802620c 	.word	0x0802620c
 801a058:	0802631c 	.word	0x0802631c
 801a05c:	08026250 	.word	0x08026250

0801a060 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801a060:	b580      	push	{r7, lr}
 801a062:	b084      	sub	sp, #16
 801a064:	af00      	add	r7, sp, #0
 801a066:	60f8      	str	r0, [r7, #12]
 801a068:	60b9      	str	r1, [r7, #8]
 801a06a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d109      	bne.n	801a086 <tcp_shutdown+0x26>
 801a072:	4b26      	ldr	r3, [pc, #152]	; (801a10c <tcp_shutdown+0xac>)
 801a074:	f240 2207 	movw	r2, #519	; 0x207
 801a078:	4925      	ldr	r1, [pc, #148]	; (801a110 <tcp_shutdown+0xb0>)
 801a07a:	4826      	ldr	r0, [pc, #152]	; (801a114 <tcp_shutdown+0xb4>)
 801a07c:	f009 fbe8 	bl	8023850 <iprintf>
 801a080:	f06f 030f 	mvn.w	r3, #15
 801a084:	e03d      	b.n	801a102 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	7d1b      	ldrb	r3, [r3, #20]
 801a08a:	2b01      	cmp	r3, #1
 801a08c:	d102      	bne.n	801a094 <tcp_shutdown+0x34>
    return ERR_CONN;
 801a08e:	f06f 030a 	mvn.w	r3, #10
 801a092:	e036      	b.n	801a102 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801a094:	68bb      	ldr	r3, [r7, #8]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d01b      	beq.n	801a0d2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	8b5b      	ldrh	r3, [r3, #26]
 801a09e:	f043 0310 	orr.w	r3, r3, #16
 801a0a2:	b29a      	uxth	r2, r3
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d005      	beq.n	801a0ba <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801a0ae:	2101      	movs	r1, #1
 801a0b0:	68f8      	ldr	r0, [r7, #12]
 801a0b2:	f7ff fe5d 	bl	8019d70 <tcp_close_shutdown>
 801a0b6:	4603      	mov	r3, r0
 801a0b8:	e023      	b.n	801a102 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d007      	beq.n	801a0d2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	f7ff faf4 	bl	80196b4 <pbuf_free>
      pcb->refused_data = NULL;
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	2200      	movs	r2, #0
 801a0d0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d013      	beq.n	801a100 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	7d1b      	ldrb	r3, [r3, #20]
 801a0dc:	2b04      	cmp	r3, #4
 801a0de:	dc02      	bgt.n	801a0e6 <tcp_shutdown+0x86>
 801a0e0:	2b03      	cmp	r3, #3
 801a0e2:	da02      	bge.n	801a0ea <tcp_shutdown+0x8a>
 801a0e4:	e009      	b.n	801a0fa <tcp_shutdown+0x9a>
 801a0e6:	2b07      	cmp	r3, #7
 801a0e8:	d107      	bne.n	801a0fa <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801a0ea:	68bb      	ldr	r3, [r7, #8]
 801a0ec:	b2db      	uxtb	r3, r3
 801a0ee:	4619      	mov	r1, r3
 801a0f0:	68f8      	ldr	r0, [r7, #12]
 801a0f2:	f7ff fe3d 	bl	8019d70 <tcp_close_shutdown>
 801a0f6:	4603      	mov	r3, r0
 801a0f8:	e003      	b.n	801a102 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801a0fa:	f06f 030a 	mvn.w	r3, #10
 801a0fe:	e000      	b.n	801a102 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801a100:	2300      	movs	r3, #0
}
 801a102:	4618      	mov	r0, r3
 801a104:	3710      	adds	r7, #16
 801a106:	46bd      	mov	sp, r7
 801a108:	bd80      	pop	{r7, pc}
 801a10a:	bf00      	nop
 801a10c:	0802620c 	.word	0x0802620c
 801a110:	08026334 	.word	0x08026334
 801a114:	08026250 	.word	0x08026250

0801a118 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b08e      	sub	sp, #56	; 0x38
 801a11c:	af04      	add	r7, sp, #16
 801a11e:	6078      	str	r0, [r7, #4]
 801a120:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	2b00      	cmp	r3, #0
 801a126:	d107      	bne.n	801a138 <tcp_abandon+0x20>
 801a128:	4b52      	ldr	r3, [pc, #328]	; (801a274 <tcp_abandon+0x15c>)
 801a12a:	f240 223d 	movw	r2, #573	; 0x23d
 801a12e:	4952      	ldr	r1, [pc, #328]	; (801a278 <tcp_abandon+0x160>)
 801a130:	4852      	ldr	r0, [pc, #328]	; (801a27c <tcp_abandon+0x164>)
 801a132:	f009 fb8d 	bl	8023850 <iprintf>
 801a136:	e099      	b.n	801a26c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	7d1b      	ldrb	r3, [r3, #20]
 801a13c:	2b01      	cmp	r3, #1
 801a13e:	d106      	bne.n	801a14e <tcp_abandon+0x36>
 801a140:	4b4c      	ldr	r3, [pc, #304]	; (801a274 <tcp_abandon+0x15c>)
 801a142:	f44f 7210 	mov.w	r2, #576	; 0x240
 801a146:	494e      	ldr	r1, [pc, #312]	; (801a280 <tcp_abandon+0x168>)
 801a148:	484c      	ldr	r0, [pc, #304]	; (801a27c <tcp_abandon+0x164>)
 801a14a:	f009 fb81 	bl	8023850 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	7d1b      	ldrb	r3, [r3, #20]
 801a152:	2b0a      	cmp	r3, #10
 801a154:	d107      	bne.n	801a166 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801a156:	6879      	ldr	r1, [r7, #4]
 801a158:	484a      	ldr	r0, [pc, #296]	; (801a284 <tcp_abandon+0x16c>)
 801a15a:	f001 f9ef 	bl	801b53c <tcp_pcb_remove>
    tcp_free(pcb);
 801a15e:	6878      	ldr	r0, [r7, #4]
 801a160:	f7ff fd54 	bl	8019c0c <tcp_free>
 801a164:	e082      	b.n	801a26c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801a166:	2300      	movs	r3, #0
 801a168:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801a16a:	2300      	movs	r3, #0
 801a16c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a172:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a178:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a180:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	691b      	ldr	r3, [r3, #16]
 801a186:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	7d1b      	ldrb	r3, [r3, #20]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d126      	bne.n	801a1de <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	8adb      	ldrh	r3, [r3, #22]
 801a194:	2b00      	cmp	r3, #0
 801a196:	d02e      	beq.n	801a1f6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801a198:	4b3b      	ldr	r3, [pc, #236]	; (801a288 <tcp_abandon+0x170>)
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	687a      	ldr	r2, [r7, #4]
 801a19e:	429a      	cmp	r2, r3
 801a1a0:	d105      	bne.n	801a1ae <tcp_abandon+0x96>
 801a1a2:	4b39      	ldr	r3, [pc, #228]	; (801a288 <tcp_abandon+0x170>)
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	68db      	ldr	r3, [r3, #12]
 801a1a8:	4a37      	ldr	r2, [pc, #220]	; (801a288 <tcp_abandon+0x170>)
 801a1aa:	6013      	str	r3, [r2, #0]
 801a1ac:	e013      	b.n	801a1d6 <tcp_abandon+0xbe>
 801a1ae:	4b36      	ldr	r3, [pc, #216]	; (801a288 <tcp_abandon+0x170>)
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	61fb      	str	r3, [r7, #28]
 801a1b4:	e00c      	b.n	801a1d0 <tcp_abandon+0xb8>
 801a1b6:	69fb      	ldr	r3, [r7, #28]
 801a1b8:	68db      	ldr	r3, [r3, #12]
 801a1ba:	687a      	ldr	r2, [r7, #4]
 801a1bc:	429a      	cmp	r2, r3
 801a1be:	d104      	bne.n	801a1ca <tcp_abandon+0xb2>
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	68da      	ldr	r2, [r3, #12]
 801a1c4:	69fb      	ldr	r3, [r7, #28]
 801a1c6:	60da      	str	r2, [r3, #12]
 801a1c8:	e005      	b.n	801a1d6 <tcp_abandon+0xbe>
 801a1ca:	69fb      	ldr	r3, [r7, #28]
 801a1cc:	68db      	ldr	r3, [r3, #12]
 801a1ce:	61fb      	str	r3, [r7, #28]
 801a1d0:	69fb      	ldr	r3, [r7, #28]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d1ef      	bne.n	801a1b6 <tcp_abandon+0x9e>
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	2200      	movs	r2, #0
 801a1da:	60da      	str	r2, [r3, #12]
 801a1dc:	e00b      	b.n	801a1f6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801a1de:	683b      	ldr	r3, [r7, #0]
 801a1e0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	8adb      	ldrh	r3, [r3, #22]
 801a1e6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801a1e8:	6879      	ldr	r1, [r7, #4]
 801a1ea:	4828      	ldr	r0, [pc, #160]	; (801a28c <tcp_abandon+0x174>)
 801a1ec:	f001 f9a6 	bl	801b53c <tcp_pcb_remove>
 801a1f0:	4b27      	ldr	r3, [pc, #156]	; (801a290 <tcp_abandon+0x178>)
 801a1f2:	2201      	movs	r2, #1
 801a1f4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d004      	beq.n	801a208 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a202:	4618      	mov	r0, r3
 801a204:	f000 fe7a 	bl	801aefc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d004      	beq.n	801a21a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a214:	4618      	mov	r0, r3
 801a216:	f000 fe71 	bl	801aefc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d004      	beq.n	801a22c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a226:	4618      	mov	r0, r3
 801a228:	f000 fe68 	bl	801aefc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d00e      	beq.n	801a250 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801a232:	6879      	ldr	r1, [r7, #4]
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	3304      	adds	r3, #4
 801a238:	687a      	ldr	r2, [r7, #4]
 801a23a:	8b12      	ldrh	r2, [r2, #24]
 801a23c:	9202      	str	r2, [sp, #8]
 801a23e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a240:	9201      	str	r2, [sp, #4]
 801a242:	9300      	str	r3, [sp, #0]
 801a244:	460b      	mov	r3, r1
 801a246:	697a      	ldr	r2, [r7, #20]
 801a248:	69b9      	ldr	r1, [r7, #24]
 801a24a:	6878      	ldr	r0, [r7, #4]
 801a24c:	f005 fb46 	bl	801f8dc <tcp_rst>
    }
    last_state = pcb->state;
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	7d1b      	ldrb	r3, [r3, #20]
 801a254:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801a256:	6878      	ldr	r0, [r7, #4]
 801a258:	f7ff fcd8 	bl	8019c0c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801a25c:	693b      	ldr	r3, [r7, #16]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d004      	beq.n	801a26c <tcp_abandon+0x154>
 801a262:	693b      	ldr	r3, [r7, #16]
 801a264:	f06f 010c 	mvn.w	r1, #12
 801a268:	68f8      	ldr	r0, [r7, #12]
 801a26a:	4798      	blx	r3
  }
}
 801a26c:	3728      	adds	r7, #40	; 0x28
 801a26e:	46bd      	mov	sp, r7
 801a270:	bd80      	pop	{r7, pc}
 801a272:	bf00      	nop
 801a274:	0802620c 	.word	0x0802620c
 801a278:	08026350 	.word	0x08026350
 801a27c:	08026250 	.word	0x08026250
 801a280:	0802636c 	.word	0x0802636c
 801a284:	20011328 	.word	0x20011328
 801a288:	2001131c 	.word	0x2001131c
 801a28c:	20011324 	.word	0x20011324
 801a290:	2001132c 	.word	0x2001132c

0801a294 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b082      	sub	sp, #8
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801a29c:	2101      	movs	r1, #1
 801a29e:	6878      	ldr	r0, [r7, #4]
 801a2a0:	f7ff ff3a 	bl	801a118 <tcp_abandon>
}
 801a2a4:	bf00      	nop
 801a2a6:	3708      	adds	r7, #8
 801a2a8:	46bd      	mov	sp, r7
 801a2aa:	bd80      	pop	{r7, pc}

0801a2ac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b084      	sub	sp, #16
 801a2b0:	af00      	add	r7, sp, #0
 801a2b2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d106      	bne.n	801a2c8 <tcp_update_rcv_ann_wnd+0x1c>
 801a2ba:	4b25      	ldr	r3, [pc, #148]	; (801a350 <tcp_update_rcv_ann_wnd+0xa4>)
 801a2bc:	f240 32a6 	movw	r2, #934	; 0x3a6
 801a2c0:	4924      	ldr	r1, [pc, #144]	; (801a354 <tcp_update_rcv_ann_wnd+0xa8>)
 801a2c2:	4825      	ldr	r0, [pc, #148]	; (801a358 <tcp_update_rcv_ann_wnd+0xac>)
 801a2c4:	f009 fac4 	bl	8023850 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2cc:	687a      	ldr	r2, [r7, #4]
 801a2ce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801a2d0:	4413      	add	r3, r2
 801a2d2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2d8:	687a      	ldr	r2, [r7, #4]
 801a2da:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801a2dc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801a2e0:	bf28      	it	cs
 801a2e2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801a2e6:	b292      	uxth	r2, r2
 801a2e8:	4413      	add	r3, r2
 801a2ea:	68fa      	ldr	r2, [r7, #12]
 801a2ec:	1ad3      	subs	r3, r2, r3
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	db08      	blt.n	801a304 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2fe:	68fa      	ldr	r2, [r7, #12]
 801a300:	1ad3      	subs	r3, r2, r3
 801a302:	e020      	b.n	801a346 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a30c:	1ad3      	subs	r3, r2, r3
 801a30e:	2b00      	cmp	r3, #0
 801a310:	dd03      	ble.n	801a31a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	2200      	movs	r2, #0
 801a316:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a318:	e014      	b.n	801a344 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a322:	1ad3      	subs	r3, r2, r3
 801a324:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801a326:	68bb      	ldr	r3, [r7, #8]
 801a328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a32c:	d306      	bcc.n	801a33c <tcp_update_rcv_ann_wnd+0x90>
 801a32e:	4b08      	ldr	r3, [pc, #32]	; (801a350 <tcp_update_rcv_ann_wnd+0xa4>)
 801a330:	f240 32b6 	movw	r2, #950	; 0x3b6
 801a334:	4909      	ldr	r1, [pc, #36]	; (801a35c <tcp_update_rcv_ann_wnd+0xb0>)
 801a336:	4808      	ldr	r0, [pc, #32]	; (801a358 <tcp_update_rcv_ann_wnd+0xac>)
 801a338:	f009 fa8a 	bl	8023850 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801a33c:	68bb      	ldr	r3, [r7, #8]
 801a33e:	b29a      	uxth	r2, r3
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801a344:	2300      	movs	r3, #0
  }
}
 801a346:	4618      	mov	r0, r3
 801a348:	3710      	adds	r7, #16
 801a34a:	46bd      	mov	sp, r7
 801a34c:	bd80      	pop	{r7, pc}
 801a34e:	bf00      	nop
 801a350:	0802620c 	.word	0x0802620c
 801a354:	08026468 	.word	0x08026468
 801a358:	08026250 	.word	0x08026250
 801a35c:	0802648c 	.word	0x0802648c

0801a360 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b084      	sub	sp, #16
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
 801a368:	460b      	mov	r3, r1
 801a36a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d107      	bne.n	801a382 <tcp_recved+0x22>
 801a372:	4b1f      	ldr	r3, [pc, #124]	; (801a3f0 <tcp_recved+0x90>)
 801a374:	f240 32cf 	movw	r2, #975	; 0x3cf
 801a378:	491e      	ldr	r1, [pc, #120]	; (801a3f4 <tcp_recved+0x94>)
 801a37a:	481f      	ldr	r0, [pc, #124]	; (801a3f8 <tcp_recved+0x98>)
 801a37c:	f009 fa68 	bl	8023850 <iprintf>
 801a380:	e032      	b.n	801a3e8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	7d1b      	ldrb	r3, [r3, #20]
 801a386:	2b01      	cmp	r3, #1
 801a388:	d106      	bne.n	801a398 <tcp_recved+0x38>
 801a38a:	4b19      	ldr	r3, [pc, #100]	; (801a3f0 <tcp_recved+0x90>)
 801a38c:	f240 32d2 	movw	r2, #978	; 0x3d2
 801a390:	491a      	ldr	r1, [pc, #104]	; (801a3fc <tcp_recved+0x9c>)
 801a392:	4819      	ldr	r0, [pc, #100]	; (801a3f8 <tcp_recved+0x98>)
 801a394:	f009 fa5c 	bl	8023850 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a39c:	887b      	ldrh	r3, [r7, #2]
 801a39e:	4413      	add	r3, r2
 801a3a0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801a3a2:	89fb      	ldrh	r3, [r7, #14]
 801a3a4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a3a8:	d804      	bhi.n	801a3b4 <tcp_recved+0x54>
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a3ae:	89fa      	ldrh	r2, [r7, #14]
 801a3b0:	429a      	cmp	r2, r3
 801a3b2:	d204      	bcs.n	801a3be <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a3ba:	851a      	strh	r2, [r3, #40]	; 0x28
 801a3bc:	e002      	b.n	801a3c4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	89fa      	ldrh	r2, [r7, #14]
 801a3c2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801a3c4:	6878      	ldr	r0, [r7, #4]
 801a3c6:	f7ff ff71 	bl	801a2ac <tcp_update_rcv_ann_wnd>
 801a3ca:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801a3cc:	68bb      	ldr	r3, [r7, #8]
 801a3ce:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a3d2:	d309      	bcc.n	801a3e8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	8b5b      	ldrh	r3, [r3, #26]
 801a3d8:	f043 0302 	orr.w	r3, r3, #2
 801a3dc:	b29a      	uxth	r2, r3
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a3e2:	6878      	ldr	r0, [r7, #4]
 801a3e4:	f004 fcc6 	bl	801ed74 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801a3e8:	3710      	adds	r7, #16
 801a3ea:	46bd      	mov	sp, r7
 801a3ec:	bd80      	pop	{r7, pc}
 801a3ee:	bf00      	nop
 801a3f0:	0802620c 	.word	0x0802620c
 801a3f4:	080264a8 	.word	0x080264a8
 801a3f8:	08026250 	.word	0x08026250
 801a3fc:	080264c0 	.word	0x080264c0

0801a400 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801a400:	b480      	push	{r7}
 801a402:	b083      	sub	sp, #12
 801a404:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801a406:	2300      	movs	r3, #0
 801a408:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801a40a:	4b1e      	ldr	r3, [pc, #120]	; (801a484 <tcp_new_port+0x84>)
 801a40c:	881b      	ldrh	r3, [r3, #0]
 801a40e:	3301      	adds	r3, #1
 801a410:	b29a      	uxth	r2, r3
 801a412:	4b1c      	ldr	r3, [pc, #112]	; (801a484 <tcp_new_port+0x84>)
 801a414:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801a416:	4b1b      	ldr	r3, [pc, #108]	; (801a484 <tcp_new_port+0x84>)
 801a418:	881b      	ldrh	r3, [r3, #0]
 801a41a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a41e:	4293      	cmp	r3, r2
 801a420:	d103      	bne.n	801a42a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801a422:	4b18      	ldr	r3, [pc, #96]	; (801a484 <tcp_new_port+0x84>)
 801a424:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801a428:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801a42a:	2300      	movs	r3, #0
 801a42c:	71fb      	strb	r3, [r7, #7]
 801a42e:	e01e      	b.n	801a46e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801a430:	79fb      	ldrb	r3, [r7, #7]
 801a432:	4a15      	ldr	r2, [pc, #84]	; (801a488 <tcp_new_port+0x88>)
 801a434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	603b      	str	r3, [r7, #0]
 801a43c:	e011      	b.n	801a462 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801a43e:	683b      	ldr	r3, [r7, #0]
 801a440:	8ada      	ldrh	r2, [r3, #22]
 801a442:	4b10      	ldr	r3, [pc, #64]	; (801a484 <tcp_new_port+0x84>)
 801a444:	881b      	ldrh	r3, [r3, #0]
 801a446:	429a      	cmp	r2, r3
 801a448:	d108      	bne.n	801a45c <tcp_new_port+0x5c>
        n++;
 801a44a:	88bb      	ldrh	r3, [r7, #4]
 801a44c:	3301      	adds	r3, #1
 801a44e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801a450:	88bb      	ldrh	r3, [r7, #4]
 801a452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a456:	d3d8      	bcc.n	801a40a <tcp_new_port+0xa>
          return 0;
 801a458:	2300      	movs	r3, #0
 801a45a:	e00d      	b.n	801a478 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801a45c:	683b      	ldr	r3, [r7, #0]
 801a45e:	68db      	ldr	r3, [r3, #12]
 801a460:	603b      	str	r3, [r7, #0]
 801a462:	683b      	ldr	r3, [r7, #0]
 801a464:	2b00      	cmp	r3, #0
 801a466:	d1ea      	bne.n	801a43e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801a468:	79fb      	ldrb	r3, [r7, #7]
 801a46a:	3301      	adds	r3, #1
 801a46c:	71fb      	strb	r3, [r7, #7]
 801a46e:	79fb      	ldrb	r3, [r7, #7]
 801a470:	2b03      	cmp	r3, #3
 801a472:	d9dd      	bls.n	801a430 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801a474:	4b03      	ldr	r3, [pc, #12]	; (801a484 <tcp_new_port+0x84>)
 801a476:	881b      	ldrh	r3, [r3, #0]
}
 801a478:	4618      	mov	r0, r3
 801a47a:	370c      	adds	r7, #12
 801a47c:	46bd      	mov	sp, r7
 801a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a482:	4770      	bx	lr
 801a484:	20000044 	.word	0x20000044
 801a488:	08028244 	.word	0x08028244

0801a48c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801a48c:	b580      	push	{r7, lr}
 801a48e:	b08a      	sub	sp, #40	; 0x28
 801a490:	af00      	add	r7, sp, #0
 801a492:	60f8      	str	r0, [r7, #12]
 801a494:	60b9      	str	r1, [r7, #8]
 801a496:	603b      	str	r3, [r7, #0]
 801a498:	4613      	mov	r3, r2
 801a49a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 801a49c:	2300      	movs	r3, #0
 801a49e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d109      	bne.n	801a4ba <tcp_connect+0x2e>
 801a4a6:	4b7d      	ldr	r3, [pc, #500]	; (801a69c <tcp_connect+0x210>)
 801a4a8:	f240 4235 	movw	r2, #1077	; 0x435
 801a4ac:	497c      	ldr	r1, [pc, #496]	; (801a6a0 <tcp_connect+0x214>)
 801a4ae:	487d      	ldr	r0, [pc, #500]	; (801a6a4 <tcp_connect+0x218>)
 801a4b0:	f009 f9ce 	bl	8023850 <iprintf>
 801a4b4:	f06f 030f 	mvn.w	r3, #15
 801a4b8:	e0ec      	b.n	801a694 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801a4ba:	68bb      	ldr	r3, [r7, #8]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d109      	bne.n	801a4d4 <tcp_connect+0x48>
 801a4c0:	4b76      	ldr	r3, [pc, #472]	; (801a69c <tcp_connect+0x210>)
 801a4c2:	f240 4236 	movw	r2, #1078	; 0x436
 801a4c6:	4978      	ldr	r1, [pc, #480]	; (801a6a8 <tcp_connect+0x21c>)
 801a4c8:	4876      	ldr	r0, [pc, #472]	; (801a6a4 <tcp_connect+0x218>)
 801a4ca:	f009 f9c1 	bl	8023850 <iprintf>
 801a4ce:	f06f 030f 	mvn.w	r3, #15
 801a4d2:	e0df      	b.n	801a694 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	7d1b      	ldrb	r3, [r3, #20]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d009      	beq.n	801a4f0 <tcp_connect+0x64>
 801a4dc:	4b6f      	ldr	r3, [pc, #444]	; (801a69c <tcp_connect+0x210>)
 801a4de:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801a4e2:	4972      	ldr	r1, [pc, #456]	; (801a6ac <tcp_connect+0x220>)
 801a4e4:	486f      	ldr	r0, [pc, #444]	; (801a6a4 <tcp_connect+0x218>)
 801a4e6:	f009 f9b3 	bl	8023850 <iprintf>
 801a4ea:	f06f 0309 	mvn.w	r3, #9
 801a4ee:	e0d1      	b.n	801a694 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801a4f0:	68bb      	ldr	r3, [r7, #8]
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d002      	beq.n	801a4fc <tcp_connect+0x70>
 801a4f6:	68bb      	ldr	r3, [r7, #8]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	e000      	b.n	801a4fe <tcp_connect+0x72>
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	68fa      	ldr	r2, [r7, #12]
 801a500:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	88fa      	ldrh	r2, [r7, #6]
 801a506:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	7a1b      	ldrb	r3, [r3, #8]
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d006      	beq.n	801a51e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	7a1b      	ldrb	r3, [r3, #8]
 801a514:	4618      	mov	r0, r3
 801a516:	f7fe fd3f 	bl	8018f98 <netif_get_by_index>
 801a51a:	6278      	str	r0, [r7, #36]	; 0x24
 801a51c:	e005      	b.n	801a52a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	3304      	adds	r3, #4
 801a522:	4618      	mov	r0, r3
 801a524:	f007 f91c 	bl	8021760 <ip4_route>
 801a528:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d102      	bne.n	801a536 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 801a530:	f06f 0303 	mvn.w	r3, #3
 801a534:	e0ae      	b.n	801a694 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d003      	beq.n	801a544 <tcp_connect+0xb8>
 801a53c:	68fb      	ldr	r3, [r7, #12]
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	2b00      	cmp	r3, #0
 801a542:	d111      	bne.n	801a568 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a546:	2b00      	cmp	r3, #0
 801a548:	d002      	beq.n	801a550 <tcp_connect+0xc4>
 801a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a54c:	3304      	adds	r3, #4
 801a54e:	e000      	b.n	801a552 <tcp_connect+0xc6>
 801a550:	2300      	movs	r3, #0
 801a552:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801a554:	69fb      	ldr	r3, [r7, #28]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d102      	bne.n	801a560 <tcp_connect+0xd4>
      return ERR_RTE;
 801a55a:	f06f 0303 	mvn.w	r3, #3
 801a55e:	e099      	b.n	801a694 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a560:	69fb      	ldr	r3, [r7, #28]
 801a562:	681a      	ldr	r2, [r3, #0]
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	8adb      	ldrh	r3, [r3, #22]
 801a56c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	8adb      	ldrh	r3, [r3, #22]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d10c      	bne.n	801a590 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801a576:	f7ff ff43 	bl	801a400 <tcp_new_port>
 801a57a:	4603      	mov	r3, r0
 801a57c:	461a      	mov	r2, r3
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	8adb      	ldrh	r3, [r3, #22]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d102      	bne.n	801a590 <tcp_connect+0x104>
      return ERR_BUF;
 801a58a:	f06f 0301 	mvn.w	r3, #1
 801a58e:	e081      	b.n	801a694 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 801a590:	68f8      	ldr	r0, [r7, #12]
 801a592:	f001 f867 	bl	801b664 <tcp_next_iss>
 801a596:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	2200      	movs	r2, #0
 801a59c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	697a      	ldr	r2, [r7, #20]
 801a5a2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801a5a4:	697b      	ldr	r3, [r7, #20]
 801a5a6:	1e5a      	subs	r2, r3, #1
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 801a5ac:	697b      	ldr	r3, [r7, #20]
 801a5ae:	1e5a      	subs	r2, r3, #1
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801a5b4:	697b      	ldr	r3, [r7, #20]
 801a5b6:	1e5a      	subs	r2, r3, #1
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a5bc:	68fb      	ldr	r3, [r7, #12]
 801a5be:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a5c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a5c4:	68fb      	ldr	r3, [r7, #12]
 801a5c6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a5cc:	68fb      	ldr	r3, [r7, #12]
 801a5ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801a5d4:	68fb      	ldr	r3, [r7, #12]
 801a5d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a5da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a5e4:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801a5e6:	68fb      	ldr	r3, [r7, #12]
 801a5e8:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	3304      	adds	r3, #4
 801a5ee:	461a      	mov	r2, r3
 801a5f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a5f2:	f001 f85d 	bl	801b6b0 <tcp_eff_send_mss_netif>
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	461a      	mov	r2, r3
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	2201      	movs	r2, #1
 801a602:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	683a      	ldr	r2, [r7, #0]
 801a60a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801a60e:	2102      	movs	r1, #2
 801a610:	68f8      	ldr	r0, [r7, #12]
 801a612:	f004 fac1 	bl	801eb98 <tcp_enqueue_flags>
 801a616:	4603      	mov	r3, r0
 801a618:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801a61a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d136      	bne.n	801a690 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801a622:	68fb      	ldr	r3, [r7, #12]
 801a624:	2202      	movs	r2, #2
 801a626:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801a628:	8b7b      	ldrh	r3, [r7, #26]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d021      	beq.n	801a672 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801a62e:	4b20      	ldr	r3, [pc, #128]	; (801a6b0 <tcp_connect+0x224>)
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	68fa      	ldr	r2, [r7, #12]
 801a634:	429a      	cmp	r2, r3
 801a636:	d105      	bne.n	801a644 <tcp_connect+0x1b8>
 801a638:	4b1d      	ldr	r3, [pc, #116]	; (801a6b0 <tcp_connect+0x224>)
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	68db      	ldr	r3, [r3, #12]
 801a63e:	4a1c      	ldr	r2, [pc, #112]	; (801a6b0 <tcp_connect+0x224>)
 801a640:	6013      	str	r3, [r2, #0]
 801a642:	e013      	b.n	801a66c <tcp_connect+0x1e0>
 801a644:	4b1a      	ldr	r3, [pc, #104]	; (801a6b0 <tcp_connect+0x224>)
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	623b      	str	r3, [r7, #32]
 801a64a:	e00c      	b.n	801a666 <tcp_connect+0x1da>
 801a64c:	6a3b      	ldr	r3, [r7, #32]
 801a64e:	68db      	ldr	r3, [r3, #12]
 801a650:	68fa      	ldr	r2, [r7, #12]
 801a652:	429a      	cmp	r2, r3
 801a654:	d104      	bne.n	801a660 <tcp_connect+0x1d4>
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	68da      	ldr	r2, [r3, #12]
 801a65a:	6a3b      	ldr	r3, [r7, #32]
 801a65c:	60da      	str	r2, [r3, #12]
 801a65e:	e005      	b.n	801a66c <tcp_connect+0x1e0>
 801a660:	6a3b      	ldr	r3, [r7, #32]
 801a662:	68db      	ldr	r3, [r3, #12]
 801a664:	623b      	str	r3, [r7, #32]
 801a666:	6a3b      	ldr	r3, [r7, #32]
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d1ef      	bne.n	801a64c <tcp_connect+0x1c0>
 801a66c:	68fb      	ldr	r3, [r7, #12]
 801a66e:	2200      	movs	r2, #0
 801a670:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801a672:	4b10      	ldr	r3, [pc, #64]	; (801a6b4 <tcp_connect+0x228>)
 801a674:	681a      	ldr	r2, [r3, #0]
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	60da      	str	r2, [r3, #12]
 801a67a:	4a0e      	ldr	r2, [pc, #56]	; (801a6b4 <tcp_connect+0x228>)
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	6013      	str	r3, [r2, #0]
 801a680:	f005 faee 	bl	801fc60 <tcp_timer_needed>
 801a684:	4b0c      	ldr	r3, [pc, #48]	; (801a6b8 <tcp_connect+0x22c>)
 801a686:	2201      	movs	r2, #1
 801a688:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801a68a:	68f8      	ldr	r0, [r7, #12]
 801a68c:	f004 fb72 	bl	801ed74 <tcp_output>
  }
  return ret;
 801a690:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801a694:	4618      	mov	r0, r3
 801a696:	3728      	adds	r7, #40	; 0x28
 801a698:	46bd      	mov	sp, r7
 801a69a:	bd80      	pop	{r7, pc}
 801a69c:	0802620c 	.word	0x0802620c
 801a6a0:	080264e8 	.word	0x080264e8
 801a6a4:	08026250 	.word	0x08026250
 801a6a8:	08026504 	.word	0x08026504
 801a6ac:	08026520 	.word	0x08026520
 801a6b0:	2001131c 	.word	0x2001131c
 801a6b4:	20011324 	.word	0x20011324
 801a6b8:	2001132c 	.word	0x2001132c

0801a6bc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801a6bc:	b5b0      	push	{r4, r5, r7, lr}
 801a6be:	b090      	sub	sp, #64	; 0x40
 801a6c0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801a6c8:	4b94      	ldr	r3, [pc, #592]	; (801a91c <tcp_slowtmr+0x260>)
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	3301      	adds	r3, #1
 801a6ce:	4a93      	ldr	r2, [pc, #588]	; (801a91c <tcp_slowtmr+0x260>)
 801a6d0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801a6d2:	4b93      	ldr	r3, [pc, #588]	; (801a920 <tcp_slowtmr+0x264>)
 801a6d4:	781b      	ldrb	r3, [r3, #0]
 801a6d6:	3301      	adds	r3, #1
 801a6d8:	b2da      	uxtb	r2, r3
 801a6da:	4b91      	ldr	r3, [pc, #580]	; (801a920 <tcp_slowtmr+0x264>)
 801a6dc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801a6de:	2300      	movs	r3, #0
 801a6e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801a6e2:	4b90      	ldr	r3, [pc, #576]	; (801a924 <tcp_slowtmr+0x268>)
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801a6e8:	e29d      	b.n	801ac26 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ec:	7d1b      	ldrb	r3, [r3, #20]
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d106      	bne.n	801a700 <tcp_slowtmr+0x44>
 801a6f2:	4b8d      	ldr	r3, [pc, #564]	; (801a928 <tcp_slowtmr+0x26c>)
 801a6f4:	f240 42be 	movw	r2, #1214	; 0x4be
 801a6f8:	498c      	ldr	r1, [pc, #560]	; (801a92c <tcp_slowtmr+0x270>)
 801a6fa:	488d      	ldr	r0, [pc, #564]	; (801a930 <tcp_slowtmr+0x274>)
 801a6fc:	f009 f8a8 	bl	8023850 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a702:	7d1b      	ldrb	r3, [r3, #20]
 801a704:	2b01      	cmp	r3, #1
 801a706:	d106      	bne.n	801a716 <tcp_slowtmr+0x5a>
 801a708:	4b87      	ldr	r3, [pc, #540]	; (801a928 <tcp_slowtmr+0x26c>)
 801a70a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801a70e:	4989      	ldr	r1, [pc, #548]	; (801a934 <tcp_slowtmr+0x278>)
 801a710:	4887      	ldr	r0, [pc, #540]	; (801a930 <tcp_slowtmr+0x274>)
 801a712:	f009 f89d 	bl	8023850 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801a716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a718:	7d1b      	ldrb	r3, [r3, #20]
 801a71a:	2b0a      	cmp	r3, #10
 801a71c:	d106      	bne.n	801a72c <tcp_slowtmr+0x70>
 801a71e:	4b82      	ldr	r3, [pc, #520]	; (801a928 <tcp_slowtmr+0x26c>)
 801a720:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801a724:	4984      	ldr	r1, [pc, #528]	; (801a938 <tcp_slowtmr+0x27c>)
 801a726:	4882      	ldr	r0, [pc, #520]	; (801a930 <tcp_slowtmr+0x274>)
 801a728:	f009 f892 	bl	8023850 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801a72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a72e:	7f9a      	ldrb	r2, [r3, #30]
 801a730:	4b7b      	ldr	r3, [pc, #492]	; (801a920 <tcp_slowtmr+0x264>)
 801a732:	781b      	ldrb	r3, [r3, #0]
 801a734:	429a      	cmp	r2, r3
 801a736:	d105      	bne.n	801a744 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801a738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a73a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a73e:	68db      	ldr	r3, [r3, #12]
 801a740:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801a742:	e270      	b.n	801ac26 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801a744:	4b76      	ldr	r3, [pc, #472]	; (801a920 <tcp_slowtmr+0x264>)
 801a746:	781a      	ldrb	r2, [r3, #0]
 801a748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a74a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801a74c:	2300      	movs	r3, #0
 801a74e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801a752:	2300      	movs	r3, #0
 801a754:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801a758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a75a:	7d1b      	ldrb	r3, [r3, #20]
 801a75c:	2b02      	cmp	r3, #2
 801a75e:	d10a      	bne.n	801a776 <tcp_slowtmr+0xba>
 801a760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a762:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a766:	2b05      	cmp	r3, #5
 801a768:	d905      	bls.n	801a776 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801a76a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a76e:	3301      	adds	r3, #1
 801a770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a774:	e11e      	b.n	801a9b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801a776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a778:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a77c:	2b0b      	cmp	r3, #11
 801a77e:	d905      	bls.n	801a78c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801a780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a784:	3301      	adds	r3, #1
 801a786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a78a:	e113      	b.n	801a9b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801a78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a78e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a792:	2b00      	cmp	r3, #0
 801a794:	d075      	beq.n	801a882 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801a796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d006      	beq.n	801a7ac <tcp_slowtmr+0xf0>
 801a79e:	4b62      	ldr	r3, [pc, #392]	; (801a928 <tcp_slowtmr+0x26c>)
 801a7a0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801a7a4:	4965      	ldr	r1, [pc, #404]	; (801a93c <tcp_slowtmr+0x280>)
 801a7a6:	4862      	ldr	r0, [pc, #392]	; (801a930 <tcp_slowtmr+0x274>)
 801a7a8:	f009 f852 	bl	8023850 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801a7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d106      	bne.n	801a7c2 <tcp_slowtmr+0x106>
 801a7b4:	4b5c      	ldr	r3, [pc, #368]	; (801a928 <tcp_slowtmr+0x26c>)
 801a7b6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801a7ba:	4961      	ldr	r1, [pc, #388]	; (801a940 <tcp_slowtmr+0x284>)
 801a7bc:	485c      	ldr	r0, [pc, #368]	; (801a930 <tcp_slowtmr+0x274>)
 801a7be:	f009 f847 	bl	8023850 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801a7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a7c8:	2b0b      	cmp	r3, #11
 801a7ca:	d905      	bls.n	801a7d8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801a7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a7d0:	3301      	adds	r3, #1
 801a7d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a7d6:	e0ed      	b.n	801a9b4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a7de:	3b01      	subs	r3, #1
 801a7e0:	4a58      	ldr	r2, [pc, #352]	; (801a944 <tcp_slowtmr+0x288>)
 801a7e2:	5cd3      	ldrb	r3, [r2, r3]
 801a7e4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a7ec:	7c7a      	ldrb	r2, [r7, #17]
 801a7ee:	429a      	cmp	r2, r3
 801a7f0:	d907      	bls.n	801a802 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801a7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a7f8:	3301      	adds	r3, #1
 801a7fa:	b2da      	uxtb	r2, r3
 801a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801a802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a804:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a808:	7c7a      	ldrb	r2, [r7, #17]
 801a80a:	429a      	cmp	r2, r3
 801a80c:	f200 80d2 	bhi.w	801a9b4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801a810:	2301      	movs	r3, #1
 801a812:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801a814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d108      	bne.n	801a830 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801a81e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a820:	f005 f950 	bl	801fac4 <tcp_zero_window_probe>
 801a824:	4603      	mov	r3, r0
 801a826:	2b00      	cmp	r3, #0
 801a828:	d014      	beq.n	801a854 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801a82a:	2300      	movs	r3, #0
 801a82c:	623b      	str	r3, [r7, #32]
 801a82e:	e011      	b.n	801a854 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801a830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a832:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a836:	4619      	mov	r1, r3
 801a838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a83a:	f004 f815 	bl	801e868 <tcp_split_unsent_seg>
 801a83e:	4603      	mov	r3, r0
 801a840:	2b00      	cmp	r3, #0
 801a842:	d107      	bne.n	801a854 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801a844:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a846:	f004 fa95 	bl	801ed74 <tcp_output>
 801a84a:	4603      	mov	r3, r0
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d101      	bne.n	801a854 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801a850:	2300      	movs	r3, #0
 801a852:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801a854:	6a3b      	ldr	r3, [r7, #32]
 801a856:	2b00      	cmp	r3, #0
 801a858:	f000 80ac 	beq.w	801a9b4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801a85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a85e:	2200      	movs	r2, #0
 801a860:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801a864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a866:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a86a:	2b06      	cmp	r3, #6
 801a86c:	f200 80a2 	bhi.w	801a9b4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a872:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a876:	3301      	adds	r3, #1
 801a878:	b2da      	uxtb	r2, r3
 801a87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a87c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801a880:	e098      	b.n	801a9b4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801a882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a884:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a888:	2b00      	cmp	r3, #0
 801a88a:	db0f      	blt.n	801a8ac <tcp_slowtmr+0x1f0>
 801a88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a88e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a892:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a896:	4293      	cmp	r3, r2
 801a898:	d008      	beq.n	801a8ac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a89c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a8a0:	b29b      	uxth	r3, r3
 801a8a2:	3301      	adds	r3, #1
 801a8a4:	b29b      	uxth	r3, r3
 801a8a6:	b21a      	sxth	r2, r3
 801a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8aa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801a8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8ae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801a8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8b4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a8b8:	429a      	cmp	r2, r3
 801a8ba:	db7b      	blt.n	801a9b4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801a8bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8be:	f004 fd4d 	bl	801f35c <tcp_rexmit_rto_prepare>
 801a8c2:	4603      	mov	r3, r0
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d007      	beq.n	801a8d8 <tcp_slowtmr+0x21c>
 801a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d171      	bne.n	801a9b4 <tcp_slowtmr+0x2f8>
 801a8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d06d      	beq.n	801a9b4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801a8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8da:	7d1b      	ldrb	r3, [r3, #20]
 801a8dc:	2b02      	cmp	r3, #2
 801a8de:	d03a      	beq.n	801a956 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a8e6:	2b0c      	cmp	r3, #12
 801a8e8:	bf28      	it	cs
 801a8ea:	230c      	movcs	r3, #12
 801a8ec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801a8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a8f4:	10db      	asrs	r3, r3, #3
 801a8f6:	b21b      	sxth	r3, r3
 801a8f8:	461a      	mov	r2, r3
 801a8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a900:	4413      	add	r3, r2
 801a902:	7efa      	ldrb	r2, [r7, #27]
 801a904:	4910      	ldr	r1, [pc, #64]	; (801a948 <tcp_slowtmr+0x28c>)
 801a906:	5c8a      	ldrb	r2, [r1, r2]
 801a908:	4093      	lsls	r3, r2
 801a90a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801a90c:	697b      	ldr	r3, [r7, #20]
 801a90e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801a912:	4293      	cmp	r3, r2
 801a914:	dc1a      	bgt.n	801a94c <tcp_slowtmr+0x290>
 801a916:	697b      	ldr	r3, [r7, #20]
 801a918:	b21a      	sxth	r2, r3
 801a91a:	e019      	b.n	801a950 <tcp_slowtmr+0x294>
 801a91c:	20011318 	.word	0x20011318
 801a920:	2001132e 	.word	0x2001132e
 801a924:	20011324 	.word	0x20011324
 801a928:	0802620c 	.word	0x0802620c
 801a92c:	08026550 	.word	0x08026550
 801a930:	08026250 	.word	0x08026250
 801a934:	0802657c 	.word	0x0802657c
 801a938:	080265a8 	.word	0x080265a8
 801a93c:	080265d8 	.word	0x080265d8
 801a940:	0802660c 	.word	0x0802660c
 801a944:	0802823c 	.word	0x0802823c
 801a948:	0802822c 	.word	0x0802822c
 801a94c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a952:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a958:	2200      	movs	r2, #0
 801a95a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a95e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a964:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a968:	4293      	cmp	r3, r2
 801a96a:	bf28      	it	cs
 801a96c:	4613      	movcs	r3, r2
 801a96e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801a970:	8a7b      	ldrh	r3, [r7, #18]
 801a972:	085b      	lsrs	r3, r3, #1
 801a974:	b29a      	uxth	r2, r3
 801a976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a978:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801a97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a97e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a986:	005b      	lsls	r3, r3, #1
 801a988:	b29b      	uxth	r3, r3
 801a98a:	429a      	cmp	r2, r3
 801a98c:	d206      	bcs.n	801a99c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801a98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a992:	005b      	lsls	r3, r3, #1
 801a994:	b29a      	uxth	r2, r3
 801a996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a998:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a99e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801a9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9a8:	2200      	movs	r2, #0
 801a9aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801a9ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a9b0:	f004 fd44 	bl	801f43c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801a9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9b6:	7d1b      	ldrb	r3, [r3, #20]
 801a9b8:	2b06      	cmp	r3, #6
 801a9ba:	d111      	bne.n	801a9e0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9be:	8b5b      	ldrh	r3, [r3, #26]
 801a9c0:	f003 0310 	and.w	r3, r3, #16
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d00b      	beq.n	801a9e0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a9c8:	4b9c      	ldr	r3, [pc, #624]	; (801ac3c <tcp_slowtmr+0x580>)
 801a9ca:	681a      	ldr	r2, [r3, #0]
 801a9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9ce:	6a1b      	ldr	r3, [r3, #32]
 801a9d0:	1ad3      	subs	r3, r2, r3
 801a9d2:	2b28      	cmp	r3, #40	; 0x28
 801a9d4:	d904      	bls.n	801a9e0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801a9d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9da:	3301      	adds	r3, #1
 801a9dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9e2:	7a5b      	ldrb	r3, [r3, #9]
 801a9e4:	f003 0308 	and.w	r3, r3, #8
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d04a      	beq.n	801aa82 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801a9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9ee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a9f0:	2b04      	cmp	r3, #4
 801a9f2:	d003      	beq.n	801a9fc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801a9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9f6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801a9f8:	2b07      	cmp	r3, #7
 801a9fa:	d142      	bne.n	801aa82 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a9fc:	4b8f      	ldr	r3, [pc, #572]	; (801ac3c <tcp_slowtmr+0x580>)
 801a9fe:	681a      	ldr	r2, [r3, #0]
 801aa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa02:	6a1b      	ldr	r3, [r3, #32]
 801aa04:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801aa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa08:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801aa0c:	4b8c      	ldr	r3, [pc, #560]	; (801ac40 <tcp_slowtmr+0x584>)
 801aa0e:	440b      	add	r3, r1
 801aa10:	498c      	ldr	r1, [pc, #560]	; (801ac44 <tcp_slowtmr+0x588>)
 801aa12:	fba1 1303 	umull	r1, r3, r1, r3
 801aa16:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801aa18:	429a      	cmp	r2, r3
 801aa1a:	d90a      	bls.n	801aa32 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801aa1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa20:	3301      	adds	r3, #1
 801aa22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801aa26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801aa2a:	3301      	adds	r3, #1
 801aa2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801aa30:	e027      	b.n	801aa82 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801aa32:	4b82      	ldr	r3, [pc, #520]	; (801ac3c <tcp_slowtmr+0x580>)
 801aa34:	681a      	ldr	r2, [r3, #0]
 801aa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa38:	6a1b      	ldr	r3, [r3, #32]
 801aa3a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801aa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa3e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa44:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801aa48:	4618      	mov	r0, r3
 801aa4a:	4b7f      	ldr	r3, [pc, #508]	; (801ac48 <tcp_slowtmr+0x58c>)
 801aa4c:	fb00 f303 	mul.w	r3, r0, r3
 801aa50:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801aa52:	497c      	ldr	r1, [pc, #496]	; (801ac44 <tcp_slowtmr+0x588>)
 801aa54:	fba1 1303 	umull	r1, r3, r1, r3
 801aa58:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801aa5a:	429a      	cmp	r2, r3
 801aa5c:	d911      	bls.n	801aa82 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801aa5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aa60:	f004 fff0 	bl	801fa44 <tcp_keepalive>
 801aa64:	4603      	mov	r3, r0
 801aa66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801aa6a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d107      	bne.n	801aa82 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa74:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801aa78:	3301      	adds	r3, #1
 801aa7a:	b2da      	uxtb	r2, r3
 801aa7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa7e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d011      	beq.n	801aaae <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801aa8a:	4b6c      	ldr	r3, [pc, #432]	; (801ac3c <tcp_slowtmr+0x580>)
 801aa8c:	681a      	ldr	r2, [r3, #0]
 801aa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa90:	6a1b      	ldr	r3, [r3, #32]
 801aa92:	1ad2      	subs	r2, r2, r3
 801aa94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa96:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801aa9a:	4619      	mov	r1, r3
 801aa9c:	460b      	mov	r3, r1
 801aa9e:	005b      	lsls	r3, r3, #1
 801aaa0:	440b      	add	r3, r1
 801aaa2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801aaa4:	429a      	cmp	r2, r3
 801aaa6:	d302      	bcc.n	801aaae <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801aaa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aaaa:	f000 feab 	bl	801b804 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aab0:	7d1b      	ldrb	r3, [r3, #20]
 801aab2:	2b03      	cmp	r3, #3
 801aab4:	d10b      	bne.n	801aace <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801aab6:	4b61      	ldr	r3, [pc, #388]	; (801ac3c <tcp_slowtmr+0x580>)
 801aab8:	681a      	ldr	r2, [r3, #0]
 801aaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aabc:	6a1b      	ldr	r3, [r3, #32]
 801aabe:	1ad3      	subs	r3, r2, r3
 801aac0:	2b28      	cmp	r3, #40	; 0x28
 801aac2:	d904      	bls.n	801aace <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801aac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aac8:	3301      	adds	r3, #1
 801aaca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801aace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aad0:	7d1b      	ldrb	r3, [r3, #20]
 801aad2:	2b09      	cmp	r3, #9
 801aad4:	d10b      	bne.n	801aaee <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801aad6:	4b59      	ldr	r3, [pc, #356]	; (801ac3c <tcp_slowtmr+0x580>)
 801aad8:	681a      	ldr	r2, [r3, #0]
 801aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aadc:	6a1b      	ldr	r3, [r3, #32]
 801aade:	1ad3      	subs	r3, r2, r3
 801aae0:	2bf0      	cmp	r3, #240	; 0xf0
 801aae2:	d904      	bls.n	801aaee <tcp_slowtmr+0x432>
        ++pcb_remove;
 801aae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aae8:	3301      	adds	r3, #1
 801aaea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801aaee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d060      	beq.n	801abb8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801aafc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801aafe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ab00:	f000 fccc 	bl	801b49c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801ab04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d010      	beq.n	801ab2c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801ab0a:	4b50      	ldr	r3, [pc, #320]	; (801ac4c <tcp_slowtmr+0x590>)
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab10:	429a      	cmp	r2, r3
 801ab12:	d106      	bne.n	801ab22 <tcp_slowtmr+0x466>
 801ab14:	4b4e      	ldr	r3, [pc, #312]	; (801ac50 <tcp_slowtmr+0x594>)
 801ab16:	f240 526d 	movw	r2, #1389	; 0x56d
 801ab1a:	494e      	ldr	r1, [pc, #312]	; (801ac54 <tcp_slowtmr+0x598>)
 801ab1c:	484e      	ldr	r0, [pc, #312]	; (801ac58 <tcp_slowtmr+0x59c>)
 801ab1e:	f008 fe97 	bl	8023850 <iprintf>
        prev->next = pcb->next;
 801ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab24:	68da      	ldr	r2, [r3, #12]
 801ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab28:	60da      	str	r2, [r3, #12]
 801ab2a:	e00f      	b.n	801ab4c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801ab2c:	4b47      	ldr	r3, [pc, #284]	; (801ac4c <tcp_slowtmr+0x590>)
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab32:	429a      	cmp	r2, r3
 801ab34:	d006      	beq.n	801ab44 <tcp_slowtmr+0x488>
 801ab36:	4b46      	ldr	r3, [pc, #280]	; (801ac50 <tcp_slowtmr+0x594>)
 801ab38:	f240 5271 	movw	r2, #1393	; 0x571
 801ab3c:	4947      	ldr	r1, [pc, #284]	; (801ac5c <tcp_slowtmr+0x5a0>)
 801ab3e:	4846      	ldr	r0, [pc, #280]	; (801ac58 <tcp_slowtmr+0x59c>)
 801ab40:	f008 fe86 	bl	8023850 <iprintf>
        tcp_active_pcbs = pcb->next;
 801ab44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab46:	68db      	ldr	r3, [r3, #12]
 801ab48:	4a40      	ldr	r2, [pc, #256]	; (801ac4c <tcp_slowtmr+0x590>)
 801ab4a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801ab4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d013      	beq.n	801ab7c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801ab54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab56:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab5a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801ab5c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab60:	3304      	adds	r3, #4
 801ab62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab64:	8ad2      	ldrh	r2, [r2, #22]
 801ab66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ab68:	8b09      	ldrh	r1, [r1, #24]
 801ab6a:	9102      	str	r1, [sp, #8]
 801ab6c:	9201      	str	r2, [sp, #4]
 801ab6e:	9300      	str	r3, [sp, #0]
 801ab70:	462b      	mov	r3, r5
 801ab72:	4622      	mov	r2, r4
 801ab74:	4601      	mov	r1, r0
 801ab76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ab78:	f004 feb0 	bl	801f8dc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801ab7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab7e:	691b      	ldr	r3, [r3, #16]
 801ab80:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801ab82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab84:	7d1b      	ldrb	r3, [r3, #20]
 801ab86:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab8a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801ab8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab8e:	68db      	ldr	r3, [r3, #12]
 801ab90:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801ab92:	6838      	ldr	r0, [r7, #0]
 801ab94:	f7ff f83a 	bl	8019c0c <tcp_free>

      tcp_active_pcbs_changed = 0;
 801ab98:	4b31      	ldr	r3, [pc, #196]	; (801ac60 <tcp_slowtmr+0x5a4>)
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801ab9e:	68fb      	ldr	r3, [r7, #12]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d004      	beq.n	801abae <tcp_slowtmr+0x4f2>
 801aba4:	68fb      	ldr	r3, [r7, #12]
 801aba6:	f06f 010c 	mvn.w	r1, #12
 801abaa:	68b8      	ldr	r0, [r7, #8]
 801abac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801abae:	4b2c      	ldr	r3, [pc, #176]	; (801ac60 <tcp_slowtmr+0x5a4>)
 801abb0:	781b      	ldrb	r3, [r3, #0]
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d037      	beq.n	801ac26 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801abb6:	e592      	b.n	801a6de <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abbe:	68db      	ldr	r3, [r3, #12]
 801abc0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801abc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abc4:	7f1b      	ldrb	r3, [r3, #28]
 801abc6:	3301      	adds	r3, #1
 801abc8:	b2da      	uxtb	r2, r3
 801abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abcc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801abce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abd0:	7f1a      	ldrb	r2, [r3, #28]
 801abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abd4:	7f5b      	ldrb	r3, [r3, #29]
 801abd6:	429a      	cmp	r2, r3
 801abd8:	d325      	bcc.n	801ac26 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801abda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abdc:	2200      	movs	r2, #0
 801abde:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801abe0:	4b1f      	ldr	r3, [pc, #124]	; (801ac60 <tcp_slowtmr+0x5a4>)
 801abe2:	2200      	movs	r2, #0
 801abe4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801abe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801abec:	2b00      	cmp	r3, #0
 801abee:	d00b      	beq.n	801ac08 <tcp_slowtmr+0x54c>
 801abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801abf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801abf8:	6912      	ldr	r2, [r2, #16]
 801abfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801abfc:	4610      	mov	r0, r2
 801abfe:	4798      	blx	r3
 801ac00:	4603      	mov	r3, r0
 801ac02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801ac06:	e002      	b.n	801ac0e <tcp_slowtmr+0x552>
 801ac08:	2300      	movs	r3, #0
 801ac0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801ac0e:	4b14      	ldr	r3, [pc, #80]	; (801ac60 <tcp_slowtmr+0x5a4>)
 801ac10:	781b      	ldrb	r3, [r3, #0]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d000      	beq.n	801ac18 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801ac16:	e562      	b.n	801a6de <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801ac18:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d102      	bne.n	801ac26 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801ac20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ac22:	f004 f8a7 	bl	801ed74 <tcp_output>
  while (pcb != NULL) {
 801ac26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	f47f ad5e 	bne.w	801a6ea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801ac2e:	2300      	movs	r3, #0
 801ac30:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801ac32:	4b0c      	ldr	r3, [pc, #48]	; (801ac64 <tcp_slowtmr+0x5a8>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801ac38:	e069      	b.n	801ad0e <tcp_slowtmr+0x652>
 801ac3a:	bf00      	nop
 801ac3c:	20011318 	.word	0x20011318
 801ac40:	000a4cb8 	.word	0x000a4cb8
 801ac44:	10624dd3 	.word	0x10624dd3
 801ac48:	000124f8 	.word	0x000124f8
 801ac4c:	20011324 	.word	0x20011324
 801ac50:	0802620c 	.word	0x0802620c
 801ac54:	08026644 	.word	0x08026644
 801ac58:	08026250 	.word	0x08026250
 801ac5c:	08026670 	.word	0x08026670
 801ac60:	2001132c 	.word	0x2001132c
 801ac64:	20011328 	.word	0x20011328
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ac68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac6a:	7d1b      	ldrb	r3, [r3, #20]
 801ac6c:	2b0a      	cmp	r3, #10
 801ac6e:	d006      	beq.n	801ac7e <tcp_slowtmr+0x5c2>
 801ac70:	4b2b      	ldr	r3, [pc, #172]	; (801ad20 <tcp_slowtmr+0x664>)
 801ac72:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801ac76:	492b      	ldr	r1, [pc, #172]	; (801ad24 <tcp_slowtmr+0x668>)
 801ac78:	482b      	ldr	r0, [pc, #172]	; (801ad28 <tcp_slowtmr+0x66c>)
 801ac7a:	f008 fde9 	bl	8023850 <iprintf>
    pcb_remove = 0;
 801ac7e:	2300      	movs	r3, #0
 801ac80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801ac84:	4b29      	ldr	r3, [pc, #164]	; (801ad2c <tcp_slowtmr+0x670>)
 801ac86:	681a      	ldr	r2, [r3, #0]
 801ac88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac8a:	6a1b      	ldr	r3, [r3, #32]
 801ac8c:	1ad3      	subs	r3, r2, r3
 801ac8e:	2bf0      	cmp	r3, #240	; 0xf0
 801ac90:	d904      	bls.n	801ac9c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801ac92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ac96:	3301      	adds	r3, #1
 801ac98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801ac9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d02f      	beq.n	801ad04 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801aca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aca6:	f000 fbf9 	bl	801b49c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acac:	2b00      	cmp	r3, #0
 801acae:	d010      	beq.n	801acd2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801acb0:	4b1f      	ldr	r3, [pc, #124]	; (801ad30 <tcp_slowtmr+0x674>)
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801acb6:	429a      	cmp	r2, r3
 801acb8:	d106      	bne.n	801acc8 <tcp_slowtmr+0x60c>
 801acba:	4b19      	ldr	r3, [pc, #100]	; (801ad20 <tcp_slowtmr+0x664>)
 801acbc:	f240 52af 	movw	r2, #1455	; 0x5af
 801acc0:	491c      	ldr	r1, [pc, #112]	; (801ad34 <tcp_slowtmr+0x678>)
 801acc2:	4819      	ldr	r0, [pc, #100]	; (801ad28 <tcp_slowtmr+0x66c>)
 801acc4:	f008 fdc4 	bl	8023850 <iprintf>
        prev->next = pcb->next;
 801acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acca:	68da      	ldr	r2, [r3, #12]
 801accc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acce:	60da      	str	r2, [r3, #12]
 801acd0:	e00f      	b.n	801acf2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801acd2:	4b17      	ldr	r3, [pc, #92]	; (801ad30 <tcp_slowtmr+0x674>)
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801acd8:	429a      	cmp	r2, r3
 801acda:	d006      	beq.n	801acea <tcp_slowtmr+0x62e>
 801acdc:	4b10      	ldr	r3, [pc, #64]	; (801ad20 <tcp_slowtmr+0x664>)
 801acde:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801ace2:	4915      	ldr	r1, [pc, #84]	; (801ad38 <tcp_slowtmr+0x67c>)
 801ace4:	4810      	ldr	r0, [pc, #64]	; (801ad28 <tcp_slowtmr+0x66c>)
 801ace6:	f008 fdb3 	bl	8023850 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801acea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acec:	68db      	ldr	r3, [r3, #12]
 801acee:	4a10      	ldr	r2, [pc, #64]	; (801ad30 <tcp_slowtmr+0x674>)
 801acf0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acf4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801acf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acf8:	68db      	ldr	r3, [r3, #12]
 801acfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801acfc:	69f8      	ldr	r0, [r7, #28]
 801acfe:	f7fe ff85 	bl	8019c0c <tcp_free>
 801ad02:	e004      	b.n	801ad0e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801ad08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad0a:	68db      	ldr	r3, [r3, #12]
 801ad0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d1a9      	bne.n	801ac68 <tcp_slowtmr+0x5ac>
    }
  }
}
 801ad14:	bf00      	nop
 801ad16:	bf00      	nop
 801ad18:	3730      	adds	r7, #48	; 0x30
 801ad1a:	46bd      	mov	sp, r7
 801ad1c:	bdb0      	pop	{r4, r5, r7, pc}
 801ad1e:	bf00      	nop
 801ad20:	0802620c 	.word	0x0802620c
 801ad24:	0802669c 	.word	0x0802669c
 801ad28:	08026250 	.word	0x08026250
 801ad2c:	20011318 	.word	0x20011318
 801ad30:	20011328 	.word	0x20011328
 801ad34:	080266cc 	.word	0x080266cc
 801ad38:	080266f4 	.word	0x080266f4

0801ad3c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	b082      	sub	sp, #8
 801ad40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801ad42:	4b2d      	ldr	r3, [pc, #180]	; (801adf8 <tcp_fasttmr+0xbc>)
 801ad44:	781b      	ldrb	r3, [r3, #0]
 801ad46:	3301      	adds	r3, #1
 801ad48:	b2da      	uxtb	r2, r3
 801ad4a:	4b2b      	ldr	r3, [pc, #172]	; (801adf8 <tcp_fasttmr+0xbc>)
 801ad4c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801ad4e:	4b2b      	ldr	r3, [pc, #172]	; (801adfc <tcp_fasttmr+0xc0>)
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801ad54:	e048      	b.n	801ade8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	7f9a      	ldrb	r2, [r3, #30]
 801ad5a:	4b27      	ldr	r3, [pc, #156]	; (801adf8 <tcp_fasttmr+0xbc>)
 801ad5c:	781b      	ldrb	r3, [r3, #0]
 801ad5e:	429a      	cmp	r2, r3
 801ad60:	d03f      	beq.n	801ade2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801ad62:	4b25      	ldr	r3, [pc, #148]	; (801adf8 <tcp_fasttmr+0xbc>)
 801ad64:	781a      	ldrb	r2, [r3, #0]
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	8b5b      	ldrh	r3, [r3, #26]
 801ad6e:	f003 0301 	and.w	r3, r3, #1
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d010      	beq.n	801ad98 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	8b5b      	ldrh	r3, [r3, #26]
 801ad7a:	f043 0302 	orr.w	r3, r3, #2
 801ad7e:	b29a      	uxth	r2, r3
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801ad84:	6878      	ldr	r0, [r7, #4]
 801ad86:	f003 fff5 	bl	801ed74 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	8b5b      	ldrh	r3, [r3, #26]
 801ad8e:	f023 0303 	bic.w	r3, r3, #3
 801ad92:	b29a      	uxth	r2, r3
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	8b5b      	ldrh	r3, [r3, #26]
 801ad9c:	f003 0308 	and.w	r3, r3, #8
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d009      	beq.n	801adb8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	8b5b      	ldrh	r3, [r3, #26]
 801ada8:	f023 0308 	bic.w	r3, r3, #8
 801adac:	b29a      	uxth	r2, r3
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801adb2:	6878      	ldr	r0, [r7, #4]
 801adb4:	f7ff f8be 	bl	8019f34 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	68db      	ldr	r3, [r3, #12]
 801adbc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d00a      	beq.n	801addc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801adc6:	4b0e      	ldr	r3, [pc, #56]	; (801ae00 <tcp_fasttmr+0xc4>)
 801adc8:	2200      	movs	r2, #0
 801adca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801adcc:	6878      	ldr	r0, [r7, #4]
 801adce:	f000 f819 	bl	801ae04 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801add2:	4b0b      	ldr	r3, [pc, #44]	; (801ae00 <tcp_fasttmr+0xc4>)
 801add4:	781b      	ldrb	r3, [r3, #0]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d000      	beq.n	801addc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801adda:	e7b8      	b.n	801ad4e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801addc:	683b      	ldr	r3, [r7, #0]
 801adde:	607b      	str	r3, [r7, #4]
 801ade0:	e002      	b.n	801ade8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	68db      	ldr	r3, [r3, #12]
 801ade6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d1b3      	bne.n	801ad56 <tcp_fasttmr+0x1a>
    }
  }
}
 801adee:	bf00      	nop
 801adf0:	bf00      	nop
 801adf2:	3708      	adds	r7, #8
 801adf4:	46bd      	mov	sp, r7
 801adf6:	bd80      	pop	{r7, pc}
 801adf8:	2001132e 	.word	0x2001132e
 801adfc:	20011324 	.word	0x20011324
 801ae00:	2001132c 	.word	0x2001132c

0801ae04 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801ae04:	b590      	push	{r4, r7, lr}
 801ae06:	b085      	sub	sp, #20
 801ae08:	af00      	add	r7, sp, #0
 801ae0a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d109      	bne.n	801ae26 <tcp_process_refused_data+0x22>
 801ae12:	4b37      	ldr	r3, [pc, #220]	; (801aef0 <tcp_process_refused_data+0xec>)
 801ae14:	f240 6209 	movw	r2, #1545	; 0x609
 801ae18:	4936      	ldr	r1, [pc, #216]	; (801aef4 <tcp_process_refused_data+0xf0>)
 801ae1a:	4837      	ldr	r0, [pc, #220]	; (801aef8 <tcp_process_refused_data+0xf4>)
 801ae1c:	f008 fd18 	bl	8023850 <iprintf>
 801ae20:	f06f 030f 	mvn.w	r3, #15
 801ae24:	e060      	b.n	801aee8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ae2a:	7b5b      	ldrb	r3, [r3, #13]
 801ae2c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ae32:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	2200      	movs	r2, #0
 801ae38:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d00b      	beq.n	801ae5c <tcp_process_refused_data+0x58>
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	6918      	ldr	r0, [r3, #16]
 801ae4e:	2300      	movs	r3, #0
 801ae50:	68ba      	ldr	r2, [r7, #8]
 801ae52:	6879      	ldr	r1, [r7, #4]
 801ae54:	47a0      	blx	r4
 801ae56:	4603      	mov	r3, r0
 801ae58:	73fb      	strb	r3, [r7, #15]
 801ae5a:	e007      	b.n	801ae6c <tcp_process_refused_data+0x68>
 801ae5c:	2300      	movs	r3, #0
 801ae5e:	68ba      	ldr	r2, [r7, #8]
 801ae60:	6879      	ldr	r1, [r7, #4]
 801ae62:	2000      	movs	r0, #0
 801ae64:	f000 f8a4 	bl	801afb0 <tcp_recv_null>
 801ae68:	4603      	mov	r3, r0
 801ae6a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801ae6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d12a      	bne.n	801aeca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801ae74:	7bbb      	ldrb	r3, [r7, #14]
 801ae76:	f003 0320 	and.w	r3, r3, #32
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d033      	beq.n	801aee6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ae82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801ae86:	d005      	beq.n	801ae94 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ae8c:	3301      	adds	r3, #1
 801ae8e:	b29a      	uxth	r2, r3
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d00b      	beq.n	801aeb6 <tcp_process_refused_data+0xb2>
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	6918      	ldr	r0, [r3, #16]
 801aea8:	2300      	movs	r3, #0
 801aeaa:	2200      	movs	r2, #0
 801aeac:	6879      	ldr	r1, [r7, #4]
 801aeae:	47a0      	blx	r4
 801aeb0:	4603      	mov	r3, r0
 801aeb2:	73fb      	strb	r3, [r7, #15]
 801aeb4:	e001      	b.n	801aeba <tcp_process_refused_data+0xb6>
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801aeba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aebe:	f113 0f0d 	cmn.w	r3, #13
 801aec2:	d110      	bne.n	801aee6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801aec4:	f06f 030c 	mvn.w	r3, #12
 801aec8:	e00e      	b.n	801aee8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801aeca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aece:	f113 0f0d 	cmn.w	r3, #13
 801aed2:	d102      	bne.n	801aeda <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801aed4:	f06f 030c 	mvn.w	r3, #12
 801aed8:	e006      	b.n	801aee8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	68ba      	ldr	r2, [r7, #8]
 801aede:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801aee0:	f06f 0304 	mvn.w	r3, #4
 801aee4:	e000      	b.n	801aee8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801aee6:	2300      	movs	r3, #0
}
 801aee8:	4618      	mov	r0, r3
 801aeea:	3714      	adds	r7, #20
 801aeec:	46bd      	mov	sp, r7
 801aeee:	bd90      	pop	{r4, r7, pc}
 801aef0:	0802620c 	.word	0x0802620c
 801aef4:	0802671c 	.word	0x0802671c
 801aef8:	08026250 	.word	0x08026250

0801aefc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b084      	sub	sp, #16
 801af00:	af00      	add	r7, sp, #0
 801af02:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801af04:	e007      	b.n	801af16 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801af0c:	6878      	ldr	r0, [r7, #4]
 801af0e:	f000 f80a 	bl	801af26 <tcp_seg_free>
    seg = next;
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d1f4      	bne.n	801af06 <tcp_segs_free+0xa>
  }
}
 801af1c:	bf00      	nop
 801af1e:	bf00      	nop
 801af20:	3710      	adds	r7, #16
 801af22:	46bd      	mov	sp, r7
 801af24:	bd80      	pop	{r7, pc}

0801af26 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801af26:	b580      	push	{r7, lr}
 801af28:	b082      	sub	sp, #8
 801af2a:	af00      	add	r7, sp, #0
 801af2c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	2b00      	cmp	r3, #0
 801af32:	d00c      	beq.n	801af4e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	685b      	ldr	r3, [r3, #4]
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d004      	beq.n	801af46 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	685b      	ldr	r3, [r3, #4]
 801af40:	4618      	mov	r0, r3
 801af42:	f7fe fbb7 	bl	80196b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801af46:	6879      	ldr	r1, [r7, #4]
 801af48:	2003      	movs	r0, #3
 801af4a:	f7fd fd0f 	bl	801896c <memp_free>
  }
}
 801af4e:	bf00      	nop
 801af50:	3708      	adds	r7, #8
 801af52:	46bd      	mov	sp, r7
 801af54:	bd80      	pop	{r7, pc}
	...

0801af58 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801af58:	b580      	push	{r7, lr}
 801af5a:	b084      	sub	sp, #16
 801af5c:	af00      	add	r7, sp, #0
 801af5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	2b00      	cmp	r3, #0
 801af64:	d106      	bne.n	801af74 <tcp_seg_copy+0x1c>
 801af66:	4b0f      	ldr	r3, [pc, #60]	; (801afa4 <tcp_seg_copy+0x4c>)
 801af68:	f240 6282 	movw	r2, #1666	; 0x682
 801af6c:	490e      	ldr	r1, [pc, #56]	; (801afa8 <tcp_seg_copy+0x50>)
 801af6e:	480f      	ldr	r0, [pc, #60]	; (801afac <tcp_seg_copy+0x54>)
 801af70:	f008 fc6e 	bl	8023850 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801af74:	2003      	movs	r0, #3
 801af76:	f7fd fc83 	bl	8018880 <memp_malloc>
 801af7a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d101      	bne.n	801af86 <tcp_seg_copy+0x2e>
    return NULL;
 801af82:	2300      	movs	r3, #0
 801af84:	e00a      	b.n	801af9c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801af86:	2210      	movs	r2, #16
 801af88:	6879      	ldr	r1, [r7, #4]
 801af8a:	68f8      	ldr	r0, [r7, #12]
 801af8c:	f008 fd53 	bl	8023a36 <memcpy>
  pbuf_ref(cseg->p);
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	685b      	ldr	r3, [r3, #4]
 801af94:	4618      	mov	r0, r3
 801af96:	f7fe fc33 	bl	8019800 <pbuf_ref>
  return cseg;
 801af9a:	68fb      	ldr	r3, [r7, #12]
}
 801af9c:	4618      	mov	r0, r3
 801af9e:	3710      	adds	r7, #16
 801afa0:	46bd      	mov	sp, r7
 801afa2:	bd80      	pop	{r7, pc}
 801afa4:	0802620c 	.word	0x0802620c
 801afa8:	08026760 	.word	0x08026760
 801afac:	08026250 	.word	0x08026250

0801afb0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801afb0:	b580      	push	{r7, lr}
 801afb2:	b084      	sub	sp, #16
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	60f8      	str	r0, [r7, #12]
 801afb8:	60b9      	str	r1, [r7, #8]
 801afba:	607a      	str	r2, [r7, #4]
 801afbc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801afbe:	68bb      	ldr	r3, [r7, #8]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d109      	bne.n	801afd8 <tcp_recv_null+0x28>
 801afc4:	4b12      	ldr	r3, [pc, #72]	; (801b010 <tcp_recv_null+0x60>)
 801afc6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801afca:	4912      	ldr	r1, [pc, #72]	; (801b014 <tcp_recv_null+0x64>)
 801afcc:	4812      	ldr	r0, [pc, #72]	; (801b018 <tcp_recv_null+0x68>)
 801afce:	f008 fc3f 	bl	8023850 <iprintf>
 801afd2:	f06f 030f 	mvn.w	r3, #15
 801afd6:	e016      	b.n	801b006 <tcp_recv_null+0x56>

  if (p != NULL) {
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d009      	beq.n	801aff2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	891b      	ldrh	r3, [r3, #8]
 801afe2:	4619      	mov	r1, r3
 801afe4:	68b8      	ldr	r0, [r7, #8]
 801afe6:	f7ff f9bb 	bl	801a360 <tcp_recved>
    pbuf_free(p);
 801afea:	6878      	ldr	r0, [r7, #4]
 801afec:	f7fe fb62 	bl	80196b4 <pbuf_free>
 801aff0:	e008      	b.n	801b004 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801aff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d104      	bne.n	801b004 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801affa:	68b8      	ldr	r0, [r7, #8]
 801affc:	f7ff f804 	bl	801a008 <tcp_close>
 801b000:	4603      	mov	r3, r0
 801b002:	e000      	b.n	801b006 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801b004:	2300      	movs	r3, #0
}
 801b006:	4618      	mov	r0, r3
 801b008:	3710      	adds	r7, #16
 801b00a:	46bd      	mov	sp, r7
 801b00c:	bd80      	pop	{r7, pc}
 801b00e:	bf00      	nop
 801b010:	0802620c 	.word	0x0802620c
 801b014:	0802677c 	.word	0x0802677c
 801b018:	08026250 	.word	0x08026250

0801b01c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801b01c:	b580      	push	{r7, lr}
 801b01e:	b086      	sub	sp, #24
 801b020:	af00      	add	r7, sp, #0
 801b022:	4603      	mov	r3, r0
 801b024:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801b026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	db01      	blt.n	801b032 <tcp_kill_prio+0x16>
 801b02e:	79fb      	ldrb	r3, [r7, #7]
 801b030:	e000      	b.n	801b034 <tcp_kill_prio+0x18>
 801b032:	237f      	movs	r3, #127	; 0x7f
 801b034:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801b036:	7afb      	ldrb	r3, [r7, #11]
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d034      	beq.n	801b0a6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801b03c:	7afb      	ldrb	r3, [r7, #11]
 801b03e:	3b01      	subs	r3, #1
 801b040:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801b042:	2300      	movs	r3, #0
 801b044:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801b046:	2300      	movs	r3, #0
 801b048:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b04a:	4b19      	ldr	r3, [pc, #100]	; (801b0b0 <tcp_kill_prio+0x94>)
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	617b      	str	r3, [r7, #20]
 801b050:	e01f      	b.n	801b092 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801b052:	697b      	ldr	r3, [r7, #20]
 801b054:	7d5b      	ldrb	r3, [r3, #21]
 801b056:	7afa      	ldrb	r2, [r7, #11]
 801b058:	429a      	cmp	r2, r3
 801b05a:	d80c      	bhi.n	801b076 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801b05c:	697b      	ldr	r3, [r7, #20]
 801b05e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801b060:	7afa      	ldrb	r2, [r7, #11]
 801b062:	429a      	cmp	r2, r3
 801b064:	d112      	bne.n	801b08c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801b066:	4b13      	ldr	r3, [pc, #76]	; (801b0b4 <tcp_kill_prio+0x98>)
 801b068:	681a      	ldr	r2, [r3, #0]
 801b06a:	697b      	ldr	r3, [r7, #20]
 801b06c:	6a1b      	ldr	r3, [r3, #32]
 801b06e:	1ad3      	subs	r3, r2, r3
 801b070:	68fa      	ldr	r2, [r7, #12]
 801b072:	429a      	cmp	r2, r3
 801b074:	d80a      	bhi.n	801b08c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801b076:	4b0f      	ldr	r3, [pc, #60]	; (801b0b4 <tcp_kill_prio+0x98>)
 801b078:	681a      	ldr	r2, [r3, #0]
 801b07a:	697b      	ldr	r3, [r7, #20]
 801b07c:	6a1b      	ldr	r3, [r3, #32]
 801b07e:	1ad3      	subs	r3, r2, r3
 801b080:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801b082:	697b      	ldr	r3, [r7, #20]
 801b084:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801b086:	697b      	ldr	r3, [r7, #20]
 801b088:	7d5b      	ldrb	r3, [r3, #21]
 801b08a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b08c:	697b      	ldr	r3, [r7, #20]
 801b08e:	68db      	ldr	r3, [r3, #12]
 801b090:	617b      	str	r3, [r7, #20]
 801b092:	697b      	ldr	r3, [r7, #20]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d1dc      	bne.n	801b052 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801b098:	693b      	ldr	r3, [r7, #16]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d004      	beq.n	801b0a8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801b09e:	6938      	ldr	r0, [r7, #16]
 801b0a0:	f7ff f8f8 	bl	801a294 <tcp_abort>
 801b0a4:	e000      	b.n	801b0a8 <tcp_kill_prio+0x8c>
    return;
 801b0a6:	bf00      	nop
  }
}
 801b0a8:	3718      	adds	r7, #24
 801b0aa:	46bd      	mov	sp, r7
 801b0ac:	bd80      	pop	{r7, pc}
 801b0ae:	bf00      	nop
 801b0b0:	20011324 	.word	0x20011324
 801b0b4:	20011318 	.word	0x20011318

0801b0b8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b086      	sub	sp, #24
 801b0bc:	af00      	add	r7, sp, #0
 801b0be:	4603      	mov	r3, r0
 801b0c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801b0c2:	79fb      	ldrb	r3, [r7, #7]
 801b0c4:	2b08      	cmp	r3, #8
 801b0c6:	d009      	beq.n	801b0dc <tcp_kill_state+0x24>
 801b0c8:	79fb      	ldrb	r3, [r7, #7]
 801b0ca:	2b09      	cmp	r3, #9
 801b0cc:	d006      	beq.n	801b0dc <tcp_kill_state+0x24>
 801b0ce:	4b1a      	ldr	r3, [pc, #104]	; (801b138 <tcp_kill_state+0x80>)
 801b0d0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801b0d4:	4919      	ldr	r1, [pc, #100]	; (801b13c <tcp_kill_state+0x84>)
 801b0d6:	481a      	ldr	r0, [pc, #104]	; (801b140 <tcp_kill_state+0x88>)
 801b0d8:	f008 fbba 	bl	8023850 <iprintf>

  inactivity = 0;
 801b0dc:	2300      	movs	r3, #0
 801b0de:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801b0e0:	2300      	movs	r3, #0
 801b0e2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b0e4:	4b17      	ldr	r3, [pc, #92]	; (801b144 <tcp_kill_state+0x8c>)
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	617b      	str	r3, [r7, #20]
 801b0ea:	e017      	b.n	801b11c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801b0ec:	697b      	ldr	r3, [r7, #20]
 801b0ee:	7d1b      	ldrb	r3, [r3, #20]
 801b0f0:	79fa      	ldrb	r2, [r7, #7]
 801b0f2:	429a      	cmp	r2, r3
 801b0f4:	d10f      	bne.n	801b116 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b0f6:	4b14      	ldr	r3, [pc, #80]	; (801b148 <tcp_kill_state+0x90>)
 801b0f8:	681a      	ldr	r2, [r3, #0]
 801b0fa:	697b      	ldr	r3, [r7, #20]
 801b0fc:	6a1b      	ldr	r3, [r3, #32]
 801b0fe:	1ad3      	subs	r3, r2, r3
 801b100:	68fa      	ldr	r2, [r7, #12]
 801b102:	429a      	cmp	r2, r3
 801b104:	d807      	bhi.n	801b116 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801b106:	4b10      	ldr	r3, [pc, #64]	; (801b148 <tcp_kill_state+0x90>)
 801b108:	681a      	ldr	r2, [r3, #0]
 801b10a:	697b      	ldr	r3, [r7, #20]
 801b10c:	6a1b      	ldr	r3, [r3, #32]
 801b10e:	1ad3      	subs	r3, r2, r3
 801b110:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801b112:	697b      	ldr	r3, [r7, #20]
 801b114:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b116:	697b      	ldr	r3, [r7, #20]
 801b118:	68db      	ldr	r3, [r3, #12]
 801b11a:	617b      	str	r3, [r7, #20]
 801b11c:	697b      	ldr	r3, [r7, #20]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d1e4      	bne.n	801b0ec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801b122:	693b      	ldr	r3, [r7, #16]
 801b124:	2b00      	cmp	r3, #0
 801b126:	d003      	beq.n	801b130 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801b128:	2100      	movs	r1, #0
 801b12a:	6938      	ldr	r0, [r7, #16]
 801b12c:	f7fe fff4 	bl	801a118 <tcp_abandon>
  }
}
 801b130:	bf00      	nop
 801b132:	3718      	adds	r7, #24
 801b134:	46bd      	mov	sp, r7
 801b136:	bd80      	pop	{r7, pc}
 801b138:	0802620c 	.word	0x0802620c
 801b13c:	08026798 	.word	0x08026798
 801b140:	08026250 	.word	0x08026250
 801b144:	20011324 	.word	0x20011324
 801b148:	20011318 	.word	0x20011318

0801b14c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801b14c:	b580      	push	{r7, lr}
 801b14e:	b084      	sub	sp, #16
 801b150:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801b152:	2300      	movs	r3, #0
 801b154:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801b156:	2300      	movs	r3, #0
 801b158:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b15a:	4b12      	ldr	r3, [pc, #72]	; (801b1a4 <tcp_kill_timewait+0x58>)
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	60fb      	str	r3, [r7, #12]
 801b160:	e012      	b.n	801b188 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801b162:	4b11      	ldr	r3, [pc, #68]	; (801b1a8 <tcp_kill_timewait+0x5c>)
 801b164:	681a      	ldr	r2, [r3, #0]
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	6a1b      	ldr	r3, [r3, #32]
 801b16a:	1ad3      	subs	r3, r2, r3
 801b16c:	687a      	ldr	r2, [r7, #4]
 801b16e:	429a      	cmp	r2, r3
 801b170:	d807      	bhi.n	801b182 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801b172:	4b0d      	ldr	r3, [pc, #52]	; (801b1a8 <tcp_kill_timewait+0x5c>)
 801b174:	681a      	ldr	r2, [r3, #0]
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	6a1b      	ldr	r3, [r3, #32]
 801b17a:	1ad3      	subs	r3, r2, r3
 801b17c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	68db      	ldr	r3, [r3, #12]
 801b186:	60fb      	str	r3, [r7, #12]
 801b188:	68fb      	ldr	r3, [r7, #12]
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d1e9      	bne.n	801b162 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801b18e:	68bb      	ldr	r3, [r7, #8]
 801b190:	2b00      	cmp	r3, #0
 801b192:	d002      	beq.n	801b19a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801b194:	68b8      	ldr	r0, [r7, #8]
 801b196:	f7ff f87d 	bl	801a294 <tcp_abort>
  }
}
 801b19a:	bf00      	nop
 801b19c:	3710      	adds	r7, #16
 801b19e:	46bd      	mov	sp, r7
 801b1a0:	bd80      	pop	{r7, pc}
 801b1a2:	bf00      	nop
 801b1a4:	20011328 	.word	0x20011328
 801b1a8:	20011318 	.word	0x20011318

0801b1ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801b1ac:	b580      	push	{r7, lr}
 801b1ae:	b082      	sub	sp, #8
 801b1b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801b1b2:	4b10      	ldr	r3, [pc, #64]	; (801b1f4 <tcp_handle_closepend+0x48>)
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801b1b8:	e014      	b.n	801b1e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	68db      	ldr	r3, [r3, #12]
 801b1be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	8b5b      	ldrh	r3, [r3, #26]
 801b1c4:	f003 0308 	and.w	r3, r3, #8
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d009      	beq.n	801b1e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	8b5b      	ldrh	r3, [r3, #26]
 801b1d0:	f023 0308 	bic.w	r3, r3, #8
 801b1d4:	b29a      	uxth	r2, r3
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801b1da:	6878      	ldr	r0, [r7, #4]
 801b1dc:	f7fe feaa 	bl	8019f34 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801b1e0:	683b      	ldr	r3, [r7, #0]
 801b1e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d1e7      	bne.n	801b1ba <tcp_handle_closepend+0xe>
  }
}
 801b1ea:	bf00      	nop
 801b1ec:	bf00      	nop
 801b1ee:	3708      	adds	r7, #8
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	bd80      	pop	{r7, pc}
 801b1f4:	20011324 	.word	0x20011324

0801b1f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b084      	sub	sp, #16
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	4603      	mov	r3, r0
 801b200:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b202:	2001      	movs	r0, #1
 801b204:	f7fd fb3c 	bl	8018880 <memp_malloc>
 801b208:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801b20a:	68fb      	ldr	r3, [r7, #12]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d126      	bne.n	801b25e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801b210:	f7ff ffcc 	bl	801b1ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801b214:	f7ff ff9a 	bl	801b14c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b218:	2001      	movs	r0, #1
 801b21a:	f7fd fb31 	bl	8018880 <memp_malloc>
 801b21e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	2b00      	cmp	r3, #0
 801b224:	d11b      	bne.n	801b25e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801b226:	2009      	movs	r0, #9
 801b228:	f7ff ff46 	bl	801b0b8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b22c:	2001      	movs	r0, #1
 801b22e:	f7fd fb27 	bl	8018880 <memp_malloc>
 801b232:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d111      	bne.n	801b25e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801b23a:	2008      	movs	r0, #8
 801b23c:	f7ff ff3c 	bl	801b0b8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b240:	2001      	movs	r0, #1
 801b242:	f7fd fb1d 	bl	8018880 <memp_malloc>
 801b246:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801b248:	68fb      	ldr	r3, [r7, #12]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d107      	bne.n	801b25e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801b24e:	79fb      	ldrb	r3, [r7, #7]
 801b250:	4618      	mov	r0, r3
 801b252:	f7ff fee3 	bl	801b01c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b256:	2001      	movs	r0, #1
 801b258:	f7fd fb12 	bl	8018880 <memp_malloc>
 801b25c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d03f      	beq.n	801b2e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801b264:	229c      	movs	r2, #156	; 0x9c
 801b266:	2100      	movs	r1, #0
 801b268:	68f8      	ldr	r0, [r7, #12]
 801b26a:	f008 fb4e 	bl	802390a <memset>
    pcb->prio = prio;
 801b26e:	68fb      	ldr	r3, [r7, #12]
 801b270:	79fa      	ldrb	r2, [r7, #7]
 801b272:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801b27a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b27e:	68fb      	ldr	r3, [r7, #12]
 801b280:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801b284:	855a      	strh	r2, [r3, #42]	; 0x2a
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801b28a:	68fb      	ldr	r3, [r7, #12]
 801b28c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	22ff      	movs	r2, #255	; 0xff
 801b292:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b29a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	2206      	movs	r2, #6
 801b2a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	2206      	movs	r2, #6
 801b2a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b2b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801b2b2:	68fb      	ldr	r3, [r7, #12]
 801b2b4:	2201      	movs	r2, #1
 801b2b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801b2ba:	4b0d      	ldr	r3, [pc, #52]	; (801b2f0 <tcp_alloc+0xf8>)
 801b2bc:	681a      	ldr	r2, [r3, #0]
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801b2c2:	4b0c      	ldr	r3, [pc, #48]	; (801b2f4 <tcp_alloc+0xfc>)
 801b2c4:	781a      	ldrb	r2, [r3, #0]
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801b2d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	4a08      	ldr	r2, [pc, #32]	; (801b2f8 <tcp_alloc+0x100>)
 801b2d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	4a07      	ldr	r2, [pc, #28]	; (801b2fc <tcp_alloc+0x104>)
 801b2e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801b2e4:	68fb      	ldr	r3, [r7, #12]
}
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	3710      	adds	r7, #16
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	bd80      	pop	{r7, pc}
 801b2ee:	bf00      	nop
 801b2f0:	20011318 	.word	0x20011318
 801b2f4:	2001132e 	.word	0x2001132e
 801b2f8:	0801afb1 	.word	0x0801afb1
 801b2fc:	006ddd00 	.word	0x006ddd00

0801b300 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801b300:	b580      	push	{r7, lr}
 801b302:	b084      	sub	sp, #16
 801b304:	af00      	add	r7, sp, #0
 801b306:	4603      	mov	r3, r0
 801b308:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801b30a:	2040      	movs	r0, #64	; 0x40
 801b30c:	f7ff ff74 	bl	801b1f8 <tcp_alloc>
 801b310:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b312:	68fb      	ldr	r3, [r7, #12]
}
 801b314:	4618      	mov	r0, r3
 801b316:	3710      	adds	r7, #16
 801b318:	46bd      	mov	sp, r7
 801b31a:	bd80      	pop	{r7, pc}

0801b31c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801b31c:	b480      	push	{r7}
 801b31e:	b083      	sub	sp, #12
 801b320:	af00      	add	r7, sp, #0
 801b322:	6078      	str	r0, [r7, #4]
 801b324:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d002      	beq.n	801b332 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	683a      	ldr	r2, [r7, #0]
 801b330:	611a      	str	r2, [r3, #16]
  }
}
 801b332:	bf00      	nop
 801b334:	370c      	adds	r7, #12
 801b336:	46bd      	mov	sp, r7
 801b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b33c:	4770      	bx	lr
	...

0801b340 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b082      	sub	sp, #8
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
 801b348:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d00e      	beq.n	801b36e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	7d1b      	ldrb	r3, [r3, #20]
 801b354:	2b01      	cmp	r3, #1
 801b356:	d106      	bne.n	801b366 <tcp_recv+0x26>
 801b358:	4b07      	ldr	r3, [pc, #28]	; (801b378 <tcp_recv+0x38>)
 801b35a:	f240 72df 	movw	r2, #2015	; 0x7df
 801b35e:	4907      	ldr	r1, [pc, #28]	; (801b37c <tcp_recv+0x3c>)
 801b360:	4807      	ldr	r0, [pc, #28]	; (801b380 <tcp_recv+0x40>)
 801b362:	f008 fa75 	bl	8023850 <iprintf>
    pcb->recv = recv;
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	683a      	ldr	r2, [r7, #0]
 801b36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801b36e:	bf00      	nop
 801b370:	3708      	adds	r7, #8
 801b372:	46bd      	mov	sp, r7
 801b374:	bd80      	pop	{r7, pc}
 801b376:	bf00      	nop
 801b378:	0802620c 	.word	0x0802620c
 801b37c:	080267a8 	.word	0x080267a8
 801b380:	08026250 	.word	0x08026250

0801b384 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801b384:	b580      	push	{r7, lr}
 801b386:	b082      	sub	sp, #8
 801b388:	af00      	add	r7, sp, #0
 801b38a:	6078      	str	r0, [r7, #4]
 801b38c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d00e      	beq.n	801b3b2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	7d1b      	ldrb	r3, [r3, #20]
 801b398:	2b01      	cmp	r3, #1
 801b39a:	d106      	bne.n	801b3aa <tcp_sent+0x26>
 801b39c:	4b07      	ldr	r3, [pc, #28]	; (801b3bc <tcp_sent+0x38>)
 801b39e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801b3a2:	4907      	ldr	r1, [pc, #28]	; (801b3c0 <tcp_sent+0x3c>)
 801b3a4:	4807      	ldr	r0, [pc, #28]	; (801b3c4 <tcp_sent+0x40>)
 801b3a6:	f008 fa53 	bl	8023850 <iprintf>
    pcb->sent = sent;
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	683a      	ldr	r2, [r7, #0]
 801b3ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801b3b2:	bf00      	nop
 801b3b4:	3708      	adds	r7, #8
 801b3b6:	46bd      	mov	sp, r7
 801b3b8:	bd80      	pop	{r7, pc}
 801b3ba:	bf00      	nop
 801b3bc:	0802620c 	.word	0x0802620c
 801b3c0:	080267d0 	.word	0x080267d0
 801b3c4:	08026250 	.word	0x08026250

0801b3c8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801b3c8:	b580      	push	{r7, lr}
 801b3ca:	b082      	sub	sp, #8
 801b3cc:	af00      	add	r7, sp, #0
 801b3ce:	6078      	str	r0, [r7, #4]
 801b3d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d00e      	beq.n	801b3f6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	7d1b      	ldrb	r3, [r3, #20]
 801b3dc:	2b01      	cmp	r3, #1
 801b3de:	d106      	bne.n	801b3ee <tcp_err+0x26>
 801b3e0:	4b07      	ldr	r3, [pc, #28]	; (801b400 <tcp_err+0x38>)
 801b3e2:	f640 020d 	movw	r2, #2061	; 0x80d
 801b3e6:	4907      	ldr	r1, [pc, #28]	; (801b404 <tcp_err+0x3c>)
 801b3e8:	4807      	ldr	r0, [pc, #28]	; (801b408 <tcp_err+0x40>)
 801b3ea:	f008 fa31 	bl	8023850 <iprintf>
    pcb->errf = err;
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	683a      	ldr	r2, [r7, #0]
 801b3f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801b3f6:	bf00      	nop
 801b3f8:	3708      	adds	r7, #8
 801b3fa:	46bd      	mov	sp, r7
 801b3fc:	bd80      	pop	{r7, pc}
 801b3fe:	bf00      	nop
 801b400:	0802620c 	.word	0x0802620c
 801b404:	080267f8 	.word	0x080267f8
 801b408:	08026250 	.word	0x08026250

0801b40c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801b40c:	b480      	push	{r7}
 801b40e:	b085      	sub	sp, #20
 801b410:	af00      	add	r7, sp, #0
 801b412:	6078      	str	r0, [r7, #4]
 801b414:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d008      	beq.n	801b42e <tcp_accept+0x22>
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	7d1b      	ldrb	r3, [r3, #20]
 801b420:	2b01      	cmp	r3, #1
 801b422:	d104      	bne.n	801b42e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	683a      	ldr	r2, [r7, #0]
 801b42c:	619a      	str	r2, [r3, #24]
  }
}
 801b42e:	bf00      	nop
 801b430:	3714      	adds	r7, #20
 801b432:	46bd      	mov	sp, r7
 801b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b438:	4770      	bx	lr
	...

0801b43c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b084      	sub	sp, #16
 801b440:	af00      	add	r7, sp, #0
 801b442:	60f8      	str	r0, [r7, #12]
 801b444:	60b9      	str	r1, [r7, #8]
 801b446:	4613      	mov	r3, r2
 801b448:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801b44a:	68fb      	ldr	r3, [r7, #12]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d107      	bne.n	801b460 <tcp_poll+0x24>
 801b450:	4b0e      	ldr	r3, [pc, #56]	; (801b48c <tcp_poll+0x50>)
 801b452:	f640 023d 	movw	r2, #2109	; 0x83d
 801b456:	490e      	ldr	r1, [pc, #56]	; (801b490 <tcp_poll+0x54>)
 801b458:	480e      	ldr	r0, [pc, #56]	; (801b494 <tcp_poll+0x58>)
 801b45a:	f008 f9f9 	bl	8023850 <iprintf>
 801b45e:	e011      	b.n	801b484 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801b460:	68fb      	ldr	r3, [r7, #12]
 801b462:	7d1b      	ldrb	r3, [r3, #20]
 801b464:	2b01      	cmp	r3, #1
 801b466:	d106      	bne.n	801b476 <tcp_poll+0x3a>
 801b468:	4b08      	ldr	r3, [pc, #32]	; (801b48c <tcp_poll+0x50>)
 801b46a:	f640 023e 	movw	r2, #2110	; 0x83e
 801b46e:	490a      	ldr	r1, [pc, #40]	; (801b498 <tcp_poll+0x5c>)
 801b470:	4808      	ldr	r0, [pc, #32]	; (801b494 <tcp_poll+0x58>)
 801b472:	f008 f9ed 	bl	8023850 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	68ba      	ldr	r2, [r7, #8]
 801b47a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	79fa      	ldrb	r2, [r7, #7]
 801b482:	775a      	strb	r2, [r3, #29]
}
 801b484:	3710      	adds	r7, #16
 801b486:	46bd      	mov	sp, r7
 801b488:	bd80      	pop	{r7, pc}
 801b48a:	bf00      	nop
 801b48c:	0802620c 	.word	0x0802620c
 801b490:	08026820 	.word	0x08026820
 801b494:	08026250 	.word	0x08026250
 801b498:	08026838 	.word	0x08026838

0801b49c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801b49c:	b580      	push	{r7, lr}
 801b49e:	b082      	sub	sp, #8
 801b4a0:	af00      	add	r7, sp, #0
 801b4a2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d107      	bne.n	801b4ba <tcp_pcb_purge+0x1e>
 801b4aa:	4b21      	ldr	r3, [pc, #132]	; (801b530 <tcp_pcb_purge+0x94>)
 801b4ac:	f640 0251 	movw	r2, #2129	; 0x851
 801b4b0:	4920      	ldr	r1, [pc, #128]	; (801b534 <tcp_pcb_purge+0x98>)
 801b4b2:	4821      	ldr	r0, [pc, #132]	; (801b538 <tcp_pcb_purge+0x9c>)
 801b4b4:	f008 f9cc 	bl	8023850 <iprintf>
 801b4b8:	e037      	b.n	801b52a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	7d1b      	ldrb	r3, [r3, #20]
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d033      	beq.n	801b52a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801b4c6:	2b0a      	cmp	r3, #10
 801b4c8:	d02f      	beq.n	801b52a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801b4ce:	2b01      	cmp	r3, #1
 801b4d0:	d02b      	beq.n	801b52a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d007      	beq.n	801b4ea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b4de:	4618      	mov	r0, r3
 801b4e0:	f7fe f8e8 	bl	80196b4 <pbuf_free>
      pcb->refused_data = NULL;
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	2200      	movs	r2, #0
 801b4e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d002      	beq.n	801b4f8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801b4f2:	6878      	ldr	r0, [r7, #4]
 801b4f4:	f000 f986 	bl	801b804 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b4fe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b504:	4618      	mov	r0, r3
 801b506:	f7ff fcf9 	bl	801aefc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b50e:	4618      	mov	r0, r3
 801b510:	f7ff fcf4 	bl	801aefc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	2200      	movs	r2, #0
 801b518:	66da      	str	r2, [r3, #108]	; 0x6c
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	2200      	movs	r2, #0
 801b526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801b52a:	3708      	adds	r7, #8
 801b52c:	46bd      	mov	sp, r7
 801b52e:	bd80      	pop	{r7, pc}
 801b530:	0802620c 	.word	0x0802620c
 801b534:	08026858 	.word	0x08026858
 801b538:	08026250 	.word	0x08026250

0801b53c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b084      	sub	sp, #16
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
 801b544:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801b546:	683b      	ldr	r3, [r7, #0]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d106      	bne.n	801b55a <tcp_pcb_remove+0x1e>
 801b54c:	4b3e      	ldr	r3, [pc, #248]	; (801b648 <tcp_pcb_remove+0x10c>)
 801b54e:	f640 0283 	movw	r2, #2179	; 0x883
 801b552:	493e      	ldr	r1, [pc, #248]	; (801b64c <tcp_pcb_remove+0x110>)
 801b554:	483e      	ldr	r0, [pc, #248]	; (801b650 <tcp_pcb_remove+0x114>)
 801b556:	f008 f97b 	bl	8023850 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d106      	bne.n	801b56e <tcp_pcb_remove+0x32>
 801b560:	4b39      	ldr	r3, [pc, #228]	; (801b648 <tcp_pcb_remove+0x10c>)
 801b562:	f640 0284 	movw	r2, #2180	; 0x884
 801b566:	493b      	ldr	r1, [pc, #236]	; (801b654 <tcp_pcb_remove+0x118>)
 801b568:	4839      	ldr	r0, [pc, #228]	; (801b650 <tcp_pcb_remove+0x114>)
 801b56a:	f008 f971 	bl	8023850 <iprintf>

  TCP_RMV(pcblist, pcb);
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	683a      	ldr	r2, [r7, #0]
 801b574:	429a      	cmp	r2, r3
 801b576:	d105      	bne.n	801b584 <tcp_pcb_remove+0x48>
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	681b      	ldr	r3, [r3, #0]
 801b57c:	68da      	ldr	r2, [r3, #12]
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	601a      	str	r2, [r3, #0]
 801b582:	e013      	b.n	801b5ac <tcp_pcb_remove+0x70>
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	681b      	ldr	r3, [r3, #0]
 801b588:	60fb      	str	r3, [r7, #12]
 801b58a:	e00c      	b.n	801b5a6 <tcp_pcb_remove+0x6a>
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	68db      	ldr	r3, [r3, #12]
 801b590:	683a      	ldr	r2, [r7, #0]
 801b592:	429a      	cmp	r2, r3
 801b594:	d104      	bne.n	801b5a0 <tcp_pcb_remove+0x64>
 801b596:	683b      	ldr	r3, [r7, #0]
 801b598:	68da      	ldr	r2, [r3, #12]
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	60da      	str	r2, [r3, #12]
 801b59e:	e005      	b.n	801b5ac <tcp_pcb_remove+0x70>
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	68db      	ldr	r3, [r3, #12]
 801b5a4:	60fb      	str	r3, [r7, #12]
 801b5a6:	68fb      	ldr	r3, [r7, #12]
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d1ef      	bne.n	801b58c <tcp_pcb_remove+0x50>
 801b5ac:	683b      	ldr	r3, [r7, #0]
 801b5ae:	2200      	movs	r2, #0
 801b5b0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801b5b2:	6838      	ldr	r0, [r7, #0]
 801b5b4:	f7ff ff72 	bl	801b49c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801b5b8:	683b      	ldr	r3, [r7, #0]
 801b5ba:	7d1b      	ldrb	r3, [r3, #20]
 801b5bc:	2b0a      	cmp	r3, #10
 801b5be:	d013      	beq.n	801b5e8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801b5c0:	683b      	ldr	r3, [r7, #0]
 801b5c2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801b5c4:	2b01      	cmp	r3, #1
 801b5c6:	d00f      	beq.n	801b5e8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801b5c8:	683b      	ldr	r3, [r7, #0]
 801b5ca:	8b5b      	ldrh	r3, [r3, #26]
 801b5cc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d009      	beq.n	801b5e8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801b5d4:	683b      	ldr	r3, [r7, #0]
 801b5d6:	8b5b      	ldrh	r3, [r3, #26]
 801b5d8:	f043 0302 	orr.w	r3, r3, #2
 801b5dc:	b29a      	uxth	r2, r3
 801b5de:	683b      	ldr	r3, [r7, #0]
 801b5e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b5e2:	6838      	ldr	r0, [r7, #0]
 801b5e4:	f003 fbc6 	bl	801ed74 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801b5e8:	683b      	ldr	r3, [r7, #0]
 801b5ea:	7d1b      	ldrb	r3, [r3, #20]
 801b5ec:	2b01      	cmp	r3, #1
 801b5ee:	d020      	beq.n	801b632 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801b5f0:	683b      	ldr	r3, [r7, #0]
 801b5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d006      	beq.n	801b606 <tcp_pcb_remove+0xca>
 801b5f8:	4b13      	ldr	r3, [pc, #76]	; (801b648 <tcp_pcb_remove+0x10c>)
 801b5fa:	f640 0293 	movw	r2, #2195	; 0x893
 801b5fe:	4916      	ldr	r1, [pc, #88]	; (801b658 <tcp_pcb_remove+0x11c>)
 801b600:	4813      	ldr	r0, [pc, #76]	; (801b650 <tcp_pcb_remove+0x114>)
 801b602:	f008 f925 	bl	8023850 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801b606:	683b      	ldr	r3, [r7, #0]
 801b608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d006      	beq.n	801b61c <tcp_pcb_remove+0xe0>
 801b60e:	4b0e      	ldr	r3, [pc, #56]	; (801b648 <tcp_pcb_remove+0x10c>)
 801b610:	f640 0294 	movw	r2, #2196	; 0x894
 801b614:	4911      	ldr	r1, [pc, #68]	; (801b65c <tcp_pcb_remove+0x120>)
 801b616:	480e      	ldr	r0, [pc, #56]	; (801b650 <tcp_pcb_remove+0x114>)
 801b618:	f008 f91a 	bl	8023850 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801b61c:	683b      	ldr	r3, [r7, #0]
 801b61e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b620:	2b00      	cmp	r3, #0
 801b622:	d006      	beq.n	801b632 <tcp_pcb_remove+0xf6>
 801b624:	4b08      	ldr	r3, [pc, #32]	; (801b648 <tcp_pcb_remove+0x10c>)
 801b626:	f640 0296 	movw	r2, #2198	; 0x896
 801b62a:	490d      	ldr	r1, [pc, #52]	; (801b660 <tcp_pcb_remove+0x124>)
 801b62c:	4808      	ldr	r0, [pc, #32]	; (801b650 <tcp_pcb_remove+0x114>)
 801b62e:	f008 f90f 	bl	8023850 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801b632:	683b      	ldr	r3, [r7, #0]
 801b634:	2200      	movs	r2, #0
 801b636:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801b638:	683b      	ldr	r3, [r7, #0]
 801b63a:	2200      	movs	r2, #0
 801b63c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801b63e:	bf00      	nop
 801b640:	3710      	adds	r7, #16
 801b642:	46bd      	mov	sp, r7
 801b644:	bd80      	pop	{r7, pc}
 801b646:	bf00      	nop
 801b648:	0802620c 	.word	0x0802620c
 801b64c:	08026874 	.word	0x08026874
 801b650:	08026250 	.word	0x08026250
 801b654:	08026890 	.word	0x08026890
 801b658:	080268b0 	.word	0x080268b0
 801b65c:	080268c8 	.word	0x080268c8
 801b660:	080268e4 	.word	0x080268e4

0801b664 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801b664:	b580      	push	{r7, lr}
 801b666:	b082      	sub	sp, #8
 801b668:	af00      	add	r7, sp, #0
 801b66a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d106      	bne.n	801b680 <tcp_next_iss+0x1c>
 801b672:	4b0a      	ldr	r3, [pc, #40]	; (801b69c <tcp_next_iss+0x38>)
 801b674:	f640 02af 	movw	r2, #2223	; 0x8af
 801b678:	4909      	ldr	r1, [pc, #36]	; (801b6a0 <tcp_next_iss+0x3c>)
 801b67a:	480a      	ldr	r0, [pc, #40]	; (801b6a4 <tcp_next_iss+0x40>)
 801b67c:	f008 f8e8 	bl	8023850 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801b680:	4b09      	ldr	r3, [pc, #36]	; (801b6a8 <tcp_next_iss+0x44>)
 801b682:	681a      	ldr	r2, [r3, #0]
 801b684:	4b09      	ldr	r3, [pc, #36]	; (801b6ac <tcp_next_iss+0x48>)
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	4413      	add	r3, r2
 801b68a:	4a07      	ldr	r2, [pc, #28]	; (801b6a8 <tcp_next_iss+0x44>)
 801b68c:	6013      	str	r3, [r2, #0]
  return iss;
 801b68e:	4b06      	ldr	r3, [pc, #24]	; (801b6a8 <tcp_next_iss+0x44>)
 801b690:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801b692:	4618      	mov	r0, r3
 801b694:	3708      	adds	r7, #8
 801b696:	46bd      	mov	sp, r7
 801b698:	bd80      	pop	{r7, pc}
 801b69a:	bf00      	nop
 801b69c:	0802620c 	.word	0x0802620c
 801b6a0:	080268fc 	.word	0x080268fc
 801b6a4:	08026250 	.word	0x08026250
 801b6a8:	20000048 	.word	0x20000048
 801b6ac:	20011318 	.word	0x20011318

0801b6b0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801b6b0:	b580      	push	{r7, lr}
 801b6b2:	b086      	sub	sp, #24
 801b6b4:	af00      	add	r7, sp, #0
 801b6b6:	4603      	mov	r3, r0
 801b6b8:	60b9      	str	r1, [r7, #8]
 801b6ba:	607a      	str	r2, [r7, #4]
 801b6bc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d106      	bne.n	801b6d2 <tcp_eff_send_mss_netif+0x22>
 801b6c4:	4b14      	ldr	r3, [pc, #80]	; (801b718 <tcp_eff_send_mss_netif+0x68>)
 801b6c6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801b6ca:	4914      	ldr	r1, [pc, #80]	; (801b71c <tcp_eff_send_mss_netif+0x6c>)
 801b6cc:	4814      	ldr	r0, [pc, #80]	; (801b720 <tcp_eff_send_mss_netif+0x70>)
 801b6ce:	f008 f8bf 	bl	8023850 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801b6d2:	68bb      	ldr	r3, [r7, #8]
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d101      	bne.n	801b6dc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801b6d8:	89fb      	ldrh	r3, [r7, #14]
 801b6da:	e019      	b.n	801b710 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801b6dc:	68bb      	ldr	r3, [r7, #8]
 801b6de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b6e0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801b6e2:	8afb      	ldrh	r3, [r7, #22]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d012      	beq.n	801b70e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801b6e8:	2328      	movs	r3, #40	; 0x28
 801b6ea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801b6ec:	8afa      	ldrh	r2, [r7, #22]
 801b6ee:	8abb      	ldrh	r3, [r7, #20]
 801b6f0:	429a      	cmp	r2, r3
 801b6f2:	d904      	bls.n	801b6fe <tcp_eff_send_mss_netif+0x4e>
 801b6f4:	8afa      	ldrh	r2, [r7, #22]
 801b6f6:	8abb      	ldrh	r3, [r7, #20]
 801b6f8:	1ad3      	subs	r3, r2, r3
 801b6fa:	b29b      	uxth	r3, r3
 801b6fc:	e000      	b.n	801b700 <tcp_eff_send_mss_netif+0x50>
 801b6fe:	2300      	movs	r3, #0
 801b700:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801b702:	8a7a      	ldrh	r2, [r7, #18]
 801b704:	89fb      	ldrh	r3, [r7, #14]
 801b706:	4293      	cmp	r3, r2
 801b708:	bf28      	it	cs
 801b70a:	4613      	movcs	r3, r2
 801b70c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801b70e:	89fb      	ldrh	r3, [r7, #14]
}
 801b710:	4618      	mov	r0, r3
 801b712:	3718      	adds	r7, #24
 801b714:	46bd      	mov	sp, r7
 801b716:	bd80      	pop	{r7, pc}
 801b718:	0802620c 	.word	0x0802620c
 801b71c:	08026918 	.word	0x08026918
 801b720:	08026250 	.word	0x08026250

0801b724 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801b724:	b580      	push	{r7, lr}
 801b726:	b084      	sub	sp, #16
 801b728:	af00      	add	r7, sp, #0
 801b72a:	6078      	str	r0, [r7, #4]
 801b72c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801b72e:	683b      	ldr	r3, [r7, #0]
 801b730:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	2b00      	cmp	r3, #0
 801b736:	d119      	bne.n	801b76c <tcp_netif_ip_addr_changed_pcblist+0x48>
 801b738:	4b10      	ldr	r3, [pc, #64]	; (801b77c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801b73a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801b73e:	4910      	ldr	r1, [pc, #64]	; (801b780 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801b740:	4810      	ldr	r0, [pc, #64]	; (801b784 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801b742:	f008 f885 	bl	8023850 <iprintf>

  while (pcb != NULL) {
 801b746:	e011      	b.n	801b76c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801b748:	68fb      	ldr	r3, [r7, #12]
 801b74a:	681a      	ldr	r2, [r3, #0]
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	429a      	cmp	r2, r3
 801b752:	d108      	bne.n	801b766 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801b754:	68fb      	ldr	r3, [r7, #12]
 801b756:	68db      	ldr	r3, [r3, #12]
 801b758:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801b75a:	68f8      	ldr	r0, [r7, #12]
 801b75c:	f7fe fd9a 	bl	801a294 <tcp_abort>
      pcb = next;
 801b760:	68bb      	ldr	r3, [r7, #8]
 801b762:	60fb      	str	r3, [r7, #12]
 801b764:	e002      	b.n	801b76c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	68db      	ldr	r3, [r3, #12]
 801b76a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801b76c:	68fb      	ldr	r3, [r7, #12]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d1ea      	bne.n	801b748 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801b772:	bf00      	nop
 801b774:	bf00      	nop
 801b776:	3710      	adds	r7, #16
 801b778:	46bd      	mov	sp, r7
 801b77a:	bd80      	pop	{r7, pc}
 801b77c:	0802620c 	.word	0x0802620c
 801b780:	08026940 	.word	0x08026940
 801b784:	08026250 	.word	0x08026250

0801b788 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b788:	b580      	push	{r7, lr}
 801b78a:	b084      	sub	sp, #16
 801b78c:	af00      	add	r7, sp, #0
 801b78e:	6078      	str	r0, [r7, #4]
 801b790:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d02a      	beq.n	801b7ee <tcp_netif_ip_addr_changed+0x66>
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d026      	beq.n	801b7ee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801b7a0:	4b15      	ldr	r3, [pc, #84]	; (801b7f8 <tcp_netif_ip_addr_changed+0x70>)
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	4619      	mov	r1, r3
 801b7a6:	6878      	ldr	r0, [r7, #4]
 801b7a8:	f7ff ffbc 	bl	801b724 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801b7ac:	4b13      	ldr	r3, [pc, #76]	; (801b7fc <tcp_netif_ip_addr_changed+0x74>)
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	4619      	mov	r1, r3
 801b7b2:	6878      	ldr	r0, [r7, #4]
 801b7b4:	f7ff ffb6 	bl	801b724 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801b7b8:	683b      	ldr	r3, [r7, #0]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d017      	beq.n	801b7ee <tcp_netif_ip_addr_changed+0x66>
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d013      	beq.n	801b7ee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b7c6:	4b0e      	ldr	r3, [pc, #56]	; (801b800 <tcp_netif_ip_addr_changed+0x78>)
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	60fb      	str	r3, [r7, #12]
 801b7cc:	e00c      	b.n	801b7e8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	681a      	ldr	r2, [r3, #0]
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	681b      	ldr	r3, [r3, #0]
 801b7d6:	429a      	cmp	r2, r3
 801b7d8:	d103      	bne.n	801b7e2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801b7da:	683b      	ldr	r3, [r7, #0]
 801b7dc:	681a      	ldr	r2, [r3, #0]
 801b7de:	68fb      	ldr	r3, [r7, #12]
 801b7e0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b7e2:	68fb      	ldr	r3, [r7, #12]
 801b7e4:	68db      	ldr	r3, [r3, #12]
 801b7e6:	60fb      	str	r3, [r7, #12]
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d1ef      	bne.n	801b7ce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801b7ee:	bf00      	nop
 801b7f0:	3710      	adds	r7, #16
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	bd80      	pop	{r7, pc}
 801b7f6:	bf00      	nop
 801b7f8:	20011324 	.word	0x20011324
 801b7fc:	2001131c 	.word	0x2001131c
 801b800:	20011320 	.word	0x20011320

0801b804 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801b804:	b580      	push	{r7, lr}
 801b806:	b082      	sub	sp, #8
 801b808:	af00      	add	r7, sp, #0
 801b80a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b810:	2b00      	cmp	r3, #0
 801b812:	d007      	beq.n	801b824 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b818:	4618      	mov	r0, r3
 801b81a:	f7ff fb6f 	bl	801aefc <tcp_segs_free>
    pcb->ooseq = NULL;
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	2200      	movs	r2, #0
 801b822:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801b824:	bf00      	nop
 801b826:	3708      	adds	r7, #8
 801b828:	46bd      	mov	sp, r7
 801b82a:	bd80      	pop	{r7, pc}

0801b82c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801b82c:	b590      	push	{r4, r7, lr}
 801b82e:	b08d      	sub	sp, #52	; 0x34
 801b830:	af04      	add	r7, sp, #16
 801b832:	6078      	str	r0, [r7, #4]
 801b834:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d105      	bne.n	801b848 <tcp_input+0x1c>
 801b83c:	4b9b      	ldr	r3, [pc, #620]	; (801baac <tcp_input+0x280>)
 801b83e:	2283      	movs	r2, #131	; 0x83
 801b840:	499b      	ldr	r1, [pc, #620]	; (801bab0 <tcp_input+0x284>)
 801b842:	489c      	ldr	r0, [pc, #624]	; (801bab4 <tcp_input+0x288>)
 801b844:	f008 f804 	bl	8023850 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	685b      	ldr	r3, [r3, #4]
 801b84c:	4a9a      	ldr	r2, [pc, #616]	; (801bab8 <tcp_input+0x28c>)
 801b84e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	895b      	ldrh	r3, [r3, #10]
 801b854:	2b13      	cmp	r3, #19
 801b856:	f240 83d1 	bls.w	801bffc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b85a:	4b98      	ldr	r3, [pc, #608]	; (801babc <tcp_input+0x290>)
 801b85c:	695b      	ldr	r3, [r3, #20]
 801b85e:	4a97      	ldr	r2, [pc, #604]	; (801babc <tcp_input+0x290>)
 801b860:	6812      	ldr	r2, [r2, #0]
 801b862:	4611      	mov	r1, r2
 801b864:	4618      	mov	r0, r3
 801b866:	f006 fa11 	bl	8021c8c <ip4_addr_isbroadcast_u32>
 801b86a:	4603      	mov	r3, r0
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	f040 83c7 	bne.w	801c000 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801b872:	4b92      	ldr	r3, [pc, #584]	; (801babc <tcp_input+0x290>)
 801b874:	695b      	ldr	r3, [r3, #20]
 801b876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b87a:	2be0      	cmp	r3, #224	; 0xe0
 801b87c:	f000 83c0 	beq.w	801c000 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801b880:	4b8d      	ldr	r3, [pc, #564]	; (801bab8 <tcp_input+0x28c>)
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	899b      	ldrh	r3, [r3, #12]
 801b886:	b29b      	uxth	r3, r3
 801b888:	4618      	mov	r0, r3
 801b88a:	f7fc fb21 	bl	8017ed0 <lwip_htons>
 801b88e:	4603      	mov	r3, r0
 801b890:	0b1b      	lsrs	r3, r3, #12
 801b892:	b29b      	uxth	r3, r3
 801b894:	b2db      	uxtb	r3, r3
 801b896:	009b      	lsls	r3, r3, #2
 801b898:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801b89a:	7cbb      	ldrb	r3, [r7, #18]
 801b89c:	2b13      	cmp	r3, #19
 801b89e:	f240 83b1 	bls.w	801c004 <tcp_input+0x7d8>
 801b8a2:	7cbb      	ldrb	r3, [r7, #18]
 801b8a4:	b29a      	uxth	r2, r3
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	891b      	ldrh	r3, [r3, #8]
 801b8aa:	429a      	cmp	r2, r3
 801b8ac:	f200 83aa 	bhi.w	801c004 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801b8b0:	7cbb      	ldrb	r3, [r7, #18]
 801b8b2:	b29b      	uxth	r3, r3
 801b8b4:	3b14      	subs	r3, #20
 801b8b6:	b29a      	uxth	r2, r3
 801b8b8:	4b81      	ldr	r3, [pc, #516]	; (801bac0 <tcp_input+0x294>)
 801b8ba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801b8bc:	4b81      	ldr	r3, [pc, #516]	; (801bac4 <tcp_input+0x298>)
 801b8be:	2200      	movs	r2, #0
 801b8c0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	895a      	ldrh	r2, [r3, #10]
 801b8c6:	7cbb      	ldrb	r3, [r7, #18]
 801b8c8:	b29b      	uxth	r3, r3
 801b8ca:	429a      	cmp	r2, r3
 801b8cc:	d309      	bcc.n	801b8e2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801b8ce:	4b7c      	ldr	r3, [pc, #496]	; (801bac0 <tcp_input+0x294>)
 801b8d0:	881a      	ldrh	r2, [r3, #0]
 801b8d2:	4b7d      	ldr	r3, [pc, #500]	; (801bac8 <tcp_input+0x29c>)
 801b8d4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801b8d6:	7cbb      	ldrb	r3, [r7, #18]
 801b8d8:	4619      	mov	r1, r3
 801b8da:	6878      	ldr	r0, [r7, #4]
 801b8dc:	f7fd fe64 	bl	80195a8 <pbuf_remove_header>
 801b8e0:	e04e      	b.n	801b980 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d105      	bne.n	801b8f6 <tcp_input+0xca>
 801b8ea:	4b70      	ldr	r3, [pc, #448]	; (801baac <tcp_input+0x280>)
 801b8ec:	22c2      	movs	r2, #194	; 0xc2
 801b8ee:	4977      	ldr	r1, [pc, #476]	; (801bacc <tcp_input+0x2a0>)
 801b8f0:	4870      	ldr	r0, [pc, #448]	; (801bab4 <tcp_input+0x288>)
 801b8f2:	f007 ffad 	bl	8023850 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801b8f6:	2114      	movs	r1, #20
 801b8f8:	6878      	ldr	r0, [r7, #4]
 801b8fa:	f7fd fe55 	bl	80195a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	895a      	ldrh	r2, [r3, #10]
 801b902:	4b71      	ldr	r3, [pc, #452]	; (801bac8 <tcp_input+0x29c>)
 801b904:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801b906:	4b6e      	ldr	r3, [pc, #440]	; (801bac0 <tcp_input+0x294>)
 801b908:	881a      	ldrh	r2, [r3, #0]
 801b90a:	4b6f      	ldr	r3, [pc, #444]	; (801bac8 <tcp_input+0x29c>)
 801b90c:	881b      	ldrh	r3, [r3, #0]
 801b90e:	1ad3      	subs	r3, r2, r3
 801b910:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801b912:	4b6d      	ldr	r3, [pc, #436]	; (801bac8 <tcp_input+0x29c>)
 801b914:	881b      	ldrh	r3, [r3, #0]
 801b916:	4619      	mov	r1, r3
 801b918:	6878      	ldr	r0, [r7, #4]
 801b91a:	f7fd fe45 	bl	80195a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	895b      	ldrh	r3, [r3, #10]
 801b924:	8a3a      	ldrh	r2, [r7, #16]
 801b926:	429a      	cmp	r2, r3
 801b928:	f200 836e 	bhi.w	801c008 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	685b      	ldr	r3, [r3, #4]
 801b932:	4a64      	ldr	r2, [pc, #400]	; (801bac4 <tcp_input+0x298>)
 801b934:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	8a3a      	ldrh	r2, [r7, #16]
 801b93c:	4611      	mov	r1, r2
 801b93e:	4618      	mov	r0, r3
 801b940:	f7fd fe32 	bl	80195a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	891a      	ldrh	r2, [r3, #8]
 801b948:	8a3b      	ldrh	r3, [r7, #16]
 801b94a:	1ad3      	subs	r3, r2, r3
 801b94c:	b29a      	uxth	r2, r3
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	895b      	ldrh	r3, [r3, #10]
 801b956:	2b00      	cmp	r3, #0
 801b958:	d005      	beq.n	801b966 <tcp_input+0x13a>
 801b95a:	4b54      	ldr	r3, [pc, #336]	; (801baac <tcp_input+0x280>)
 801b95c:	22df      	movs	r2, #223	; 0xdf
 801b95e:	495c      	ldr	r1, [pc, #368]	; (801bad0 <tcp_input+0x2a4>)
 801b960:	4854      	ldr	r0, [pc, #336]	; (801bab4 <tcp_input+0x288>)
 801b962:	f007 ff75 	bl	8023850 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	891a      	ldrh	r2, [r3, #8]
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	891b      	ldrh	r3, [r3, #8]
 801b970:	429a      	cmp	r2, r3
 801b972:	d005      	beq.n	801b980 <tcp_input+0x154>
 801b974:	4b4d      	ldr	r3, [pc, #308]	; (801baac <tcp_input+0x280>)
 801b976:	22e0      	movs	r2, #224	; 0xe0
 801b978:	4956      	ldr	r1, [pc, #344]	; (801bad4 <tcp_input+0x2a8>)
 801b97a:	484e      	ldr	r0, [pc, #312]	; (801bab4 <tcp_input+0x288>)
 801b97c:	f007 ff68 	bl	8023850 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801b980:	4b4d      	ldr	r3, [pc, #308]	; (801bab8 <tcp_input+0x28c>)
 801b982:	681b      	ldr	r3, [r3, #0]
 801b984:	881b      	ldrh	r3, [r3, #0]
 801b986:	b29b      	uxth	r3, r3
 801b988:	4a4b      	ldr	r2, [pc, #300]	; (801bab8 <tcp_input+0x28c>)
 801b98a:	6814      	ldr	r4, [r2, #0]
 801b98c:	4618      	mov	r0, r3
 801b98e:	f7fc fa9f 	bl	8017ed0 <lwip_htons>
 801b992:	4603      	mov	r3, r0
 801b994:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801b996:	4b48      	ldr	r3, [pc, #288]	; (801bab8 <tcp_input+0x28c>)
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	885b      	ldrh	r3, [r3, #2]
 801b99c:	b29b      	uxth	r3, r3
 801b99e:	4a46      	ldr	r2, [pc, #280]	; (801bab8 <tcp_input+0x28c>)
 801b9a0:	6814      	ldr	r4, [r2, #0]
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	f7fc fa94 	bl	8017ed0 <lwip_htons>
 801b9a8:	4603      	mov	r3, r0
 801b9aa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801b9ac:	4b42      	ldr	r3, [pc, #264]	; (801bab8 <tcp_input+0x28c>)
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	685b      	ldr	r3, [r3, #4]
 801b9b2:	4a41      	ldr	r2, [pc, #260]	; (801bab8 <tcp_input+0x28c>)
 801b9b4:	6814      	ldr	r4, [r2, #0]
 801b9b6:	4618      	mov	r0, r3
 801b9b8:	f7fc fa9f 	bl	8017efa <lwip_htonl>
 801b9bc:	4603      	mov	r3, r0
 801b9be:	6063      	str	r3, [r4, #4]
 801b9c0:	6863      	ldr	r3, [r4, #4]
 801b9c2:	4a45      	ldr	r2, [pc, #276]	; (801bad8 <tcp_input+0x2ac>)
 801b9c4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801b9c6:	4b3c      	ldr	r3, [pc, #240]	; (801bab8 <tcp_input+0x28c>)
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	689b      	ldr	r3, [r3, #8]
 801b9cc:	4a3a      	ldr	r2, [pc, #232]	; (801bab8 <tcp_input+0x28c>)
 801b9ce:	6814      	ldr	r4, [r2, #0]
 801b9d0:	4618      	mov	r0, r3
 801b9d2:	f7fc fa92 	bl	8017efa <lwip_htonl>
 801b9d6:	4603      	mov	r3, r0
 801b9d8:	60a3      	str	r3, [r4, #8]
 801b9da:	68a3      	ldr	r3, [r4, #8]
 801b9dc:	4a3f      	ldr	r2, [pc, #252]	; (801badc <tcp_input+0x2b0>)
 801b9de:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801b9e0:	4b35      	ldr	r3, [pc, #212]	; (801bab8 <tcp_input+0x28c>)
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	89db      	ldrh	r3, [r3, #14]
 801b9e6:	b29b      	uxth	r3, r3
 801b9e8:	4a33      	ldr	r2, [pc, #204]	; (801bab8 <tcp_input+0x28c>)
 801b9ea:	6814      	ldr	r4, [r2, #0]
 801b9ec:	4618      	mov	r0, r3
 801b9ee:	f7fc fa6f 	bl	8017ed0 <lwip_htons>
 801b9f2:	4603      	mov	r3, r0
 801b9f4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801b9f6:	4b30      	ldr	r3, [pc, #192]	; (801bab8 <tcp_input+0x28c>)
 801b9f8:	681b      	ldr	r3, [r3, #0]
 801b9fa:	899b      	ldrh	r3, [r3, #12]
 801b9fc:	b29b      	uxth	r3, r3
 801b9fe:	4618      	mov	r0, r3
 801ba00:	f7fc fa66 	bl	8017ed0 <lwip_htons>
 801ba04:	4603      	mov	r3, r0
 801ba06:	b2db      	uxtb	r3, r3
 801ba08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ba0c:	b2da      	uxtb	r2, r3
 801ba0e:	4b34      	ldr	r3, [pc, #208]	; (801bae0 <tcp_input+0x2b4>)
 801ba10:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	891a      	ldrh	r2, [r3, #8]
 801ba16:	4b33      	ldr	r3, [pc, #204]	; (801bae4 <tcp_input+0x2b8>)
 801ba18:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801ba1a:	4b31      	ldr	r3, [pc, #196]	; (801bae0 <tcp_input+0x2b4>)
 801ba1c:	781b      	ldrb	r3, [r3, #0]
 801ba1e:	f003 0303 	and.w	r3, r3, #3
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d00c      	beq.n	801ba40 <tcp_input+0x214>
    tcplen++;
 801ba26:	4b2f      	ldr	r3, [pc, #188]	; (801bae4 <tcp_input+0x2b8>)
 801ba28:	881b      	ldrh	r3, [r3, #0]
 801ba2a:	3301      	adds	r3, #1
 801ba2c:	b29a      	uxth	r2, r3
 801ba2e:	4b2d      	ldr	r3, [pc, #180]	; (801bae4 <tcp_input+0x2b8>)
 801ba30:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	891a      	ldrh	r2, [r3, #8]
 801ba36:	4b2b      	ldr	r3, [pc, #172]	; (801bae4 <tcp_input+0x2b8>)
 801ba38:	881b      	ldrh	r3, [r3, #0]
 801ba3a:	429a      	cmp	r2, r3
 801ba3c:	f200 82e6 	bhi.w	801c00c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801ba40:	2300      	movs	r3, #0
 801ba42:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ba44:	4b28      	ldr	r3, [pc, #160]	; (801bae8 <tcp_input+0x2bc>)
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	61fb      	str	r3, [r7, #28]
 801ba4a:	e09d      	b.n	801bb88 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ba4c:	69fb      	ldr	r3, [r7, #28]
 801ba4e:	7d1b      	ldrb	r3, [r3, #20]
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d105      	bne.n	801ba60 <tcp_input+0x234>
 801ba54:	4b15      	ldr	r3, [pc, #84]	; (801baac <tcp_input+0x280>)
 801ba56:	22fb      	movs	r2, #251	; 0xfb
 801ba58:	4924      	ldr	r1, [pc, #144]	; (801baec <tcp_input+0x2c0>)
 801ba5a:	4816      	ldr	r0, [pc, #88]	; (801bab4 <tcp_input+0x288>)
 801ba5c:	f007 fef8 	bl	8023850 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ba60:	69fb      	ldr	r3, [r7, #28]
 801ba62:	7d1b      	ldrb	r3, [r3, #20]
 801ba64:	2b0a      	cmp	r3, #10
 801ba66:	d105      	bne.n	801ba74 <tcp_input+0x248>
 801ba68:	4b10      	ldr	r3, [pc, #64]	; (801baac <tcp_input+0x280>)
 801ba6a:	22fc      	movs	r2, #252	; 0xfc
 801ba6c:	4920      	ldr	r1, [pc, #128]	; (801baf0 <tcp_input+0x2c4>)
 801ba6e:	4811      	ldr	r0, [pc, #68]	; (801bab4 <tcp_input+0x288>)
 801ba70:	f007 feee 	bl	8023850 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801ba74:	69fb      	ldr	r3, [r7, #28]
 801ba76:	7d1b      	ldrb	r3, [r3, #20]
 801ba78:	2b01      	cmp	r3, #1
 801ba7a:	d105      	bne.n	801ba88 <tcp_input+0x25c>
 801ba7c:	4b0b      	ldr	r3, [pc, #44]	; (801baac <tcp_input+0x280>)
 801ba7e:	22fd      	movs	r2, #253	; 0xfd
 801ba80:	491c      	ldr	r1, [pc, #112]	; (801baf4 <tcp_input+0x2c8>)
 801ba82:	480c      	ldr	r0, [pc, #48]	; (801bab4 <tcp_input+0x288>)
 801ba84:	f007 fee4 	bl	8023850 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ba88:	69fb      	ldr	r3, [r7, #28]
 801ba8a:	7a1b      	ldrb	r3, [r3, #8]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d033      	beq.n	801baf8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ba90:	69fb      	ldr	r3, [r7, #28]
 801ba92:	7a1a      	ldrb	r2, [r3, #8]
 801ba94:	4b09      	ldr	r3, [pc, #36]	; (801babc <tcp_input+0x290>)
 801ba96:	685b      	ldr	r3, [r3, #4]
 801ba98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ba9c:	3301      	adds	r3, #1
 801ba9e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801baa0:	429a      	cmp	r2, r3
 801baa2:	d029      	beq.n	801baf8 <tcp_input+0x2cc>
      prev = pcb;
 801baa4:	69fb      	ldr	r3, [r7, #28]
 801baa6:	61bb      	str	r3, [r7, #24]
      continue;
 801baa8:	e06b      	b.n	801bb82 <tcp_input+0x356>
 801baaa:	bf00      	nop
 801baac:	08026974 	.word	0x08026974
 801bab0:	080269a8 	.word	0x080269a8
 801bab4:	080269c0 	.word	0x080269c0
 801bab8:	20011340 	.word	0x20011340
 801babc:	2000dbc4 	.word	0x2000dbc4
 801bac0:	20011344 	.word	0x20011344
 801bac4:	20011348 	.word	0x20011348
 801bac8:	20011346 	.word	0x20011346
 801bacc:	080269e8 	.word	0x080269e8
 801bad0:	080269f8 	.word	0x080269f8
 801bad4:	08026a04 	.word	0x08026a04
 801bad8:	20011350 	.word	0x20011350
 801badc:	20011354 	.word	0x20011354
 801bae0:	2001135c 	.word	0x2001135c
 801bae4:	2001135a 	.word	0x2001135a
 801bae8:	20011324 	.word	0x20011324
 801baec:	08026a24 	.word	0x08026a24
 801baf0:	08026a4c 	.word	0x08026a4c
 801baf4:	08026a78 	.word	0x08026a78
    }

    if (pcb->remote_port == tcphdr->src &&
 801baf8:	69fb      	ldr	r3, [r7, #28]
 801bafa:	8b1a      	ldrh	r2, [r3, #24]
 801bafc:	4b72      	ldr	r3, [pc, #456]	; (801bcc8 <tcp_input+0x49c>)
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	881b      	ldrh	r3, [r3, #0]
 801bb02:	b29b      	uxth	r3, r3
 801bb04:	429a      	cmp	r2, r3
 801bb06:	d13a      	bne.n	801bb7e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801bb08:	69fb      	ldr	r3, [r7, #28]
 801bb0a:	8ada      	ldrh	r2, [r3, #22]
 801bb0c:	4b6e      	ldr	r3, [pc, #440]	; (801bcc8 <tcp_input+0x49c>)
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	885b      	ldrh	r3, [r3, #2]
 801bb12:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801bb14:	429a      	cmp	r2, r3
 801bb16:	d132      	bne.n	801bb7e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801bb18:	69fb      	ldr	r3, [r7, #28]
 801bb1a:	685a      	ldr	r2, [r3, #4]
 801bb1c:	4b6b      	ldr	r3, [pc, #428]	; (801bccc <tcp_input+0x4a0>)
 801bb1e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801bb20:	429a      	cmp	r2, r3
 801bb22:	d12c      	bne.n	801bb7e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801bb24:	69fb      	ldr	r3, [r7, #28]
 801bb26:	681a      	ldr	r2, [r3, #0]
 801bb28:	4b68      	ldr	r3, [pc, #416]	; (801bccc <tcp_input+0x4a0>)
 801bb2a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801bb2c:	429a      	cmp	r2, r3
 801bb2e:	d126      	bne.n	801bb7e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801bb30:	69fb      	ldr	r3, [r7, #28]
 801bb32:	68db      	ldr	r3, [r3, #12]
 801bb34:	69fa      	ldr	r2, [r7, #28]
 801bb36:	429a      	cmp	r2, r3
 801bb38:	d106      	bne.n	801bb48 <tcp_input+0x31c>
 801bb3a:	4b65      	ldr	r3, [pc, #404]	; (801bcd0 <tcp_input+0x4a4>)
 801bb3c:	f240 120d 	movw	r2, #269	; 0x10d
 801bb40:	4964      	ldr	r1, [pc, #400]	; (801bcd4 <tcp_input+0x4a8>)
 801bb42:	4865      	ldr	r0, [pc, #404]	; (801bcd8 <tcp_input+0x4ac>)
 801bb44:	f007 fe84 	bl	8023850 <iprintf>
      if (prev != NULL) {
 801bb48:	69bb      	ldr	r3, [r7, #24]
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d00a      	beq.n	801bb64 <tcp_input+0x338>
        prev->next = pcb->next;
 801bb4e:	69fb      	ldr	r3, [r7, #28]
 801bb50:	68da      	ldr	r2, [r3, #12]
 801bb52:	69bb      	ldr	r3, [r7, #24]
 801bb54:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801bb56:	4b61      	ldr	r3, [pc, #388]	; (801bcdc <tcp_input+0x4b0>)
 801bb58:	681a      	ldr	r2, [r3, #0]
 801bb5a:	69fb      	ldr	r3, [r7, #28]
 801bb5c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801bb5e:	4a5f      	ldr	r2, [pc, #380]	; (801bcdc <tcp_input+0x4b0>)
 801bb60:	69fb      	ldr	r3, [r7, #28]
 801bb62:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801bb64:	69fb      	ldr	r3, [r7, #28]
 801bb66:	68db      	ldr	r3, [r3, #12]
 801bb68:	69fa      	ldr	r2, [r7, #28]
 801bb6a:	429a      	cmp	r2, r3
 801bb6c:	d111      	bne.n	801bb92 <tcp_input+0x366>
 801bb6e:	4b58      	ldr	r3, [pc, #352]	; (801bcd0 <tcp_input+0x4a4>)
 801bb70:	f240 1215 	movw	r2, #277	; 0x115
 801bb74:	495a      	ldr	r1, [pc, #360]	; (801bce0 <tcp_input+0x4b4>)
 801bb76:	4858      	ldr	r0, [pc, #352]	; (801bcd8 <tcp_input+0x4ac>)
 801bb78:	f007 fe6a 	bl	8023850 <iprintf>
      break;
 801bb7c:	e009      	b.n	801bb92 <tcp_input+0x366>
    }
    prev = pcb;
 801bb7e:	69fb      	ldr	r3, [r7, #28]
 801bb80:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bb82:	69fb      	ldr	r3, [r7, #28]
 801bb84:	68db      	ldr	r3, [r3, #12]
 801bb86:	61fb      	str	r3, [r7, #28]
 801bb88:	69fb      	ldr	r3, [r7, #28]
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	f47f af5e 	bne.w	801ba4c <tcp_input+0x220>
 801bb90:	e000      	b.n	801bb94 <tcp_input+0x368>
      break;
 801bb92:	bf00      	nop
  }

  if (pcb == NULL) {
 801bb94:	69fb      	ldr	r3, [r7, #28]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	f040 80aa 	bne.w	801bcf0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bb9c:	4b51      	ldr	r3, [pc, #324]	; (801bce4 <tcp_input+0x4b8>)
 801bb9e:	681b      	ldr	r3, [r3, #0]
 801bba0:	61fb      	str	r3, [r7, #28]
 801bba2:	e03f      	b.n	801bc24 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801bba4:	69fb      	ldr	r3, [r7, #28]
 801bba6:	7d1b      	ldrb	r3, [r3, #20]
 801bba8:	2b0a      	cmp	r3, #10
 801bbaa:	d006      	beq.n	801bbba <tcp_input+0x38e>
 801bbac:	4b48      	ldr	r3, [pc, #288]	; (801bcd0 <tcp_input+0x4a4>)
 801bbae:	f240 121f 	movw	r2, #287	; 0x11f
 801bbb2:	494d      	ldr	r1, [pc, #308]	; (801bce8 <tcp_input+0x4bc>)
 801bbb4:	4848      	ldr	r0, [pc, #288]	; (801bcd8 <tcp_input+0x4ac>)
 801bbb6:	f007 fe4b 	bl	8023850 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bbba:	69fb      	ldr	r3, [r7, #28]
 801bbbc:	7a1b      	ldrb	r3, [r3, #8]
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	d009      	beq.n	801bbd6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bbc2:	69fb      	ldr	r3, [r7, #28]
 801bbc4:	7a1a      	ldrb	r2, [r3, #8]
 801bbc6:	4b41      	ldr	r3, [pc, #260]	; (801bccc <tcp_input+0x4a0>)
 801bbc8:	685b      	ldr	r3, [r3, #4]
 801bbca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bbce:	3301      	adds	r3, #1
 801bbd0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bbd2:	429a      	cmp	r2, r3
 801bbd4:	d122      	bne.n	801bc1c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801bbd6:	69fb      	ldr	r3, [r7, #28]
 801bbd8:	8b1a      	ldrh	r2, [r3, #24]
 801bbda:	4b3b      	ldr	r3, [pc, #236]	; (801bcc8 <tcp_input+0x49c>)
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	881b      	ldrh	r3, [r3, #0]
 801bbe0:	b29b      	uxth	r3, r3
 801bbe2:	429a      	cmp	r2, r3
 801bbe4:	d11b      	bne.n	801bc1e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801bbe6:	69fb      	ldr	r3, [r7, #28]
 801bbe8:	8ada      	ldrh	r2, [r3, #22]
 801bbea:	4b37      	ldr	r3, [pc, #220]	; (801bcc8 <tcp_input+0x49c>)
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	885b      	ldrh	r3, [r3, #2]
 801bbf0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801bbf2:	429a      	cmp	r2, r3
 801bbf4:	d113      	bne.n	801bc1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801bbf6:	69fb      	ldr	r3, [r7, #28]
 801bbf8:	685a      	ldr	r2, [r3, #4]
 801bbfa:	4b34      	ldr	r3, [pc, #208]	; (801bccc <tcp_input+0x4a0>)
 801bbfc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801bbfe:	429a      	cmp	r2, r3
 801bc00:	d10d      	bne.n	801bc1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801bc02:	69fb      	ldr	r3, [r7, #28]
 801bc04:	681a      	ldr	r2, [r3, #0]
 801bc06:	4b31      	ldr	r3, [pc, #196]	; (801bccc <tcp_input+0x4a0>)
 801bc08:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801bc0a:	429a      	cmp	r2, r3
 801bc0c:	d107      	bne.n	801bc1e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801bc0e:	69f8      	ldr	r0, [r7, #28]
 801bc10:	f000 fb56 	bl	801c2c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 801bc14:	6878      	ldr	r0, [r7, #4]
 801bc16:	f7fd fd4d 	bl	80196b4 <pbuf_free>
        return;
 801bc1a:	e1fd      	b.n	801c018 <tcp_input+0x7ec>
        continue;
 801bc1c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bc1e:	69fb      	ldr	r3, [r7, #28]
 801bc20:	68db      	ldr	r3, [r3, #12]
 801bc22:	61fb      	str	r3, [r7, #28]
 801bc24:	69fb      	ldr	r3, [r7, #28]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d1bc      	bne.n	801bba4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801bc2a:	2300      	movs	r3, #0
 801bc2c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801bc2e:	4b2f      	ldr	r3, [pc, #188]	; (801bcec <tcp_input+0x4c0>)
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	617b      	str	r3, [r7, #20]
 801bc34:	e02a      	b.n	801bc8c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801bc36:	697b      	ldr	r3, [r7, #20]
 801bc38:	7a1b      	ldrb	r3, [r3, #8]
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d00c      	beq.n	801bc58 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bc3e:	697b      	ldr	r3, [r7, #20]
 801bc40:	7a1a      	ldrb	r2, [r3, #8]
 801bc42:	4b22      	ldr	r3, [pc, #136]	; (801bccc <tcp_input+0x4a0>)
 801bc44:	685b      	ldr	r3, [r3, #4]
 801bc46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bc4a:	3301      	adds	r3, #1
 801bc4c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801bc4e:	429a      	cmp	r2, r3
 801bc50:	d002      	beq.n	801bc58 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801bc52:	697b      	ldr	r3, [r7, #20]
 801bc54:	61bb      	str	r3, [r7, #24]
        continue;
 801bc56:	e016      	b.n	801bc86 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801bc58:	697b      	ldr	r3, [r7, #20]
 801bc5a:	8ada      	ldrh	r2, [r3, #22]
 801bc5c:	4b1a      	ldr	r3, [pc, #104]	; (801bcc8 <tcp_input+0x49c>)
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	885b      	ldrh	r3, [r3, #2]
 801bc62:	b29b      	uxth	r3, r3
 801bc64:	429a      	cmp	r2, r3
 801bc66:	d10c      	bne.n	801bc82 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801bc68:	697b      	ldr	r3, [r7, #20]
 801bc6a:	681a      	ldr	r2, [r3, #0]
 801bc6c:	4b17      	ldr	r3, [pc, #92]	; (801bccc <tcp_input+0x4a0>)
 801bc6e:	695b      	ldr	r3, [r3, #20]
 801bc70:	429a      	cmp	r2, r3
 801bc72:	d00f      	beq.n	801bc94 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801bc74:	697b      	ldr	r3, [r7, #20]
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d00d      	beq.n	801bc96 <tcp_input+0x46a>
 801bc7a:	697b      	ldr	r3, [r7, #20]
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d009      	beq.n	801bc96 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801bc82:	697b      	ldr	r3, [r7, #20]
 801bc84:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801bc86:	697b      	ldr	r3, [r7, #20]
 801bc88:	68db      	ldr	r3, [r3, #12]
 801bc8a:	617b      	str	r3, [r7, #20]
 801bc8c:	697b      	ldr	r3, [r7, #20]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d1d1      	bne.n	801bc36 <tcp_input+0x40a>
 801bc92:	e000      	b.n	801bc96 <tcp_input+0x46a>
            break;
 801bc94:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801bc96:	697b      	ldr	r3, [r7, #20]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d029      	beq.n	801bcf0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801bc9c:	69bb      	ldr	r3, [r7, #24]
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d00a      	beq.n	801bcb8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801bca2:	697b      	ldr	r3, [r7, #20]
 801bca4:	68da      	ldr	r2, [r3, #12]
 801bca6:	69bb      	ldr	r3, [r7, #24]
 801bca8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801bcaa:	4b10      	ldr	r3, [pc, #64]	; (801bcec <tcp_input+0x4c0>)
 801bcac:	681a      	ldr	r2, [r3, #0]
 801bcae:	697b      	ldr	r3, [r7, #20]
 801bcb0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801bcb2:	4a0e      	ldr	r2, [pc, #56]	; (801bcec <tcp_input+0x4c0>)
 801bcb4:	697b      	ldr	r3, [r7, #20]
 801bcb6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801bcb8:	6978      	ldr	r0, [r7, #20]
 801bcba:	f000 fa03 	bl	801c0c4 <tcp_listen_input>
      }
      pbuf_free(p);
 801bcbe:	6878      	ldr	r0, [r7, #4]
 801bcc0:	f7fd fcf8 	bl	80196b4 <pbuf_free>
      return;
 801bcc4:	e1a8      	b.n	801c018 <tcp_input+0x7ec>
 801bcc6:	bf00      	nop
 801bcc8:	20011340 	.word	0x20011340
 801bccc:	2000dbc4 	.word	0x2000dbc4
 801bcd0:	08026974 	.word	0x08026974
 801bcd4:	08026aa0 	.word	0x08026aa0
 801bcd8:	080269c0 	.word	0x080269c0
 801bcdc:	20011324 	.word	0x20011324
 801bce0:	08026acc 	.word	0x08026acc
 801bce4:	20011328 	.word	0x20011328
 801bce8:	08026af8 	.word	0x08026af8
 801bcec:	20011320 	.word	0x20011320
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801bcf0:	69fb      	ldr	r3, [r7, #28]
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	f000 8158 	beq.w	801bfa8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801bcf8:	4b95      	ldr	r3, [pc, #596]	; (801bf50 <tcp_input+0x724>)
 801bcfa:	2200      	movs	r2, #0
 801bcfc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	891a      	ldrh	r2, [r3, #8]
 801bd02:	4b93      	ldr	r3, [pc, #588]	; (801bf50 <tcp_input+0x724>)
 801bd04:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801bd06:	4a92      	ldr	r2, [pc, #584]	; (801bf50 <tcp_input+0x724>)
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801bd0c:	4b91      	ldr	r3, [pc, #580]	; (801bf54 <tcp_input+0x728>)
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	4a8f      	ldr	r2, [pc, #572]	; (801bf50 <tcp_input+0x724>)
 801bd12:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801bd14:	4b90      	ldr	r3, [pc, #576]	; (801bf58 <tcp_input+0x72c>)
 801bd16:	2200      	movs	r2, #0
 801bd18:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801bd1a:	4b90      	ldr	r3, [pc, #576]	; (801bf5c <tcp_input+0x730>)
 801bd1c:	2200      	movs	r2, #0
 801bd1e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801bd20:	4b8f      	ldr	r3, [pc, #572]	; (801bf60 <tcp_input+0x734>)
 801bd22:	2200      	movs	r2, #0
 801bd24:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801bd26:	4b8f      	ldr	r3, [pc, #572]	; (801bf64 <tcp_input+0x738>)
 801bd28:	781b      	ldrb	r3, [r3, #0]
 801bd2a:	f003 0308 	and.w	r3, r3, #8
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d006      	beq.n	801bd40 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	7b5b      	ldrb	r3, [r3, #13]
 801bd36:	f043 0301 	orr.w	r3, r3, #1
 801bd3a:	b2da      	uxtb	r2, r3
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801bd40:	69fb      	ldr	r3, [r7, #28]
 801bd42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d017      	beq.n	801bd78 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801bd48:	69f8      	ldr	r0, [r7, #28]
 801bd4a:	f7ff f85b 	bl	801ae04 <tcp_process_refused_data>
 801bd4e:	4603      	mov	r3, r0
 801bd50:	f113 0f0d 	cmn.w	r3, #13
 801bd54:	d007      	beq.n	801bd66 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801bd56:	69fb      	ldr	r3, [r7, #28]
 801bd58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d00c      	beq.n	801bd78 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801bd5e:	4b82      	ldr	r3, [pc, #520]	; (801bf68 <tcp_input+0x73c>)
 801bd60:	881b      	ldrh	r3, [r3, #0]
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d008      	beq.n	801bd78 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801bd66:	69fb      	ldr	r3, [r7, #28]
 801bd68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	f040 80e3 	bne.w	801bf36 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801bd70:	69f8      	ldr	r0, [r7, #28]
 801bd72:	f003 fe05 	bl	801f980 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801bd76:	e0de      	b.n	801bf36 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801bd78:	4a7c      	ldr	r2, [pc, #496]	; (801bf6c <tcp_input+0x740>)
 801bd7a:	69fb      	ldr	r3, [r7, #28]
 801bd7c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801bd7e:	69f8      	ldr	r0, [r7, #28]
 801bd80:	f000 fb18 	bl	801c3b4 <tcp_process>
 801bd84:	4603      	mov	r3, r0
 801bd86:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801bd88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bd8c:	f113 0f0d 	cmn.w	r3, #13
 801bd90:	f000 80d3 	beq.w	801bf3a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801bd94:	4b71      	ldr	r3, [pc, #452]	; (801bf5c <tcp_input+0x730>)
 801bd96:	781b      	ldrb	r3, [r3, #0]
 801bd98:	f003 0308 	and.w	r3, r3, #8
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d015      	beq.n	801bdcc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801bda0:	69fb      	ldr	r3, [r7, #28]
 801bda2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d008      	beq.n	801bdbc <tcp_input+0x590>
 801bdaa:	69fb      	ldr	r3, [r7, #28]
 801bdac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bdb0:	69fa      	ldr	r2, [r7, #28]
 801bdb2:	6912      	ldr	r2, [r2, #16]
 801bdb4:	f06f 010d 	mvn.w	r1, #13
 801bdb8:	4610      	mov	r0, r2
 801bdba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801bdbc:	69f9      	ldr	r1, [r7, #28]
 801bdbe:	486c      	ldr	r0, [pc, #432]	; (801bf70 <tcp_input+0x744>)
 801bdc0:	f7ff fbbc 	bl	801b53c <tcp_pcb_remove>
        tcp_free(pcb);
 801bdc4:	69f8      	ldr	r0, [r7, #28]
 801bdc6:	f7fd ff21 	bl	8019c0c <tcp_free>
 801bdca:	e0da      	b.n	801bf82 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801bdcc:	2300      	movs	r3, #0
 801bdce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801bdd0:	4b63      	ldr	r3, [pc, #396]	; (801bf60 <tcp_input+0x734>)
 801bdd2:	881b      	ldrh	r3, [r3, #0]
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d01d      	beq.n	801be14 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801bdd8:	4b61      	ldr	r3, [pc, #388]	; (801bf60 <tcp_input+0x734>)
 801bdda:	881b      	ldrh	r3, [r3, #0]
 801bddc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801bdde:	69fb      	ldr	r3, [r7, #28]
 801bde0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d00a      	beq.n	801bdfe <tcp_input+0x5d2>
 801bde8:	69fb      	ldr	r3, [r7, #28]
 801bdea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bdee:	69fa      	ldr	r2, [r7, #28]
 801bdf0:	6910      	ldr	r0, [r2, #16]
 801bdf2:	89fa      	ldrh	r2, [r7, #14]
 801bdf4:	69f9      	ldr	r1, [r7, #28]
 801bdf6:	4798      	blx	r3
 801bdf8:	4603      	mov	r3, r0
 801bdfa:	74fb      	strb	r3, [r7, #19]
 801bdfc:	e001      	b.n	801be02 <tcp_input+0x5d6>
 801bdfe:	2300      	movs	r3, #0
 801be00:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801be02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801be06:	f113 0f0d 	cmn.w	r3, #13
 801be0a:	f000 8098 	beq.w	801bf3e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801be0e:	4b54      	ldr	r3, [pc, #336]	; (801bf60 <tcp_input+0x734>)
 801be10:	2200      	movs	r2, #0
 801be12:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801be14:	69f8      	ldr	r0, [r7, #28]
 801be16:	f000 f915 	bl	801c044 <tcp_input_delayed_close>
 801be1a:	4603      	mov	r3, r0
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	f040 8090 	bne.w	801bf42 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801be22:	4b4d      	ldr	r3, [pc, #308]	; (801bf58 <tcp_input+0x72c>)
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	2b00      	cmp	r3, #0
 801be28:	d041      	beq.n	801beae <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801be2a:	69fb      	ldr	r3, [r7, #28]
 801be2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d006      	beq.n	801be40 <tcp_input+0x614>
 801be32:	4b50      	ldr	r3, [pc, #320]	; (801bf74 <tcp_input+0x748>)
 801be34:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801be38:	494f      	ldr	r1, [pc, #316]	; (801bf78 <tcp_input+0x74c>)
 801be3a:	4850      	ldr	r0, [pc, #320]	; (801bf7c <tcp_input+0x750>)
 801be3c:	f007 fd08 	bl	8023850 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801be40:	69fb      	ldr	r3, [r7, #28]
 801be42:	8b5b      	ldrh	r3, [r3, #26]
 801be44:	f003 0310 	and.w	r3, r3, #16
 801be48:	2b00      	cmp	r3, #0
 801be4a:	d008      	beq.n	801be5e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801be4c:	4b42      	ldr	r3, [pc, #264]	; (801bf58 <tcp_input+0x72c>)
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	4618      	mov	r0, r3
 801be52:	f7fd fc2f 	bl	80196b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801be56:	69f8      	ldr	r0, [r7, #28]
 801be58:	f7fe fa1c 	bl	801a294 <tcp_abort>
            goto aborted;
 801be5c:	e091      	b.n	801bf82 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801be5e:	69fb      	ldr	r3, [r7, #28]
 801be60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801be64:	2b00      	cmp	r3, #0
 801be66:	d00c      	beq.n	801be82 <tcp_input+0x656>
 801be68:	69fb      	ldr	r3, [r7, #28]
 801be6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801be6e:	69fb      	ldr	r3, [r7, #28]
 801be70:	6918      	ldr	r0, [r3, #16]
 801be72:	4b39      	ldr	r3, [pc, #228]	; (801bf58 <tcp_input+0x72c>)
 801be74:	681a      	ldr	r2, [r3, #0]
 801be76:	2300      	movs	r3, #0
 801be78:	69f9      	ldr	r1, [r7, #28]
 801be7a:	47a0      	blx	r4
 801be7c:	4603      	mov	r3, r0
 801be7e:	74fb      	strb	r3, [r7, #19]
 801be80:	e008      	b.n	801be94 <tcp_input+0x668>
 801be82:	4b35      	ldr	r3, [pc, #212]	; (801bf58 <tcp_input+0x72c>)
 801be84:	681a      	ldr	r2, [r3, #0]
 801be86:	2300      	movs	r3, #0
 801be88:	69f9      	ldr	r1, [r7, #28]
 801be8a:	2000      	movs	r0, #0
 801be8c:	f7ff f890 	bl	801afb0 <tcp_recv_null>
 801be90:	4603      	mov	r3, r0
 801be92:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801be94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801be98:	f113 0f0d 	cmn.w	r3, #13
 801be9c:	d053      	beq.n	801bf46 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801be9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d003      	beq.n	801beae <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801bea6:	4b2c      	ldr	r3, [pc, #176]	; (801bf58 <tcp_input+0x72c>)
 801bea8:	681a      	ldr	r2, [r3, #0]
 801beaa:	69fb      	ldr	r3, [r7, #28]
 801beac:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801beae:	4b2b      	ldr	r3, [pc, #172]	; (801bf5c <tcp_input+0x730>)
 801beb0:	781b      	ldrb	r3, [r3, #0]
 801beb2:	f003 0320 	and.w	r3, r3, #32
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d030      	beq.n	801bf1c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801beba:	69fb      	ldr	r3, [r7, #28]
 801bebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	d009      	beq.n	801bed6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801bec2:	69fb      	ldr	r3, [r7, #28]
 801bec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bec6:	7b5a      	ldrb	r2, [r3, #13]
 801bec8:	69fb      	ldr	r3, [r7, #28]
 801beca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801becc:	f042 0220 	orr.w	r2, r2, #32
 801bed0:	b2d2      	uxtb	r2, r2
 801bed2:	735a      	strb	r2, [r3, #13]
 801bed4:	e022      	b.n	801bf1c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801bed6:	69fb      	ldr	r3, [r7, #28]
 801bed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801beda:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801bede:	d005      	beq.n	801beec <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801bee0:	69fb      	ldr	r3, [r7, #28]
 801bee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bee4:	3301      	adds	r3, #1
 801bee6:	b29a      	uxth	r2, r3
 801bee8:	69fb      	ldr	r3, [r7, #28]
 801beea:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801beec:	69fb      	ldr	r3, [r7, #28]
 801beee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d00b      	beq.n	801bf0e <tcp_input+0x6e2>
 801bef6:	69fb      	ldr	r3, [r7, #28]
 801bef8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801befc:	69fb      	ldr	r3, [r7, #28]
 801befe:	6918      	ldr	r0, [r3, #16]
 801bf00:	2300      	movs	r3, #0
 801bf02:	2200      	movs	r2, #0
 801bf04:	69f9      	ldr	r1, [r7, #28]
 801bf06:	47a0      	blx	r4
 801bf08:	4603      	mov	r3, r0
 801bf0a:	74fb      	strb	r3, [r7, #19]
 801bf0c:	e001      	b.n	801bf12 <tcp_input+0x6e6>
 801bf0e:	2300      	movs	r3, #0
 801bf10:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801bf12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bf16:	f113 0f0d 	cmn.w	r3, #13
 801bf1a:	d016      	beq.n	801bf4a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801bf1c:	4b13      	ldr	r3, [pc, #76]	; (801bf6c <tcp_input+0x740>)
 801bf1e:	2200      	movs	r2, #0
 801bf20:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801bf22:	69f8      	ldr	r0, [r7, #28]
 801bf24:	f000 f88e 	bl	801c044 <tcp_input_delayed_close>
 801bf28:	4603      	mov	r3, r0
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d128      	bne.n	801bf80 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801bf2e:	69f8      	ldr	r0, [r7, #28]
 801bf30:	f002 ff20 	bl	801ed74 <tcp_output>
 801bf34:	e025      	b.n	801bf82 <tcp_input+0x756>
        goto aborted;
 801bf36:	bf00      	nop
 801bf38:	e023      	b.n	801bf82 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801bf3a:	bf00      	nop
 801bf3c:	e021      	b.n	801bf82 <tcp_input+0x756>
              goto aborted;
 801bf3e:	bf00      	nop
 801bf40:	e01f      	b.n	801bf82 <tcp_input+0x756>
          goto aborted;
 801bf42:	bf00      	nop
 801bf44:	e01d      	b.n	801bf82 <tcp_input+0x756>
            goto aborted;
 801bf46:	bf00      	nop
 801bf48:	e01b      	b.n	801bf82 <tcp_input+0x756>
              goto aborted;
 801bf4a:	bf00      	nop
 801bf4c:	e019      	b.n	801bf82 <tcp_input+0x756>
 801bf4e:	bf00      	nop
 801bf50:	20011330 	.word	0x20011330
 801bf54:	20011340 	.word	0x20011340
 801bf58:	20011360 	.word	0x20011360
 801bf5c:	2001135d 	.word	0x2001135d
 801bf60:	20011358 	.word	0x20011358
 801bf64:	2001135c 	.word	0x2001135c
 801bf68:	2001135a 	.word	0x2001135a
 801bf6c:	20011364 	.word	0x20011364
 801bf70:	20011324 	.word	0x20011324
 801bf74:	08026974 	.word	0x08026974
 801bf78:	08026b28 	.word	0x08026b28
 801bf7c:	080269c0 	.word	0x080269c0
          goto aborted;
 801bf80:	bf00      	nop
    tcp_input_pcb = NULL;
 801bf82:	4b27      	ldr	r3, [pc, #156]	; (801c020 <tcp_input+0x7f4>)
 801bf84:	2200      	movs	r2, #0
 801bf86:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801bf88:	4b26      	ldr	r3, [pc, #152]	; (801c024 <tcp_input+0x7f8>)
 801bf8a:	2200      	movs	r2, #0
 801bf8c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801bf8e:	4b26      	ldr	r3, [pc, #152]	; (801c028 <tcp_input+0x7fc>)
 801bf90:	685b      	ldr	r3, [r3, #4]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d03f      	beq.n	801c016 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801bf96:	4b24      	ldr	r3, [pc, #144]	; (801c028 <tcp_input+0x7fc>)
 801bf98:	685b      	ldr	r3, [r3, #4]
 801bf9a:	4618      	mov	r0, r3
 801bf9c:	f7fd fb8a 	bl	80196b4 <pbuf_free>
      inseg.p = NULL;
 801bfa0:	4b21      	ldr	r3, [pc, #132]	; (801c028 <tcp_input+0x7fc>)
 801bfa2:	2200      	movs	r2, #0
 801bfa4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801bfa6:	e036      	b.n	801c016 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801bfa8:	4b20      	ldr	r3, [pc, #128]	; (801c02c <tcp_input+0x800>)
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	899b      	ldrh	r3, [r3, #12]
 801bfae:	b29b      	uxth	r3, r3
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f7fb ff8d 	bl	8017ed0 <lwip_htons>
 801bfb6:	4603      	mov	r3, r0
 801bfb8:	b2db      	uxtb	r3, r3
 801bfba:	f003 0304 	and.w	r3, r3, #4
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d118      	bne.n	801bff4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bfc2:	4b1b      	ldr	r3, [pc, #108]	; (801c030 <tcp_input+0x804>)
 801bfc4:	6819      	ldr	r1, [r3, #0]
 801bfc6:	4b1b      	ldr	r3, [pc, #108]	; (801c034 <tcp_input+0x808>)
 801bfc8:	881b      	ldrh	r3, [r3, #0]
 801bfca:	461a      	mov	r2, r3
 801bfcc:	4b1a      	ldr	r3, [pc, #104]	; (801c038 <tcp_input+0x80c>)
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bfd2:	4b16      	ldr	r3, [pc, #88]	; (801c02c <tcp_input+0x800>)
 801bfd4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bfd6:	885b      	ldrh	r3, [r3, #2]
 801bfd8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bfda:	4a14      	ldr	r2, [pc, #80]	; (801c02c <tcp_input+0x800>)
 801bfdc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bfde:	8812      	ldrh	r2, [r2, #0]
 801bfe0:	b292      	uxth	r2, r2
 801bfe2:	9202      	str	r2, [sp, #8]
 801bfe4:	9301      	str	r3, [sp, #4]
 801bfe6:	4b15      	ldr	r3, [pc, #84]	; (801c03c <tcp_input+0x810>)
 801bfe8:	9300      	str	r3, [sp, #0]
 801bfea:	4b15      	ldr	r3, [pc, #84]	; (801c040 <tcp_input+0x814>)
 801bfec:	4602      	mov	r2, r0
 801bfee:	2000      	movs	r0, #0
 801bff0:	f003 fc74 	bl	801f8dc <tcp_rst>
    pbuf_free(p);
 801bff4:	6878      	ldr	r0, [r7, #4]
 801bff6:	f7fd fb5d 	bl	80196b4 <pbuf_free>
  return;
 801bffa:	e00c      	b.n	801c016 <tcp_input+0x7ea>
    goto dropped;
 801bffc:	bf00      	nop
 801bffe:	e006      	b.n	801c00e <tcp_input+0x7e2>
    goto dropped;
 801c000:	bf00      	nop
 801c002:	e004      	b.n	801c00e <tcp_input+0x7e2>
    goto dropped;
 801c004:	bf00      	nop
 801c006:	e002      	b.n	801c00e <tcp_input+0x7e2>
      goto dropped;
 801c008:	bf00      	nop
 801c00a:	e000      	b.n	801c00e <tcp_input+0x7e2>
      goto dropped;
 801c00c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801c00e:	6878      	ldr	r0, [r7, #4]
 801c010:	f7fd fb50 	bl	80196b4 <pbuf_free>
 801c014:	e000      	b.n	801c018 <tcp_input+0x7ec>
  return;
 801c016:	bf00      	nop
}
 801c018:	3724      	adds	r7, #36	; 0x24
 801c01a:	46bd      	mov	sp, r7
 801c01c:	bd90      	pop	{r4, r7, pc}
 801c01e:	bf00      	nop
 801c020:	20011364 	.word	0x20011364
 801c024:	20011360 	.word	0x20011360
 801c028:	20011330 	.word	0x20011330
 801c02c:	20011340 	.word	0x20011340
 801c030:	20011354 	.word	0x20011354
 801c034:	2001135a 	.word	0x2001135a
 801c038:	20011350 	.word	0x20011350
 801c03c:	2000dbd4 	.word	0x2000dbd4
 801c040:	2000dbd8 	.word	0x2000dbd8

0801c044 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801c044:	b580      	push	{r7, lr}
 801c046:	b082      	sub	sp, #8
 801c048:	af00      	add	r7, sp, #0
 801c04a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d106      	bne.n	801c060 <tcp_input_delayed_close+0x1c>
 801c052:	4b17      	ldr	r3, [pc, #92]	; (801c0b0 <tcp_input_delayed_close+0x6c>)
 801c054:	f240 225a 	movw	r2, #602	; 0x25a
 801c058:	4916      	ldr	r1, [pc, #88]	; (801c0b4 <tcp_input_delayed_close+0x70>)
 801c05a:	4817      	ldr	r0, [pc, #92]	; (801c0b8 <tcp_input_delayed_close+0x74>)
 801c05c:	f007 fbf8 	bl	8023850 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801c060:	4b16      	ldr	r3, [pc, #88]	; (801c0bc <tcp_input_delayed_close+0x78>)
 801c062:	781b      	ldrb	r3, [r3, #0]
 801c064:	f003 0310 	and.w	r3, r3, #16
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d01c      	beq.n	801c0a6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	8b5b      	ldrh	r3, [r3, #26]
 801c070:	f003 0310 	and.w	r3, r3, #16
 801c074:	2b00      	cmp	r3, #0
 801c076:	d10d      	bne.n	801c094 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d008      	beq.n	801c094 <tcp_input_delayed_close+0x50>
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c088:	687a      	ldr	r2, [r7, #4]
 801c08a:	6912      	ldr	r2, [r2, #16]
 801c08c:	f06f 010e 	mvn.w	r1, #14
 801c090:	4610      	mov	r0, r2
 801c092:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801c094:	6879      	ldr	r1, [r7, #4]
 801c096:	480a      	ldr	r0, [pc, #40]	; (801c0c0 <tcp_input_delayed_close+0x7c>)
 801c098:	f7ff fa50 	bl	801b53c <tcp_pcb_remove>
    tcp_free(pcb);
 801c09c:	6878      	ldr	r0, [r7, #4]
 801c09e:	f7fd fdb5 	bl	8019c0c <tcp_free>
    return 1;
 801c0a2:	2301      	movs	r3, #1
 801c0a4:	e000      	b.n	801c0a8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801c0a6:	2300      	movs	r3, #0
}
 801c0a8:	4618      	mov	r0, r3
 801c0aa:	3708      	adds	r7, #8
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	bd80      	pop	{r7, pc}
 801c0b0:	08026974 	.word	0x08026974
 801c0b4:	08026b44 	.word	0x08026b44
 801c0b8:	080269c0 	.word	0x080269c0
 801c0bc:	2001135d 	.word	0x2001135d
 801c0c0:	20011324 	.word	0x20011324

0801c0c4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801c0c4:	b590      	push	{r4, r7, lr}
 801c0c6:	b08b      	sub	sp, #44	; 0x2c
 801c0c8:	af04      	add	r7, sp, #16
 801c0ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801c0cc:	4b6f      	ldr	r3, [pc, #444]	; (801c28c <tcp_listen_input+0x1c8>)
 801c0ce:	781b      	ldrb	r3, [r3, #0]
 801c0d0:	f003 0304 	and.w	r3, r3, #4
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	f040 80d2 	bne.w	801c27e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d106      	bne.n	801c0ee <tcp_listen_input+0x2a>
 801c0e0:	4b6b      	ldr	r3, [pc, #428]	; (801c290 <tcp_listen_input+0x1cc>)
 801c0e2:	f240 2281 	movw	r2, #641	; 0x281
 801c0e6:	496b      	ldr	r1, [pc, #428]	; (801c294 <tcp_listen_input+0x1d0>)
 801c0e8:	486b      	ldr	r0, [pc, #428]	; (801c298 <tcp_listen_input+0x1d4>)
 801c0ea:	f007 fbb1 	bl	8023850 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801c0ee:	4b67      	ldr	r3, [pc, #412]	; (801c28c <tcp_listen_input+0x1c8>)
 801c0f0:	781b      	ldrb	r3, [r3, #0]
 801c0f2:	f003 0310 	and.w	r3, r3, #16
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d019      	beq.n	801c12e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c0fa:	4b68      	ldr	r3, [pc, #416]	; (801c29c <tcp_listen_input+0x1d8>)
 801c0fc:	6819      	ldr	r1, [r3, #0]
 801c0fe:	4b68      	ldr	r3, [pc, #416]	; (801c2a0 <tcp_listen_input+0x1dc>)
 801c100:	881b      	ldrh	r3, [r3, #0]
 801c102:	461a      	mov	r2, r3
 801c104:	4b67      	ldr	r3, [pc, #412]	; (801c2a4 <tcp_listen_input+0x1e0>)
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c10a:	4b67      	ldr	r3, [pc, #412]	; (801c2a8 <tcp_listen_input+0x1e4>)
 801c10c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c10e:	885b      	ldrh	r3, [r3, #2]
 801c110:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c112:	4a65      	ldr	r2, [pc, #404]	; (801c2a8 <tcp_listen_input+0x1e4>)
 801c114:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c116:	8812      	ldrh	r2, [r2, #0]
 801c118:	b292      	uxth	r2, r2
 801c11a:	9202      	str	r2, [sp, #8]
 801c11c:	9301      	str	r3, [sp, #4]
 801c11e:	4b63      	ldr	r3, [pc, #396]	; (801c2ac <tcp_listen_input+0x1e8>)
 801c120:	9300      	str	r3, [sp, #0]
 801c122:	4b63      	ldr	r3, [pc, #396]	; (801c2b0 <tcp_listen_input+0x1ec>)
 801c124:	4602      	mov	r2, r0
 801c126:	6878      	ldr	r0, [r7, #4]
 801c128:	f003 fbd8 	bl	801f8dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801c12c:	e0a9      	b.n	801c282 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801c12e:	4b57      	ldr	r3, [pc, #348]	; (801c28c <tcp_listen_input+0x1c8>)
 801c130:	781b      	ldrb	r3, [r3, #0]
 801c132:	f003 0302 	and.w	r3, r3, #2
 801c136:	2b00      	cmp	r3, #0
 801c138:	f000 80a3 	beq.w	801c282 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	7d5b      	ldrb	r3, [r3, #21]
 801c140:	4618      	mov	r0, r3
 801c142:	f7ff f859 	bl	801b1f8 <tcp_alloc>
 801c146:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801c148:	697b      	ldr	r3, [r7, #20]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d111      	bne.n	801c172 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	699b      	ldr	r3, [r3, #24]
 801c152:	2b00      	cmp	r3, #0
 801c154:	d00a      	beq.n	801c16c <tcp_listen_input+0xa8>
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	699b      	ldr	r3, [r3, #24]
 801c15a:	687a      	ldr	r2, [r7, #4]
 801c15c:	6910      	ldr	r0, [r2, #16]
 801c15e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c162:	2100      	movs	r1, #0
 801c164:	4798      	blx	r3
 801c166:	4603      	mov	r3, r0
 801c168:	73bb      	strb	r3, [r7, #14]
      return;
 801c16a:	e08b      	b.n	801c284 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801c16c:	23f0      	movs	r3, #240	; 0xf0
 801c16e:	73bb      	strb	r3, [r7, #14]
      return;
 801c170:	e088      	b.n	801c284 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801c172:	4b50      	ldr	r3, [pc, #320]	; (801c2b4 <tcp_listen_input+0x1f0>)
 801c174:	695a      	ldr	r2, [r3, #20]
 801c176:	697b      	ldr	r3, [r7, #20]
 801c178:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801c17a:	4b4e      	ldr	r3, [pc, #312]	; (801c2b4 <tcp_listen_input+0x1f0>)
 801c17c:	691a      	ldr	r2, [r3, #16]
 801c17e:	697b      	ldr	r3, [r7, #20]
 801c180:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	8ada      	ldrh	r2, [r3, #22]
 801c186:	697b      	ldr	r3, [r7, #20]
 801c188:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801c18a:	4b47      	ldr	r3, [pc, #284]	; (801c2a8 <tcp_listen_input+0x1e4>)
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	881b      	ldrh	r3, [r3, #0]
 801c190:	b29a      	uxth	r2, r3
 801c192:	697b      	ldr	r3, [r7, #20]
 801c194:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801c196:	697b      	ldr	r3, [r7, #20]
 801c198:	2203      	movs	r2, #3
 801c19a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801c19c:	4b41      	ldr	r3, [pc, #260]	; (801c2a4 <tcp_listen_input+0x1e0>)
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	1c5a      	adds	r2, r3, #1
 801c1a2:	697b      	ldr	r3, [r7, #20]
 801c1a4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801c1a6:	697b      	ldr	r3, [r7, #20]
 801c1a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c1aa:	697b      	ldr	r3, [r7, #20]
 801c1ac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801c1ae:	6978      	ldr	r0, [r7, #20]
 801c1b0:	f7ff fa58 	bl	801b664 <tcp_next_iss>
 801c1b4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801c1b6:	697b      	ldr	r3, [r7, #20]
 801c1b8:	693a      	ldr	r2, [r7, #16]
 801c1ba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801c1bc:	697b      	ldr	r3, [r7, #20]
 801c1be:	693a      	ldr	r2, [r7, #16]
 801c1c0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801c1c2:	697b      	ldr	r3, [r7, #20]
 801c1c4:	693a      	ldr	r2, [r7, #16]
 801c1c6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801c1c8:	697b      	ldr	r3, [r7, #20]
 801c1ca:	693a      	ldr	r2, [r7, #16]
 801c1cc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801c1ce:	4b35      	ldr	r3, [pc, #212]	; (801c2a4 <tcp_listen_input+0x1e0>)
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	1e5a      	subs	r2, r3, #1
 801c1d4:	697b      	ldr	r3, [r7, #20]
 801c1d6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	691a      	ldr	r2, [r3, #16]
 801c1dc:	697b      	ldr	r3, [r7, #20]
 801c1de:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801c1e0:	697b      	ldr	r3, [r7, #20]
 801c1e2:	687a      	ldr	r2, [r7, #4]
 801c1e4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	7a5b      	ldrb	r3, [r3, #9]
 801c1ea:	f003 030c 	and.w	r3, r3, #12
 801c1ee:	b2da      	uxtb	r2, r3
 801c1f0:	697b      	ldr	r3, [r7, #20]
 801c1f2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	7a1a      	ldrb	r2, [r3, #8]
 801c1f8:	697b      	ldr	r3, [r7, #20]
 801c1fa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801c1fc:	4b2e      	ldr	r3, [pc, #184]	; (801c2b8 <tcp_listen_input+0x1f4>)
 801c1fe:	681a      	ldr	r2, [r3, #0]
 801c200:	697b      	ldr	r3, [r7, #20]
 801c202:	60da      	str	r2, [r3, #12]
 801c204:	4a2c      	ldr	r2, [pc, #176]	; (801c2b8 <tcp_listen_input+0x1f4>)
 801c206:	697b      	ldr	r3, [r7, #20]
 801c208:	6013      	str	r3, [r2, #0]
 801c20a:	f003 fd29 	bl	801fc60 <tcp_timer_needed>
 801c20e:	4b2b      	ldr	r3, [pc, #172]	; (801c2bc <tcp_listen_input+0x1f8>)
 801c210:	2201      	movs	r2, #1
 801c212:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801c214:	6978      	ldr	r0, [r7, #20]
 801c216:	f001 fd8f 	bl	801dd38 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801c21a:	4b23      	ldr	r3, [pc, #140]	; (801c2a8 <tcp_listen_input+0x1e4>)
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	89db      	ldrh	r3, [r3, #14]
 801c220:	b29a      	uxth	r2, r3
 801c222:	697b      	ldr	r3, [r7, #20]
 801c224:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801c228:	697b      	ldr	r3, [r7, #20]
 801c22a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c22e:	697b      	ldr	r3, [r7, #20]
 801c230:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801c234:	697b      	ldr	r3, [r7, #20]
 801c236:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801c238:	697b      	ldr	r3, [r7, #20]
 801c23a:	3304      	adds	r3, #4
 801c23c:	4618      	mov	r0, r3
 801c23e:	f005 fa8f 	bl	8021760 <ip4_route>
 801c242:	4601      	mov	r1, r0
 801c244:	697b      	ldr	r3, [r7, #20]
 801c246:	3304      	adds	r3, #4
 801c248:	461a      	mov	r2, r3
 801c24a:	4620      	mov	r0, r4
 801c24c:	f7ff fa30 	bl	801b6b0 <tcp_eff_send_mss_netif>
 801c250:	4603      	mov	r3, r0
 801c252:	461a      	mov	r2, r3
 801c254:	697b      	ldr	r3, [r7, #20]
 801c256:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801c258:	2112      	movs	r1, #18
 801c25a:	6978      	ldr	r0, [r7, #20]
 801c25c:	f002 fc9c 	bl	801eb98 <tcp_enqueue_flags>
 801c260:	4603      	mov	r3, r0
 801c262:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801c264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d004      	beq.n	801c276 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801c26c:	2100      	movs	r1, #0
 801c26e:	6978      	ldr	r0, [r7, #20]
 801c270:	f7fd ff52 	bl	801a118 <tcp_abandon>
      return;
 801c274:	e006      	b.n	801c284 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801c276:	6978      	ldr	r0, [r7, #20]
 801c278:	f002 fd7c 	bl	801ed74 <tcp_output>
  return;
 801c27c:	e001      	b.n	801c282 <tcp_listen_input+0x1be>
    return;
 801c27e:	bf00      	nop
 801c280:	e000      	b.n	801c284 <tcp_listen_input+0x1c0>
  return;
 801c282:	bf00      	nop
}
 801c284:	371c      	adds	r7, #28
 801c286:	46bd      	mov	sp, r7
 801c288:	bd90      	pop	{r4, r7, pc}
 801c28a:	bf00      	nop
 801c28c:	2001135c 	.word	0x2001135c
 801c290:	08026974 	.word	0x08026974
 801c294:	08026b6c 	.word	0x08026b6c
 801c298:	080269c0 	.word	0x080269c0
 801c29c:	20011354 	.word	0x20011354
 801c2a0:	2001135a 	.word	0x2001135a
 801c2a4:	20011350 	.word	0x20011350
 801c2a8:	20011340 	.word	0x20011340
 801c2ac:	2000dbd4 	.word	0x2000dbd4
 801c2b0:	2000dbd8 	.word	0x2000dbd8
 801c2b4:	2000dbc4 	.word	0x2000dbc4
 801c2b8:	20011324 	.word	0x20011324
 801c2bc:	2001132c 	.word	0x2001132c

0801c2c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801c2c0:	b580      	push	{r7, lr}
 801c2c2:	b086      	sub	sp, #24
 801c2c4:	af04      	add	r7, sp, #16
 801c2c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801c2c8:	4b2f      	ldr	r3, [pc, #188]	; (801c388 <tcp_timewait_input+0xc8>)
 801c2ca:	781b      	ldrb	r3, [r3, #0]
 801c2cc:	f003 0304 	and.w	r3, r3, #4
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	d153      	bne.n	801c37c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d106      	bne.n	801c2e8 <tcp_timewait_input+0x28>
 801c2da:	4b2c      	ldr	r3, [pc, #176]	; (801c38c <tcp_timewait_input+0xcc>)
 801c2dc:	f240 22ee 	movw	r2, #750	; 0x2ee
 801c2e0:	492b      	ldr	r1, [pc, #172]	; (801c390 <tcp_timewait_input+0xd0>)
 801c2e2:	482c      	ldr	r0, [pc, #176]	; (801c394 <tcp_timewait_input+0xd4>)
 801c2e4:	f007 fab4 	bl	8023850 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801c2e8:	4b27      	ldr	r3, [pc, #156]	; (801c388 <tcp_timewait_input+0xc8>)
 801c2ea:	781b      	ldrb	r3, [r3, #0]
 801c2ec:	f003 0302 	and.w	r3, r3, #2
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d02a      	beq.n	801c34a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801c2f4:	4b28      	ldr	r3, [pc, #160]	; (801c398 <tcp_timewait_input+0xd8>)
 801c2f6:	681a      	ldr	r2, [r3, #0]
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2fc:	1ad3      	subs	r3, r2, r3
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	db2d      	blt.n	801c35e <tcp_timewait_input+0x9e>
 801c302:	4b25      	ldr	r3, [pc, #148]	; (801c398 <tcp_timewait_input+0xd8>)
 801c304:	681a      	ldr	r2, [r3, #0]
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c30a:	6879      	ldr	r1, [r7, #4]
 801c30c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c30e:	440b      	add	r3, r1
 801c310:	1ad3      	subs	r3, r2, r3
 801c312:	2b00      	cmp	r3, #0
 801c314:	dc23      	bgt.n	801c35e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c316:	4b21      	ldr	r3, [pc, #132]	; (801c39c <tcp_timewait_input+0xdc>)
 801c318:	6819      	ldr	r1, [r3, #0]
 801c31a:	4b21      	ldr	r3, [pc, #132]	; (801c3a0 <tcp_timewait_input+0xe0>)
 801c31c:	881b      	ldrh	r3, [r3, #0]
 801c31e:	461a      	mov	r2, r3
 801c320:	4b1d      	ldr	r3, [pc, #116]	; (801c398 <tcp_timewait_input+0xd8>)
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c326:	4b1f      	ldr	r3, [pc, #124]	; (801c3a4 <tcp_timewait_input+0xe4>)
 801c328:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c32a:	885b      	ldrh	r3, [r3, #2]
 801c32c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c32e:	4a1d      	ldr	r2, [pc, #116]	; (801c3a4 <tcp_timewait_input+0xe4>)
 801c330:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c332:	8812      	ldrh	r2, [r2, #0]
 801c334:	b292      	uxth	r2, r2
 801c336:	9202      	str	r2, [sp, #8]
 801c338:	9301      	str	r3, [sp, #4]
 801c33a:	4b1b      	ldr	r3, [pc, #108]	; (801c3a8 <tcp_timewait_input+0xe8>)
 801c33c:	9300      	str	r3, [sp, #0]
 801c33e:	4b1b      	ldr	r3, [pc, #108]	; (801c3ac <tcp_timewait_input+0xec>)
 801c340:	4602      	mov	r2, r0
 801c342:	6878      	ldr	r0, [r7, #4]
 801c344:	f003 faca 	bl	801f8dc <tcp_rst>
      return;
 801c348:	e01b      	b.n	801c382 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801c34a:	4b0f      	ldr	r3, [pc, #60]	; (801c388 <tcp_timewait_input+0xc8>)
 801c34c:	781b      	ldrb	r3, [r3, #0]
 801c34e:	f003 0301 	and.w	r3, r3, #1
 801c352:	2b00      	cmp	r3, #0
 801c354:	d003      	beq.n	801c35e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801c356:	4b16      	ldr	r3, [pc, #88]	; (801c3b0 <tcp_timewait_input+0xf0>)
 801c358:	681a      	ldr	r2, [r3, #0]
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801c35e:	4b10      	ldr	r3, [pc, #64]	; (801c3a0 <tcp_timewait_input+0xe0>)
 801c360:	881b      	ldrh	r3, [r3, #0]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d00c      	beq.n	801c380 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	8b5b      	ldrh	r3, [r3, #26]
 801c36a:	f043 0302 	orr.w	r3, r3, #2
 801c36e:	b29a      	uxth	r2, r3
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801c374:	6878      	ldr	r0, [r7, #4]
 801c376:	f002 fcfd 	bl	801ed74 <tcp_output>
  }
  return;
 801c37a:	e001      	b.n	801c380 <tcp_timewait_input+0xc0>
    return;
 801c37c:	bf00      	nop
 801c37e:	e000      	b.n	801c382 <tcp_timewait_input+0xc2>
  return;
 801c380:	bf00      	nop
}
 801c382:	3708      	adds	r7, #8
 801c384:	46bd      	mov	sp, r7
 801c386:	bd80      	pop	{r7, pc}
 801c388:	2001135c 	.word	0x2001135c
 801c38c:	08026974 	.word	0x08026974
 801c390:	08026b8c 	.word	0x08026b8c
 801c394:	080269c0 	.word	0x080269c0
 801c398:	20011350 	.word	0x20011350
 801c39c:	20011354 	.word	0x20011354
 801c3a0:	2001135a 	.word	0x2001135a
 801c3a4:	20011340 	.word	0x20011340
 801c3a8:	2000dbd4 	.word	0x2000dbd4
 801c3ac:	2000dbd8 	.word	0x2000dbd8
 801c3b0:	20011318 	.word	0x20011318

0801c3b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801c3b4:	b590      	push	{r4, r7, lr}
 801c3b6:	b08d      	sub	sp, #52	; 0x34
 801c3b8:	af04      	add	r7, sp, #16
 801c3ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801c3bc:	2300      	movs	r3, #0
 801c3be:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801c3c0:	2300      	movs	r3, #0
 801c3c2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d106      	bne.n	801c3d8 <tcp_process+0x24>
 801c3ca:	4b9d      	ldr	r3, [pc, #628]	; (801c640 <tcp_process+0x28c>)
 801c3cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801c3d0:	499c      	ldr	r1, [pc, #624]	; (801c644 <tcp_process+0x290>)
 801c3d2:	489d      	ldr	r0, [pc, #628]	; (801c648 <tcp_process+0x294>)
 801c3d4:	f007 fa3c 	bl	8023850 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801c3d8:	4b9c      	ldr	r3, [pc, #624]	; (801c64c <tcp_process+0x298>)
 801c3da:	781b      	ldrb	r3, [r3, #0]
 801c3dc:	f003 0304 	and.w	r3, r3, #4
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d04e      	beq.n	801c482 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	7d1b      	ldrb	r3, [r3, #20]
 801c3e8:	2b02      	cmp	r3, #2
 801c3ea:	d108      	bne.n	801c3fe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c3f0:	4b97      	ldr	r3, [pc, #604]	; (801c650 <tcp_process+0x29c>)
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	429a      	cmp	r2, r3
 801c3f6:	d123      	bne.n	801c440 <tcp_process+0x8c>
        acceptable = 1;
 801c3f8:	2301      	movs	r3, #1
 801c3fa:	76fb      	strb	r3, [r7, #27]
 801c3fc:	e020      	b.n	801c440 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c402:	4b94      	ldr	r3, [pc, #592]	; (801c654 <tcp_process+0x2a0>)
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	429a      	cmp	r2, r3
 801c408:	d102      	bne.n	801c410 <tcp_process+0x5c>
        acceptable = 1;
 801c40a:	2301      	movs	r3, #1
 801c40c:	76fb      	strb	r3, [r7, #27]
 801c40e:	e017      	b.n	801c440 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c410:	4b90      	ldr	r3, [pc, #576]	; (801c654 <tcp_process+0x2a0>)
 801c412:	681a      	ldr	r2, [r3, #0]
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c418:	1ad3      	subs	r3, r2, r3
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	db10      	blt.n	801c440 <tcp_process+0x8c>
 801c41e:	4b8d      	ldr	r3, [pc, #564]	; (801c654 <tcp_process+0x2a0>)
 801c420:	681a      	ldr	r2, [r3, #0]
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c426:	6879      	ldr	r1, [r7, #4]
 801c428:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c42a:	440b      	add	r3, r1
 801c42c:	1ad3      	subs	r3, r2, r3
 801c42e:	2b00      	cmp	r3, #0
 801c430:	dc06      	bgt.n	801c440 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	8b5b      	ldrh	r3, [r3, #26]
 801c436:	f043 0302 	orr.w	r3, r3, #2
 801c43a:	b29a      	uxth	r2, r3
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801c440:	7efb      	ldrb	r3, [r7, #27]
 801c442:	2b00      	cmp	r3, #0
 801c444:	d01b      	beq.n	801c47e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	7d1b      	ldrb	r3, [r3, #20]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d106      	bne.n	801c45c <tcp_process+0xa8>
 801c44e:	4b7c      	ldr	r3, [pc, #496]	; (801c640 <tcp_process+0x28c>)
 801c450:	f44f 724e 	mov.w	r2, #824	; 0x338
 801c454:	4980      	ldr	r1, [pc, #512]	; (801c658 <tcp_process+0x2a4>)
 801c456:	487c      	ldr	r0, [pc, #496]	; (801c648 <tcp_process+0x294>)
 801c458:	f007 f9fa 	bl	8023850 <iprintf>
      recv_flags |= TF_RESET;
 801c45c:	4b7f      	ldr	r3, [pc, #508]	; (801c65c <tcp_process+0x2a8>)
 801c45e:	781b      	ldrb	r3, [r3, #0]
 801c460:	f043 0308 	orr.w	r3, r3, #8
 801c464:	b2da      	uxtb	r2, r3
 801c466:	4b7d      	ldr	r3, [pc, #500]	; (801c65c <tcp_process+0x2a8>)
 801c468:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	8b5b      	ldrh	r3, [r3, #26]
 801c46e:	f023 0301 	bic.w	r3, r3, #1
 801c472:	b29a      	uxth	r2, r3
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801c478:	f06f 030d 	mvn.w	r3, #13
 801c47c:	e37a      	b.n	801cb74 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801c47e:	2300      	movs	r3, #0
 801c480:	e378      	b.n	801cb74 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801c482:	4b72      	ldr	r3, [pc, #456]	; (801c64c <tcp_process+0x298>)
 801c484:	781b      	ldrb	r3, [r3, #0]
 801c486:	f003 0302 	and.w	r3, r3, #2
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d010      	beq.n	801c4b0 <tcp_process+0xfc>
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	7d1b      	ldrb	r3, [r3, #20]
 801c492:	2b02      	cmp	r3, #2
 801c494:	d00c      	beq.n	801c4b0 <tcp_process+0xfc>
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	7d1b      	ldrb	r3, [r3, #20]
 801c49a:	2b03      	cmp	r3, #3
 801c49c:	d008      	beq.n	801c4b0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	8b5b      	ldrh	r3, [r3, #26]
 801c4a2:	f043 0302 	orr.w	r3, r3, #2
 801c4a6:	b29a      	uxth	r2, r3
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801c4ac:	2300      	movs	r3, #0
 801c4ae:	e361      	b.n	801cb74 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	8b5b      	ldrh	r3, [r3, #26]
 801c4b4:	f003 0310 	and.w	r3, r3, #16
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d103      	bne.n	801c4c4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801c4bc:	4b68      	ldr	r3, [pc, #416]	; (801c660 <tcp_process+0x2ac>)
 801c4be:	681a      	ldr	r2, [r3, #0]
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	2200      	movs	r2, #0
 801c4c8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	2200      	movs	r2, #0
 801c4d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801c4d4:	6878      	ldr	r0, [r7, #4]
 801c4d6:	f001 fc2f 	bl	801dd38 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	7d1b      	ldrb	r3, [r3, #20]
 801c4de:	3b02      	subs	r3, #2
 801c4e0:	2b07      	cmp	r3, #7
 801c4e2:	f200 8337 	bhi.w	801cb54 <tcp_process+0x7a0>
 801c4e6:	a201      	add	r2, pc, #4	; (adr r2, 801c4ec <tcp_process+0x138>)
 801c4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c4ec:	0801c50d 	.word	0x0801c50d
 801c4f0:	0801c73d 	.word	0x0801c73d
 801c4f4:	0801c8b5 	.word	0x0801c8b5
 801c4f8:	0801c8df 	.word	0x0801c8df
 801c4fc:	0801ca03 	.word	0x0801ca03
 801c500:	0801c8b5 	.word	0x0801c8b5
 801c504:	0801ca8f 	.word	0x0801ca8f
 801c508:	0801cb1f 	.word	0x0801cb1f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801c50c:	4b4f      	ldr	r3, [pc, #316]	; (801c64c <tcp_process+0x298>)
 801c50e:	781b      	ldrb	r3, [r3, #0]
 801c510:	f003 0310 	and.w	r3, r3, #16
 801c514:	2b00      	cmp	r3, #0
 801c516:	f000 80e4 	beq.w	801c6e2 <tcp_process+0x32e>
 801c51a:	4b4c      	ldr	r3, [pc, #304]	; (801c64c <tcp_process+0x298>)
 801c51c:	781b      	ldrb	r3, [r3, #0]
 801c51e:	f003 0302 	and.w	r3, r3, #2
 801c522:	2b00      	cmp	r3, #0
 801c524:	f000 80dd 	beq.w	801c6e2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c52c:	1c5a      	adds	r2, r3, #1
 801c52e:	4b48      	ldr	r3, [pc, #288]	; (801c650 <tcp_process+0x29c>)
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	429a      	cmp	r2, r3
 801c534:	f040 80d5 	bne.w	801c6e2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801c538:	4b46      	ldr	r3, [pc, #280]	; (801c654 <tcp_process+0x2a0>)
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	1c5a      	adds	r2, r3, #1
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801c54a:	4b41      	ldr	r3, [pc, #260]	; (801c650 <tcp_process+0x29c>)
 801c54c:	681a      	ldr	r2, [r3, #0]
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801c552:	4b44      	ldr	r3, [pc, #272]	; (801c664 <tcp_process+0x2b0>)
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	89db      	ldrh	r3, [r3, #14]
 801c558:	b29a      	uxth	r2, r3
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801c56c:	4b39      	ldr	r3, [pc, #228]	; (801c654 <tcp_process+0x2a0>)
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	1e5a      	subs	r2, r3, #1
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	2204      	movs	r2, #4
 801c57a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	3304      	adds	r3, #4
 801c584:	4618      	mov	r0, r3
 801c586:	f005 f8eb 	bl	8021760 <ip4_route>
 801c58a:	4601      	mov	r1, r0
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	3304      	adds	r3, #4
 801c590:	461a      	mov	r2, r3
 801c592:	4620      	mov	r0, r4
 801c594:	f7ff f88c 	bl	801b6b0 <tcp_eff_send_mss_netif>
 801c598:	4603      	mov	r3, r0
 801c59a:	461a      	mov	r2, r3
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c5a4:	009a      	lsls	r2, r3, #2
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c5aa:	005b      	lsls	r3, r3, #1
 801c5ac:	f241 111c 	movw	r1, #4380	; 0x111c
 801c5b0:	428b      	cmp	r3, r1
 801c5b2:	bf38      	it	cc
 801c5b4:	460b      	movcc	r3, r1
 801c5b6:	429a      	cmp	r2, r3
 801c5b8:	d204      	bcs.n	801c5c4 <tcp_process+0x210>
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c5be:	009b      	lsls	r3, r3, #2
 801c5c0:	b29b      	uxth	r3, r3
 801c5c2:	e00d      	b.n	801c5e0 <tcp_process+0x22c>
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c5c8:	005b      	lsls	r3, r3, #1
 801c5ca:	f241 121c 	movw	r2, #4380	; 0x111c
 801c5ce:	4293      	cmp	r3, r2
 801c5d0:	d904      	bls.n	801c5dc <tcp_process+0x228>
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c5d6:	005b      	lsls	r3, r3, #1
 801c5d8:	b29b      	uxth	r3, r3
 801c5da:	e001      	b.n	801c5e0 <tcp_process+0x22c>
 801c5dc:	f241 131c 	movw	r3, #4380	; 0x111c
 801c5e0:	687a      	ldr	r2, [r7, #4]
 801c5e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d106      	bne.n	801c5fe <tcp_process+0x24a>
 801c5f0:	4b13      	ldr	r3, [pc, #76]	; (801c640 <tcp_process+0x28c>)
 801c5f2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801c5f6:	491c      	ldr	r1, [pc, #112]	; (801c668 <tcp_process+0x2b4>)
 801c5f8:	4813      	ldr	r0, [pc, #76]	; (801c648 <tcp_process+0x294>)
 801c5fa:	f007 f929 	bl	8023850 <iprintf>
        --pcb->snd_queuelen;
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c604:	3b01      	subs	r3, #1
 801c606:	b29a      	uxth	r2, r3
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c612:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801c614:	69fb      	ldr	r3, [r7, #28]
 801c616:	2b00      	cmp	r3, #0
 801c618:	d12a      	bne.n	801c670 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c61e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801c620:	69fb      	ldr	r3, [r7, #28]
 801c622:	2b00      	cmp	r3, #0
 801c624:	d106      	bne.n	801c634 <tcp_process+0x280>
 801c626:	4b06      	ldr	r3, [pc, #24]	; (801c640 <tcp_process+0x28c>)
 801c628:	f44f 725d 	mov.w	r2, #884	; 0x374
 801c62c:	490f      	ldr	r1, [pc, #60]	; (801c66c <tcp_process+0x2b8>)
 801c62e:	4806      	ldr	r0, [pc, #24]	; (801c648 <tcp_process+0x294>)
 801c630:	f007 f90e 	bl	8023850 <iprintf>
          pcb->unsent = rseg->next;
 801c634:	69fb      	ldr	r3, [r7, #28]
 801c636:	681a      	ldr	r2, [r3, #0]
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	66da      	str	r2, [r3, #108]	; 0x6c
 801c63c:	e01c      	b.n	801c678 <tcp_process+0x2c4>
 801c63e:	bf00      	nop
 801c640:	08026974 	.word	0x08026974
 801c644:	08026bac 	.word	0x08026bac
 801c648:	080269c0 	.word	0x080269c0
 801c64c:	2001135c 	.word	0x2001135c
 801c650:	20011354 	.word	0x20011354
 801c654:	20011350 	.word	0x20011350
 801c658:	08026bc8 	.word	0x08026bc8
 801c65c:	2001135d 	.word	0x2001135d
 801c660:	20011318 	.word	0x20011318
 801c664:	20011340 	.word	0x20011340
 801c668:	08026be8 	.word	0x08026be8
 801c66c:	08026c00 	.word	0x08026c00
        } else {
          pcb->unacked = rseg->next;
 801c670:	69fb      	ldr	r3, [r7, #28]
 801c672:	681a      	ldr	r2, [r3, #0]
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801c678:	69f8      	ldr	r0, [r7, #28]
 801c67a:	f7fe fc54 	bl	801af26 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c682:	2b00      	cmp	r3, #0
 801c684:	d104      	bne.n	801c690 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c68c:	861a      	strh	r2, [r3, #48]	; 0x30
 801c68e:	e006      	b.n	801c69e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	2200      	movs	r2, #0
 801c694:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	2200      	movs	r2, #0
 801c69a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d00a      	beq.n	801c6be <tcp_process+0x30a>
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c6ae:	687a      	ldr	r2, [r7, #4]
 801c6b0:	6910      	ldr	r0, [r2, #16]
 801c6b2:	2200      	movs	r2, #0
 801c6b4:	6879      	ldr	r1, [r7, #4]
 801c6b6:	4798      	blx	r3
 801c6b8:	4603      	mov	r3, r0
 801c6ba:	76bb      	strb	r3, [r7, #26]
 801c6bc:	e001      	b.n	801c6c2 <tcp_process+0x30e>
 801c6be:	2300      	movs	r3, #0
 801c6c0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801c6c2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c6c6:	f113 0f0d 	cmn.w	r3, #13
 801c6ca:	d102      	bne.n	801c6d2 <tcp_process+0x31e>
          return ERR_ABRT;
 801c6cc:	f06f 030c 	mvn.w	r3, #12
 801c6d0:	e250      	b.n	801cb74 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	8b5b      	ldrh	r3, [r3, #26]
 801c6d6:	f043 0302 	orr.w	r3, r3, #2
 801c6da:	b29a      	uxth	r2, r3
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801c6e0:	e23a      	b.n	801cb58 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801c6e2:	4b98      	ldr	r3, [pc, #608]	; (801c944 <tcp_process+0x590>)
 801c6e4:	781b      	ldrb	r3, [r3, #0]
 801c6e6:	f003 0310 	and.w	r3, r3, #16
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	f000 8234 	beq.w	801cb58 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c6f0:	4b95      	ldr	r3, [pc, #596]	; (801c948 <tcp_process+0x594>)
 801c6f2:	6819      	ldr	r1, [r3, #0]
 801c6f4:	4b95      	ldr	r3, [pc, #596]	; (801c94c <tcp_process+0x598>)
 801c6f6:	881b      	ldrh	r3, [r3, #0]
 801c6f8:	461a      	mov	r2, r3
 801c6fa:	4b95      	ldr	r3, [pc, #596]	; (801c950 <tcp_process+0x59c>)
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c700:	4b94      	ldr	r3, [pc, #592]	; (801c954 <tcp_process+0x5a0>)
 801c702:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c704:	885b      	ldrh	r3, [r3, #2]
 801c706:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c708:	4a92      	ldr	r2, [pc, #584]	; (801c954 <tcp_process+0x5a0>)
 801c70a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c70c:	8812      	ldrh	r2, [r2, #0]
 801c70e:	b292      	uxth	r2, r2
 801c710:	9202      	str	r2, [sp, #8]
 801c712:	9301      	str	r3, [sp, #4]
 801c714:	4b90      	ldr	r3, [pc, #576]	; (801c958 <tcp_process+0x5a4>)
 801c716:	9300      	str	r3, [sp, #0]
 801c718:	4b90      	ldr	r3, [pc, #576]	; (801c95c <tcp_process+0x5a8>)
 801c71a:	4602      	mov	r2, r0
 801c71c:	6878      	ldr	r0, [r7, #4]
 801c71e:	f003 f8dd 	bl	801f8dc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c728:	2b05      	cmp	r3, #5
 801c72a:	f200 8215 	bhi.w	801cb58 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	2200      	movs	r2, #0
 801c732:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801c734:	6878      	ldr	r0, [r7, #4]
 801c736:	f002 fea9 	bl	801f48c <tcp_rexmit_rto>
      break;
 801c73a:	e20d      	b.n	801cb58 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801c73c:	4b81      	ldr	r3, [pc, #516]	; (801c944 <tcp_process+0x590>)
 801c73e:	781b      	ldrb	r3, [r3, #0]
 801c740:	f003 0310 	and.w	r3, r3, #16
 801c744:	2b00      	cmp	r3, #0
 801c746:	f000 80a1 	beq.w	801c88c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c74a:	4b7f      	ldr	r3, [pc, #508]	; (801c948 <tcp_process+0x594>)
 801c74c:	681a      	ldr	r2, [r3, #0]
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c752:	1ad3      	subs	r3, r2, r3
 801c754:	3b01      	subs	r3, #1
 801c756:	2b00      	cmp	r3, #0
 801c758:	db7e      	blt.n	801c858 <tcp_process+0x4a4>
 801c75a:	4b7b      	ldr	r3, [pc, #492]	; (801c948 <tcp_process+0x594>)
 801c75c:	681a      	ldr	r2, [r3, #0]
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c762:	1ad3      	subs	r3, r2, r3
 801c764:	2b00      	cmp	r3, #0
 801c766:	dc77      	bgt.n	801c858 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	2204      	movs	r2, #4
 801c76c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c772:	2b00      	cmp	r3, #0
 801c774:	d102      	bne.n	801c77c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801c776:	23fa      	movs	r3, #250	; 0xfa
 801c778:	76bb      	strb	r3, [r7, #26]
 801c77a:	e01d      	b.n	801c7b8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c780:	699b      	ldr	r3, [r3, #24]
 801c782:	2b00      	cmp	r3, #0
 801c784:	d106      	bne.n	801c794 <tcp_process+0x3e0>
 801c786:	4b76      	ldr	r3, [pc, #472]	; (801c960 <tcp_process+0x5ac>)
 801c788:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801c78c:	4975      	ldr	r1, [pc, #468]	; (801c964 <tcp_process+0x5b0>)
 801c78e:	4876      	ldr	r0, [pc, #472]	; (801c968 <tcp_process+0x5b4>)
 801c790:	f007 f85e 	bl	8023850 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c798:	699b      	ldr	r3, [r3, #24]
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d00a      	beq.n	801c7b4 <tcp_process+0x400>
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c7a2:	699b      	ldr	r3, [r3, #24]
 801c7a4:	687a      	ldr	r2, [r7, #4]
 801c7a6:	6910      	ldr	r0, [r2, #16]
 801c7a8:	2200      	movs	r2, #0
 801c7aa:	6879      	ldr	r1, [r7, #4]
 801c7ac:	4798      	blx	r3
 801c7ae:	4603      	mov	r3, r0
 801c7b0:	76bb      	strb	r3, [r7, #26]
 801c7b2:	e001      	b.n	801c7b8 <tcp_process+0x404>
 801c7b4:	23f0      	movs	r3, #240	; 0xf0
 801c7b6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801c7b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d00a      	beq.n	801c7d6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801c7c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c7c4:	f113 0f0d 	cmn.w	r3, #13
 801c7c8:	d002      	beq.n	801c7d0 <tcp_process+0x41c>
              tcp_abort(pcb);
 801c7ca:	6878      	ldr	r0, [r7, #4]
 801c7cc:	f7fd fd62 	bl	801a294 <tcp_abort>
            }
            return ERR_ABRT;
 801c7d0:	f06f 030c 	mvn.w	r3, #12
 801c7d4:	e1ce      	b.n	801cb74 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801c7d6:	6878      	ldr	r0, [r7, #4]
 801c7d8:	f000 fae0 	bl	801cd9c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801c7dc:	4b63      	ldr	r3, [pc, #396]	; (801c96c <tcp_process+0x5b8>)
 801c7de:	881b      	ldrh	r3, [r3, #0]
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	d005      	beq.n	801c7f0 <tcp_process+0x43c>
            recv_acked--;
 801c7e4:	4b61      	ldr	r3, [pc, #388]	; (801c96c <tcp_process+0x5b8>)
 801c7e6:	881b      	ldrh	r3, [r3, #0]
 801c7e8:	3b01      	subs	r3, #1
 801c7ea:	b29a      	uxth	r2, r3
 801c7ec:	4b5f      	ldr	r3, [pc, #380]	; (801c96c <tcp_process+0x5b8>)
 801c7ee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c7f4:	009a      	lsls	r2, r3, #2
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c7fa:	005b      	lsls	r3, r3, #1
 801c7fc:	f241 111c 	movw	r1, #4380	; 0x111c
 801c800:	428b      	cmp	r3, r1
 801c802:	bf38      	it	cc
 801c804:	460b      	movcc	r3, r1
 801c806:	429a      	cmp	r2, r3
 801c808:	d204      	bcs.n	801c814 <tcp_process+0x460>
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c80e:	009b      	lsls	r3, r3, #2
 801c810:	b29b      	uxth	r3, r3
 801c812:	e00d      	b.n	801c830 <tcp_process+0x47c>
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c818:	005b      	lsls	r3, r3, #1
 801c81a:	f241 121c 	movw	r2, #4380	; 0x111c
 801c81e:	4293      	cmp	r3, r2
 801c820:	d904      	bls.n	801c82c <tcp_process+0x478>
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c826:	005b      	lsls	r3, r3, #1
 801c828:	b29b      	uxth	r3, r3
 801c82a:	e001      	b.n	801c830 <tcp_process+0x47c>
 801c82c:	f241 131c 	movw	r3, #4380	; 0x111c
 801c830:	687a      	ldr	r2, [r7, #4]
 801c832:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801c836:	4b4e      	ldr	r3, [pc, #312]	; (801c970 <tcp_process+0x5bc>)
 801c838:	781b      	ldrb	r3, [r3, #0]
 801c83a:	f003 0320 	and.w	r3, r3, #32
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d037      	beq.n	801c8b2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	8b5b      	ldrh	r3, [r3, #26]
 801c846:	f043 0302 	orr.w	r3, r3, #2
 801c84a:	b29a      	uxth	r2, r3
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	2207      	movs	r2, #7
 801c854:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801c856:	e02c      	b.n	801c8b2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c858:	4b3b      	ldr	r3, [pc, #236]	; (801c948 <tcp_process+0x594>)
 801c85a:	6819      	ldr	r1, [r3, #0]
 801c85c:	4b3b      	ldr	r3, [pc, #236]	; (801c94c <tcp_process+0x598>)
 801c85e:	881b      	ldrh	r3, [r3, #0]
 801c860:	461a      	mov	r2, r3
 801c862:	4b3b      	ldr	r3, [pc, #236]	; (801c950 <tcp_process+0x59c>)
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c868:	4b3a      	ldr	r3, [pc, #232]	; (801c954 <tcp_process+0x5a0>)
 801c86a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c86c:	885b      	ldrh	r3, [r3, #2]
 801c86e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c870:	4a38      	ldr	r2, [pc, #224]	; (801c954 <tcp_process+0x5a0>)
 801c872:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c874:	8812      	ldrh	r2, [r2, #0]
 801c876:	b292      	uxth	r2, r2
 801c878:	9202      	str	r2, [sp, #8]
 801c87a:	9301      	str	r3, [sp, #4]
 801c87c:	4b36      	ldr	r3, [pc, #216]	; (801c958 <tcp_process+0x5a4>)
 801c87e:	9300      	str	r3, [sp, #0]
 801c880:	4b36      	ldr	r3, [pc, #216]	; (801c95c <tcp_process+0x5a8>)
 801c882:	4602      	mov	r2, r0
 801c884:	6878      	ldr	r0, [r7, #4]
 801c886:	f003 f829 	bl	801f8dc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801c88a:	e167      	b.n	801cb5c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801c88c:	4b2d      	ldr	r3, [pc, #180]	; (801c944 <tcp_process+0x590>)
 801c88e:	781b      	ldrb	r3, [r3, #0]
 801c890:	f003 0302 	and.w	r3, r3, #2
 801c894:	2b00      	cmp	r3, #0
 801c896:	f000 8161 	beq.w	801cb5c <tcp_process+0x7a8>
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c89e:	1e5a      	subs	r2, r3, #1
 801c8a0:	4b2b      	ldr	r3, [pc, #172]	; (801c950 <tcp_process+0x59c>)
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	429a      	cmp	r2, r3
 801c8a6:	f040 8159 	bne.w	801cb5c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801c8aa:	6878      	ldr	r0, [r7, #4]
 801c8ac:	f002 fe10 	bl	801f4d0 <tcp_rexmit>
      break;
 801c8b0:	e154      	b.n	801cb5c <tcp_process+0x7a8>
 801c8b2:	e153      	b.n	801cb5c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801c8b4:	6878      	ldr	r0, [r7, #4]
 801c8b6:	f000 fa71 	bl	801cd9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801c8ba:	4b2d      	ldr	r3, [pc, #180]	; (801c970 <tcp_process+0x5bc>)
 801c8bc:	781b      	ldrb	r3, [r3, #0]
 801c8be:	f003 0320 	and.w	r3, r3, #32
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	f000 814c 	beq.w	801cb60 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	8b5b      	ldrh	r3, [r3, #26]
 801c8cc:	f043 0302 	orr.w	r3, r3, #2
 801c8d0:	b29a      	uxth	r2, r3
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	2207      	movs	r2, #7
 801c8da:	751a      	strb	r2, [r3, #20]
      }
      break;
 801c8dc:	e140      	b.n	801cb60 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801c8de:	6878      	ldr	r0, [r7, #4]
 801c8e0:	f000 fa5c 	bl	801cd9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c8e4:	4b22      	ldr	r3, [pc, #136]	; (801c970 <tcp_process+0x5bc>)
 801c8e6:	781b      	ldrb	r3, [r3, #0]
 801c8e8:	f003 0320 	and.w	r3, r3, #32
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d071      	beq.n	801c9d4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c8f0:	4b14      	ldr	r3, [pc, #80]	; (801c944 <tcp_process+0x590>)
 801c8f2:	781b      	ldrb	r3, [r3, #0]
 801c8f4:	f003 0310 	and.w	r3, r3, #16
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	d060      	beq.n	801c9be <tcp_process+0x60a>
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c900:	4b11      	ldr	r3, [pc, #68]	; (801c948 <tcp_process+0x594>)
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	429a      	cmp	r2, r3
 801c906:	d15a      	bne.n	801c9be <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d156      	bne.n	801c9be <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	8b5b      	ldrh	r3, [r3, #26]
 801c914:	f043 0302 	orr.w	r3, r3, #2
 801c918:	b29a      	uxth	r2, r3
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801c91e:	6878      	ldr	r0, [r7, #4]
 801c920:	f7fe fdbc 	bl	801b49c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801c924:	4b13      	ldr	r3, [pc, #76]	; (801c974 <tcp_process+0x5c0>)
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	687a      	ldr	r2, [r7, #4]
 801c92a:	429a      	cmp	r2, r3
 801c92c:	d105      	bne.n	801c93a <tcp_process+0x586>
 801c92e:	4b11      	ldr	r3, [pc, #68]	; (801c974 <tcp_process+0x5c0>)
 801c930:	681b      	ldr	r3, [r3, #0]
 801c932:	68db      	ldr	r3, [r3, #12]
 801c934:	4a0f      	ldr	r2, [pc, #60]	; (801c974 <tcp_process+0x5c0>)
 801c936:	6013      	str	r3, [r2, #0]
 801c938:	e02e      	b.n	801c998 <tcp_process+0x5e4>
 801c93a:	4b0e      	ldr	r3, [pc, #56]	; (801c974 <tcp_process+0x5c0>)
 801c93c:	681b      	ldr	r3, [r3, #0]
 801c93e:	617b      	str	r3, [r7, #20]
 801c940:	e027      	b.n	801c992 <tcp_process+0x5de>
 801c942:	bf00      	nop
 801c944:	2001135c 	.word	0x2001135c
 801c948:	20011354 	.word	0x20011354
 801c94c:	2001135a 	.word	0x2001135a
 801c950:	20011350 	.word	0x20011350
 801c954:	20011340 	.word	0x20011340
 801c958:	2000dbd4 	.word	0x2000dbd4
 801c95c:	2000dbd8 	.word	0x2000dbd8
 801c960:	08026974 	.word	0x08026974
 801c964:	08026c14 	.word	0x08026c14
 801c968:	080269c0 	.word	0x080269c0
 801c96c:	20011358 	.word	0x20011358
 801c970:	2001135d 	.word	0x2001135d
 801c974:	20011324 	.word	0x20011324
 801c978:	697b      	ldr	r3, [r7, #20]
 801c97a:	68db      	ldr	r3, [r3, #12]
 801c97c:	687a      	ldr	r2, [r7, #4]
 801c97e:	429a      	cmp	r2, r3
 801c980:	d104      	bne.n	801c98c <tcp_process+0x5d8>
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	68da      	ldr	r2, [r3, #12]
 801c986:	697b      	ldr	r3, [r7, #20]
 801c988:	60da      	str	r2, [r3, #12]
 801c98a:	e005      	b.n	801c998 <tcp_process+0x5e4>
 801c98c:	697b      	ldr	r3, [r7, #20]
 801c98e:	68db      	ldr	r3, [r3, #12]
 801c990:	617b      	str	r3, [r7, #20]
 801c992:	697b      	ldr	r3, [r7, #20]
 801c994:	2b00      	cmp	r3, #0
 801c996:	d1ef      	bne.n	801c978 <tcp_process+0x5c4>
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	2200      	movs	r2, #0
 801c99c:	60da      	str	r2, [r3, #12]
 801c99e:	4b77      	ldr	r3, [pc, #476]	; (801cb7c <tcp_process+0x7c8>)
 801c9a0:	2201      	movs	r2, #1
 801c9a2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	220a      	movs	r2, #10
 801c9a8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801c9aa:	4b75      	ldr	r3, [pc, #468]	; (801cb80 <tcp_process+0x7cc>)
 801c9ac:	681a      	ldr	r2, [r3, #0]
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	60da      	str	r2, [r3, #12]
 801c9b2:	4a73      	ldr	r2, [pc, #460]	; (801cb80 <tcp_process+0x7cc>)
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	6013      	str	r3, [r2, #0]
 801c9b8:	f003 f952 	bl	801fc60 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801c9bc:	e0d2      	b.n	801cb64 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	8b5b      	ldrh	r3, [r3, #26]
 801c9c2:	f043 0302 	orr.w	r3, r3, #2
 801c9c6:	b29a      	uxth	r2, r3
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	2208      	movs	r2, #8
 801c9d0:	751a      	strb	r2, [r3, #20]
      break;
 801c9d2:	e0c7      	b.n	801cb64 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c9d4:	4b6b      	ldr	r3, [pc, #428]	; (801cb84 <tcp_process+0x7d0>)
 801c9d6:	781b      	ldrb	r3, [r3, #0]
 801c9d8:	f003 0310 	and.w	r3, r3, #16
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	f000 80c1 	beq.w	801cb64 <tcp_process+0x7b0>
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c9e6:	4b68      	ldr	r3, [pc, #416]	; (801cb88 <tcp_process+0x7d4>)
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	429a      	cmp	r2, r3
 801c9ec:	f040 80ba 	bne.w	801cb64 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	f040 80b5 	bne.w	801cb64 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	2206      	movs	r2, #6
 801c9fe:	751a      	strb	r2, [r3, #20]
      break;
 801ca00:	e0b0      	b.n	801cb64 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801ca02:	6878      	ldr	r0, [r7, #4]
 801ca04:	f000 f9ca 	bl	801cd9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801ca08:	4b60      	ldr	r3, [pc, #384]	; (801cb8c <tcp_process+0x7d8>)
 801ca0a:	781b      	ldrb	r3, [r3, #0]
 801ca0c:	f003 0320 	and.w	r3, r3, #32
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	f000 80a9 	beq.w	801cb68 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	8b5b      	ldrh	r3, [r3, #26]
 801ca1a:	f043 0302 	orr.w	r3, r3, #2
 801ca1e:	b29a      	uxth	r2, r3
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801ca24:	6878      	ldr	r0, [r7, #4]
 801ca26:	f7fe fd39 	bl	801b49c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801ca2a:	4b59      	ldr	r3, [pc, #356]	; (801cb90 <tcp_process+0x7dc>)
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	687a      	ldr	r2, [r7, #4]
 801ca30:	429a      	cmp	r2, r3
 801ca32:	d105      	bne.n	801ca40 <tcp_process+0x68c>
 801ca34:	4b56      	ldr	r3, [pc, #344]	; (801cb90 <tcp_process+0x7dc>)
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	68db      	ldr	r3, [r3, #12]
 801ca3a:	4a55      	ldr	r2, [pc, #340]	; (801cb90 <tcp_process+0x7dc>)
 801ca3c:	6013      	str	r3, [r2, #0]
 801ca3e:	e013      	b.n	801ca68 <tcp_process+0x6b4>
 801ca40:	4b53      	ldr	r3, [pc, #332]	; (801cb90 <tcp_process+0x7dc>)
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	613b      	str	r3, [r7, #16]
 801ca46:	e00c      	b.n	801ca62 <tcp_process+0x6ae>
 801ca48:	693b      	ldr	r3, [r7, #16]
 801ca4a:	68db      	ldr	r3, [r3, #12]
 801ca4c:	687a      	ldr	r2, [r7, #4]
 801ca4e:	429a      	cmp	r2, r3
 801ca50:	d104      	bne.n	801ca5c <tcp_process+0x6a8>
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	68da      	ldr	r2, [r3, #12]
 801ca56:	693b      	ldr	r3, [r7, #16]
 801ca58:	60da      	str	r2, [r3, #12]
 801ca5a:	e005      	b.n	801ca68 <tcp_process+0x6b4>
 801ca5c:	693b      	ldr	r3, [r7, #16]
 801ca5e:	68db      	ldr	r3, [r3, #12]
 801ca60:	613b      	str	r3, [r7, #16]
 801ca62:	693b      	ldr	r3, [r7, #16]
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	d1ef      	bne.n	801ca48 <tcp_process+0x694>
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	2200      	movs	r2, #0
 801ca6c:	60da      	str	r2, [r3, #12]
 801ca6e:	4b43      	ldr	r3, [pc, #268]	; (801cb7c <tcp_process+0x7c8>)
 801ca70:	2201      	movs	r2, #1
 801ca72:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	220a      	movs	r2, #10
 801ca78:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801ca7a:	4b41      	ldr	r3, [pc, #260]	; (801cb80 <tcp_process+0x7cc>)
 801ca7c:	681a      	ldr	r2, [r3, #0]
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	60da      	str	r2, [r3, #12]
 801ca82:	4a3f      	ldr	r2, [pc, #252]	; (801cb80 <tcp_process+0x7cc>)
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	6013      	str	r3, [r2, #0]
 801ca88:	f003 f8ea 	bl	801fc60 <tcp_timer_needed>
      }
      break;
 801ca8c:	e06c      	b.n	801cb68 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801ca8e:	6878      	ldr	r0, [r7, #4]
 801ca90:	f000 f984 	bl	801cd9c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ca94:	4b3b      	ldr	r3, [pc, #236]	; (801cb84 <tcp_process+0x7d0>)
 801ca96:	781b      	ldrb	r3, [r3, #0]
 801ca98:	f003 0310 	and.w	r3, r3, #16
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d065      	beq.n	801cb6c <tcp_process+0x7b8>
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801caa4:	4b38      	ldr	r3, [pc, #224]	; (801cb88 <tcp_process+0x7d4>)
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	429a      	cmp	r2, r3
 801caaa:	d15f      	bne.n	801cb6c <tcp_process+0x7b8>
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d15b      	bne.n	801cb6c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801cab4:	6878      	ldr	r0, [r7, #4]
 801cab6:	f7fe fcf1 	bl	801b49c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801caba:	4b35      	ldr	r3, [pc, #212]	; (801cb90 <tcp_process+0x7dc>)
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	687a      	ldr	r2, [r7, #4]
 801cac0:	429a      	cmp	r2, r3
 801cac2:	d105      	bne.n	801cad0 <tcp_process+0x71c>
 801cac4:	4b32      	ldr	r3, [pc, #200]	; (801cb90 <tcp_process+0x7dc>)
 801cac6:	681b      	ldr	r3, [r3, #0]
 801cac8:	68db      	ldr	r3, [r3, #12]
 801caca:	4a31      	ldr	r2, [pc, #196]	; (801cb90 <tcp_process+0x7dc>)
 801cacc:	6013      	str	r3, [r2, #0]
 801cace:	e013      	b.n	801caf8 <tcp_process+0x744>
 801cad0:	4b2f      	ldr	r3, [pc, #188]	; (801cb90 <tcp_process+0x7dc>)
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	60fb      	str	r3, [r7, #12]
 801cad6:	e00c      	b.n	801caf2 <tcp_process+0x73e>
 801cad8:	68fb      	ldr	r3, [r7, #12]
 801cada:	68db      	ldr	r3, [r3, #12]
 801cadc:	687a      	ldr	r2, [r7, #4]
 801cade:	429a      	cmp	r2, r3
 801cae0:	d104      	bne.n	801caec <tcp_process+0x738>
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	68da      	ldr	r2, [r3, #12]
 801cae6:	68fb      	ldr	r3, [r7, #12]
 801cae8:	60da      	str	r2, [r3, #12]
 801caea:	e005      	b.n	801caf8 <tcp_process+0x744>
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	68db      	ldr	r3, [r3, #12]
 801caf0:	60fb      	str	r3, [r7, #12]
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d1ef      	bne.n	801cad8 <tcp_process+0x724>
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	2200      	movs	r2, #0
 801cafc:	60da      	str	r2, [r3, #12]
 801cafe:	4b1f      	ldr	r3, [pc, #124]	; (801cb7c <tcp_process+0x7c8>)
 801cb00:	2201      	movs	r2, #1
 801cb02:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	220a      	movs	r2, #10
 801cb08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801cb0a:	4b1d      	ldr	r3, [pc, #116]	; (801cb80 <tcp_process+0x7cc>)
 801cb0c:	681a      	ldr	r2, [r3, #0]
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	60da      	str	r2, [r3, #12]
 801cb12:	4a1b      	ldr	r2, [pc, #108]	; (801cb80 <tcp_process+0x7cc>)
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	6013      	str	r3, [r2, #0]
 801cb18:	f003 f8a2 	bl	801fc60 <tcp_timer_needed>
      }
      break;
 801cb1c:	e026      	b.n	801cb6c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801cb1e:	6878      	ldr	r0, [r7, #4]
 801cb20:	f000 f93c 	bl	801cd9c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801cb24:	4b17      	ldr	r3, [pc, #92]	; (801cb84 <tcp_process+0x7d0>)
 801cb26:	781b      	ldrb	r3, [r3, #0]
 801cb28:	f003 0310 	and.w	r3, r3, #16
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d01f      	beq.n	801cb70 <tcp_process+0x7bc>
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801cb34:	4b14      	ldr	r3, [pc, #80]	; (801cb88 <tcp_process+0x7d4>)
 801cb36:	681b      	ldr	r3, [r3, #0]
 801cb38:	429a      	cmp	r2, r3
 801cb3a:	d119      	bne.n	801cb70 <tcp_process+0x7bc>
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d115      	bne.n	801cb70 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801cb44:	4b11      	ldr	r3, [pc, #68]	; (801cb8c <tcp_process+0x7d8>)
 801cb46:	781b      	ldrb	r3, [r3, #0]
 801cb48:	f043 0310 	orr.w	r3, r3, #16
 801cb4c:	b2da      	uxtb	r2, r3
 801cb4e:	4b0f      	ldr	r3, [pc, #60]	; (801cb8c <tcp_process+0x7d8>)
 801cb50:	701a      	strb	r2, [r3, #0]
      }
      break;
 801cb52:	e00d      	b.n	801cb70 <tcp_process+0x7bc>
    default:
      break;
 801cb54:	bf00      	nop
 801cb56:	e00c      	b.n	801cb72 <tcp_process+0x7be>
      break;
 801cb58:	bf00      	nop
 801cb5a:	e00a      	b.n	801cb72 <tcp_process+0x7be>
      break;
 801cb5c:	bf00      	nop
 801cb5e:	e008      	b.n	801cb72 <tcp_process+0x7be>
      break;
 801cb60:	bf00      	nop
 801cb62:	e006      	b.n	801cb72 <tcp_process+0x7be>
      break;
 801cb64:	bf00      	nop
 801cb66:	e004      	b.n	801cb72 <tcp_process+0x7be>
      break;
 801cb68:	bf00      	nop
 801cb6a:	e002      	b.n	801cb72 <tcp_process+0x7be>
      break;
 801cb6c:	bf00      	nop
 801cb6e:	e000      	b.n	801cb72 <tcp_process+0x7be>
      break;
 801cb70:	bf00      	nop
  }
  return ERR_OK;
 801cb72:	2300      	movs	r3, #0
}
 801cb74:	4618      	mov	r0, r3
 801cb76:	3724      	adds	r7, #36	; 0x24
 801cb78:	46bd      	mov	sp, r7
 801cb7a:	bd90      	pop	{r4, r7, pc}
 801cb7c:	2001132c 	.word	0x2001132c
 801cb80:	20011328 	.word	0x20011328
 801cb84:	2001135c 	.word	0x2001135c
 801cb88:	20011354 	.word	0x20011354
 801cb8c:	2001135d 	.word	0x2001135d
 801cb90:	20011324 	.word	0x20011324

0801cb94 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801cb94:	b590      	push	{r4, r7, lr}
 801cb96:	b085      	sub	sp, #20
 801cb98:	af00      	add	r7, sp, #0
 801cb9a:	6078      	str	r0, [r7, #4]
 801cb9c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d106      	bne.n	801cbb2 <tcp_oos_insert_segment+0x1e>
 801cba4:	4b3b      	ldr	r3, [pc, #236]	; (801cc94 <tcp_oos_insert_segment+0x100>)
 801cba6:	f240 421f 	movw	r2, #1055	; 0x41f
 801cbaa:	493b      	ldr	r1, [pc, #236]	; (801cc98 <tcp_oos_insert_segment+0x104>)
 801cbac:	483b      	ldr	r0, [pc, #236]	; (801cc9c <tcp_oos_insert_segment+0x108>)
 801cbae:	f006 fe4f 	bl	8023850 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	68db      	ldr	r3, [r3, #12]
 801cbb6:	899b      	ldrh	r3, [r3, #12]
 801cbb8:	b29b      	uxth	r3, r3
 801cbba:	4618      	mov	r0, r3
 801cbbc:	f7fb f988 	bl	8017ed0 <lwip_htons>
 801cbc0:	4603      	mov	r3, r0
 801cbc2:	b2db      	uxtb	r3, r3
 801cbc4:	f003 0301 	and.w	r3, r3, #1
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d028      	beq.n	801cc1e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801cbcc:	6838      	ldr	r0, [r7, #0]
 801cbce:	f7fe f995 	bl	801aefc <tcp_segs_free>
    next = NULL;
 801cbd2:	2300      	movs	r3, #0
 801cbd4:	603b      	str	r3, [r7, #0]
 801cbd6:	e056      	b.n	801cc86 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801cbd8:	683b      	ldr	r3, [r7, #0]
 801cbda:	68db      	ldr	r3, [r3, #12]
 801cbdc:	899b      	ldrh	r3, [r3, #12]
 801cbde:	b29b      	uxth	r3, r3
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	f7fb f975 	bl	8017ed0 <lwip_htons>
 801cbe6:	4603      	mov	r3, r0
 801cbe8:	b2db      	uxtb	r3, r3
 801cbea:	f003 0301 	and.w	r3, r3, #1
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d00d      	beq.n	801cc0e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	68db      	ldr	r3, [r3, #12]
 801cbf6:	899b      	ldrh	r3, [r3, #12]
 801cbf8:	b29c      	uxth	r4, r3
 801cbfa:	2001      	movs	r0, #1
 801cbfc:	f7fb f968 	bl	8017ed0 <lwip_htons>
 801cc00:	4603      	mov	r3, r0
 801cc02:	461a      	mov	r2, r3
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	68db      	ldr	r3, [r3, #12]
 801cc08:	4322      	orrs	r2, r4
 801cc0a:	b292      	uxth	r2, r2
 801cc0c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801cc0e:	683b      	ldr	r3, [r7, #0]
 801cc10:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801cc12:	683b      	ldr	r3, [r7, #0]
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801cc18:	68f8      	ldr	r0, [r7, #12]
 801cc1a:	f7fe f984 	bl	801af26 <tcp_seg_free>
    while (next &&
 801cc1e:	683b      	ldr	r3, [r7, #0]
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d00e      	beq.n	801cc42 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	891b      	ldrh	r3, [r3, #8]
 801cc28:	461a      	mov	r2, r3
 801cc2a:	4b1d      	ldr	r3, [pc, #116]	; (801cca0 <tcp_oos_insert_segment+0x10c>)
 801cc2c:	681b      	ldr	r3, [r3, #0]
 801cc2e:	441a      	add	r2, r3
 801cc30:	683b      	ldr	r3, [r7, #0]
 801cc32:	68db      	ldr	r3, [r3, #12]
 801cc34:	685b      	ldr	r3, [r3, #4]
 801cc36:	6839      	ldr	r1, [r7, #0]
 801cc38:	8909      	ldrh	r1, [r1, #8]
 801cc3a:	440b      	add	r3, r1
 801cc3c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	daca      	bge.n	801cbd8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801cc42:	683b      	ldr	r3, [r7, #0]
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	d01e      	beq.n	801cc86 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	891b      	ldrh	r3, [r3, #8]
 801cc4c:	461a      	mov	r2, r3
 801cc4e:	4b14      	ldr	r3, [pc, #80]	; (801cca0 <tcp_oos_insert_segment+0x10c>)
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	441a      	add	r2, r3
 801cc54:	683b      	ldr	r3, [r7, #0]
 801cc56:	68db      	ldr	r3, [r3, #12]
 801cc58:	685b      	ldr	r3, [r3, #4]
 801cc5a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	dd12      	ble.n	801cc86 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801cc60:	683b      	ldr	r3, [r7, #0]
 801cc62:	68db      	ldr	r3, [r3, #12]
 801cc64:	685b      	ldr	r3, [r3, #4]
 801cc66:	b29a      	uxth	r2, r3
 801cc68:	4b0d      	ldr	r3, [pc, #52]	; (801cca0 <tcp_oos_insert_segment+0x10c>)
 801cc6a:	681b      	ldr	r3, [r3, #0]
 801cc6c:	b29b      	uxth	r3, r3
 801cc6e:	1ad3      	subs	r3, r2, r3
 801cc70:	b29a      	uxth	r2, r3
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	685a      	ldr	r2, [r3, #4]
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	891b      	ldrh	r3, [r3, #8]
 801cc7e:	4619      	mov	r1, r3
 801cc80:	4610      	mov	r0, r2
 801cc82:	f7fc fb91 	bl	80193a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	683a      	ldr	r2, [r7, #0]
 801cc8a:	601a      	str	r2, [r3, #0]
}
 801cc8c:	bf00      	nop
 801cc8e:	3714      	adds	r7, #20
 801cc90:	46bd      	mov	sp, r7
 801cc92:	bd90      	pop	{r4, r7, pc}
 801cc94:	08026974 	.word	0x08026974
 801cc98:	08026c34 	.word	0x08026c34
 801cc9c:	080269c0 	.word	0x080269c0
 801cca0:	20011350 	.word	0x20011350

0801cca4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801cca4:	b5b0      	push	{r4, r5, r7, lr}
 801cca6:	b086      	sub	sp, #24
 801cca8:	af00      	add	r7, sp, #0
 801ccaa:	60f8      	str	r0, [r7, #12]
 801ccac:	60b9      	str	r1, [r7, #8]
 801ccae:	607a      	str	r2, [r7, #4]
 801ccb0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801ccb2:	e03e      	b.n	801cd32 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801ccb4:	68bb      	ldr	r3, [r7, #8]
 801ccb6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801ccb8:	68bb      	ldr	r3, [r7, #8]
 801ccba:	681b      	ldr	r3, [r3, #0]
 801ccbc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801ccbe:	697b      	ldr	r3, [r7, #20]
 801ccc0:	685b      	ldr	r3, [r3, #4]
 801ccc2:	4618      	mov	r0, r3
 801ccc4:	f7fc fd84 	bl	80197d0 <pbuf_clen>
 801ccc8:	4603      	mov	r3, r0
 801ccca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cccc:	68fb      	ldr	r3, [r7, #12]
 801ccce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ccd2:	8a7a      	ldrh	r2, [r7, #18]
 801ccd4:	429a      	cmp	r2, r3
 801ccd6:	d906      	bls.n	801cce6 <tcp_free_acked_segments+0x42>
 801ccd8:	4b2a      	ldr	r3, [pc, #168]	; (801cd84 <tcp_free_acked_segments+0xe0>)
 801ccda:	f240 4257 	movw	r2, #1111	; 0x457
 801ccde:	492a      	ldr	r1, [pc, #168]	; (801cd88 <tcp_free_acked_segments+0xe4>)
 801cce0:	482a      	ldr	r0, [pc, #168]	; (801cd8c <tcp_free_acked_segments+0xe8>)
 801cce2:	f006 fdb5 	bl	8023850 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801cce6:	68fb      	ldr	r3, [r7, #12]
 801cce8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801ccec:	8a7b      	ldrh	r3, [r7, #18]
 801ccee:	1ad3      	subs	r3, r2, r3
 801ccf0:	b29a      	uxth	r2, r3
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801ccf8:	697b      	ldr	r3, [r7, #20]
 801ccfa:	891a      	ldrh	r2, [r3, #8]
 801ccfc:	4b24      	ldr	r3, [pc, #144]	; (801cd90 <tcp_free_acked_segments+0xec>)
 801ccfe:	881b      	ldrh	r3, [r3, #0]
 801cd00:	4413      	add	r3, r2
 801cd02:	b29a      	uxth	r2, r3
 801cd04:	4b22      	ldr	r3, [pc, #136]	; (801cd90 <tcp_free_acked_segments+0xec>)
 801cd06:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801cd08:	6978      	ldr	r0, [r7, #20]
 801cd0a:	f7fe f90c 	bl	801af26 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801cd0e:	68fb      	ldr	r3, [r7, #12]
 801cd10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d00c      	beq.n	801cd32 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801cd18:	68bb      	ldr	r3, [r7, #8]
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	d109      	bne.n	801cd32 <tcp_free_acked_segments+0x8e>
 801cd1e:	683b      	ldr	r3, [r7, #0]
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d106      	bne.n	801cd32 <tcp_free_acked_segments+0x8e>
 801cd24:	4b17      	ldr	r3, [pc, #92]	; (801cd84 <tcp_free_acked_segments+0xe0>)
 801cd26:	f240 4261 	movw	r2, #1121	; 0x461
 801cd2a:	491a      	ldr	r1, [pc, #104]	; (801cd94 <tcp_free_acked_segments+0xf0>)
 801cd2c:	4817      	ldr	r0, [pc, #92]	; (801cd8c <tcp_free_acked_segments+0xe8>)
 801cd2e:	f006 fd8f 	bl	8023850 <iprintf>
  while (seg_list != NULL &&
 801cd32:	68bb      	ldr	r3, [r7, #8]
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	d020      	beq.n	801cd7a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801cd38:	68bb      	ldr	r3, [r7, #8]
 801cd3a:	68db      	ldr	r3, [r3, #12]
 801cd3c:	685b      	ldr	r3, [r3, #4]
 801cd3e:	4618      	mov	r0, r3
 801cd40:	f7fb f8db 	bl	8017efa <lwip_htonl>
 801cd44:	4604      	mov	r4, r0
 801cd46:	68bb      	ldr	r3, [r7, #8]
 801cd48:	891b      	ldrh	r3, [r3, #8]
 801cd4a:	461d      	mov	r5, r3
 801cd4c:	68bb      	ldr	r3, [r7, #8]
 801cd4e:	68db      	ldr	r3, [r3, #12]
 801cd50:	899b      	ldrh	r3, [r3, #12]
 801cd52:	b29b      	uxth	r3, r3
 801cd54:	4618      	mov	r0, r3
 801cd56:	f7fb f8bb 	bl	8017ed0 <lwip_htons>
 801cd5a:	4603      	mov	r3, r0
 801cd5c:	b2db      	uxtb	r3, r3
 801cd5e:	f003 0303 	and.w	r3, r3, #3
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	d001      	beq.n	801cd6a <tcp_free_acked_segments+0xc6>
 801cd66:	2301      	movs	r3, #1
 801cd68:	e000      	b.n	801cd6c <tcp_free_acked_segments+0xc8>
 801cd6a:	2300      	movs	r3, #0
 801cd6c:	442b      	add	r3, r5
 801cd6e:	18e2      	adds	r2, r4, r3
 801cd70:	4b09      	ldr	r3, [pc, #36]	; (801cd98 <tcp_free_acked_segments+0xf4>)
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	dd9c      	ble.n	801ccb4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801cd7a:	68bb      	ldr	r3, [r7, #8]
}
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	3718      	adds	r7, #24
 801cd80:	46bd      	mov	sp, r7
 801cd82:	bdb0      	pop	{r4, r5, r7, pc}
 801cd84:	08026974 	.word	0x08026974
 801cd88:	08026c5c 	.word	0x08026c5c
 801cd8c:	080269c0 	.word	0x080269c0
 801cd90:	20011358 	.word	0x20011358
 801cd94:	08026c84 	.word	0x08026c84
 801cd98:	20011354 	.word	0x20011354

0801cd9c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801cd9c:	b5b0      	push	{r4, r5, r7, lr}
 801cd9e:	b094      	sub	sp, #80	; 0x50
 801cda0:	af00      	add	r7, sp, #0
 801cda2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801cda4:	2300      	movs	r3, #0
 801cda6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d106      	bne.n	801cdbc <tcp_receive+0x20>
 801cdae:	4b91      	ldr	r3, [pc, #580]	; (801cff4 <tcp_receive+0x258>)
 801cdb0:	f240 427b 	movw	r2, #1147	; 0x47b
 801cdb4:	4990      	ldr	r1, [pc, #576]	; (801cff8 <tcp_receive+0x25c>)
 801cdb6:	4891      	ldr	r0, [pc, #580]	; (801cffc <tcp_receive+0x260>)
 801cdb8:	f006 fd4a 	bl	8023850 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	7d1b      	ldrb	r3, [r3, #20]
 801cdc0:	2b03      	cmp	r3, #3
 801cdc2:	d806      	bhi.n	801cdd2 <tcp_receive+0x36>
 801cdc4:	4b8b      	ldr	r3, [pc, #556]	; (801cff4 <tcp_receive+0x258>)
 801cdc6:	f240 427c 	movw	r2, #1148	; 0x47c
 801cdca:	498d      	ldr	r1, [pc, #564]	; (801d000 <tcp_receive+0x264>)
 801cdcc:	488b      	ldr	r0, [pc, #556]	; (801cffc <tcp_receive+0x260>)
 801cdce:	f006 fd3f 	bl	8023850 <iprintf>

  if (flags & TCP_ACK) {
 801cdd2:	4b8c      	ldr	r3, [pc, #560]	; (801d004 <tcp_receive+0x268>)
 801cdd4:	781b      	ldrb	r3, [r3, #0]
 801cdd6:	f003 0310 	and.w	r3, r3, #16
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	f000 8264 	beq.w	801d2a8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cde6:	461a      	mov	r2, r3
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cdec:	4413      	add	r3, r2
 801cdee:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801cdf4:	4b84      	ldr	r3, [pc, #528]	; (801d008 <tcp_receive+0x26c>)
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	1ad3      	subs	r3, r2, r3
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	db1b      	blt.n	801ce36 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ce02:	4b81      	ldr	r3, [pc, #516]	; (801d008 <tcp_receive+0x26c>)
 801ce04:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801ce06:	429a      	cmp	r2, r3
 801ce08:	d106      	bne.n	801ce18 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ce0e:	4b7f      	ldr	r3, [pc, #508]	; (801d00c <tcp_receive+0x270>)
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	1ad3      	subs	r3, r2, r3
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	db0e      	blt.n	801ce36 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ce1c:	4b7b      	ldr	r3, [pc, #492]	; (801d00c <tcp_receive+0x270>)
 801ce1e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ce20:	429a      	cmp	r2, r3
 801ce22:	d125      	bne.n	801ce70 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ce24:	4b7a      	ldr	r3, [pc, #488]	; (801d010 <tcp_receive+0x274>)
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	89db      	ldrh	r3, [r3, #14]
 801ce2a:	b29a      	uxth	r2, r3
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ce32:	429a      	cmp	r2, r3
 801ce34:	d91c      	bls.n	801ce70 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801ce36:	4b76      	ldr	r3, [pc, #472]	; (801d010 <tcp_receive+0x274>)
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	89db      	ldrh	r3, [r3, #14]
 801ce3c:	b29a      	uxth	r2, r3
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ce50:	429a      	cmp	r2, r3
 801ce52:	d205      	bcs.n	801ce60 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801ce60:	4b69      	ldr	r3, [pc, #420]	; (801d008 <tcp_receive+0x26c>)
 801ce62:	681a      	ldr	r2, [r3, #0]
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801ce68:	4b68      	ldr	r3, [pc, #416]	; (801d00c <tcp_receive+0x270>)
 801ce6a:	681a      	ldr	r2, [r3, #0]
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801ce70:	4b66      	ldr	r3, [pc, #408]	; (801d00c <tcp_receive+0x270>)
 801ce72:	681a      	ldr	r2, [r3, #0]
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce78:	1ad3      	subs	r3, r2, r3
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	dc58      	bgt.n	801cf30 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801ce7e:	4b65      	ldr	r3, [pc, #404]	; (801d014 <tcp_receive+0x278>)
 801ce80:	881b      	ldrh	r3, [r3, #0]
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d14b      	bne.n	801cf1e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce8a:	687a      	ldr	r2, [r7, #4]
 801ce8c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801ce90:	4413      	add	r3, r2
 801ce92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ce94:	429a      	cmp	r2, r3
 801ce96:	d142      	bne.n	801cf1e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	db3d      	blt.n	801cf1e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cea6:	4b59      	ldr	r3, [pc, #356]	; (801d00c <tcp_receive+0x270>)
 801cea8:	681b      	ldr	r3, [r3, #0]
 801ceaa:	429a      	cmp	r2, r3
 801ceac:	d137      	bne.n	801cf1e <tcp_receive+0x182>
              found_dupack = 1;
 801ceae:	2301      	movs	r3, #1
 801ceb0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ceb8:	2bff      	cmp	r3, #255	; 0xff
 801ceba:	d007      	beq.n	801cecc <tcp_receive+0x130>
                ++pcb->dupacks;
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801cec2:	3301      	adds	r3, #1
 801cec4:	b2da      	uxtb	r2, r3
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ced2:	2b03      	cmp	r3, #3
 801ced4:	d91b      	bls.n	801cf0e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cee0:	4413      	add	r3, r2
 801cee2:	b29a      	uxth	r2, r3
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ceea:	429a      	cmp	r2, r3
 801ceec:	d30a      	bcc.n	801cf04 <tcp_receive+0x168>
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cef8:	4413      	add	r3, r2
 801cefa:	b29a      	uxth	r2, r3
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801cf02:	e004      	b.n	801cf0e <tcp_receive+0x172>
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cf0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801cf14:	2b02      	cmp	r3, #2
 801cf16:	d902      	bls.n	801cf1e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801cf18:	6878      	ldr	r0, [r7, #4]
 801cf1a:	f002 fb45 	bl	801f5a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801cf1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	f040 8161 	bne.w	801d1e8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	2200      	movs	r2, #0
 801cf2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801cf2e:	e15b      	b.n	801d1e8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cf30:	4b36      	ldr	r3, [pc, #216]	; (801d00c <tcp_receive+0x270>)
 801cf32:	681a      	ldr	r2, [r3, #0]
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf38:	1ad3      	subs	r3, r2, r3
 801cf3a:	3b01      	subs	r3, #1
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	f2c0 814e 	blt.w	801d1de <tcp_receive+0x442>
 801cf42:	4b32      	ldr	r3, [pc, #200]	; (801d00c <tcp_receive+0x270>)
 801cf44:	681a      	ldr	r2, [r3, #0]
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf4a:	1ad3      	subs	r3, r2, r3
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	f300 8146 	bgt.w	801d1de <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	8b5b      	ldrh	r3, [r3, #26]
 801cf56:	f003 0304 	and.w	r3, r3, #4
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d010      	beq.n	801cf80 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	8b5b      	ldrh	r3, [r3, #26]
 801cf62:	f023 0304 	bic.w	r3, r3, #4
 801cf66:	b29a      	uxth	r2, r3
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	2200      	movs	r2, #0
 801cf84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801cf8e:	10db      	asrs	r3, r3, #3
 801cf90:	b21b      	sxth	r3, r3
 801cf92:	b29a      	uxth	r2, r3
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801cf9a:	b29b      	uxth	r3, r3
 801cf9c:	4413      	add	r3, r2
 801cf9e:	b29b      	uxth	r3, r3
 801cfa0:	b21a      	sxth	r2, r3
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801cfa8:	4b18      	ldr	r3, [pc, #96]	; (801d00c <tcp_receive+0x270>)
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	b29a      	uxth	r2, r3
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cfb2:	b29b      	uxth	r3, r3
 801cfb4:	1ad3      	subs	r3, r2, r3
 801cfb6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	2200      	movs	r2, #0
 801cfbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801cfc0:	4b12      	ldr	r3, [pc, #72]	; (801d00c <tcp_receive+0x270>)
 801cfc2:	681a      	ldr	r2, [r3, #0]
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	7d1b      	ldrb	r3, [r3, #20]
 801cfcc:	2b03      	cmp	r3, #3
 801cfce:	f240 8097 	bls.w	801d100 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801cfde:	429a      	cmp	r2, r3
 801cfe0:	d245      	bcs.n	801d06e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	8b5b      	ldrh	r3, [r3, #26]
 801cfe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d014      	beq.n	801d018 <tcp_receive+0x27c>
 801cfee:	2301      	movs	r3, #1
 801cff0:	e013      	b.n	801d01a <tcp_receive+0x27e>
 801cff2:	bf00      	nop
 801cff4:	08026974 	.word	0x08026974
 801cff8:	08026ca4 	.word	0x08026ca4
 801cffc:	080269c0 	.word	0x080269c0
 801d000:	08026cc0 	.word	0x08026cc0
 801d004:	2001135c 	.word	0x2001135c
 801d008:	20011350 	.word	0x20011350
 801d00c:	20011354 	.word	0x20011354
 801d010:	20011340 	.word	0x20011340
 801d014:	2001135a 	.word	0x2001135a
 801d018:	2302      	movs	r3, #2
 801d01a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801d01e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801d022:	b29a      	uxth	r2, r3
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d028:	fb12 f303 	smulbb	r3, r2, r3
 801d02c:	b29b      	uxth	r3, r3
 801d02e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801d030:	4293      	cmp	r3, r2
 801d032:	bf28      	it	cs
 801d034:	4613      	movcs	r3, r2
 801d036:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d03e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d040:	4413      	add	r3, r2
 801d042:	b29a      	uxth	r2, r3
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d04a:	429a      	cmp	r2, r3
 801d04c:	d309      	bcc.n	801d062 <tcp_receive+0x2c6>
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d054:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d056:	4413      	add	r3, r2
 801d058:	b29a      	uxth	r2, r3
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801d060:	e04e      	b.n	801d100 <tcp_receive+0x364>
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d068:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801d06c:	e048      	b.n	801d100 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801d074:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d076:	4413      	add	r3, r2
 801d078:	b29a      	uxth	r2, r3
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801d080:	429a      	cmp	r2, r3
 801d082:	d309      	bcc.n	801d098 <tcp_receive+0x2fc>
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801d08a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d08c:	4413      	add	r3, r2
 801d08e:	b29a      	uxth	r2, r3
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801d096:	e004      	b.n	801d0a2 <tcp_receive+0x306>
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d09e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d0ae:	429a      	cmp	r2, r3
 801d0b0:	d326      	bcc.n	801d100 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d0be:	1ad3      	subs	r3, r2, r3
 801d0c0:	b29a      	uxth	r2, r3
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d0d2:	4413      	add	r3, r2
 801d0d4:	b29a      	uxth	r2, r3
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d0dc:	429a      	cmp	r2, r3
 801d0de:	d30a      	bcc.n	801d0f6 <tcp_receive+0x35a>
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d0ea:	4413      	add	r3, r2
 801d0ec:	b29a      	uxth	r2, r3
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801d0f4:	e004      	b.n	801d100 <tcp_receive+0x364>
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d0fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d108:	4a98      	ldr	r2, [pc, #608]	; (801d36c <tcp_receive+0x5d0>)
 801d10a:	6878      	ldr	r0, [r7, #4]
 801d10c:	f7ff fdca 	bl	801cca4 <tcp_free_acked_segments>
 801d110:	4602      	mov	r2, r0
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d11e:	4a94      	ldr	r2, [pc, #592]	; (801d370 <tcp_receive+0x5d4>)
 801d120:	6878      	ldr	r0, [r7, #4]
 801d122:	f7ff fdbf 	bl	801cca4 <tcp_free_acked_segments>
 801d126:	4602      	mov	r2, r0
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d130:	2b00      	cmp	r3, #0
 801d132:	d104      	bne.n	801d13e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d13a:	861a      	strh	r2, [r3, #48]	; 0x30
 801d13c:	e002      	b.n	801d144 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	2200      	movs	r2, #0
 801d142:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	2200      	movs	r2, #0
 801d148:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d103      	bne.n	801d15a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	2200      	movs	r2, #0
 801d156:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801d160:	4b84      	ldr	r3, [pc, #528]	; (801d374 <tcp_receive+0x5d8>)
 801d162:	881b      	ldrh	r3, [r3, #0]
 801d164:	4413      	add	r3, r2
 801d166:	b29a      	uxth	r2, r3
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	8b5b      	ldrh	r3, [r3, #26]
 801d172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d176:	2b00      	cmp	r3, #0
 801d178:	d035      	beq.n	801d1e6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d118      	bne.n	801d1b4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d186:	2b00      	cmp	r3, #0
 801d188:	d00c      	beq.n	801d1a4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d192:	68db      	ldr	r3, [r3, #12]
 801d194:	685b      	ldr	r3, [r3, #4]
 801d196:	4618      	mov	r0, r3
 801d198:	f7fa feaf 	bl	8017efa <lwip_htonl>
 801d19c:	4603      	mov	r3, r0
 801d19e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	dc20      	bgt.n	801d1e6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	8b5b      	ldrh	r3, [r3, #26]
 801d1a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d1ac:	b29a      	uxth	r2, r3
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d1b2:	e018      	b.n	801d1e6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d1bc:	68db      	ldr	r3, [r3, #12]
 801d1be:	685b      	ldr	r3, [r3, #4]
 801d1c0:	4618      	mov	r0, r3
 801d1c2:	f7fa fe9a 	bl	8017efa <lwip_htonl>
 801d1c6:	4603      	mov	r3, r0
 801d1c8:	1ae3      	subs	r3, r4, r3
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	dc0b      	bgt.n	801d1e6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	8b5b      	ldrh	r3, [r3, #26]
 801d1d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d1d6:	b29a      	uxth	r2, r3
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d1dc:	e003      	b.n	801d1e6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801d1de:	6878      	ldr	r0, [r7, #4]
 801d1e0:	f002 fbce 	bl	801f980 <tcp_send_empty_ack>
 801d1e4:	e000      	b.n	801d1e8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d1e6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d05b      	beq.n	801d2a8 <tcp_receive+0x50c>
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d1f4:	4b60      	ldr	r3, [pc, #384]	; (801d378 <tcp_receive+0x5dc>)
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	1ad3      	subs	r3, r2, r3
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	da54      	bge.n	801d2a8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801d1fe:	4b5f      	ldr	r3, [pc, #380]	; (801d37c <tcp_receive+0x5e0>)
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	b29a      	uxth	r2, r3
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d208:	b29b      	uxth	r3, r3
 801d20a:	1ad3      	subs	r3, r2, r3
 801d20c:	b29b      	uxth	r3, r3
 801d20e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801d212:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801d21c:	10db      	asrs	r3, r3, #3
 801d21e:	b21b      	sxth	r3, r3
 801d220:	b29b      	uxth	r3, r3
 801d222:	1ad3      	subs	r3, r2, r3
 801d224:	b29b      	uxth	r3, r3
 801d226:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801d230:	b29a      	uxth	r2, r3
 801d232:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801d236:	4413      	add	r3, r2
 801d238:	b29b      	uxth	r3, r3
 801d23a:	b21a      	sxth	r2, r3
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801d240:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801d244:	2b00      	cmp	r3, #0
 801d246:	da05      	bge.n	801d254 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801d248:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801d24c:	425b      	negs	r3, r3
 801d24e:	b29b      	uxth	r3, r3
 801d250:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801d254:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801d25e:	109b      	asrs	r3, r3, #2
 801d260:	b21b      	sxth	r3, r3
 801d262:	b29b      	uxth	r3, r3
 801d264:	1ad3      	subs	r3, r2, r3
 801d266:	b29b      	uxth	r3, r3
 801d268:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801d272:	b29a      	uxth	r2, r3
 801d274:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801d278:	4413      	add	r3, r2
 801d27a:	b29b      	uxth	r3, r3
 801d27c:	b21a      	sxth	r2, r3
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801d288:	10db      	asrs	r3, r3, #3
 801d28a:	b21b      	sxth	r3, r3
 801d28c:	b29a      	uxth	r2, r3
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801d294:	b29b      	uxth	r3, r3
 801d296:	4413      	add	r3, r2
 801d298:	b29b      	uxth	r3, r3
 801d29a:	b21a      	sxth	r2, r3
 801d29c:	687b      	ldr	r3, [r7, #4]
 801d29e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	2200      	movs	r2, #0
 801d2a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d2a8:	4b35      	ldr	r3, [pc, #212]	; (801d380 <tcp_receive+0x5e4>)
 801d2aa:	881b      	ldrh	r3, [r3, #0]
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	f000 84e2 	beq.w	801dc76 <tcp_receive+0xeda>
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	7d1b      	ldrb	r3, [r3, #20]
 801d2b6:	2b06      	cmp	r3, #6
 801d2b8:	f200 84dd 	bhi.w	801dc76 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d2c0:	4b30      	ldr	r3, [pc, #192]	; (801d384 <tcp_receive+0x5e8>)
 801d2c2:	681b      	ldr	r3, [r3, #0]
 801d2c4:	1ad3      	subs	r3, r2, r3
 801d2c6:	3b01      	subs	r3, #1
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	f2c0 808f 	blt.w	801d3ec <tcp_receive+0x650>
 801d2ce:	687b      	ldr	r3, [r7, #4]
 801d2d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d2d2:	4b2b      	ldr	r3, [pc, #172]	; (801d380 <tcp_receive+0x5e4>)
 801d2d4:	881b      	ldrh	r3, [r3, #0]
 801d2d6:	4619      	mov	r1, r3
 801d2d8:	4b2a      	ldr	r3, [pc, #168]	; (801d384 <tcp_receive+0x5e8>)
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	440b      	add	r3, r1
 801d2de:	1ad3      	subs	r3, r2, r3
 801d2e0:	3301      	adds	r3, #1
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	f300 8082 	bgt.w	801d3ec <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801d2e8:	4b27      	ldr	r3, [pc, #156]	; (801d388 <tcp_receive+0x5ec>)
 801d2ea:	685b      	ldr	r3, [r3, #4]
 801d2ec:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d2f2:	4b24      	ldr	r3, [pc, #144]	; (801d384 <tcp_receive+0x5e8>)
 801d2f4:	681b      	ldr	r3, [r3, #0]
 801d2f6:	1ad3      	subs	r3, r2, r3
 801d2f8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801d2fa:	4b23      	ldr	r3, [pc, #140]	; (801d388 <tcp_receive+0x5ec>)
 801d2fc:	685b      	ldr	r3, [r3, #4]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d106      	bne.n	801d310 <tcp_receive+0x574>
 801d302:	4b22      	ldr	r3, [pc, #136]	; (801d38c <tcp_receive+0x5f0>)
 801d304:	f240 5294 	movw	r2, #1428	; 0x594
 801d308:	4921      	ldr	r1, [pc, #132]	; (801d390 <tcp_receive+0x5f4>)
 801d30a:	4822      	ldr	r0, [pc, #136]	; (801d394 <tcp_receive+0x5f8>)
 801d30c:	f006 faa0 	bl	8023850 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801d310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d312:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d316:	4293      	cmp	r3, r2
 801d318:	d906      	bls.n	801d328 <tcp_receive+0x58c>
 801d31a:	4b1c      	ldr	r3, [pc, #112]	; (801d38c <tcp_receive+0x5f0>)
 801d31c:	f240 5295 	movw	r2, #1429	; 0x595
 801d320:	491d      	ldr	r1, [pc, #116]	; (801d398 <tcp_receive+0x5fc>)
 801d322:	481c      	ldr	r0, [pc, #112]	; (801d394 <tcp_receive+0x5f8>)
 801d324:	f006 fa94 	bl	8023850 <iprintf>
      off = (u16_t)off32;
 801d328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d32a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d32e:	4b16      	ldr	r3, [pc, #88]	; (801d388 <tcp_receive+0x5ec>)
 801d330:	685b      	ldr	r3, [r3, #4]
 801d332:	891b      	ldrh	r3, [r3, #8]
 801d334:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d338:	429a      	cmp	r2, r3
 801d33a:	d906      	bls.n	801d34a <tcp_receive+0x5ae>
 801d33c:	4b13      	ldr	r3, [pc, #76]	; (801d38c <tcp_receive+0x5f0>)
 801d33e:	f240 5297 	movw	r2, #1431	; 0x597
 801d342:	4916      	ldr	r1, [pc, #88]	; (801d39c <tcp_receive+0x600>)
 801d344:	4813      	ldr	r0, [pc, #76]	; (801d394 <tcp_receive+0x5f8>)
 801d346:	f006 fa83 	bl	8023850 <iprintf>
      inseg.len -= off;
 801d34a:	4b0f      	ldr	r3, [pc, #60]	; (801d388 <tcp_receive+0x5ec>)
 801d34c:	891a      	ldrh	r2, [r3, #8]
 801d34e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d352:	1ad3      	subs	r3, r2, r3
 801d354:	b29a      	uxth	r2, r3
 801d356:	4b0c      	ldr	r3, [pc, #48]	; (801d388 <tcp_receive+0x5ec>)
 801d358:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d35a:	4b0b      	ldr	r3, [pc, #44]	; (801d388 <tcp_receive+0x5ec>)
 801d35c:	685b      	ldr	r3, [r3, #4]
 801d35e:	891a      	ldrh	r2, [r3, #8]
 801d360:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d364:	1ad3      	subs	r3, r2, r3
 801d366:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801d368:	e02a      	b.n	801d3c0 <tcp_receive+0x624>
 801d36a:	bf00      	nop
 801d36c:	08026cdc 	.word	0x08026cdc
 801d370:	08026ce4 	.word	0x08026ce4
 801d374:	20011358 	.word	0x20011358
 801d378:	20011354 	.word	0x20011354
 801d37c:	20011318 	.word	0x20011318
 801d380:	2001135a 	.word	0x2001135a
 801d384:	20011350 	.word	0x20011350
 801d388:	20011330 	.word	0x20011330
 801d38c:	08026974 	.word	0x08026974
 801d390:	08026cec 	.word	0x08026cec
 801d394:	080269c0 	.word	0x080269c0
 801d398:	08026cfc 	.word	0x08026cfc
 801d39c:	08026d0c 	.word	0x08026d0c
        off -= p->len;
 801d3a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d3a2:	895b      	ldrh	r3, [r3, #10]
 801d3a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d3a8:	1ad3      	subs	r3, r2, r3
 801d3aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801d3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d3b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801d3b2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801d3b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d3b6:	2200      	movs	r2, #0
 801d3b8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801d3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801d3c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d3c2:	895b      	ldrh	r3, [r3, #10]
 801d3c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d3c8:	429a      	cmp	r2, r3
 801d3ca:	d8e9      	bhi.n	801d3a0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801d3cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d3d0:	4619      	mov	r1, r3
 801d3d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d3d4:	f7fc f8e8 	bl	80195a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3dc:	4a91      	ldr	r2, [pc, #580]	; (801d624 <tcp_receive+0x888>)
 801d3de:	6013      	str	r3, [r2, #0]
 801d3e0:	4b91      	ldr	r3, [pc, #580]	; (801d628 <tcp_receive+0x88c>)
 801d3e2:	68db      	ldr	r3, [r3, #12]
 801d3e4:	4a8f      	ldr	r2, [pc, #572]	; (801d624 <tcp_receive+0x888>)
 801d3e6:	6812      	ldr	r2, [r2, #0]
 801d3e8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d3ea:	e00d      	b.n	801d408 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801d3ec:	4b8d      	ldr	r3, [pc, #564]	; (801d624 <tcp_receive+0x888>)
 801d3ee:	681a      	ldr	r2, [r3, #0]
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3f4:	1ad3      	subs	r3, r2, r3
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	da06      	bge.n	801d408 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	8b5b      	ldrh	r3, [r3, #26]
 801d3fe:	f043 0302 	orr.w	r3, r3, #2
 801d402:	b29a      	uxth	r2, r3
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d408:	4b86      	ldr	r3, [pc, #536]	; (801d624 <tcp_receive+0x888>)
 801d40a:	681a      	ldr	r2, [r3, #0]
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d410:	1ad3      	subs	r3, r2, r3
 801d412:	2b00      	cmp	r3, #0
 801d414:	f2c0 842a 	blt.w	801dc6c <tcp_receive+0xed0>
 801d418:	4b82      	ldr	r3, [pc, #520]	; (801d624 <tcp_receive+0x888>)
 801d41a:	681a      	ldr	r2, [r3, #0]
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d420:	6879      	ldr	r1, [r7, #4]
 801d422:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d424:	440b      	add	r3, r1
 801d426:	1ad3      	subs	r3, r2, r3
 801d428:	3301      	adds	r3, #1
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	f300 841e 	bgt.w	801dc6c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d434:	4b7b      	ldr	r3, [pc, #492]	; (801d624 <tcp_receive+0x888>)
 801d436:	681b      	ldr	r3, [r3, #0]
 801d438:	429a      	cmp	r2, r3
 801d43a:	f040 829a 	bne.w	801d972 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801d43e:	4b7a      	ldr	r3, [pc, #488]	; (801d628 <tcp_receive+0x88c>)
 801d440:	891c      	ldrh	r4, [r3, #8]
 801d442:	4b79      	ldr	r3, [pc, #484]	; (801d628 <tcp_receive+0x88c>)
 801d444:	68db      	ldr	r3, [r3, #12]
 801d446:	899b      	ldrh	r3, [r3, #12]
 801d448:	b29b      	uxth	r3, r3
 801d44a:	4618      	mov	r0, r3
 801d44c:	f7fa fd40 	bl	8017ed0 <lwip_htons>
 801d450:	4603      	mov	r3, r0
 801d452:	b2db      	uxtb	r3, r3
 801d454:	f003 0303 	and.w	r3, r3, #3
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d001      	beq.n	801d460 <tcp_receive+0x6c4>
 801d45c:	2301      	movs	r3, #1
 801d45e:	e000      	b.n	801d462 <tcp_receive+0x6c6>
 801d460:	2300      	movs	r3, #0
 801d462:	4423      	add	r3, r4
 801d464:	b29a      	uxth	r2, r3
 801d466:	4b71      	ldr	r3, [pc, #452]	; (801d62c <tcp_receive+0x890>)
 801d468:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d46e:	4b6f      	ldr	r3, [pc, #444]	; (801d62c <tcp_receive+0x890>)
 801d470:	881b      	ldrh	r3, [r3, #0]
 801d472:	429a      	cmp	r2, r3
 801d474:	d275      	bcs.n	801d562 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d476:	4b6c      	ldr	r3, [pc, #432]	; (801d628 <tcp_receive+0x88c>)
 801d478:	68db      	ldr	r3, [r3, #12]
 801d47a:	899b      	ldrh	r3, [r3, #12]
 801d47c:	b29b      	uxth	r3, r3
 801d47e:	4618      	mov	r0, r3
 801d480:	f7fa fd26 	bl	8017ed0 <lwip_htons>
 801d484:	4603      	mov	r3, r0
 801d486:	b2db      	uxtb	r3, r3
 801d488:	f003 0301 	and.w	r3, r3, #1
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d01f      	beq.n	801d4d0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801d490:	4b65      	ldr	r3, [pc, #404]	; (801d628 <tcp_receive+0x88c>)
 801d492:	68db      	ldr	r3, [r3, #12]
 801d494:	899b      	ldrh	r3, [r3, #12]
 801d496:	b29b      	uxth	r3, r3
 801d498:	b21b      	sxth	r3, r3
 801d49a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d49e:	b21c      	sxth	r4, r3
 801d4a0:	4b61      	ldr	r3, [pc, #388]	; (801d628 <tcp_receive+0x88c>)
 801d4a2:	68db      	ldr	r3, [r3, #12]
 801d4a4:	899b      	ldrh	r3, [r3, #12]
 801d4a6:	b29b      	uxth	r3, r3
 801d4a8:	4618      	mov	r0, r3
 801d4aa:	f7fa fd11 	bl	8017ed0 <lwip_htons>
 801d4ae:	4603      	mov	r3, r0
 801d4b0:	b2db      	uxtb	r3, r3
 801d4b2:	b29b      	uxth	r3, r3
 801d4b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801d4b8:	b29b      	uxth	r3, r3
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	f7fa fd08 	bl	8017ed0 <lwip_htons>
 801d4c0:	4603      	mov	r3, r0
 801d4c2:	b21b      	sxth	r3, r3
 801d4c4:	4323      	orrs	r3, r4
 801d4c6:	b21a      	sxth	r2, r3
 801d4c8:	4b57      	ldr	r3, [pc, #348]	; (801d628 <tcp_receive+0x88c>)
 801d4ca:	68db      	ldr	r3, [r3, #12]
 801d4cc:	b292      	uxth	r2, r2
 801d4ce:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d4d4:	4b54      	ldr	r3, [pc, #336]	; (801d628 <tcp_receive+0x88c>)
 801d4d6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d4d8:	4b53      	ldr	r3, [pc, #332]	; (801d628 <tcp_receive+0x88c>)
 801d4da:	68db      	ldr	r3, [r3, #12]
 801d4dc:	899b      	ldrh	r3, [r3, #12]
 801d4de:	b29b      	uxth	r3, r3
 801d4e0:	4618      	mov	r0, r3
 801d4e2:	f7fa fcf5 	bl	8017ed0 <lwip_htons>
 801d4e6:	4603      	mov	r3, r0
 801d4e8:	b2db      	uxtb	r3, r3
 801d4ea:	f003 0302 	and.w	r3, r3, #2
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d005      	beq.n	801d4fe <tcp_receive+0x762>
            inseg.len -= 1;
 801d4f2:	4b4d      	ldr	r3, [pc, #308]	; (801d628 <tcp_receive+0x88c>)
 801d4f4:	891b      	ldrh	r3, [r3, #8]
 801d4f6:	3b01      	subs	r3, #1
 801d4f8:	b29a      	uxth	r2, r3
 801d4fa:	4b4b      	ldr	r3, [pc, #300]	; (801d628 <tcp_receive+0x88c>)
 801d4fc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801d4fe:	4b4a      	ldr	r3, [pc, #296]	; (801d628 <tcp_receive+0x88c>)
 801d500:	685b      	ldr	r3, [r3, #4]
 801d502:	4a49      	ldr	r2, [pc, #292]	; (801d628 <tcp_receive+0x88c>)
 801d504:	8912      	ldrh	r2, [r2, #8]
 801d506:	4611      	mov	r1, r2
 801d508:	4618      	mov	r0, r3
 801d50a:	f7fb ff4d 	bl	80193a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801d50e:	4b46      	ldr	r3, [pc, #280]	; (801d628 <tcp_receive+0x88c>)
 801d510:	891c      	ldrh	r4, [r3, #8]
 801d512:	4b45      	ldr	r3, [pc, #276]	; (801d628 <tcp_receive+0x88c>)
 801d514:	68db      	ldr	r3, [r3, #12]
 801d516:	899b      	ldrh	r3, [r3, #12]
 801d518:	b29b      	uxth	r3, r3
 801d51a:	4618      	mov	r0, r3
 801d51c:	f7fa fcd8 	bl	8017ed0 <lwip_htons>
 801d520:	4603      	mov	r3, r0
 801d522:	b2db      	uxtb	r3, r3
 801d524:	f003 0303 	and.w	r3, r3, #3
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d001      	beq.n	801d530 <tcp_receive+0x794>
 801d52c:	2301      	movs	r3, #1
 801d52e:	e000      	b.n	801d532 <tcp_receive+0x796>
 801d530:	2300      	movs	r3, #0
 801d532:	4423      	add	r3, r4
 801d534:	b29a      	uxth	r2, r3
 801d536:	4b3d      	ldr	r3, [pc, #244]	; (801d62c <tcp_receive+0x890>)
 801d538:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d53a:	4b3c      	ldr	r3, [pc, #240]	; (801d62c <tcp_receive+0x890>)
 801d53c:	881b      	ldrh	r3, [r3, #0]
 801d53e:	461a      	mov	r2, r3
 801d540:	4b38      	ldr	r3, [pc, #224]	; (801d624 <tcp_receive+0x888>)
 801d542:	681b      	ldr	r3, [r3, #0]
 801d544:	441a      	add	r2, r3
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d54a:	6879      	ldr	r1, [r7, #4]
 801d54c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d54e:	440b      	add	r3, r1
 801d550:	429a      	cmp	r2, r3
 801d552:	d006      	beq.n	801d562 <tcp_receive+0x7c6>
 801d554:	4b36      	ldr	r3, [pc, #216]	; (801d630 <tcp_receive+0x894>)
 801d556:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801d55a:	4936      	ldr	r1, [pc, #216]	; (801d634 <tcp_receive+0x898>)
 801d55c:	4836      	ldr	r0, [pc, #216]	; (801d638 <tcp_receive+0x89c>)
 801d55e:	f006 f977 	bl	8023850 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d566:	2b00      	cmp	r3, #0
 801d568:	f000 80e7 	beq.w	801d73a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d56c:	4b2e      	ldr	r3, [pc, #184]	; (801d628 <tcp_receive+0x88c>)
 801d56e:	68db      	ldr	r3, [r3, #12]
 801d570:	899b      	ldrh	r3, [r3, #12]
 801d572:	b29b      	uxth	r3, r3
 801d574:	4618      	mov	r0, r3
 801d576:	f7fa fcab 	bl	8017ed0 <lwip_htons>
 801d57a:	4603      	mov	r3, r0
 801d57c:	b2db      	uxtb	r3, r3
 801d57e:	f003 0301 	and.w	r3, r3, #1
 801d582:	2b00      	cmp	r3, #0
 801d584:	d010      	beq.n	801d5a8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801d586:	e00a      	b.n	801d59e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d58c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d592:	681a      	ldr	r2, [r3, #0]
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801d598:	68f8      	ldr	r0, [r7, #12]
 801d59a:	f7fd fcc4 	bl	801af26 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d1f0      	bne.n	801d588 <tcp_receive+0x7ec>
 801d5a6:	e0c8      	b.n	801d73a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801d5ae:	e052      	b.n	801d656 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d5b2:	68db      	ldr	r3, [r3, #12]
 801d5b4:	899b      	ldrh	r3, [r3, #12]
 801d5b6:	b29b      	uxth	r3, r3
 801d5b8:	4618      	mov	r0, r3
 801d5ba:	f7fa fc89 	bl	8017ed0 <lwip_htons>
 801d5be:	4603      	mov	r3, r0
 801d5c0:	b2db      	uxtb	r3, r3
 801d5c2:	f003 0301 	and.w	r3, r3, #1
 801d5c6:	2b00      	cmp	r3, #0
 801d5c8:	d03d      	beq.n	801d646 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801d5ca:	4b17      	ldr	r3, [pc, #92]	; (801d628 <tcp_receive+0x88c>)
 801d5cc:	68db      	ldr	r3, [r3, #12]
 801d5ce:	899b      	ldrh	r3, [r3, #12]
 801d5d0:	b29b      	uxth	r3, r3
 801d5d2:	4618      	mov	r0, r3
 801d5d4:	f7fa fc7c 	bl	8017ed0 <lwip_htons>
 801d5d8:	4603      	mov	r3, r0
 801d5da:	b2db      	uxtb	r3, r3
 801d5dc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d5e0:	2b00      	cmp	r3, #0
 801d5e2:	d130      	bne.n	801d646 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801d5e4:	4b10      	ldr	r3, [pc, #64]	; (801d628 <tcp_receive+0x88c>)
 801d5e6:	68db      	ldr	r3, [r3, #12]
 801d5e8:	899b      	ldrh	r3, [r3, #12]
 801d5ea:	b29c      	uxth	r4, r3
 801d5ec:	2001      	movs	r0, #1
 801d5ee:	f7fa fc6f 	bl	8017ed0 <lwip_htons>
 801d5f2:	4603      	mov	r3, r0
 801d5f4:	461a      	mov	r2, r3
 801d5f6:	4b0c      	ldr	r3, [pc, #48]	; (801d628 <tcp_receive+0x88c>)
 801d5f8:	68db      	ldr	r3, [r3, #12]
 801d5fa:	4322      	orrs	r2, r4
 801d5fc:	b292      	uxth	r2, r2
 801d5fe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801d600:	4b09      	ldr	r3, [pc, #36]	; (801d628 <tcp_receive+0x88c>)
 801d602:	891c      	ldrh	r4, [r3, #8]
 801d604:	4b08      	ldr	r3, [pc, #32]	; (801d628 <tcp_receive+0x88c>)
 801d606:	68db      	ldr	r3, [r3, #12]
 801d608:	899b      	ldrh	r3, [r3, #12]
 801d60a:	b29b      	uxth	r3, r3
 801d60c:	4618      	mov	r0, r3
 801d60e:	f7fa fc5f 	bl	8017ed0 <lwip_htons>
 801d612:	4603      	mov	r3, r0
 801d614:	b2db      	uxtb	r3, r3
 801d616:	f003 0303 	and.w	r3, r3, #3
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	d00e      	beq.n	801d63c <tcp_receive+0x8a0>
 801d61e:	2301      	movs	r3, #1
 801d620:	e00d      	b.n	801d63e <tcp_receive+0x8a2>
 801d622:	bf00      	nop
 801d624:	20011350 	.word	0x20011350
 801d628:	20011330 	.word	0x20011330
 801d62c:	2001135a 	.word	0x2001135a
 801d630:	08026974 	.word	0x08026974
 801d634:	08026d1c 	.word	0x08026d1c
 801d638:	080269c0 	.word	0x080269c0
 801d63c:	2300      	movs	r3, #0
 801d63e:	4423      	add	r3, r4
 801d640:	b29a      	uxth	r2, r3
 801d642:	4b98      	ldr	r3, [pc, #608]	; (801d8a4 <tcp_receive+0xb08>)
 801d644:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801d646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d648:	613b      	str	r3, [r7, #16]
              next = next->next;
 801d64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d64c:	681b      	ldr	r3, [r3, #0]
 801d64e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801d650:	6938      	ldr	r0, [r7, #16]
 801d652:	f7fd fc68 	bl	801af26 <tcp_seg_free>
            while (next &&
 801d656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d658:	2b00      	cmp	r3, #0
 801d65a:	d00e      	beq.n	801d67a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801d65c:	4b91      	ldr	r3, [pc, #580]	; (801d8a4 <tcp_receive+0xb08>)
 801d65e:	881b      	ldrh	r3, [r3, #0]
 801d660:	461a      	mov	r2, r3
 801d662:	4b91      	ldr	r3, [pc, #580]	; (801d8a8 <tcp_receive+0xb0c>)
 801d664:	681b      	ldr	r3, [r3, #0]
 801d666:	441a      	add	r2, r3
 801d668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d66a:	68db      	ldr	r3, [r3, #12]
 801d66c:	685b      	ldr	r3, [r3, #4]
 801d66e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d670:	8909      	ldrh	r1, [r1, #8]
 801d672:	440b      	add	r3, r1
 801d674:	1ad3      	subs	r3, r2, r3
            while (next &&
 801d676:	2b00      	cmp	r3, #0
 801d678:	da9a      	bge.n	801d5b0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801d67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	d059      	beq.n	801d734 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801d680:	4b88      	ldr	r3, [pc, #544]	; (801d8a4 <tcp_receive+0xb08>)
 801d682:	881b      	ldrh	r3, [r3, #0]
 801d684:	461a      	mov	r2, r3
 801d686:	4b88      	ldr	r3, [pc, #544]	; (801d8a8 <tcp_receive+0xb0c>)
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	441a      	add	r2, r3
 801d68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d68e:	68db      	ldr	r3, [r3, #12]
 801d690:	685b      	ldr	r3, [r3, #4]
 801d692:	1ad3      	subs	r3, r2, r3
            if (next &&
 801d694:	2b00      	cmp	r3, #0
 801d696:	dd4d      	ble.n	801d734 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d69a:	68db      	ldr	r3, [r3, #12]
 801d69c:	685b      	ldr	r3, [r3, #4]
 801d69e:	b29a      	uxth	r2, r3
 801d6a0:	4b81      	ldr	r3, [pc, #516]	; (801d8a8 <tcp_receive+0xb0c>)
 801d6a2:	681b      	ldr	r3, [r3, #0]
 801d6a4:	b29b      	uxth	r3, r3
 801d6a6:	1ad3      	subs	r3, r2, r3
 801d6a8:	b29a      	uxth	r2, r3
 801d6aa:	4b80      	ldr	r3, [pc, #512]	; (801d8ac <tcp_receive+0xb10>)
 801d6ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d6ae:	4b7f      	ldr	r3, [pc, #508]	; (801d8ac <tcp_receive+0xb10>)
 801d6b0:	68db      	ldr	r3, [r3, #12]
 801d6b2:	899b      	ldrh	r3, [r3, #12]
 801d6b4:	b29b      	uxth	r3, r3
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	f7fa fc0a 	bl	8017ed0 <lwip_htons>
 801d6bc:	4603      	mov	r3, r0
 801d6be:	b2db      	uxtb	r3, r3
 801d6c0:	f003 0302 	and.w	r3, r3, #2
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d005      	beq.n	801d6d4 <tcp_receive+0x938>
                inseg.len -= 1;
 801d6c8:	4b78      	ldr	r3, [pc, #480]	; (801d8ac <tcp_receive+0xb10>)
 801d6ca:	891b      	ldrh	r3, [r3, #8]
 801d6cc:	3b01      	subs	r3, #1
 801d6ce:	b29a      	uxth	r2, r3
 801d6d0:	4b76      	ldr	r3, [pc, #472]	; (801d8ac <tcp_receive+0xb10>)
 801d6d2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801d6d4:	4b75      	ldr	r3, [pc, #468]	; (801d8ac <tcp_receive+0xb10>)
 801d6d6:	685b      	ldr	r3, [r3, #4]
 801d6d8:	4a74      	ldr	r2, [pc, #464]	; (801d8ac <tcp_receive+0xb10>)
 801d6da:	8912      	ldrh	r2, [r2, #8]
 801d6dc:	4611      	mov	r1, r2
 801d6de:	4618      	mov	r0, r3
 801d6e0:	f7fb fe62 	bl	80193a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801d6e4:	4b71      	ldr	r3, [pc, #452]	; (801d8ac <tcp_receive+0xb10>)
 801d6e6:	891c      	ldrh	r4, [r3, #8]
 801d6e8:	4b70      	ldr	r3, [pc, #448]	; (801d8ac <tcp_receive+0xb10>)
 801d6ea:	68db      	ldr	r3, [r3, #12]
 801d6ec:	899b      	ldrh	r3, [r3, #12]
 801d6ee:	b29b      	uxth	r3, r3
 801d6f0:	4618      	mov	r0, r3
 801d6f2:	f7fa fbed 	bl	8017ed0 <lwip_htons>
 801d6f6:	4603      	mov	r3, r0
 801d6f8:	b2db      	uxtb	r3, r3
 801d6fa:	f003 0303 	and.w	r3, r3, #3
 801d6fe:	2b00      	cmp	r3, #0
 801d700:	d001      	beq.n	801d706 <tcp_receive+0x96a>
 801d702:	2301      	movs	r3, #1
 801d704:	e000      	b.n	801d708 <tcp_receive+0x96c>
 801d706:	2300      	movs	r3, #0
 801d708:	4423      	add	r3, r4
 801d70a:	b29a      	uxth	r2, r3
 801d70c:	4b65      	ldr	r3, [pc, #404]	; (801d8a4 <tcp_receive+0xb08>)
 801d70e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d710:	4b64      	ldr	r3, [pc, #400]	; (801d8a4 <tcp_receive+0xb08>)
 801d712:	881b      	ldrh	r3, [r3, #0]
 801d714:	461a      	mov	r2, r3
 801d716:	4b64      	ldr	r3, [pc, #400]	; (801d8a8 <tcp_receive+0xb0c>)
 801d718:	681b      	ldr	r3, [r3, #0]
 801d71a:	441a      	add	r2, r3
 801d71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d71e:	68db      	ldr	r3, [r3, #12]
 801d720:	685b      	ldr	r3, [r3, #4]
 801d722:	429a      	cmp	r2, r3
 801d724:	d006      	beq.n	801d734 <tcp_receive+0x998>
 801d726:	4b62      	ldr	r3, [pc, #392]	; (801d8b0 <tcp_receive+0xb14>)
 801d728:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801d72c:	4961      	ldr	r1, [pc, #388]	; (801d8b4 <tcp_receive+0xb18>)
 801d72e:	4862      	ldr	r0, [pc, #392]	; (801d8b8 <tcp_receive+0xb1c>)
 801d730:	f006 f88e 	bl	8023850 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d738:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801d73a:	4b5a      	ldr	r3, [pc, #360]	; (801d8a4 <tcp_receive+0xb08>)
 801d73c:	881b      	ldrh	r3, [r3, #0]
 801d73e:	461a      	mov	r2, r3
 801d740:	4b59      	ldr	r3, [pc, #356]	; (801d8a8 <tcp_receive+0xb0c>)
 801d742:	681b      	ldr	r3, [r3, #0]
 801d744:	441a      	add	r2, r3
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d74e:	4b55      	ldr	r3, [pc, #340]	; (801d8a4 <tcp_receive+0xb08>)
 801d750:	881b      	ldrh	r3, [r3, #0]
 801d752:	429a      	cmp	r2, r3
 801d754:	d206      	bcs.n	801d764 <tcp_receive+0x9c8>
 801d756:	4b56      	ldr	r3, [pc, #344]	; (801d8b0 <tcp_receive+0xb14>)
 801d758:	f240 6207 	movw	r2, #1543	; 0x607
 801d75c:	4957      	ldr	r1, [pc, #348]	; (801d8bc <tcp_receive+0xb20>)
 801d75e:	4856      	ldr	r0, [pc, #344]	; (801d8b8 <tcp_receive+0xb1c>)
 801d760:	f006 f876 	bl	8023850 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d768:	4b4e      	ldr	r3, [pc, #312]	; (801d8a4 <tcp_receive+0xb08>)
 801d76a:	881b      	ldrh	r3, [r3, #0]
 801d76c:	1ad3      	subs	r3, r2, r3
 801d76e:	b29a      	uxth	r2, r3
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801d774:	6878      	ldr	r0, [r7, #4]
 801d776:	f7fc fd99 	bl	801a2ac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801d77a:	4b4c      	ldr	r3, [pc, #304]	; (801d8ac <tcp_receive+0xb10>)
 801d77c:	685b      	ldr	r3, [r3, #4]
 801d77e:	891b      	ldrh	r3, [r3, #8]
 801d780:	2b00      	cmp	r3, #0
 801d782:	d006      	beq.n	801d792 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801d784:	4b49      	ldr	r3, [pc, #292]	; (801d8ac <tcp_receive+0xb10>)
 801d786:	685b      	ldr	r3, [r3, #4]
 801d788:	4a4d      	ldr	r2, [pc, #308]	; (801d8c0 <tcp_receive+0xb24>)
 801d78a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801d78c:	4b47      	ldr	r3, [pc, #284]	; (801d8ac <tcp_receive+0xb10>)
 801d78e:	2200      	movs	r2, #0
 801d790:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d792:	4b46      	ldr	r3, [pc, #280]	; (801d8ac <tcp_receive+0xb10>)
 801d794:	68db      	ldr	r3, [r3, #12]
 801d796:	899b      	ldrh	r3, [r3, #12]
 801d798:	b29b      	uxth	r3, r3
 801d79a:	4618      	mov	r0, r3
 801d79c:	f7fa fb98 	bl	8017ed0 <lwip_htons>
 801d7a0:	4603      	mov	r3, r0
 801d7a2:	b2db      	uxtb	r3, r3
 801d7a4:	f003 0301 	and.w	r3, r3, #1
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	f000 80b8 	beq.w	801d91e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801d7ae:	4b45      	ldr	r3, [pc, #276]	; (801d8c4 <tcp_receive+0xb28>)
 801d7b0:	781b      	ldrb	r3, [r3, #0]
 801d7b2:	f043 0320 	orr.w	r3, r3, #32
 801d7b6:	b2da      	uxtb	r2, r3
 801d7b8:	4b42      	ldr	r3, [pc, #264]	; (801d8c4 <tcp_receive+0xb28>)
 801d7ba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801d7bc:	e0af      	b.n	801d91e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d7c2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d7c8:	68db      	ldr	r3, [r3, #12]
 801d7ca:	685b      	ldr	r3, [r3, #4]
 801d7cc:	4a36      	ldr	r2, [pc, #216]	; (801d8a8 <tcp_receive+0xb0c>)
 801d7ce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d7d0:	68bb      	ldr	r3, [r7, #8]
 801d7d2:	891b      	ldrh	r3, [r3, #8]
 801d7d4:	461c      	mov	r4, r3
 801d7d6:	68bb      	ldr	r3, [r7, #8]
 801d7d8:	68db      	ldr	r3, [r3, #12]
 801d7da:	899b      	ldrh	r3, [r3, #12]
 801d7dc:	b29b      	uxth	r3, r3
 801d7de:	4618      	mov	r0, r3
 801d7e0:	f7fa fb76 	bl	8017ed0 <lwip_htons>
 801d7e4:	4603      	mov	r3, r0
 801d7e6:	b2db      	uxtb	r3, r3
 801d7e8:	f003 0303 	and.w	r3, r3, #3
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d001      	beq.n	801d7f4 <tcp_receive+0xa58>
 801d7f0:	2301      	movs	r3, #1
 801d7f2:	e000      	b.n	801d7f6 <tcp_receive+0xa5a>
 801d7f4:	2300      	movs	r3, #0
 801d7f6:	191a      	adds	r2, r3, r4
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7fc:	441a      	add	r2, r3
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d806:	461c      	mov	r4, r3
 801d808:	68bb      	ldr	r3, [r7, #8]
 801d80a:	891b      	ldrh	r3, [r3, #8]
 801d80c:	461d      	mov	r5, r3
 801d80e:	68bb      	ldr	r3, [r7, #8]
 801d810:	68db      	ldr	r3, [r3, #12]
 801d812:	899b      	ldrh	r3, [r3, #12]
 801d814:	b29b      	uxth	r3, r3
 801d816:	4618      	mov	r0, r3
 801d818:	f7fa fb5a 	bl	8017ed0 <lwip_htons>
 801d81c:	4603      	mov	r3, r0
 801d81e:	b2db      	uxtb	r3, r3
 801d820:	f003 0303 	and.w	r3, r3, #3
 801d824:	2b00      	cmp	r3, #0
 801d826:	d001      	beq.n	801d82c <tcp_receive+0xa90>
 801d828:	2301      	movs	r3, #1
 801d82a:	e000      	b.n	801d82e <tcp_receive+0xa92>
 801d82c:	2300      	movs	r3, #0
 801d82e:	442b      	add	r3, r5
 801d830:	429c      	cmp	r4, r3
 801d832:	d206      	bcs.n	801d842 <tcp_receive+0xaa6>
 801d834:	4b1e      	ldr	r3, [pc, #120]	; (801d8b0 <tcp_receive+0xb14>)
 801d836:	f240 622b 	movw	r2, #1579	; 0x62b
 801d83a:	4923      	ldr	r1, [pc, #140]	; (801d8c8 <tcp_receive+0xb2c>)
 801d83c:	481e      	ldr	r0, [pc, #120]	; (801d8b8 <tcp_receive+0xb1c>)
 801d83e:	f006 f807 	bl	8023850 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801d842:	68bb      	ldr	r3, [r7, #8]
 801d844:	891b      	ldrh	r3, [r3, #8]
 801d846:	461c      	mov	r4, r3
 801d848:	68bb      	ldr	r3, [r7, #8]
 801d84a:	68db      	ldr	r3, [r3, #12]
 801d84c:	899b      	ldrh	r3, [r3, #12]
 801d84e:	b29b      	uxth	r3, r3
 801d850:	4618      	mov	r0, r3
 801d852:	f7fa fb3d 	bl	8017ed0 <lwip_htons>
 801d856:	4603      	mov	r3, r0
 801d858:	b2db      	uxtb	r3, r3
 801d85a:	f003 0303 	and.w	r3, r3, #3
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d001      	beq.n	801d866 <tcp_receive+0xaca>
 801d862:	2301      	movs	r3, #1
 801d864:	e000      	b.n	801d868 <tcp_receive+0xacc>
 801d866:	2300      	movs	r3, #0
 801d868:	1919      	adds	r1, r3, r4
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d86e:	b28b      	uxth	r3, r1
 801d870:	1ad3      	subs	r3, r2, r3
 801d872:	b29a      	uxth	r2, r3
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801d878:	6878      	ldr	r0, [r7, #4]
 801d87a:	f7fc fd17 	bl	801a2ac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801d87e:	68bb      	ldr	r3, [r7, #8]
 801d880:	685b      	ldr	r3, [r3, #4]
 801d882:	891b      	ldrh	r3, [r3, #8]
 801d884:	2b00      	cmp	r3, #0
 801d886:	d028      	beq.n	801d8da <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801d888:	4b0d      	ldr	r3, [pc, #52]	; (801d8c0 <tcp_receive+0xb24>)
 801d88a:	681b      	ldr	r3, [r3, #0]
 801d88c:	2b00      	cmp	r3, #0
 801d88e:	d01d      	beq.n	801d8cc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801d890:	4b0b      	ldr	r3, [pc, #44]	; (801d8c0 <tcp_receive+0xb24>)
 801d892:	681a      	ldr	r2, [r3, #0]
 801d894:	68bb      	ldr	r3, [r7, #8]
 801d896:	685b      	ldr	r3, [r3, #4]
 801d898:	4619      	mov	r1, r3
 801d89a:	4610      	mov	r0, r2
 801d89c:	f7fb ffd8 	bl	8019850 <pbuf_cat>
 801d8a0:	e018      	b.n	801d8d4 <tcp_receive+0xb38>
 801d8a2:	bf00      	nop
 801d8a4:	2001135a 	.word	0x2001135a
 801d8a8:	20011350 	.word	0x20011350
 801d8ac:	20011330 	.word	0x20011330
 801d8b0:	08026974 	.word	0x08026974
 801d8b4:	08026d54 	.word	0x08026d54
 801d8b8:	080269c0 	.word	0x080269c0
 801d8bc:	08026d90 	.word	0x08026d90
 801d8c0:	20011360 	.word	0x20011360
 801d8c4:	2001135d 	.word	0x2001135d
 801d8c8:	08026db0 	.word	0x08026db0
            } else {
              recv_data = cseg->p;
 801d8cc:	68bb      	ldr	r3, [r7, #8]
 801d8ce:	685b      	ldr	r3, [r3, #4]
 801d8d0:	4a70      	ldr	r2, [pc, #448]	; (801da94 <tcp_receive+0xcf8>)
 801d8d2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801d8d4:	68bb      	ldr	r3, [r7, #8]
 801d8d6:	2200      	movs	r2, #0
 801d8d8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d8da:	68bb      	ldr	r3, [r7, #8]
 801d8dc:	68db      	ldr	r3, [r3, #12]
 801d8de:	899b      	ldrh	r3, [r3, #12]
 801d8e0:	b29b      	uxth	r3, r3
 801d8e2:	4618      	mov	r0, r3
 801d8e4:	f7fa faf4 	bl	8017ed0 <lwip_htons>
 801d8e8:	4603      	mov	r3, r0
 801d8ea:	b2db      	uxtb	r3, r3
 801d8ec:	f003 0301 	and.w	r3, r3, #1
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d00d      	beq.n	801d910 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801d8f4:	4b68      	ldr	r3, [pc, #416]	; (801da98 <tcp_receive+0xcfc>)
 801d8f6:	781b      	ldrb	r3, [r3, #0]
 801d8f8:	f043 0320 	orr.w	r3, r3, #32
 801d8fc:	b2da      	uxtb	r2, r3
 801d8fe:	4b66      	ldr	r3, [pc, #408]	; (801da98 <tcp_receive+0xcfc>)
 801d900:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	7d1b      	ldrb	r3, [r3, #20]
 801d906:	2b04      	cmp	r3, #4
 801d908:	d102      	bne.n	801d910 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	2207      	movs	r2, #7
 801d90e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801d910:	68bb      	ldr	r3, [r7, #8]
 801d912:	681a      	ldr	r2, [r3, #0]
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801d918:	68b8      	ldr	r0, [r7, #8]
 801d91a:	f7fd fb04 	bl	801af26 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d922:	2b00      	cmp	r3, #0
 801d924:	d008      	beq.n	801d938 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d92a:	68db      	ldr	r3, [r3, #12]
 801d92c:	685a      	ldr	r2, [r3, #4]
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801d932:	429a      	cmp	r2, r3
 801d934:	f43f af43 	beq.w	801d7be <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	8b5b      	ldrh	r3, [r3, #26]
 801d93c:	f003 0301 	and.w	r3, r3, #1
 801d940:	2b00      	cmp	r3, #0
 801d942:	d00e      	beq.n	801d962 <tcp_receive+0xbc6>
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	8b5b      	ldrh	r3, [r3, #26]
 801d948:	f023 0301 	bic.w	r3, r3, #1
 801d94c:	b29a      	uxth	r2, r3
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	835a      	strh	r2, [r3, #26]
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	8b5b      	ldrh	r3, [r3, #26]
 801d956:	f043 0302 	orr.w	r3, r3, #2
 801d95a:	b29a      	uxth	r2, r3
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d960:	e188      	b.n	801dc74 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	8b5b      	ldrh	r3, [r3, #26]
 801d966:	f043 0301 	orr.w	r3, r3, #1
 801d96a:	b29a      	uxth	r2, r3
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d970:	e180      	b.n	801dc74 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d976:	2b00      	cmp	r3, #0
 801d978:	d106      	bne.n	801d988 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801d97a:	4848      	ldr	r0, [pc, #288]	; (801da9c <tcp_receive+0xd00>)
 801d97c:	f7fd faec 	bl	801af58 <tcp_seg_copy>
 801d980:	4602      	mov	r2, r0
 801d982:	687b      	ldr	r3, [r7, #4]
 801d984:	675a      	str	r2, [r3, #116]	; 0x74
 801d986:	e16d      	b.n	801dc64 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801d988:	2300      	movs	r3, #0
 801d98a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d990:	63bb      	str	r3, [r7, #56]	; 0x38
 801d992:	e157      	b.n	801dc44 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801d994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d996:	68db      	ldr	r3, [r3, #12]
 801d998:	685a      	ldr	r2, [r3, #4]
 801d99a:	4b41      	ldr	r3, [pc, #260]	; (801daa0 <tcp_receive+0xd04>)
 801d99c:	681b      	ldr	r3, [r3, #0]
 801d99e:	429a      	cmp	r2, r3
 801d9a0:	d11d      	bne.n	801d9de <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801d9a2:	4b3e      	ldr	r3, [pc, #248]	; (801da9c <tcp_receive+0xd00>)
 801d9a4:	891a      	ldrh	r2, [r3, #8]
 801d9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9a8:	891b      	ldrh	r3, [r3, #8]
 801d9aa:	429a      	cmp	r2, r3
 801d9ac:	f240 814f 	bls.w	801dc4e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d9b0:	483a      	ldr	r0, [pc, #232]	; (801da9c <tcp_receive+0xd00>)
 801d9b2:	f7fd fad1 	bl	801af58 <tcp_seg_copy>
 801d9b6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801d9b8:	697b      	ldr	r3, [r7, #20]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	f000 8149 	beq.w	801dc52 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801d9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d003      	beq.n	801d9ce <tcp_receive+0xc32>
                    prev->next = cseg;
 801d9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9c8:	697a      	ldr	r2, [r7, #20]
 801d9ca:	601a      	str	r2, [r3, #0]
 801d9cc:	e002      	b.n	801d9d4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	697a      	ldr	r2, [r7, #20]
 801d9d2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801d9d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d9d6:	6978      	ldr	r0, [r7, #20]
 801d9d8:	f7ff f8dc 	bl	801cb94 <tcp_oos_insert_segment>
                }
                break;
 801d9dc:	e139      	b.n	801dc52 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801d9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d117      	bne.n	801da14 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801d9e4:	4b2e      	ldr	r3, [pc, #184]	; (801daa0 <tcp_receive+0xd04>)
 801d9e6:	681a      	ldr	r2, [r3, #0]
 801d9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9ea:	68db      	ldr	r3, [r3, #12]
 801d9ec:	685b      	ldr	r3, [r3, #4]
 801d9ee:	1ad3      	subs	r3, r2, r3
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	da57      	bge.n	801daa4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d9f4:	4829      	ldr	r0, [pc, #164]	; (801da9c <tcp_receive+0xd00>)
 801d9f6:	f7fd faaf 	bl	801af58 <tcp_seg_copy>
 801d9fa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801d9fc:	69bb      	ldr	r3, [r7, #24]
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	f000 8129 	beq.w	801dc56 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	69ba      	ldr	r2, [r7, #24]
 801da08:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801da0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801da0c:	69b8      	ldr	r0, [r7, #24]
 801da0e:	f7ff f8c1 	bl	801cb94 <tcp_oos_insert_segment>
                  }
                  break;
 801da12:	e120      	b.n	801dc56 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801da14:	4b22      	ldr	r3, [pc, #136]	; (801daa0 <tcp_receive+0xd04>)
 801da16:	681a      	ldr	r2, [r3, #0]
 801da18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da1a:	68db      	ldr	r3, [r3, #12]
 801da1c:	685b      	ldr	r3, [r3, #4]
 801da1e:	1ad3      	subs	r3, r2, r3
 801da20:	3b01      	subs	r3, #1
 801da22:	2b00      	cmp	r3, #0
 801da24:	db3e      	blt.n	801daa4 <tcp_receive+0xd08>
 801da26:	4b1e      	ldr	r3, [pc, #120]	; (801daa0 <tcp_receive+0xd04>)
 801da28:	681a      	ldr	r2, [r3, #0]
 801da2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da2c:	68db      	ldr	r3, [r3, #12]
 801da2e:	685b      	ldr	r3, [r3, #4]
 801da30:	1ad3      	subs	r3, r2, r3
 801da32:	3301      	adds	r3, #1
 801da34:	2b00      	cmp	r3, #0
 801da36:	dc35      	bgt.n	801daa4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801da38:	4818      	ldr	r0, [pc, #96]	; (801da9c <tcp_receive+0xd00>)
 801da3a:	f7fd fa8d 	bl	801af58 <tcp_seg_copy>
 801da3e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801da40:	69fb      	ldr	r3, [r7, #28]
 801da42:	2b00      	cmp	r3, #0
 801da44:	f000 8109 	beq.w	801dc5a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801da48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da4a:	68db      	ldr	r3, [r3, #12]
 801da4c:	685b      	ldr	r3, [r3, #4]
 801da4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801da50:	8912      	ldrh	r2, [r2, #8]
 801da52:	441a      	add	r2, r3
 801da54:	4b12      	ldr	r3, [pc, #72]	; (801daa0 <tcp_receive+0xd04>)
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	1ad3      	subs	r3, r2, r3
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	dd12      	ble.n	801da84 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801da5e:	4b10      	ldr	r3, [pc, #64]	; (801daa0 <tcp_receive+0xd04>)
 801da60:	681b      	ldr	r3, [r3, #0]
 801da62:	b29a      	uxth	r2, r3
 801da64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da66:	68db      	ldr	r3, [r3, #12]
 801da68:	685b      	ldr	r3, [r3, #4]
 801da6a:	b29b      	uxth	r3, r3
 801da6c:	1ad3      	subs	r3, r2, r3
 801da6e:	b29a      	uxth	r2, r3
 801da70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da72:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801da74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da76:	685a      	ldr	r2, [r3, #4]
 801da78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da7a:	891b      	ldrh	r3, [r3, #8]
 801da7c:	4619      	mov	r1, r3
 801da7e:	4610      	mov	r0, r2
 801da80:	f7fb fc92 	bl	80193a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801da84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da86:	69fa      	ldr	r2, [r7, #28]
 801da88:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801da8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801da8c:	69f8      	ldr	r0, [r7, #28]
 801da8e:	f7ff f881 	bl	801cb94 <tcp_oos_insert_segment>
                  }
                  break;
 801da92:	e0e2      	b.n	801dc5a <tcp_receive+0xebe>
 801da94:	20011360 	.word	0x20011360
 801da98:	2001135d 	.word	0x2001135d
 801da9c:	20011330 	.word	0x20011330
 801daa0:	20011350 	.word	0x20011350
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801daa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daa6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801daa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daaa:	681b      	ldr	r3, [r3, #0]
 801daac:	2b00      	cmp	r3, #0
 801daae:	f040 80c6 	bne.w	801dc3e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801dab2:	4b80      	ldr	r3, [pc, #512]	; (801dcb4 <tcp_receive+0xf18>)
 801dab4:	681a      	ldr	r2, [r3, #0]
 801dab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dab8:	68db      	ldr	r3, [r3, #12]
 801daba:	685b      	ldr	r3, [r3, #4]
 801dabc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	f340 80bd 	ble.w	801dc3e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801dac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dac6:	68db      	ldr	r3, [r3, #12]
 801dac8:	899b      	ldrh	r3, [r3, #12]
 801daca:	b29b      	uxth	r3, r3
 801dacc:	4618      	mov	r0, r3
 801dace:	f7fa f9ff 	bl	8017ed0 <lwip_htons>
 801dad2:	4603      	mov	r3, r0
 801dad4:	b2db      	uxtb	r3, r3
 801dad6:	f003 0301 	and.w	r3, r3, #1
 801dada:	2b00      	cmp	r3, #0
 801dadc:	f040 80bf 	bne.w	801dc5e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801dae0:	4875      	ldr	r0, [pc, #468]	; (801dcb8 <tcp_receive+0xf1c>)
 801dae2:	f7fd fa39 	bl	801af58 <tcp_seg_copy>
 801dae6:	4602      	mov	r2, r0
 801dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801daec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daee:	681b      	ldr	r3, [r3, #0]
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	f000 80b6 	beq.w	801dc62 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daf8:	68db      	ldr	r3, [r3, #12]
 801dafa:	685b      	ldr	r3, [r3, #4]
 801dafc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dafe:	8912      	ldrh	r2, [r2, #8]
 801db00:	441a      	add	r2, r3
 801db02:	4b6c      	ldr	r3, [pc, #432]	; (801dcb4 <tcp_receive+0xf18>)
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	1ad3      	subs	r3, r2, r3
 801db08:	2b00      	cmp	r3, #0
 801db0a:	dd12      	ble.n	801db32 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801db0c:	4b69      	ldr	r3, [pc, #420]	; (801dcb4 <tcp_receive+0xf18>)
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	b29a      	uxth	r2, r3
 801db12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db14:	68db      	ldr	r3, [r3, #12]
 801db16:	685b      	ldr	r3, [r3, #4]
 801db18:	b29b      	uxth	r3, r3
 801db1a:	1ad3      	subs	r3, r2, r3
 801db1c:	b29a      	uxth	r2, r3
 801db1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db20:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801db22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db24:	685a      	ldr	r2, [r3, #4]
 801db26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db28:	891b      	ldrh	r3, [r3, #8]
 801db2a:	4619      	mov	r1, r3
 801db2c:	4610      	mov	r0, r2
 801db2e:	f7fb fc3b 	bl	80193a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801db32:	4b62      	ldr	r3, [pc, #392]	; (801dcbc <tcp_receive+0xf20>)
 801db34:	881b      	ldrh	r3, [r3, #0]
 801db36:	461a      	mov	r2, r3
 801db38:	4b5e      	ldr	r3, [pc, #376]	; (801dcb4 <tcp_receive+0xf18>)
 801db3a:	681b      	ldr	r3, [r3, #0]
 801db3c:	441a      	add	r2, r3
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db42:	6879      	ldr	r1, [r7, #4]
 801db44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801db46:	440b      	add	r3, r1
 801db48:	1ad3      	subs	r3, r2, r3
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	f340 8089 	ble.w	801dc62 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801db50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db52:	681b      	ldr	r3, [r3, #0]
 801db54:	68db      	ldr	r3, [r3, #12]
 801db56:	899b      	ldrh	r3, [r3, #12]
 801db58:	b29b      	uxth	r3, r3
 801db5a:	4618      	mov	r0, r3
 801db5c:	f7fa f9b8 	bl	8017ed0 <lwip_htons>
 801db60:	4603      	mov	r3, r0
 801db62:	b2db      	uxtb	r3, r3
 801db64:	f003 0301 	and.w	r3, r3, #1
 801db68:	2b00      	cmp	r3, #0
 801db6a:	d022      	beq.n	801dbb2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801db6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	68db      	ldr	r3, [r3, #12]
 801db72:	899b      	ldrh	r3, [r3, #12]
 801db74:	b29b      	uxth	r3, r3
 801db76:	b21b      	sxth	r3, r3
 801db78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801db7c:	b21c      	sxth	r4, r3
 801db7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db80:	681b      	ldr	r3, [r3, #0]
 801db82:	68db      	ldr	r3, [r3, #12]
 801db84:	899b      	ldrh	r3, [r3, #12]
 801db86:	b29b      	uxth	r3, r3
 801db88:	4618      	mov	r0, r3
 801db8a:	f7fa f9a1 	bl	8017ed0 <lwip_htons>
 801db8e:	4603      	mov	r3, r0
 801db90:	b2db      	uxtb	r3, r3
 801db92:	b29b      	uxth	r3, r3
 801db94:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801db98:	b29b      	uxth	r3, r3
 801db9a:	4618      	mov	r0, r3
 801db9c:	f7fa f998 	bl	8017ed0 <lwip_htons>
 801dba0:	4603      	mov	r3, r0
 801dba2:	b21b      	sxth	r3, r3
 801dba4:	4323      	orrs	r3, r4
 801dba6:	b21a      	sxth	r2, r3
 801dba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbaa:	681b      	ldr	r3, [r3, #0]
 801dbac:	68db      	ldr	r3, [r3, #12]
 801dbae:	b292      	uxth	r2, r2
 801dbb0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbb6:	b29a      	uxth	r2, r3
 801dbb8:	687b      	ldr	r3, [r7, #4]
 801dbba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dbbc:	4413      	add	r3, r2
 801dbbe:	b299      	uxth	r1, r3
 801dbc0:	4b3c      	ldr	r3, [pc, #240]	; (801dcb4 <tcp_receive+0xf18>)
 801dbc2:	681b      	ldr	r3, [r3, #0]
 801dbc4:	b29a      	uxth	r2, r3
 801dbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbc8:	681b      	ldr	r3, [r3, #0]
 801dbca:	1a8a      	subs	r2, r1, r2
 801dbcc:	b292      	uxth	r2, r2
 801dbce:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801dbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbd2:	681b      	ldr	r3, [r3, #0]
 801dbd4:	685a      	ldr	r2, [r3, #4]
 801dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbd8:	681b      	ldr	r3, [r3, #0]
 801dbda:	891b      	ldrh	r3, [r3, #8]
 801dbdc:	4619      	mov	r1, r3
 801dbde:	4610      	mov	r0, r2
 801dbe0:	f7fb fbe2 	bl	80193a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801dbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbe6:	681b      	ldr	r3, [r3, #0]
 801dbe8:	891c      	ldrh	r4, [r3, #8]
 801dbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbec:	681b      	ldr	r3, [r3, #0]
 801dbee:	68db      	ldr	r3, [r3, #12]
 801dbf0:	899b      	ldrh	r3, [r3, #12]
 801dbf2:	b29b      	uxth	r3, r3
 801dbf4:	4618      	mov	r0, r3
 801dbf6:	f7fa f96b 	bl	8017ed0 <lwip_htons>
 801dbfa:	4603      	mov	r3, r0
 801dbfc:	b2db      	uxtb	r3, r3
 801dbfe:	f003 0303 	and.w	r3, r3, #3
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d001      	beq.n	801dc0a <tcp_receive+0xe6e>
 801dc06:	2301      	movs	r3, #1
 801dc08:	e000      	b.n	801dc0c <tcp_receive+0xe70>
 801dc0a:	2300      	movs	r3, #0
 801dc0c:	4423      	add	r3, r4
 801dc0e:	b29a      	uxth	r2, r3
 801dc10:	4b2a      	ldr	r3, [pc, #168]	; (801dcbc <tcp_receive+0xf20>)
 801dc12:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801dc14:	4b29      	ldr	r3, [pc, #164]	; (801dcbc <tcp_receive+0xf20>)
 801dc16:	881b      	ldrh	r3, [r3, #0]
 801dc18:	461a      	mov	r2, r3
 801dc1a:	4b26      	ldr	r3, [pc, #152]	; (801dcb4 <tcp_receive+0xf18>)
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	441a      	add	r2, r3
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc24:	6879      	ldr	r1, [r7, #4]
 801dc26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801dc28:	440b      	add	r3, r1
 801dc2a:	429a      	cmp	r2, r3
 801dc2c:	d019      	beq.n	801dc62 <tcp_receive+0xec6>
 801dc2e:	4b24      	ldr	r3, [pc, #144]	; (801dcc0 <tcp_receive+0xf24>)
 801dc30:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801dc34:	4923      	ldr	r1, [pc, #140]	; (801dcc4 <tcp_receive+0xf28>)
 801dc36:	4824      	ldr	r0, [pc, #144]	; (801dcc8 <tcp_receive+0xf2c>)
 801dc38:	f005 fe0a 	bl	8023850 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801dc3c:	e011      	b.n	801dc62 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801dc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	63bb      	str	r3, [r7, #56]	; 0x38
 801dc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	f47f aea4 	bne.w	801d994 <tcp_receive+0xbf8>
 801dc4c:	e00a      	b.n	801dc64 <tcp_receive+0xec8>
                break;
 801dc4e:	bf00      	nop
 801dc50:	e008      	b.n	801dc64 <tcp_receive+0xec8>
                break;
 801dc52:	bf00      	nop
 801dc54:	e006      	b.n	801dc64 <tcp_receive+0xec8>
                  break;
 801dc56:	bf00      	nop
 801dc58:	e004      	b.n	801dc64 <tcp_receive+0xec8>
                  break;
 801dc5a:	bf00      	nop
 801dc5c:	e002      	b.n	801dc64 <tcp_receive+0xec8>
                  break;
 801dc5e:	bf00      	nop
 801dc60:	e000      	b.n	801dc64 <tcp_receive+0xec8>
                break;
 801dc62:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801dc64:	6878      	ldr	r0, [r7, #4]
 801dc66:	f001 fe8b 	bl	801f980 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801dc6a:	e003      	b.n	801dc74 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801dc6c:	6878      	ldr	r0, [r7, #4]
 801dc6e:	f001 fe87 	bl	801f980 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801dc72:	e01a      	b.n	801dcaa <tcp_receive+0xf0e>
 801dc74:	e019      	b.n	801dcaa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801dc76:	4b0f      	ldr	r3, [pc, #60]	; (801dcb4 <tcp_receive+0xf18>)
 801dc78:	681a      	ldr	r2, [r3, #0]
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc7e:	1ad3      	subs	r3, r2, r3
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	db0a      	blt.n	801dc9a <tcp_receive+0xefe>
 801dc84:	4b0b      	ldr	r3, [pc, #44]	; (801dcb4 <tcp_receive+0xf18>)
 801dc86:	681a      	ldr	r2, [r3, #0]
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc8c:	6879      	ldr	r1, [r7, #4]
 801dc8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801dc90:	440b      	add	r3, r1
 801dc92:	1ad3      	subs	r3, r2, r3
 801dc94:	3301      	adds	r3, #1
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	dd07      	ble.n	801dcaa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	8b5b      	ldrh	r3, [r3, #26]
 801dc9e:	f043 0302 	orr.w	r3, r3, #2
 801dca2:	b29a      	uxth	r2, r3
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801dca8:	e7ff      	b.n	801dcaa <tcp_receive+0xf0e>
 801dcaa:	bf00      	nop
 801dcac:	3750      	adds	r7, #80	; 0x50
 801dcae:	46bd      	mov	sp, r7
 801dcb0:	bdb0      	pop	{r4, r5, r7, pc}
 801dcb2:	bf00      	nop
 801dcb4:	20011350 	.word	0x20011350
 801dcb8:	20011330 	.word	0x20011330
 801dcbc:	2001135a 	.word	0x2001135a
 801dcc0:	08026974 	.word	0x08026974
 801dcc4:	08026d1c 	.word	0x08026d1c
 801dcc8:	080269c0 	.word	0x080269c0

0801dccc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801dccc:	b480      	push	{r7}
 801dcce:	b083      	sub	sp, #12
 801dcd0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801dcd2:	4b15      	ldr	r3, [pc, #84]	; (801dd28 <tcp_get_next_optbyte+0x5c>)
 801dcd4:	881b      	ldrh	r3, [r3, #0]
 801dcd6:	1c5a      	adds	r2, r3, #1
 801dcd8:	b291      	uxth	r1, r2
 801dcda:	4a13      	ldr	r2, [pc, #76]	; (801dd28 <tcp_get_next_optbyte+0x5c>)
 801dcdc:	8011      	strh	r1, [r2, #0]
 801dcde:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801dce0:	4b12      	ldr	r3, [pc, #72]	; (801dd2c <tcp_get_next_optbyte+0x60>)
 801dce2:	681b      	ldr	r3, [r3, #0]
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d004      	beq.n	801dcf2 <tcp_get_next_optbyte+0x26>
 801dce8:	4b11      	ldr	r3, [pc, #68]	; (801dd30 <tcp_get_next_optbyte+0x64>)
 801dcea:	881b      	ldrh	r3, [r3, #0]
 801dcec:	88fa      	ldrh	r2, [r7, #6]
 801dcee:	429a      	cmp	r2, r3
 801dcf0:	d208      	bcs.n	801dd04 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801dcf2:	4b10      	ldr	r3, [pc, #64]	; (801dd34 <tcp_get_next_optbyte+0x68>)
 801dcf4:	681b      	ldr	r3, [r3, #0]
 801dcf6:	3314      	adds	r3, #20
 801dcf8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801dcfa:	88fb      	ldrh	r3, [r7, #6]
 801dcfc:	683a      	ldr	r2, [r7, #0]
 801dcfe:	4413      	add	r3, r2
 801dd00:	781b      	ldrb	r3, [r3, #0]
 801dd02:	e00b      	b.n	801dd1c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801dd04:	88fb      	ldrh	r3, [r7, #6]
 801dd06:	b2da      	uxtb	r2, r3
 801dd08:	4b09      	ldr	r3, [pc, #36]	; (801dd30 <tcp_get_next_optbyte+0x64>)
 801dd0a:	881b      	ldrh	r3, [r3, #0]
 801dd0c:	b2db      	uxtb	r3, r3
 801dd0e:	1ad3      	subs	r3, r2, r3
 801dd10:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801dd12:	4b06      	ldr	r3, [pc, #24]	; (801dd2c <tcp_get_next_optbyte+0x60>)
 801dd14:	681a      	ldr	r2, [r3, #0]
 801dd16:	797b      	ldrb	r3, [r7, #5]
 801dd18:	4413      	add	r3, r2
 801dd1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	370c      	adds	r7, #12
 801dd20:	46bd      	mov	sp, r7
 801dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd26:	4770      	bx	lr
 801dd28:	2001134c 	.word	0x2001134c
 801dd2c:	20011348 	.word	0x20011348
 801dd30:	20011346 	.word	0x20011346
 801dd34:	20011340 	.word	0x20011340

0801dd38 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801dd38:	b580      	push	{r7, lr}
 801dd3a:	b084      	sub	sp, #16
 801dd3c:	af00      	add	r7, sp, #0
 801dd3e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	2b00      	cmp	r3, #0
 801dd44:	d106      	bne.n	801dd54 <tcp_parseopt+0x1c>
 801dd46:	4b32      	ldr	r3, [pc, #200]	; (801de10 <tcp_parseopt+0xd8>)
 801dd48:	f240 727d 	movw	r2, #1917	; 0x77d
 801dd4c:	4931      	ldr	r1, [pc, #196]	; (801de14 <tcp_parseopt+0xdc>)
 801dd4e:	4832      	ldr	r0, [pc, #200]	; (801de18 <tcp_parseopt+0xe0>)
 801dd50:	f005 fd7e 	bl	8023850 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801dd54:	4b31      	ldr	r3, [pc, #196]	; (801de1c <tcp_parseopt+0xe4>)
 801dd56:	881b      	ldrh	r3, [r3, #0]
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	d055      	beq.n	801de08 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801dd5c:	4b30      	ldr	r3, [pc, #192]	; (801de20 <tcp_parseopt+0xe8>)
 801dd5e:	2200      	movs	r2, #0
 801dd60:	801a      	strh	r2, [r3, #0]
 801dd62:	e045      	b.n	801ddf0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801dd64:	f7ff ffb2 	bl	801dccc <tcp_get_next_optbyte>
 801dd68:	4603      	mov	r3, r0
 801dd6a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801dd6c:	7bfb      	ldrb	r3, [r7, #15]
 801dd6e:	2b02      	cmp	r3, #2
 801dd70:	d006      	beq.n	801dd80 <tcp_parseopt+0x48>
 801dd72:	2b02      	cmp	r3, #2
 801dd74:	dc2b      	bgt.n	801ddce <tcp_parseopt+0x96>
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d041      	beq.n	801ddfe <tcp_parseopt+0xc6>
 801dd7a:	2b01      	cmp	r3, #1
 801dd7c:	d127      	bne.n	801ddce <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801dd7e:	e037      	b.n	801ddf0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801dd80:	f7ff ffa4 	bl	801dccc <tcp_get_next_optbyte>
 801dd84:	4603      	mov	r3, r0
 801dd86:	2b04      	cmp	r3, #4
 801dd88:	d13b      	bne.n	801de02 <tcp_parseopt+0xca>
 801dd8a:	4b25      	ldr	r3, [pc, #148]	; (801de20 <tcp_parseopt+0xe8>)
 801dd8c:	881b      	ldrh	r3, [r3, #0]
 801dd8e:	3301      	adds	r3, #1
 801dd90:	4a22      	ldr	r2, [pc, #136]	; (801de1c <tcp_parseopt+0xe4>)
 801dd92:	8812      	ldrh	r2, [r2, #0]
 801dd94:	4293      	cmp	r3, r2
 801dd96:	da34      	bge.n	801de02 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801dd98:	f7ff ff98 	bl	801dccc <tcp_get_next_optbyte>
 801dd9c:	4603      	mov	r3, r0
 801dd9e:	b29b      	uxth	r3, r3
 801dda0:	021b      	lsls	r3, r3, #8
 801dda2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801dda4:	f7ff ff92 	bl	801dccc <tcp_get_next_optbyte>
 801dda8:	4603      	mov	r3, r0
 801ddaa:	b29a      	uxth	r2, r3
 801ddac:	89bb      	ldrh	r3, [r7, #12]
 801ddae:	4313      	orrs	r3, r2
 801ddb0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801ddb2:	89bb      	ldrh	r3, [r7, #12]
 801ddb4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801ddb8:	d804      	bhi.n	801ddc4 <tcp_parseopt+0x8c>
 801ddba:	89bb      	ldrh	r3, [r7, #12]
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	d001      	beq.n	801ddc4 <tcp_parseopt+0x8c>
 801ddc0:	89ba      	ldrh	r2, [r7, #12]
 801ddc2:	e001      	b.n	801ddc8 <tcp_parseopt+0x90>
 801ddc4:	f44f 7206 	mov.w	r2, #536	; 0x218
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801ddcc:	e010      	b.n	801ddf0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801ddce:	f7ff ff7d 	bl	801dccc <tcp_get_next_optbyte>
 801ddd2:	4603      	mov	r3, r0
 801ddd4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801ddd6:	7afb      	ldrb	r3, [r7, #11]
 801ddd8:	2b01      	cmp	r3, #1
 801ddda:	d914      	bls.n	801de06 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801dddc:	7afb      	ldrb	r3, [r7, #11]
 801ddde:	b29a      	uxth	r2, r3
 801dde0:	4b0f      	ldr	r3, [pc, #60]	; (801de20 <tcp_parseopt+0xe8>)
 801dde2:	881b      	ldrh	r3, [r3, #0]
 801dde4:	4413      	add	r3, r2
 801dde6:	b29b      	uxth	r3, r3
 801dde8:	3b02      	subs	r3, #2
 801ddea:	b29a      	uxth	r2, r3
 801ddec:	4b0c      	ldr	r3, [pc, #48]	; (801de20 <tcp_parseopt+0xe8>)
 801ddee:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ddf0:	4b0b      	ldr	r3, [pc, #44]	; (801de20 <tcp_parseopt+0xe8>)
 801ddf2:	881a      	ldrh	r2, [r3, #0]
 801ddf4:	4b09      	ldr	r3, [pc, #36]	; (801de1c <tcp_parseopt+0xe4>)
 801ddf6:	881b      	ldrh	r3, [r3, #0]
 801ddf8:	429a      	cmp	r2, r3
 801ddfa:	d3b3      	bcc.n	801dd64 <tcp_parseopt+0x2c>
 801ddfc:	e004      	b.n	801de08 <tcp_parseopt+0xd0>
          return;
 801ddfe:	bf00      	nop
 801de00:	e002      	b.n	801de08 <tcp_parseopt+0xd0>
            return;
 801de02:	bf00      	nop
 801de04:	e000      	b.n	801de08 <tcp_parseopt+0xd0>
            return;
 801de06:	bf00      	nop
      }
    }
  }
}
 801de08:	3710      	adds	r7, #16
 801de0a:	46bd      	mov	sp, r7
 801de0c:	bd80      	pop	{r7, pc}
 801de0e:	bf00      	nop
 801de10:	08026974 	.word	0x08026974
 801de14:	08026dd8 	.word	0x08026dd8
 801de18:	080269c0 	.word	0x080269c0
 801de1c:	20011344 	.word	0x20011344
 801de20:	2001134c 	.word	0x2001134c

0801de24 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801de24:	b480      	push	{r7}
 801de26:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801de28:	4b05      	ldr	r3, [pc, #20]	; (801de40 <tcp_trigger_input_pcb_close+0x1c>)
 801de2a:	781b      	ldrb	r3, [r3, #0]
 801de2c:	f043 0310 	orr.w	r3, r3, #16
 801de30:	b2da      	uxtb	r2, r3
 801de32:	4b03      	ldr	r3, [pc, #12]	; (801de40 <tcp_trigger_input_pcb_close+0x1c>)
 801de34:	701a      	strb	r2, [r3, #0]
}
 801de36:	bf00      	nop
 801de38:	46bd      	mov	sp, r7
 801de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de3e:	4770      	bx	lr
 801de40:	2001135d 	.word	0x2001135d

0801de44 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801de44:	b580      	push	{r7, lr}
 801de46:	b084      	sub	sp, #16
 801de48:	af00      	add	r7, sp, #0
 801de4a:	60f8      	str	r0, [r7, #12]
 801de4c:	60b9      	str	r1, [r7, #8]
 801de4e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	2b00      	cmp	r3, #0
 801de54:	d00a      	beq.n	801de6c <tcp_route+0x28>
 801de56:	68fb      	ldr	r3, [r7, #12]
 801de58:	7a1b      	ldrb	r3, [r3, #8]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d006      	beq.n	801de6c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	7a1b      	ldrb	r3, [r3, #8]
 801de62:	4618      	mov	r0, r3
 801de64:	f7fb f898 	bl	8018f98 <netif_get_by_index>
 801de68:	4603      	mov	r3, r0
 801de6a:	e003      	b.n	801de74 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801de6c:	6878      	ldr	r0, [r7, #4]
 801de6e:	f003 fc77 	bl	8021760 <ip4_route>
 801de72:	4603      	mov	r3, r0
  }
}
 801de74:	4618      	mov	r0, r3
 801de76:	3710      	adds	r7, #16
 801de78:	46bd      	mov	sp, r7
 801de7a:	bd80      	pop	{r7, pc}

0801de7c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801de7c:	b590      	push	{r4, r7, lr}
 801de7e:	b087      	sub	sp, #28
 801de80:	af00      	add	r7, sp, #0
 801de82:	60f8      	str	r0, [r7, #12]
 801de84:	60b9      	str	r1, [r7, #8]
 801de86:	603b      	str	r3, [r7, #0]
 801de88:	4613      	mov	r3, r2
 801de8a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801de8c:	68fb      	ldr	r3, [r7, #12]
 801de8e:	2b00      	cmp	r3, #0
 801de90:	d105      	bne.n	801de9e <tcp_create_segment+0x22>
 801de92:	4b44      	ldr	r3, [pc, #272]	; (801dfa4 <tcp_create_segment+0x128>)
 801de94:	22a3      	movs	r2, #163	; 0xa3
 801de96:	4944      	ldr	r1, [pc, #272]	; (801dfa8 <tcp_create_segment+0x12c>)
 801de98:	4844      	ldr	r0, [pc, #272]	; (801dfac <tcp_create_segment+0x130>)
 801de9a:	f005 fcd9 	bl	8023850 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801de9e:	68bb      	ldr	r3, [r7, #8]
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	d105      	bne.n	801deb0 <tcp_create_segment+0x34>
 801dea4:	4b3f      	ldr	r3, [pc, #252]	; (801dfa4 <tcp_create_segment+0x128>)
 801dea6:	22a4      	movs	r2, #164	; 0xa4
 801dea8:	4941      	ldr	r1, [pc, #260]	; (801dfb0 <tcp_create_segment+0x134>)
 801deaa:	4840      	ldr	r0, [pc, #256]	; (801dfac <tcp_create_segment+0x130>)
 801deac:	f005 fcd0 	bl	8023850 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801deb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801deb4:	009b      	lsls	r3, r3, #2
 801deb6:	b2db      	uxtb	r3, r3
 801deb8:	f003 0304 	and.w	r3, r3, #4
 801debc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801debe:	2003      	movs	r0, #3
 801dec0:	f7fa fcde 	bl	8018880 <memp_malloc>
 801dec4:	6138      	str	r0, [r7, #16]
 801dec6:	693b      	ldr	r3, [r7, #16]
 801dec8:	2b00      	cmp	r3, #0
 801deca:	d104      	bne.n	801ded6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801decc:	68b8      	ldr	r0, [r7, #8]
 801dece:	f7fb fbf1 	bl	80196b4 <pbuf_free>
    return NULL;
 801ded2:	2300      	movs	r3, #0
 801ded4:	e061      	b.n	801df9a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801ded6:	693b      	ldr	r3, [r7, #16]
 801ded8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801dedc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801dede:	693b      	ldr	r3, [r7, #16]
 801dee0:	2200      	movs	r2, #0
 801dee2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801dee4:	693b      	ldr	r3, [r7, #16]
 801dee6:	68ba      	ldr	r2, [r7, #8]
 801dee8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801deea:	68bb      	ldr	r3, [r7, #8]
 801deec:	891a      	ldrh	r2, [r3, #8]
 801deee:	7dfb      	ldrb	r3, [r7, #23]
 801def0:	b29b      	uxth	r3, r3
 801def2:	429a      	cmp	r2, r3
 801def4:	d205      	bcs.n	801df02 <tcp_create_segment+0x86>
 801def6:	4b2b      	ldr	r3, [pc, #172]	; (801dfa4 <tcp_create_segment+0x128>)
 801def8:	22b0      	movs	r2, #176	; 0xb0
 801defa:	492e      	ldr	r1, [pc, #184]	; (801dfb4 <tcp_create_segment+0x138>)
 801defc:	482b      	ldr	r0, [pc, #172]	; (801dfac <tcp_create_segment+0x130>)
 801defe:	f005 fca7 	bl	8023850 <iprintf>
  seg->len = p->tot_len - optlen;
 801df02:	68bb      	ldr	r3, [r7, #8]
 801df04:	891a      	ldrh	r2, [r3, #8]
 801df06:	7dfb      	ldrb	r3, [r7, #23]
 801df08:	b29b      	uxth	r3, r3
 801df0a:	1ad3      	subs	r3, r2, r3
 801df0c:	b29a      	uxth	r2, r3
 801df0e:	693b      	ldr	r3, [r7, #16]
 801df10:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801df12:	2114      	movs	r1, #20
 801df14:	68b8      	ldr	r0, [r7, #8]
 801df16:	f7fb fb37 	bl	8019588 <pbuf_add_header>
 801df1a:	4603      	mov	r3, r0
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d004      	beq.n	801df2a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801df20:	6938      	ldr	r0, [r7, #16]
 801df22:	f7fd f800 	bl	801af26 <tcp_seg_free>
    return NULL;
 801df26:	2300      	movs	r3, #0
 801df28:	e037      	b.n	801df9a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801df2a:	693b      	ldr	r3, [r7, #16]
 801df2c:	685b      	ldr	r3, [r3, #4]
 801df2e:	685a      	ldr	r2, [r3, #4]
 801df30:	693b      	ldr	r3, [r7, #16]
 801df32:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	8ada      	ldrh	r2, [r3, #22]
 801df38:	693b      	ldr	r3, [r7, #16]
 801df3a:	68dc      	ldr	r4, [r3, #12]
 801df3c:	4610      	mov	r0, r2
 801df3e:	f7f9 ffc7 	bl	8017ed0 <lwip_htons>
 801df42:	4603      	mov	r3, r0
 801df44:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801df46:	68fb      	ldr	r3, [r7, #12]
 801df48:	8b1a      	ldrh	r2, [r3, #24]
 801df4a:	693b      	ldr	r3, [r7, #16]
 801df4c:	68dc      	ldr	r4, [r3, #12]
 801df4e:	4610      	mov	r0, r2
 801df50:	f7f9 ffbe 	bl	8017ed0 <lwip_htons>
 801df54:	4603      	mov	r3, r0
 801df56:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801df58:	693b      	ldr	r3, [r7, #16]
 801df5a:	68dc      	ldr	r4, [r3, #12]
 801df5c:	6838      	ldr	r0, [r7, #0]
 801df5e:	f7f9 ffcc 	bl	8017efa <lwip_htonl>
 801df62:	4603      	mov	r3, r0
 801df64:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801df66:	7dfb      	ldrb	r3, [r7, #23]
 801df68:	089b      	lsrs	r3, r3, #2
 801df6a:	b2db      	uxtb	r3, r3
 801df6c:	b29b      	uxth	r3, r3
 801df6e:	3305      	adds	r3, #5
 801df70:	b29b      	uxth	r3, r3
 801df72:	031b      	lsls	r3, r3, #12
 801df74:	b29a      	uxth	r2, r3
 801df76:	79fb      	ldrb	r3, [r7, #7]
 801df78:	b29b      	uxth	r3, r3
 801df7a:	4313      	orrs	r3, r2
 801df7c:	b29a      	uxth	r2, r3
 801df7e:	693b      	ldr	r3, [r7, #16]
 801df80:	68dc      	ldr	r4, [r3, #12]
 801df82:	4610      	mov	r0, r2
 801df84:	f7f9 ffa4 	bl	8017ed0 <lwip_htons>
 801df88:	4603      	mov	r3, r0
 801df8a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801df8c:	693b      	ldr	r3, [r7, #16]
 801df8e:	68db      	ldr	r3, [r3, #12]
 801df90:	2200      	movs	r2, #0
 801df92:	749a      	strb	r2, [r3, #18]
 801df94:	2200      	movs	r2, #0
 801df96:	74da      	strb	r2, [r3, #19]
  return seg;
 801df98:	693b      	ldr	r3, [r7, #16]
}
 801df9a:	4618      	mov	r0, r3
 801df9c:	371c      	adds	r7, #28
 801df9e:	46bd      	mov	sp, r7
 801dfa0:	bd90      	pop	{r4, r7, pc}
 801dfa2:	bf00      	nop
 801dfa4:	08026df4 	.word	0x08026df4
 801dfa8:	08026e28 	.word	0x08026e28
 801dfac:	08026e48 	.word	0x08026e48
 801dfb0:	08026e70 	.word	0x08026e70
 801dfb4:	08026e94 	.word	0x08026e94

0801dfb8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801dfb8:	b580      	push	{r7, lr}
 801dfba:	b086      	sub	sp, #24
 801dfbc:	af00      	add	r7, sp, #0
 801dfbe:	607b      	str	r3, [r7, #4]
 801dfc0:	4603      	mov	r3, r0
 801dfc2:	73fb      	strb	r3, [r7, #15]
 801dfc4:	460b      	mov	r3, r1
 801dfc6:	81bb      	strh	r3, [r7, #12]
 801dfc8:	4613      	mov	r3, r2
 801dfca:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801dfcc:	89bb      	ldrh	r3, [r7, #12]
 801dfce:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d105      	bne.n	801dfe2 <tcp_pbuf_prealloc+0x2a>
 801dfd6:	4b30      	ldr	r3, [pc, #192]	; (801e098 <tcp_pbuf_prealloc+0xe0>)
 801dfd8:	22e8      	movs	r2, #232	; 0xe8
 801dfda:	4930      	ldr	r1, [pc, #192]	; (801e09c <tcp_pbuf_prealloc+0xe4>)
 801dfdc:	4830      	ldr	r0, [pc, #192]	; (801e0a0 <tcp_pbuf_prealloc+0xe8>)
 801dfde:	f005 fc37 	bl	8023850 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801dfe2:	6a3b      	ldr	r3, [r7, #32]
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	d105      	bne.n	801dff4 <tcp_pbuf_prealloc+0x3c>
 801dfe8:	4b2b      	ldr	r3, [pc, #172]	; (801e098 <tcp_pbuf_prealloc+0xe0>)
 801dfea:	22e9      	movs	r2, #233	; 0xe9
 801dfec:	492d      	ldr	r1, [pc, #180]	; (801e0a4 <tcp_pbuf_prealloc+0xec>)
 801dfee:	482c      	ldr	r0, [pc, #176]	; (801e0a0 <tcp_pbuf_prealloc+0xe8>)
 801dff0:	f005 fc2e 	bl	8023850 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801dff4:	89ba      	ldrh	r2, [r7, #12]
 801dff6:	897b      	ldrh	r3, [r7, #10]
 801dff8:	429a      	cmp	r2, r3
 801dffa:	d221      	bcs.n	801e040 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801dffc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e000:	f003 0302 	and.w	r3, r3, #2
 801e004:	2b00      	cmp	r3, #0
 801e006:	d111      	bne.n	801e02c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801e008:	6a3b      	ldr	r3, [r7, #32]
 801e00a:	8b5b      	ldrh	r3, [r3, #26]
 801e00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801e010:	2b00      	cmp	r3, #0
 801e012:	d115      	bne.n	801e040 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801e014:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801e018:	2b00      	cmp	r3, #0
 801e01a:	d007      	beq.n	801e02c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801e01c:	6a3b      	ldr	r3, [r7, #32]
 801e01e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801e020:	2b00      	cmp	r3, #0
 801e022:	d103      	bne.n	801e02c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801e024:	6a3b      	ldr	r3, [r7, #32]
 801e026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d009      	beq.n	801e040 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801e02c:	89bb      	ldrh	r3, [r7, #12]
 801e02e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801e032:	f023 0203 	bic.w	r2, r3, #3
 801e036:	897b      	ldrh	r3, [r7, #10]
 801e038:	4293      	cmp	r3, r2
 801e03a:	bf28      	it	cs
 801e03c:	4613      	movcs	r3, r2
 801e03e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801e040:	8af9      	ldrh	r1, [r7, #22]
 801e042:	7bfb      	ldrb	r3, [r7, #15]
 801e044:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e048:	4618      	mov	r0, r3
 801e04a:	f7fb f84f 	bl	80190ec <pbuf_alloc>
 801e04e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e050:	693b      	ldr	r3, [r7, #16]
 801e052:	2b00      	cmp	r3, #0
 801e054:	d101      	bne.n	801e05a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801e056:	2300      	movs	r3, #0
 801e058:	e019      	b.n	801e08e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801e05a:	693b      	ldr	r3, [r7, #16]
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	2b00      	cmp	r3, #0
 801e060:	d006      	beq.n	801e070 <tcp_pbuf_prealloc+0xb8>
 801e062:	4b0d      	ldr	r3, [pc, #52]	; (801e098 <tcp_pbuf_prealloc+0xe0>)
 801e064:	f240 120b 	movw	r2, #267	; 0x10b
 801e068:	490f      	ldr	r1, [pc, #60]	; (801e0a8 <tcp_pbuf_prealloc+0xf0>)
 801e06a:	480d      	ldr	r0, [pc, #52]	; (801e0a0 <tcp_pbuf_prealloc+0xe8>)
 801e06c:	f005 fbf0 	bl	8023850 <iprintf>
  *oversize = p->len - length;
 801e070:	693b      	ldr	r3, [r7, #16]
 801e072:	895a      	ldrh	r2, [r3, #10]
 801e074:	89bb      	ldrh	r3, [r7, #12]
 801e076:	1ad3      	subs	r3, r2, r3
 801e078:	b29a      	uxth	r2, r3
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801e07e:	693b      	ldr	r3, [r7, #16]
 801e080:	89ba      	ldrh	r2, [r7, #12]
 801e082:	811a      	strh	r2, [r3, #8]
 801e084:	693b      	ldr	r3, [r7, #16]
 801e086:	891a      	ldrh	r2, [r3, #8]
 801e088:	693b      	ldr	r3, [r7, #16]
 801e08a:	815a      	strh	r2, [r3, #10]
  return p;
 801e08c:	693b      	ldr	r3, [r7, #16]
}
 801e08e:	4618      	mov	r0, r3
 801e090:	3718      	adds	r7, #24
 801e092:	46bd      	mov	sp, r7
 801e094:	bd80      	pop	{r7, pc}
 801e096:	bf00      	nop
 801e098:	08026df4 	.word	0x08026df4
 801e09c:	08026eac 	.word	0x08026eac
 801e0a0:	08026e48 	.word	0x08026e48
 801e0a4:	08026ed0 	.word	0x08026ed0
 801e0a8:	08026ef0 	.word	0x08026ef0

0801e0ac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801e0ac:	b580      	push	{r7, lr}
 801e0ae:	b082      	sub	sp, #8
 801e0b0:	af00      	add	r7, sp, #0
 801e0b2:	6078      	str	r0, [r7, #4]
 801e0b4:	460b      	mov	r3, r1
 801e0b6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	d106      	bne.n	801e0cc <tcp_write_checks+0x20>
 801e0be:	4b33      	ldr	r3, [pc, #204]	; (801e18c <tcp_write_checks+0xe0>)
 801e0c0:	f240 1233 	movw	r2, #307	; 0x133
 801e0c4:	4932      	ldr	r1, [pc, #200]	; (801e190 <tcp_write_checks+0xe4>)
 801e0c6:	4833      	ldr	r0, [pc, #204]	; (801e194 <tcp_write_checks+0xe8>)
 801e0c8:	f005 fbc2 	bl	8023850 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	7d1b      	ldrb	r3, [r3, #20]
 801e0d0:	2b04      	cmp	r3, #4
 801e0d2:	d00e      	beq.n	801e0f2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801e0d8:	2b07      	cmp	r3, #7
 801e0da:	d00a      	beq.n	801e0f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801e0dc:	687b      	ldr	r3, [r7, #4]
 801e0de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801e0e0:	2b02      	cmp	r3, #2
 801e0e2:	d006      	beq.n	801e0f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801e0e8:	2b03      	cmp	r3, #3
 801e0ea:	d002      	beq.n	801e0f2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801e0ec:	f06f 030a 	mvn.w	r3, #10
 801e0f0:	e048      	b.n	801e184 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801e0f2:	887b      	ldrh	r3, [r7, #2]
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	d101      	bne.n	801e0fc <tcp_write_checks+0x50>
    return ERR_OK;
 801e0f8:	2300      	movs	r3, #0
 801e0fa:	e043      	b.n	801e184 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801e102:	887a      	ldrh	r2, [r7, #2]
 801e104:	429a      	cmp	r2, r3
 801e106:	d909      	bls.n	801e11c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	8b5b      	ldrh	r3, [r3, #26]
 801e10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e110:	b29a      	uxth	r2, r3
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801e116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e11a:	e033      	b.n	801e184 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e122:	2b08      	cmp	r3, #8
 801e124:	d909      	bls.n	801e13a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e126:	687b      	ldr	r3, [r7, #4]
 801e128:	8b5b      	ldrh	r3, [r3, #26]
 801e12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e12e:	b29a      	uxth	r2, r3
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801e134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e138:	e024      	b.n	801e184 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e140:	2b00      	cmp	r3, #0
 801e142:	d00f      	beq.n	801e164 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d11a      	bne.n	801e182 <tcp_write_checks+0xd6>
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e150:	2b00      	cmp	r3, #0
 801e152:	d116      	bne.n	801e182 <tcp_write_checks+0xd6>
 801e154:	4b0d      	ldr	r3, [pc, #52]	; (801e18c <tcp_write_checks+0xe0>)
 801e156:	f240 1255 	movw	r2, #341	; 0x155
 801e15a:	490f      	ldr	r1, [pc, #60]	; (801e198 <tcp_write_checks+0xec>)
 801e15c:	480d      	ldr	r0, [pc, #52]	; (801e194 <tcp_write_checks+0xe8>)
 801e15e:	f005 fb77 	bl	8023850 <iprintf>
 801e162:	e00e      	b.n	801e182 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d103      	bne.n	801e174 <tcp_write_checks+0xc8>
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e170:	2b00      	cmp	r3, #0
 801e172:	d006      	beq.n	801e182 <tcp_write_checks+0xd6>
 801e174:	4b05      	ldr	r3, [pc, #20]	; (801e18c <tcp_write_checks+0xe0>)
 801e176:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801e17a:	4908      	ldr	r1, [pc, #32]	; (801e19c <tcp_write_checks+0xf0>)
 801e17c:	4805      	ldr	r0, [pc, #20]	; (801e194 <tcp_write_checks+0xe8>)
 801e17e:	f005 fb67 	bl	8023850 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801e182:	2300      	movs	r3, #0
}
 801e184:	4618      	mov	r0, r3
 801e186:	3708      	adds	r7, #8
 801e188:	46bd      	mov	sp, r7
 801e18a:	bd80      	pop	{r7, pc}
 801e18c:	08026df4 	.word	0x08026df4
 801e190:	08026f04 	.word	0x08026f04
 801e194:	08026e48 	.word	0x08026e48
 801e198:	08026f24 	.word	0x08026f24
 801e19c:	08026f60 	.word	0x08026f60

0801e1a0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801e1a0:	b590      	push	{r4, r7, lr}
 801e1a2:	b09b      	sub	sp, #108	; 0x6c
 801e1a4:	af04      	add	r7, sp, #16
 801e1a6:	60f8      	str	r0, [r7, #12]
 801e1a8:	60b9      	str	r1, [r7, #8]
 801e1aa:	4611      	mov	r1, r2
 801e1ac:	461a      	mov	r2, r3
 801e1ae:	460b      	mov	r3, r1
 801e1b0:	80fb      	strh	r3, [r7, #6]
 801e1b2:	4613      	mov	r3, r2
 801e1b4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801e1b6:	2300      	movs	r3, #0
 801e1b8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801e1ba:	2300      	movs	r3, #0
 801e1bc:	653b      	str	r3, [r7, #80]	; 0x50
 801e1be:	2300      	movs	r3, #0
 801e1c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e1c2:	2300      	movs	r3, #0
 801e1c4:	64bb      	str	r3, [r7, #72]	; 0x48
 801e1c6:	2300      	movs	r3, #0
 801e1c8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801e1ca:	2300      	movs	r3, #0
 801e1cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801e1d0:	2300      	movs	r3, #0
 801e1d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801e1d6:	2300      	movs	r3, #0
 801e1d8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801e1da:	2300      	movs	r3, #0
 801e1dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801e1de:	2300      	movs	r3, #0
 801e1e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801e1e2:	68fb      	ldr	r3, [r7, #12]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d109      	bne.n	801e1fc <tcp_write+0x5c>
 801e1e8:	4ba4      	ldr	r3, [pc, #656]	; (801e47c <tcp_write+0x2dc>)
 801e1ea:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801e1ee:	49a4      	ldr	r1, [pc, #656]	; (801e480 <tcp_write+0x2e0>)
 801e1f0:	48a4      	ldr	r0, [pc, #656]	; (801e484 <tcp_write+0x2e4>)
 801e1f2:	f005 fb2d 	bl	8023850 <iprintf>
 801e1f6:	f06f 030f 	mvn.w	r3, #15
 801e1fa:	e32a      	b.n	801e852 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801e1fc:	68fb      	ldr	r3, [r7, #12]
 801e1fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801e202:	085b      	lsrs	r3, r3, #1
 801e204:	b29a      	uxth	r2, r3
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e20a:	4293      	cmp	r3, r2
 801e20c:	bf28      	it	cs
 801e20e:	4613      	movcs	r3, r2
 801e210:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801e212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e214:	2b00      	cmp	r3, #0
 801e216:	d102      	bne.n	801e21e <tcp_write+0x7e>
 801e218:	68fb      	ldr	r3, [r7, #12]
 801e21a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e21c:	e000      	b.n	801e220 <tcp_write+0x80>
 801e21e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e220:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801e222:	68bb      	ldr	r3, [r7, #8]
 801e224:	2b00      	cmp	r3, #0
 801e226:	d109      	bne.n	801e23c <tcp_write+0x9c>
 801e228:	4b94      	ldr	r3, [pc, #592]	; (801e47c <tcp_write+0x2dc>)
 801e22a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801e22e:	4996      	ldr	r1, [pc, #600]	; (801e488 <tcp_write+0x2e8>)
 801e230:	4894      	ldr	r0, [pc, #592]	; (801e484 <tcp_write+0x2e4>)
 801e232:	f005 fb0d 	bl	8023850 <iprintf>
 801e236:	f06f 030f 	mvn.w	r3, #15
 801e23a:	e30a      	b.n	801e852 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801e23c:	88fb      	ldrh	r3, [r7, #6]
 801e23e:	4619      	mov	r1, r3
 801e240:	68f8      	ldr	r0, [r7, #12]
 801e242:	f7ff ff33 	bl	801e0ac <tcp_write_checks>
 801e246:	4603      	mov	r3, r0
 801e248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801e24c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801e250:	2b00      	cmp	r3, #0
 801e252:	d002      	beq.n	801e25a <tcp_write+0xba>
    return err;
 801e254:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801e258:	e2fb      	b.n	801e852 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801e25a:	68fb      	ldr	r3, [r7, #12]
 801e25c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e260:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e264:	2300      	movs	r3, #0
 801e266:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e26e:	2b00      	cmp	r3, #0
 801e270:	f000 80f6 	beq.w	801e460 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e274:	68fb      	ldr	r3, [r7, #12]
 801e276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e278:	653b      	str	r3, [r7, #80]	; 0x50
 801e27a:	e002      	b.n	801e282 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801e27c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e27e:	681b      	ldr	r3, [r3, #0]
 801e280:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	2b00      	cmp	r3, #0
 801e288:	d1f8      	bne.n	801e27c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e28c:	7a9b      	ldrb	r3, [r3, #10]
 801e28e:	009b      	lsls	r3, r3, #2
 801e290:	b29b      	uxth	r3, r3
 801e292:	f003 0304 	and.w	r3, r3, #4
 801e296:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e298:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e29a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e29c:	891b      	ldrh	r3, [r3, #8]
 801e29e:	4619      	mov	r1, r3
 801e2a0:	8c3b      	ldrh	r3, [r7, #32]
 801e2a2:	440b      	add	r3, r1
 801e2a4:	429a      	cmp	r2, r3
 801e2a6:	da06      	bge.n	801e2b6 <tcp_write+0x116>
 801e2a8:	4b74      	ldr	r3, [pc, #464]	; (801e47c <tcp_write+0x2dc>)
 801e2aa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801e2ae:	4977      	ldr	r1, [pc, #476]	; (801e48c <tcp_write+0x2ec>)
 801e2b0:	4874      	ldr	r0, [pc, #464]	; (801e484 <tcp_write+0x2e4>)
 801e2b2:	f005 facd 	bl	8023850 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e2b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e2b8:	891a      	ldrh	r2, [r3, #8]
 801e2ba:	8c3b      	ldrh	r3, [r7, #32]
 801e2bc:	4413      	add	r3, r2
 801e2be:	b29b      	uxth	r3, r3
 801e2c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e2c2:	1ad3      	subs	r3, r2, r3
 801e2c4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801e2c6:	68fb      	ldr	r3, [r7, #12]
 801e2c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801e2cc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801e2ce:	8a7b      	ldrh	r3, [r7, #18]
 801e2d0:	2b00      	cmp	r3, #0
 801e2d2:	d026      	beq.n	801e322 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801e2d4:	8a7b      	ldrh	r3, [r7, #18]
 801e2d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801e2d8:	429a      	cmp	r2, r3
 801e2da:	d206      	bcs.n	801e2ea <tcp_write+0x14a>
 801e2dc:	4b67      	ldr	r3, [pc, #412]	; (801e47c <tcp_write+0x2dc>)
 801e2de:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801e2e2:	496b      	ldr	r1, [pc, #428]	; (801e490 <tcp_write+0x2f0>)
 801e2e4:	4867      	ldr	r0, [pc, #412]	; (801e484 <tcp_write+0x2e4>)
 801e2e6:	f005 fab3 	bl	8023850 <iprintf>
      seg = last_unsent;
 801e2ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e2ec:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801e2ee:	8a7b      	ldrh	r3, [r7, #18]
 801e2f0:	88fa      	ldrh	r2, [r7, #6]
 801e2f2:	4293      	cmp	r3, r2
 801e2f4:	bf28      	it	cs
 801e2f6:	4613      	movcs	r3, r2
 801e2f8:	b29b      	uxth	r3, r3
 801e2fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801e2fc:	4293      	cmp	r3, r2
 801e2fe:	bf28      	it	cs
 801e300:	4613      	movcs	r3, r2
 801e302:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801e304:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e308:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e30a:	4413      	add	r3, r2
 801e30c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801e310:	8a7a      	ldrh	r2, [r7, #18]
 801e312:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e314:	1ad3      	subs	r3, r2, r3
 801e316:	b29b      	uxth	r3, r3
 801e318:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801e31a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801e31c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e31e:	1ad3      	subs	r3, r2, r3
 801e320:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801e322:	8a7b      	ldrh	r3, [r7, #18]
 801e324:	2b00      	cmp	r3, #0
 801e326:	d00b      	beq.n	801e340 <tcp_write+0x1a0>
 801e328:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e32c:	88fb      	ldrh	r3, [r7, #6]
 801e32e:	429a      	cmp	r2, r3
 801e330:	d006      	beq.n	801e340 <tcp_write+0x1a0>
 801e332:	4b52      	ldr	r3, [pc, #328]	; (801e47c <tcp_write+0x2dc>)
 801e334:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e338:	4956      	ldr	r1, [pc, #344]	; (801e494 <tcp_write+0x2f4>)
 801e33a:	4852      	ldr	r0, [pc, #328]	; (801e484 <tcp_write+0x2e4>)
 801e33c:	f005 fa88 	bl	8023850 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801e340:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e344:	88fb      	ldrh	r3, [r7, #6]
 801e346:	429a      	cmp	r2, r3
 801e348:	f080 8167 	bcs.w	801e61a <tcp_write+0x47a>
 801e34c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e34e:	2b00      	cmp	r3, #0
 801e350:	f000 8163 	beq.w	801e61a <tcp_write+0x47a>
 801e354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e356:	891b      	ldrh	r3, [r3, #8]
 801e358:	2b00      	cmp	r3, #0
 801e35a:	f000 815e 	beq.w	801e61a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801e35e:	88fa      	ldrh	r2, [r7, #6]
 801e360:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e364:	1ad2      	subs	r2, r2, r3
 801e366:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e368:	4293      	cmp	r3, r2
 801e36a:	bfa8      	it	ge
 801e36c:	4613      	movge	r3, r2
 801e36e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801e370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e372:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e374:	797b      	ldrb	r3, [r7, #5]
 801e376:	f003 0301 	and.w	r3, r3, #1
 801e37a:	2b00      	cmp	r3, #0
 801e37c:	d027      	beq.n	801e3ce <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801e37e:	f107 0012 	add.w	r0, r7, #18
 801e382:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801e384:	8bf9      	ldrh	r1, [r7, #30]
 801e386:	2301      	movs	r3, #1
 801e388:	9302      	str	r3, [sp, #8]
 801e38a:	797b      	ldrb	r3, [r7, #5]
 801e38c:	9301      	str	r3, [sp, #4]
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	9300      	str	r3, [sp, #0]
 801e392:	4603      	mov	r3, r0
 801e394:	2000      	movs	r0, #0
 801e396:	f7ff fe0f 	bl	801dfb8 <tcp_pbuf_prealloc>
 801e39a:	6578      	str	r0, [r7, #84]	; 0x54
 801e39c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	f000 8225 	beq.w	801e7ee <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801e3a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e3a6:	6858      	ldr	r0, [r3, #4]
 801e3a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e3ac:	68ba      	ldr	r2, [r7, #8]
 801e3ae:	4413      	add	r3, r2
 801e3b0:	8bfa      	ldrh	r2, [r7, #30]
 801e3b2:	4619      	mov	r1, r3
 801e3b4:	f005 fb3f 	bl	8023a36 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801e3b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e3ba:	f7fb fa09 	bl	80197d0 <pbuf_clen>
 801e3be:	4603      	mov	r3, r0
 801e3c0:	461a      	mov	r2, r3
 801e3c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e3c6:	4413      	add	r3, r2
 801e3c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801e3cc:	e041      	b.n	801e452 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801e3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3d0:	685b      	ldr	r3, [r3, #4]
 801e3d2:	637b      	str	r3, [r7, #52]	; 0x34
 801e3d4:	e002      	b.n	801e3dc <tcp_write+0x23c>
 801e3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	637b      	str	r3, [r7, #52]	; 0x34
 801e3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d1f8      	bne.n	801e3d6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801e3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3e6:	7b1b      	ldrb	r3, [r3, #12]
 801e3e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	d115      	bne.n	801e41c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801e3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e3f2:	685b      	ldr	r3, [r3, #4]
 801e3f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e3f6:	8952      	ldrh	r2, [r2, #10]
 801e3f8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801e3fa:	68ba      	ldr	r2, [r7, #8]
 801e3fc:	429a      	cmp	r2, r3
 801e3fe:	d10d      	bne.n	801e41c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801e400:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e404:	2b00      	cmp	r3, #0
 801e406:	d006      	beq.n	801e416 <tcp_write+0x276>
 801e408:	4b1c      	ldr	r3, [pc, #112]	; (801e47c <tcp_write+0x2dc>)
 801e40a:	f240 2231 	movw	r2, #561	; 0x231
 801e40e:	4922      	ldr	r1, [pc, #136]	; (801e498 <tcp_write+0x2f8>)
 801e410:	481c      	ldr	r0, [pc, #112]	; (801e484 <tcp_write+0x2e4>)
 801e412:	f005 fa1d 	bl	8023850 <iprintf>
          extendlen = seglen;
 801e416:	8bfb      	ldrh	r3, [r7, #30]
 801e418:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801e41a:	e01a      	b.n	801e452 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801e41c:	8bfb      	ldrh	r3, [r7, #30]
 801e41e:	2201      	movs	r2, #1
 801e420:	4619      	mov	r1, r3
 801e422:	2000      	movs	r0, #0
 801e424:	f7fa fe62 	bl	80190ec <pbuf_alloc>
 801e428:	6578      	str	r0, [r7, #84]	; 0x54
 801e42a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	f000 81e0 	beq.w	801e7f2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801e432:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e436:	68ba      	ldr	r2, [r7, #8]
 801e438:	441a      	add	r2, r3
 801e43a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e43c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801e43e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e440:	f7fb f9c6 	bl	80197d0 <pbuf_clen>
 801e444:	4603      	mov	r3, r0
 801e446:	461a      	mov	r2, r3
 801e448:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e44c:	4413      	add	r3, r2
 801e44e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801e452:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e456:	8bfb      	ldrh	r3, [r7, #30]
 801e458:	4413      	add	r3, r2
 801e45a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801e45e:	e0dc      	b.n	801e61a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801e460:	68fb      	ldr	r3, [r7, #12]
 801e462:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801e466:	2b00      	cmp	r3, #0
 801e468:	f000 80d7 	beq.w	801e61a <tcp_write+0x47a>
 801e46c:	4b03      	ldr	r3, [pc, #12]	; (801e47c <tcp_write+0x2dc>)
 801e46e:	f240 224a 	movw	r2, #586	; 0x24a
 801e472:	490a      	ldr	r1, [pc, #40]	; (801e49c <tcp_write+0x2fc>)
 801e474:	4803      	ldr	r0, [pc, #12]	; (801e484 <tcp_write+0x2e4>)
 801e476:	f005 f9eb 	bl	8023850 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801e47a:	e0ce      	b.n	801e61a <tcp_write+0x47a>
 801e47c:	08026df4 	.word	0x08026df4
 801e480:	08026f94 	.word	0x08026f94
 801e484:	08026e48 	.word	0x08026e48
 801e488:	08026fac 	.word	0x08026fac
 801e48c:	08026fe0 	.word	0x08026fe0
 801e490:	08026ff8 	.word	0x08026ff8
 801e494:	08027018 	.word	0x08027018
 801e498:	08027038 	.word	0x08027038
 801e49c:	08027064 	.word	0x08027064
    struct pbuf *p;
    u16_t left = len - pos;
 801e4a0:	88fa      	ldrh	r2, [r7, #6]
 801e4a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e4a6:	1ad3      	subs	r3, r2, r3
 801e4a8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801e4aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e4ae:	b29b      	uxth	r3, r3
 801e4b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e4b2:	1ad3      	subs	r3, r2, r3
 801e4b4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801e4b6:	8b7a      	ldrh	r2, [r7, #26]
 801e4b8:	8bbb      	ldrh	r3, [r7, #28]
 801e4ba:	4293      	cmp	r3, r2
 801e4bc:	bf28      	it	cs
 801e4be:	4613      	movcs	r3, r2
 801e4c0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e4c2:	797b      	ldrb	r3, [r7, #5]
 801e4c4:	f003 0301 	and.w	r3, r3, #1
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	d036      	beq.n	801e53a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801e4cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e4d0:	b29a      	uxth	r2, r3
 801e4d2:	8b3b      	ldrh	r3, [r7, #24]
 801e4d4:	4413      	add	r3, r2
 801e4d6:	b299      	uxth	r1, r3
 801e4d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e4da:	2b00      	cmp	r3, #0
 801e4dc:	bf0c      	ite	eq
 801e4de:	2301      	moveq	r3, #1
 801e4e0:	2300      	movne	r3, #0
 801e4e2:	b2db      	uxtb	r3, r3
 801e4e4:	f107 0012 	add.w	r0, r7, #18
 801e4e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e4ea:	9302      	str	r3, [sp, #8]
 801e4ec:	797b      	ldrb	r3, [r7, #5]
 801e4ee:	9301      	str	r3, [sp, #4]
 801e4f0:	68fb      	ldr	r3, [r7, #12]
 801e4f2:	9300      	str	r3, [sp, #0]
 801e4f4:	4603      	mov	r3, r0
 801e4f6:	2036      	movs	r0, #54	; 0x36
 801e4f8:	f7ff fd5e 	bl	801dfb8 <tcp_pbuf_prealloc>
 801e4fc:	6338      	str	r0, [r7, #48]	; 0x30
 801e4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e500:	2b00      	cmp	r3, #0
 801e502:	f000 8178 	beq.w	801e7f6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801e506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e508:	895b      	ldrh	r3, [r3, #10]
 801e50a:	8b3a      	ldrh	r2, [r7, #24]
 801e50c:	429a      	cmp	r2, r3
 801e50e:	d906      	bls.n	801e51e <tcp_write+0x37e>
 801e510:	4b8c      	ldr	r3, [pc, #560]	; (801e744 <tcp_write+0x5a4>)
 801e512:	f240 2266 	movw	r2, #614	; 0x266
 801e516:	498c      	ldr	r1, [pc, #560]	; (801e748 <tcp_write+0x5a8>)
 801e518:	488c      	ldr	r0, [pc, #560]	; (801e74c <tcp_write+0x5ac>)
 801e51a:	f005 f999 	bl	8023850 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801e51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e520:	685a      	ldr	r2, [r3, #4]
 801e522:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e526:	18d0      	adds	r0, r2, r3
 801e528:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e52c:	68ba      	ldr	r2, [r7, #8]
 801e52e:	4413      	add	r3, r2
 801e530:	8b3a      	ldrh	r2, [r7, #24]
 801e532:	4619      	mov	r1, r3
 801e534:	f005 fa7f 	bl	8023a36 <memcpy>
 801e538:	e02f      	b.n	801e59a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801e53a:	8a7b      	ldrh	r3, [r7, #18]
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	d006      	beq.n	801e54e <tcp_write+0x3ae>
 801e540:	4b80      	ldr	r3, [pc, #512]	; (801e744 <tcp_write+0x5a4>)
 801e542:	f240 2271 	movw	r2, #625	; 0x271
 801e546:	4982      	ldr	r1, [pc, #520]	; (801e750 <tcp_write+0x5b0>)
 801e548:	4880      	ldr	r0, [pc, #512]	; (801e74c <tcp_write+0x5ac>)
 801e54a:	f005 f981 	bl	8023850 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801e54e:	8b3b      	ldrh	r3, [r7, #24]
 801e550:	2201      	movs	r2, #1
 801e552:	4619      	mov	r1, r3
 801e554:	2036      	movs	r0, #54	; 0x36
 801e556:	f7fa fdc9 	bl	80190ec <pbuf_alloc>
 801e55a:	6178      	str	r0, [r7, #20]
 801e55c:	697b      	ldr	r3, [r7, #20]
 801e55e:	2b00      	cmp	r3, #0
 801e560:	f000 814b 	beq.w	801e7fa <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801e564:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e568:	68ba      	ldr	r2, [r7, #8]
 801e56a:	441a      	add	r2, r3
 801e56c:	697b      	ldr	r3, [r7, #20]
 801e56e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e570:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801e574:	b29b      	uxth	r3, r3
 801e576:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e57a:	4619      	mov	r1, r3
 801e57c:	2036      	movs	r0, #54	; 0x36
 801e57e:	f7fa fdb5 	bl	80190ec <pbuf_alloc>
 801e582:	6338      	str	r0, [r7, #48]	; 0x30
 801e584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e586:	2b00      	cmp	r3, #0
 801e588:	d103      	bne.n	801e592 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801e58a:	6978      	ldr	r0, [r7, #20]
 801e58c:	f7fb f892 	bl	80196b4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801e590:	e136      	b.n	801e800 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801e592:	6979      	ldr	r1, [r7, #20]
 801e594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e596:	f7fb f95b 	bl	8019850 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801e59a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e59c:	f7fb f918 	bl	80197d0 <pbuf_clen>
 801e5a0:	4603      	mov	r3, r0
 801e5a2:	461a      	mov	r2, r3
 801e5a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e5a8:	4413      	add	r3, r2
 801e5aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801e5ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e5b2:	2b09      	cmp	r3, #9
 801e5b4:	d903      	bls.n	801e5be <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801e5b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e5b8:	f7fb f87c 	bl	80196b4 <pbuf_free>
      goto memerr;
 801e5bc:	e120      	b.n	801e800 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801e5be:	68fb      	ldr	r3, [r7, #12]
 801e5c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801e5c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e5c6:	441a      	add	r2, r3
 801e5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e5cc:	9300      	str	r3, [sp, #0]
 801e5ce:	4613      	mov	r3, r2
 801e5d0:	2200      	movs	r2, #0
 801e5d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e5d4:	68f8      	ldr	r0, [r7, #12]
 801e5d6:	f7ff fc51 	bl	801de7c <tcp_create_segment>
 801e5da:	64f8      	str	r0, [r7, #76]	; 0x4c
 801e5dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	f000 810d 	beq.w	801e7fe <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801e5e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	d102      	bne.n	801e5f0 <tcp_write+0x450>
      queue = seg;
 801e5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e5ec:	647b      	str	r3, [r7, #68]	; 0x44
 801e5ee:	e00c      	b.n	801e60a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801e5f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e5f2:	2b00      	cmp	r3, #0
 801e5f4:	d106      	bne.n	801e604 <tcp_write+0x464>
 801e5f6:	4b53      	ldr	r3, [pc, #332]	; (801e744 <tcp_write+0x5a4>)
 801e5f8:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e5fc:	4955      	ldr	r1, [pc, #340]	; (801e754 <tcp_write+0x5b4>)
 801e5fe:	4853      	ldr	r0, [pc, #332]	; (801e74c <tcp_write+0x5ac>)
 801e600:	f005 f926 	bl	8023850 <iprintf>
      prev_seg->next = seg;
 801e604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e608:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801e60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e60c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801e60e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e612:	8b3b      	ldrh	r3, [r7, #24]
 801e614:	4413      	add	r3, r2
 801e616:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801e61a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e61e:	88fb      	ldrh	r3, [r7, #6]
 801e620:	429a      	cmp	r2, r3
 801e622:	f4ff af3d 	bcc.w	801e4a0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801e626:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e628:	2b00      	cmp	r3, #0
 801e62a:	d02c      	beq.n	801e686 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801e62c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e62e:	685b      	ldr	r3, [r3, #4]
 801e630:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e632:	e01e      	b.n	801e672 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801e634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e636:	891a      	ldrh	r2, [r3, #8]
 801e638:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e63a:	4413      	add	r3, r2
 801e63c:	b29a      	uxth	r2, r3
 801e63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e640:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801e642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e644:	681b      	ldr	r3, [r3, #0]
 801e646:	2b00      	cmp	r3, #0
 801e648:	d110      	bne.n	801e66c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801e64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e64c:	685b      	ldr	r3, [r3, #4]
 801e64e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e650:	8952      	ldrh	r2, [r2, #10]
 801e652:	4413      	add	r3, r2
 801e654:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e656:	68b9      	ldr	r1, [r7, #8]
 801e658:	4618      	mov	r0, r3
 801e65a:	f005 f9ec 	bl	8023a36 <memcpy>
        p->len += oversize_used;
 801e65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e660:	895a      	ldrh	r2, [r3, #10]
 801e662:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e664:	4413      	add	r3, r2
 801e666:	b29a      	uxth	r2, r3
 801e668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e66a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e66e:	681b      	ldr	r3, [r3, #0]
 801e670:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e674:	2b00      	cmp	r3, #0
 801e676:	d1dd      	bne.n	801e634 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801e678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e67a:	891a      	ldrh	r2, [r3, #8]
 801e67c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e67e:	4413      	add	r3, r2
 801e680:	b29a      	uxth	r2, r3
 801e682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e684:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801e686:	8a7a      	ldrh	r2, [r7, #18]
 801e688:	68fb      	ldr	r3, [r7, #12]
 801e68a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801e68e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e690:	2b00      	cmp	r3, #0
 801e692:	d018      	beq.n	801e6c6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801e694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e696:	2b00      	cmp	r3, #0
 801e698:	d106      	bne.n	801e6a8 <tcp_write+0x508>
 801e69a:	4b2a      	ldr	r3, [pc, #168]	; (801e744 <tcp_write+0x5a4>)
 801e69c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801e6a0:	492d      	ldr	r1, [pc, #180]	; (801e758 <tcp_write+0x5b8>)
 801e6a2:	482a      	ldr	r0, [pc, #168]	; (801e74c <tcp_write+0x5ac>)
 801e6a4:	f005 f8d4 	bl	8023850 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801e6a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e6aa:	685b      	ldr	r3, [r3, #4]
 801e6ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801e6ae:	4618      	mov	r0, r3
 801e6b0:	f7fb f8ce 	bl	8019850 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801e6b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e6b6:	891a      	ldrh	r2, [r3, #8]
 801e6b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e6ba:	891b      	ldrh	r3, [r3, #8]
 801e6bc:	4413      	add	r3, r2
 801e6be:	b29a      	uxth	r2, r3
 801e6c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e6c2:	811a      	strh	r2, [r3, #8]
 801e6c4:	e037      	b.n	801e736 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801e6c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d034      	beq.n	801e736 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801e6cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e6ce:	2b00      	cmp	r3, #0
 801e6d0:	d003      	beq.n	801e6da <tcp_write+0x53a>
 801e6d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e6d4:	685b      	ldr	r3, [r3, #4]
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	d106      	bne.n	801e6e8 <tcp_write+0x548>
 801e6da:	4b1a      	ldr	r3, [pc, #104]	; (801e744 <tcp_write+0x5a4>)
 801e6dc:	f240 22e6 	movw	r2, #742	; 0x2e6
 801e6e0:	491e      	ldr	r1, [pc, #120]	; (801e75c <tcp_write+0x5bc>)
 801e6e2:	481a      	ldr	r0, [pc, #104]	; (801e74c <tcp_write+0x5ac>)
 801e6e4:	f005 f8b4 	bl	8023850 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e6e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e6ea:	685b      	ldr	r3, [r3, #4]
 801e6ec:	62bb      	str	r3, [r7, #40]	; 0x28
 801e6ee:	e009      	b.n	801e704 <tcp_write+0x564>
      p->tot_len += extendlen;
 801e6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6f2:	891a      	ldrh	r2, [r3, #8]
 801e6f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e6f6:	4413      	add	r3, r2
 801e6f8:	b29a      	uxth	r2, r3
 801e6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6fc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	62bb      	str	r3, [r7, #40]	; 0x28
 801e704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	2b00      	cmp	r3, #0
 801e70a:	d1f1      	bne.n	801e6f0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801e70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e70e:	891a      	ldrh	r2, [r3, #8]
 801e710:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e712:	4413      	add	r3, r2
 801e714:	b29a      	uxth	r2, r3
 801e716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e718:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801e71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e71c:	895a      	ldrh	r2, [r3, #10]
 801e71e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e720:	4413      	add	r3, r2
 801e722:	b29a      	uxth	r2, r3
 801e724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e726:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801e728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e72a:	891a      	ldrh	r2, [r3, #8]
 801e72c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e72e:	4413      	add	r3, r2
 801e730:	b29a      	uxth	r2, r3
 801e732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e734:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801e736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e738:	2b00      	cmp	r3, #0
 801e73a:	d111      	bne.n	801e760 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801e73c:	68fb      	ldr	r3, [r7, #12]
 801e73e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e740:	66da      	str	r2, [r3, #108]	; 0x6c
 801e742:	e010      	b.n	801e766 <tcp_write+0x5c6>
 801e744:	08026df4 	.word	0x08026df4
 801e748:	08027094 	.word	0x08027094
 801e74c:	08026e48 	.word	0x08026e48
 801e750:	080270d4 	.word	0x080270d4
 801e754:	080270e4 	.word	0x080270e4
 801e758:	080270f8 	.word	0x080270f8
 801e75c:	08027130 	.word	0x08027130
  } else {
    last_unsent->next = queue;
 801e760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e764:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801e766:	68fb      	ldr	r3, [r7, #12]
 801e768:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801e76a:	88fb      	ldrh	r3, [r7, #6]
 801e76c:	441a      	add	r2, r3
 801e76e:	68fb      	ldr	r3, [r7, #12]
 801e770:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801e772:	68fb      	ldr	r3, [r7, #12]
 801e774:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801e778:	88fb      	ldrh	r3, [r7, #6]
 801e77a:	1ad3      	subs	r3, r2, r3
 801e77c:	b29a      	uxth	r2, r3
 801e77e:	68fb      	ldr	r3, [r7, #12]
 801e780:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801e784:	68fb      	ldr	r3, [r7, #12]
 801e786:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801e78a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e78e:	68fb      	ldr	r3, [r7, #12]
 801e790:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e794:	2b00      	cmp	r3, #0
 801e796:	d00e      	beq.n	801e7b6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801e798:	68fb      	ldr	r3, [r7, #12]
 801e79a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e79c:	2b00      	cmp	r3, #0
 801e79e:	d10a      	bne.n	801e7b6 <tcp_write+0x616>
 801e7a0:	68fb      	ldr	r3, [r7, #12]
 801e7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d106      	bne.n	801e7b6 <tcp_write+0x616>
 801e7a8:	4b2c      	ldr	r3, [pc, #176]	; (801e85c <tcp_write+0x6bc>)
 801e7aa:	f240 3212 	movw	r2, #786	; 0x312
 801e7ae:	492c      	ldr	r1, [pc, #176]	; (801e860 <tcp_write+0x6c0>)
 801e7b0:	482c      	ldr	r0, [pc, #176]	; (801e864 <tcp_write+0x6c4>)
 801e7b2:	f005 f84d 	bl	8023850 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801e7b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e7b8:	2b00      	cmp	r3, #0
 801e7ba:	d016      	beq.n	801e7ea <tcp_write+0x64a>
 801e7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e7be:	68db      	ldr	r3, [r3, #12]
 801e7c0:	2b00      	cmp	r3, #0
 801e7c2:	d012      	beq.n	801e7ea <tcp_write+0x64a>
 801e7c4:	797b      	ldrb	r3, [r7, #5]
 801e7c6:	f003 0302 	and.w	r3, r3, #2
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	d10d      	bne.n	801e7ea <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801e7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e7d0:	68db      	ldr	r3, [r3, #12]
 801e7d2:	899b      	ldrh	r3, [r3, #12]
 801e7d4:	b29c      	uxth	r4, r3
 801e7d6:	2008      	movs	r0, #8
 801e7d8:	f7f9 fb7a 	bl	8017ed0 <lwip_htons>
 801e7dc:	4603      	mov	r3, r0
 801e7de:	461a      	mov	r2, r3
 801e7e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e7e2:	68db      	ldr	r3, [r3, #12]
 801e7e4:	4322      	orrs	r2, r4
 801e7e6:	b292      	uxth	r2, r2
 801e7e8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801e7ea:	2300      	movs	r3, #0
 801e7ec:	e031      	b.n	801e852 <tcp_write+0x6b2>
          goto memerr;
 801e7ee:	bf00      	nop
 801e7f0:	e006      	b.n	801e800 <tcp_write+0x660>
            goto memerr;
 801e7f2:	bf00      	nop
 801e7f4:	e004      	b.n	801e800 <tcp_write+0x660>
        goto memerr;
 801e7f6:	bf00      	nop
 801e7f8:	e002      	b.n	801e800 <tcp_write+0x660>
        goto memerr;
 801e7fa:	bf00      	nop
 801e7fc:	e000      	b.n	801e800 <tcp_write+0x660>
      goto memerr;
 801e7fe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e800:	68fb      	ldr	r3, [r7, #12]
 801e802:	8b5b      	ldrh	r3, [r3, #26]
 801e804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e808:	b29a      	uxth	r2, r3
 801e80a:	68fb      	ldr	r3, [r7, #12]
 801e80c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801e80e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e810:	2b00      	cmp	r3, #0
 801e812:	d002      	beq.n	801e81a <tcp_write+0x67a>
    pbuf_free(concat_p);
 801e814:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e816:	f7fa ff4d 	bl	80196b4 <pbuf_free>
  }
  if (queue != NULL) {
 801e81a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	d002      	beq.n	801e826 <tcp_write+0x686>
    tcp_segs_free(queue);
 801e820:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801e822:	f7fc fb6b 	bl	801aefc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801e826:	68fb      	ldr	r3, [r7, #12]
 801e828:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	d00e      	beq.n	801e84e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e834:	2b00      	cmp	r3, #0
 801e836:	d10a      	bne.n	801e84e <tcp_write+0x6ae>
 801e838:	68fb      	ldr	r3, [r7, #12]
 801e83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e83c:	2b00      	cmp	r3, #0
 801e83e:	d106      	bne.n	801e84e <tcp_write+0x6ae>
 801e840:	4b06      	ldr	r3, [pc, #24]	; (801e85c <tcp_write+0x6bc>)
 801e842:	f240 3227 	movw	r2, #807	; 0x327
 801e846:	4906      	ldr	r1, [pc, #24]	; (801e860 <tcp_write+0x6c0>)
 801e848:	4806      	ldr	r0, [pc, #24]	; (801e864 <tcp_write+0x6c4>)
 801e84a:	f005 f801 	bl	8023850 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801e84e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801e852:	4618      	mov	r0, r3
 801e854:	375c      	adds	r7, #92	; 0x5c
 801e856:	46bd      	mov	sp, r7
 801e858:	bd90      	pop	{r4, r7, pc}
 801e85a:	bf00      	nop
 801e85c:	08026df4 	.word	0x08026df4
 801e860:	08027168 	.word	0x08027168
 801e864:	08026e48 	.word	0x08026e48

0801e868 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801e868:	b590      	push	{r4, r7, lr}
 801e86a:	b08b      	sub	sp, #44	; 0x2c
 801e86c:	af02      	add	r7, sp, #8
 801e86e:	6078      	str	r0, [r7, #4]
 801e870:	460b      	mov	r3, r1
 801e872:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801e874:	2300      	movs	r3, #0
 801e876:	61fb      	str	r3, [r7, #28]
 801e878:	2300      	movs	r3, #0
 801e87a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801e87c:	2300      	movs	r3, #0
 801e87e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801e880:	687b      	ldr	r3, [r7, #4]
 801e882:	2b00      	cmp	r3, #0
 801e884:	d106      	bne.n	801e894 <tcp_split_unsent_seg+0x2c>
 801e886:	4b95      	ldr	r3, [pc, #596]	; (801eadc <tcp_split_unsent_seg+0x274>)
 801e888:	f240 324b 	movw	r2, #843	; 0x34b
 801e88c:	4994      	ldr	r1, [pc, #592]	; (801eae0 <tcp_split_unsent_seg+0x278>)
 801e88e:	4895      	ldr	r0, [pc, #596]	; (801eae4 <tcp_split_unsent_seg+0x27c>)
 801e890:	f004 ffde 	bl	8023850 <iprintf>

  useg = pcb->unsent;
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e898:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801e89a:	697b      	ldr	r3, [r7, #20]
 801e89c:	2b00      	cmp	r3, #0
 801e89e:	d102      	bne.n	801e8a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801e8a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e8a4:	e116      	b.n	801ead4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801e8a6:	887b      	ldrh	r3, [r7, #2]
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	d109      	bne.n	801e8c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801e8ac:	4b8b      	ldr	r3, [pc, #556]	; (801eadc <tcp_split_unsent_seg+0x274>)
 801e8ae:	f240 3253 	movw	r2, #851	; 0x353
 801e8b2:	498d      	ldr	r1, [pc, #564]	; (801eae8 <tcp_split_unsent_seg+0x280>)
 801e8b4:	488b      	ldr	r0, [pc, #556]	; (801eae4 <tcp_split_unsent_seg+0x27c>)
 801e8b6:	f004 ffcb 	bl	8023850 <iprintf>
    return ERR_VAL;
 801e8ba:	f06f 0305 	mvn.w	r3, #5
 801e8be:	e109      	b.n	801ead4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801e8c0:	697b      	ldr	r3, [r7, #20]
 801e8c2:	891b      	ldrh	r3, [r3, #8]
 801e8c4:	887a      	ldrh	r2, [r7, #2]
 801e8c6:	429a      	cmp	r2, r3
 801e8c8:	d301      	bcc.n	801e8ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801e8ca:	2300      	movs	r3, #0
 801e8cc:	e102      	b.n	801ead4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e8d2:	887a      	ldrh	r2, [r7, #2]
 801e8d4:	429a      	cmp	r2, r3
 801e8d6:	d906      	bls.n	801e8e6 <tcp_split_unsent_seg+0x7e>
 801e8d8:	4b80      	ldr	r3, [pc, #512]	; (801eadc <tcp_split_unsent_seg+0x274>)
 801e8da:	f240 325b 	movw	r2, #859	; 0x35b
 801e8de:	4983      	ldr	r1, [pc, #524]	; (801eaec <tcp_split_unsent_seg+0x284>)
 801e8e0:	4880      	ldr	r0, [pc, #512]	; (801eae4 <tcp_split_unsent_seg+0x27c>)
 801e8e2:	f004 ffb5 	bl	8023850 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801e8e6:	697b      	ldr	r3, [r7, #20]
 801e8e8:	891b      	ldrh	r3, [r3, #8]
 801e8ea:	2b00      	cmp	r3, #0
 801e8ec:	d106      	bne.n	801e8fc <tcp_split_unsent_seg+0x94>
 801e8ee:	4b7b      	ldr	r3, [pc, #492]	; (801eadc <tcp_split_unsent_seg+0x274>)
 801e8f0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801e8f4:	497e      	ldr	r1, [pc, #504]	; (801eaf0 <tcp_split_unsent_seg+0x288>)
 801e8f6:	487b      	ldr	r0, [pc, #492]	; (801eae4 <tcp_split_unsent_seg+0x27c>)
 801e8f8:	f004 ffaa 	bl	8023850 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801e8fc:	697b      	ldr	r3, [r7, #20]
 801e8fe:	7a9b      	ldrb	r3, [r3, #10]
 801e900:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801e902:	7bfb      	ldrb	r3, [r7, #15]
 801e904:	009b      	lsls	r3, r3, #2
 801e906:	b2db      	uxtb	r3, r3
 801e908:	f003 0304 	and.w	r3, r3, #4
 801e90c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801e90e:	697b      	ldr	r3, [r7, #20]
 801e910:	891a      	ldrh	r2, [r3, #8]
 801e912:	887b      	ldrh	r3, [r7, #2]
 801e914:	1ad3      	subs	r3, r2, r3
 801e916:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801e918:	7bbb      	ldrb	r3, [r7, #14]
 801e91a:	b29a      	uxth	r2, r3
 801e91c:	89bb      	ldrh	r3, [r7, #12]
 801e91e:	4413      	add	r3, r2
 801e920:	b29b      	uxth	r3, r3
 801e922:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e926:	4619      	mov	r1, r3
 801e928:	2036      	movs	r0, #54	; 0x36
 801e92a:	f7fa fbdf 	bl	80190ec <pbuf_alloc>
 801e92e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e930:	693b      	ldr	r3, [r7, #16]
 801e932:	2b00      	cmp	r3, #0
 801e934:	f000 80b7 	beq.w	801eaa6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801e938:	697b      	ldr	r3, [r7, #20]
 801e93a:	685b      	ldr	r3, [r3, #4]
 801e93c:	891a      	ldrh	r2, [r3, #8]
 801e93e:	697b      	ldr	r3, [r7, #20]
 801e940:	891b      	ldrh	r3, [r3, #8]
 801e942:	1ad3      	subs	r3, r2, r3
 801e944:	b29a      	uxth	r2, r3
 801e946:	887b      	ldrh	r3, [r7, #2]
 801e948:	4413      	add	r3, r2
 801e94a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801e94c:	697b      	ldr	r3, [r7, #20]
 801e94e:	6858      	ldr	r0, [r3, #4]
 801e950:	693b      	ldr	r3, [r7, #16]
 801e952:	685a      	ldr	r2, [r3, #4]
 801e954:	7bbb      	ldrb	r3, [r7, #14]
 801e956:	18d1      	adds	r1, r2, r3
 801e958:	897b      	ldrh	r3, [r7, #10]
 801e95a:	89ba      	ldrh	r2, [r7, #12]
 801e95c:	f7fb f8a0 	bl	8019aa0 <pbuf_copy_partial>
 801e960:	4603      	mov	r3, r0
 801e962:	461a      	mov	r2, r3
 801e964:	89bb      	ldrh	r3, [r7, #12]
 801e966:	4293      	cmp	r3, r2
 801e968:	f040 809f 	bne.w	801eaaa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801e96c:	697b      	ldr	r3, [r7, #20]
 801e96e:	68db      	ldr	r3, [r3, #12]
 801e970:	899b      	ldrh	r3, [r3, #12]
 801e972:	b29b      	uxth	r3, r3
 801e974:	4618      	mov	r0, r3
 801e976:	f7f9 faab 	bl	8017ed0 <lwip_htons>
 801e97a:	4603      	mov	r3, r0
 801e97c:	b2db      	uxtb	r3, r3
 801e97e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e982:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801e984:	2300      	movs	r3, #0
 801e986:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801e988:	7efb      	ldrb	r3, [r7, #27]
 801e98a:	f003 0308 	and.w	r3, r3, #8
 801e98e:	2b00      	cmp	r3, #0
 801e990:	d007      	beq.n	801e9a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801e992:	7efb      	ldrb	r3, [r7, #27]
 801e994:	f023 0308 	bic.w	r3, r3, #8
 801e998:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801e99a:	7ebb      	ldrb	r3, [r7, #26]
 801e99c:	f043 0308 	orr.w	r3, r3, #8
 801e9a0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801e9a2:	7efb      	ldrb	r3, [r7, #27]
 801e9a4:	f003 0301 	and.w	r3, r3, #1
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	d007      	beq.n	801e9bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801e9ac:	7efb      	ldrb	r3, [r7, #27]
 801e9ae:	f023 0301 	bic.w	r3, r3, #1
 801e9b2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801e9b4:	7ebb      	ldrb	r3, [r7, #26]
 801e9b6:	f043 0301 	orr.w	r3, r3, #1
 801e9ba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801e9bc:	697b      	ldr	r3, [r7, #20]
 801e9be:	68db      	ldr	r3, [r3, #12]
 801e9c0:	685b      	ldr	r3, [r3, #4]
 801e9c2:	4618      	mov	r0, r3
 801e9c4:	f7f9 fa99 	bl	8017efa <lwip_htonl>
 801e9c8:	4602      	mov	r2, r0
 801e9ca:	887b      	ldrh	r3, [r7, #2]
 801e9cc:	18d1      	adds	r1, r2, r3
 801e9ce:	7eba      	ldrb	r2, [r7, #26]
 801e9d0:	7bfb      	ldrb	r3, [r7, #15]
 801e9d2:	9300      	str	r3, [sp, #0]
 801e9d4:	460b      	mov	r3, r1
 801e9d6:	6939      	ldr	r1, [r7, #16]
 801e9d8:	6878      	ldr	r0, [r7, #4]
 801e9da:	f7ff fa4f 	bl	801de7c <tcp_create_segment>
 801e9de:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801e9e0:	69fb      	ldr	r3, [r7, #28]
 801e9e2:	2b00      	cmp	r3, #0
 801e9e4:	d063      	beq.n	801eaae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801e9e6:	697b      	ldr	r3, [r7, #20]
 801e9e8:	685b      	ldr	r3, [r3, #4]
 801e9ea:	4618      	mov	r0, r3
 801e9ec:	f7fa fef0 	bl	80197d0 <pbuf_clen>
 801e9f0:	4603      	mov	r3, r0
 801e9f2:	461a      	mov	r2, r3
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e9fa:	1a9b      	subs	r3, r3, r2
 801e9fc:	b29a      	uxth	r2, r3
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ea04:	697b      	ldr	r3, [r7, #20]
 801ea06:	6858      	ldr	r0, [r3, #4]
 801ea08:	697b      	ldr	r3, [r7, #20]
 801ea0a:	685b      	ldr	r3, [r3, #4]
 801ea0c:	891a      	ldrh	r2, [r3, #8]
 801ea0e:	89bb      	ldrh	r3, [r7, #12]
 801ea10:	1ad3      	subs	r3, r2, r3
 801ea12:	b29b      	uxth	r3, r3
 801ea14:	4619      	mov	r1, r3
 801ea16:	f7fa fcc7 	bl	80193a8 <pbuf_realloc>
  useg->len -= remainder;
 801ea1a:	697b      	ldr	r3, [r7, #20]
 801ea1c:	891a      	ldrh	r2, [r3, #8]
 801ea1e:	89bb      	ldrh	r3, [r7, #12]
 801ea20:	1ad3      	subs	r3, r2, r3
 801ea22:	b29a      	uxth	r2, r3
 801ea24:	697b      	ldr	r3, [r7, #20]
 801ea26:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ea28:	697b      	ldr	r3, [r7, #20]
 801ea2a:	68db      	ldr	r3, [r3, #12]
 801ea2c:	899b      	ldrh	r3, [r3, #12]
 801ea2e:	b29c      	uxth	r4, r3
 801ea30:	7efb      	ldrb	r3, [r7, #27]
 801ea32:	b29b      	uxth	r3, r3
 801ea34:	4618      	mov	r0, r3
 801ea36:	f7f9 fa4b 	bl	8017ed0 <lwip_htons>
 801ea3a:	4603      	mov	r3, r0
 801ea3c:	461a      	mov	r2, r3
 801ea3e:	697b      	ldr	r3, [r7, #20]
 801ea40:	68db      	ldr	r3, [r3, #12]
 801ea42:	4322      	orrs	r2, r4
 801ea44:	b292      	uxth	r2, r2
 801ea46:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ea48:	697b      	ldr	r3, [r7, #20]
 801ea4a:	685b      	ldr	r3, [r3, #4]
 801ea4c:	4618      	mov	r0, r3
 801ea4e:	f7fa febf 	bl	80197d0 <pbuf_clen>
 801ea52:	4603      	mov	r3, r0
 801ea54:	461a      	mov	r2, r3
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ea5c:	4413      	add	r3, r2
 801ea5e:	b29a      	uxth	r2, r3
 801ea60:	687b      	ldr	r3, [r7, #4]
 801ea62:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ea66:	69fb      	ldr	r3, [r7, #28]
 801ea68:	685b      	ldr	r3, [r3, #4]
 801ea6a:	4618      	mov	r0, r3
 801ea6c:	f7fa feb0 	bl	80197d0 <pbuf_clen>
 801ea70:	4603      	mov	r3, r0
 801ea72:	461a      	mov	r2, r3
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ea7a:	4413      	add	r3, r2
 801ea7c:	b29a      	uxth	r2, r3
 801ea7e:	687b      	ldr	r3, [r7, #4]
 801ea80:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801ea84:	697b      	ldr	r3, [r7, #20]
 801ea86:	681a      	ldr	r2, [r3, #0]
 801ea88:	69fb      	ldr	r3, [r7, #28]
 801ea8a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801ea8c:	697b      	ldr	r3, [r7, #20]
 801ea8e:	69fa      	ldr	r2, [r7, #28]
 801ea90:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801ea92:	69fb      	ldr	r3, [r7, #28]
 801ea94:	681b      	ldr	r3, [r3, #0]
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	d103      	bne.n	801eaa2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801ea9a:	687b      	ldr	r3, [r7, #4]
 801ea9c:	2200      	movs	r2, #0
 801ea9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801eaa2:	2300      	movs	r3, #0
 801eaa4:	e016      	b.n	801ead4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801eaa6:	bf00      	nop
 801eaa8:	e002      	b.n	801eab0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801eaaa:	bf00      	nop
 801eaac:	e000      	b.n	801eab0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801eaae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801eab0:	69fb      	ldr	r3, [r7, #28]
 801eab2:	2b00      	cmp	r3, #0
 801eab4:	d006      	beq.n	801eac4 <tcp_split_unsent_seg+0x25c>
 801eab6:	4b09      	ldr	r3, [pc, #36]	; (801eadc <tcp_split_unsent_seg+0x274>)
 801eab8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801eabc:	490d      	ldr	r1, [pc, #52]	; (801eaf4 <tcp_split_unsent_seg+0x28c>)
 801eabe:	4809      	ldr	r0, [pc, #36]	; (801eae4 <tcp_split_unsent_seg+0x27c>)
 801eac0:	f004 fec6 	bl	8023850 <iprintf>
  if (p != NULL) {
 801eac4:	693b      	ldr	r3, [r7, #16]
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	d002      	beq.n	801ead0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801eaca:	6938      	ldr	r0, [r7, #16]
 801eacc:	f7fa fdf2 	bl	80196b4 <pbuf_free>
  }

  return ERR_MEM;
 801ead0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801ead4:	4618      	mov	r0, r3
 801ead6:	3724      	adds	r7, #36	; 0x24
 801ead8:	46bd      	mov	sp, r7
 801eada:	bd90      	pop	{r4, r7, pc}
 801eadc:	08026df4 	.word	0x08026df4
 801eae0:	08027188 	.word	0x08027188
 801eae4:	08026e48 	.word	0x08026e48
 801eae8:	080271ac 	.word	0x080271ac
 801eaec:	080271d0 	.word	0x080271d0
 801eaf0:	080271e0 	.word	0x080271e0
 801eaf4:	080271f0 	.word	0x080271f0

0801eaf8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801eaf8:	b590      	push	{r4, r7, lr}
 801eafa:	b085      	sub	sp, #20
 801eafc:	af00      	add	r7, sp, #0
 801eafe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	d106      	bne.n	801eb14 <tcp_send_fin+0x1c>
 801eb06:	4b21      	ldr	r3, [pc, #132]	; (801eb8c <tcp_send_fin+0x94>)
 801eb08:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801eb0c:	4920      	ldr	r1, [pc, #128]	; (801eb90 <tcp_send_fin+0x98>)
 801eb0e:	4821      	ldr	r0, [pc, #132]	; (801eb94 <tcp_send_fin+0x9c>)
 801eb10:	f004 fe9e 	bl	8023850 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801eb18:	2b00      	cmp	r3, #0
 801eb1a:	d02e      	beq.n	801eb7a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801eb20:	60fb      	str	r3, [r7, #12]
 801eb22:	e002      	b.n	801eb2a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801eb24:	68fb      	ldr	r3, [r7, #12]
 801eb26:	681b      	ldr	r3, [r3, #0]
 801eb28:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801eb2a:	68fb      	ldr	r3, [r7, #12]
 801eb2c:	681b      	ldr	r3, [r3, #0]
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	d1f8      	bne.n	801eb24 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801eb32:	68fb      	ldr	r3, [r7, #12]
 801eb34:	68db      	ldr	r3, [r3, #12]
 801eb36:	899b      	ldrh	r3, [r3, #12]
 801eb38:	b29b      	uxth	r3, r3
 801eb3a:	4618      	mov	r0, r3
 801eb3c:	f7f9 f9c8 	bl	8017ed0 <lwip_htons>
 801eb40:	4603      	mov	r3, r0
 801eb42:	b2db      	uxtb	r3, r3
 801eb44:	f003 0307 	and.w	r3, r3, #7
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d116      	bne.n	801eb7a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801eb4c:	68fb      	ldr	r3, [r7, #12]
 801eb4e:	68db      	ldr	r3, [r3, #12]
 801eb50:	899b      	ldrh	r3, [r3, #12]
 801eb52:	b29c      	uxth	r4, r3
 801eb54:	2001      	movs	r0, #1
 801eb56:	f7f9 f9bb 	bl	8017ed0 <lwip_htons>
 801eb5a:	4603      	mov	r3, r0
 801eb5c:	461a      	mov	r2, r3
 801eb5e:	68fb      	ldr	r3, [r7, #12]
 801eb60:	68db      	ldr	r3, [r3, #12]
 801eb62:	4322      	orrs	r2, r4
 801eb64:	b292      	uxth	r2, r2
 801eb66:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	8b5b      	ldrh	r3, [r3, #26]
 801eb6c:	f043 0320 	orr.w	r3, r3, #32
 801eb70:	b29a      	uxth	r2, r3
 801eb72:	687b      	ldr	r3, [r7, #4]
 801eb74:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801eb76:	2300      	movs	r3, #0
 801eb78:	e004      	b.n	801eb84 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801eb7a:	2101      	movs	r1, #1
 801eb7c:	6878      	ldr	r0, [r7, #4]
 801eb7e:	f000 f80b 	bl	801eb98 <tcp_enqueue_flags>
 801eb82:	4603      	mov	r3, r0
}
 801eb84:	4618      	mov	r0, r3
 801eb86:	3714      	adds	r7, #20
 801eb88:	46bd      	mov	sp, r7
 801eb8a:	bd90      	pop	{r4, r7, pc}
 801eb8c:	08026df4 	.word	0x08026df4
 801eb90:	080271fc 	.word	0x080271fc
 801eb94:	08026e48 	.word	0x08026e48

0801eb98 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801eb98:	b580      	push	{r7, lr}
 801eb9a:	b08a      	sub	sp, #40	; 0x28
 801eb9c:	af02      	add	r7, sp, #8
 801eb9e:	6078      	str	r0, [r7, #4]
 801eba0:	460b      	mov	r3, r1
 801eba2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801eba4:	2300      	movs	r3, #0
 801eba6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801eba8:	2300      	movs	r3, #0
 801ebaa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ebac:	78fb      	ldrb	r3, [r7, #3]
 801ebae:	f003 0303 	and.w	r3, r3, #3
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d106      	bne.n	801ebc4 <tcp_enqueue_flags+0x2c>
 801ebb6:	4b67      	ldr	r3, [pc, #412]	; (801ed54 <tcp_enqueue_flags+0x1bc>)
 801ebb8:	f240 4211 	movw	r2, #1041	; 0x411
 801ebbc:	4966      	ldr	r1, [pc, #408]	; (801ed58 <tcp_enqueue_flags+0x1c0>)
 801ebbe:	4867      	ldr	r0, [pc, #412]	; (801ed5c <tcp_enqueue_flags+0x1c4>)
 801ebc0:	f004 fe46 	bl	8023850 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	d106      	bne.n	801ebd8 <tcp_enqueue_flags+0x40>
 801ebca:	4b62      	ldr	r3, [pc, #392]	; (801ed54 <tcp_enqueue_flags+0x1bc>)
 801ebcc:	f240 4213 	movw	r2, #1043	; 0x413
 801ebd0:	4963      	ldr	r1, [pc, #396]	; (801ed60 <tcp_enqueue_flags+0x1c8>)
 801ebd2:	4862      	ldr	r0, [pc, #392]	; (801ed5c <tcp_enqueue_flags+0x1c4>)
 801ebd4:	f004 fe3c 	bl	8023850 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801ebd8:	78fb      	ldrb	r3, [r7, #3]
 801ebda:	f003 0302 	and.w	r3, r3, #2
 801ebde:	2b00      	cmp	r3, #0
 801ebe0:	d001      	beq.n	801ebe6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801ebe2:	2301      	movs	r3, #1
 801ebe4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ebe6:	7ffb      	ldrb	r3, [r7, #31]
 801ebe8:	009b      	lsls	r3, r3, #2
 801ebea:	b2db      	uxtb	r3, r3
 801ebec:	f003 0304 	and.w	r3, r3, #4
 801ebf0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ebf2:	7dfb      	ldrb	r3, [r7, #23]
 801ebf4:	b29b      	uxth	r3, r3
 801ebf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ebfa:	4619      	mov	r1, r3
 801ebfc:	2036      	movs	r0, #54	; 0x36
 801ebfe:	f7fa fa75 	bl	80190ec <pbuf_alloc>
 801ec02:	6138      	str	r0, [r7, #16]
 801ec04:	693b      	ldr	r3, [r7, #16]
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d109      	bne.n	801ec1e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ec0a:	687b      	ldr	r3, [r7, #4]
 801ec0c:	8b5b      	ldrh	r3, [r3, #26]
 801ec0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ec12:	b29a      	uxth	r2, r3
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ec18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ec1c:	e095      	b.n	801ed4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ec1e:	693b      	ldr	r3, [r7, #16]
 801ec20:	895a      	ldrh	r2, [r3, #10]
 801ec22:	7dfb      	ldrb	r3, [r7, #23]
 801ec24:	b29b      	uxth	r3, r3
 801ec26:	429a      	cmp	r2, r3
 801ec28:	d206      	bcs.n	801ec38 <tcp_enqueue_flags+0xa0>
 801ec2a:	4b4a      	ldr	r3, [pc, #296]	; (801ed54 <tcp_enqueue_flags+0x1bc>)
 801ec2c:	f240 4239 	movw	r2, #1081	; 0x439
 801ec30:	494c      	ldr	r1, [pc, #304]	; (801ed64 <tcp_enqueue_flags+0x1cc>)
 801ec32:	484a      	ldr	r0, [pc, #296]	; (801ed5c <tcp_enqueue_flags+0x1c4>)
 801ec34:	f004 fe0c 	bl	8023850 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801ec3c:	78fa      	ldrb	r2, [r7, #3]
 801ec3e:	7ffb      	ldrb	r3, [r7, #31]
 801ec40:	9300      	str	r3, [sp, #0]
 801ec42:	460b      	mov	r3, r1
 801ec44:	6939      	ldr	r1, [r7, #16]
 801ec46:	6878      	ldr	r0, [r7, #4]
 801ec48:	f7ff f918 	bl	801de7c <tcp_create_segment>
 801ec4c:	60f8      	str	r0, [r7, #12]
 801ec4e:	68fb      	ldr	r3, [r7, #12]
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d109      	bne.n	801ec68 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	8b5b      	ldrh	r3, [r3, #26]
 801ec58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ec5c:	b29a      	uxth	r2, r3
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ec62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ec66:	e070      	b.n	801ed4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ec68:	68fb      	ldr	r3, [r7, #12]
 801ec6a:	68db      	ldr	r3, [r3, #12]
 801ec6c:	f003 0303 	and.w	r3, r3, #3
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	d006      	beq.n	801ec82 <tcp_enqueue_flags+0xea>
 801ec74:	4b37      	ldr	r3, [pc, #220]	; (801ed54 <tcp_enqueue_flags+0x1bc>)
 801ec76:	f240 4242 	movw	r2, #1090	; 0x442
 801ec7a:	493b      	ldr	r1, [pc, #236]	; (801ed68 <tcp_enqueue_flags+0x1d0>)
 801ec7c:	4837      	ldr	r0, [pc, #220]	; (801ed5c <tcp_enqueue_flags+0x1c4>)
 801ec7e:	f004 fde7 	bl	8023850 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ec82:	68fb      	ldr	r3, [r7, #12]
 801ec84:	891b      	ldrh	r3, [r3, #8]
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	d006      	beq.n	801ec98 <tcp_enqueue_flags+0x100>
 801ec8a:	4b32      	ldr	r3, [pc, #200]	; (801ed54 <tcp_enqueue_flags+0x1bc>)
 801ec8c:	f240 4243 	movw	r2, #1091	; 0x443
 801ec90:	4936      	ldr	r1, [pc, #216]	; (801ed6c <tcp_enqueue_flags+0x1d4>)
 801ec92:	4832      	ldr	r0, [pc, #200]	; (801ed5c <tcp_enqueue_flags+0x1c4>)
 801ec94:	f004 fddc 	bl	8023850 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801ec98:	687b      	ldr	r3, [r7, #4]
 801ec9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	d103      	bne.n	801eca8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	68fa      	ldr	r2, [r7, #12]
 801eca4:	66da      	str	r2, [r3, #108]	; 0x6c
 801eca6:	e00d      	b.n	801ecc4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ecac:	61bb      	str	r3, [r7, #24]
 801ecae:	e002      	b.n	801ecb6 <tcp_enqueue_flags+0x11e>
 801ecb0:	69bb      	ldr	r3, [r7, #24]
 801ecb2:	681b      	ldr	r3, [r3, #0]
 801ecb4:	61bb      	str	r3, [r7, #24]
 801ecb6:	69bb      	ldr	r3, [r7, #24]
 801ecb8:	681b      	ldr	r3, [r3, #0]
 801ecba:	2b00      	cmp	r3, #0
 801ecbc:	d1f8      	bne.n	801ecb0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801ecbe:	69bb      	ldr	r3, [r7, #24]
 801ecc0:	68fa      	ldr	r2, [r7, #12]
 801ecc2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801ecc4:	687b      	ldr	r3, [r7, #4]
 801ecc6:	2200      	movs	r2, #0
 801ecc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801eccc:	78fb      	ldrb	r3, [r7, #3]
 801ecce:	f003 0302 	and.w	r3, r3, #2
 801ecd2:	2b00      	cmp	r3, #0
 801ecd4:	d104      	bne.n	801ece0 <tcp_enqueue_flags+0x148>
 801ecd6:	78fb      	ldrb	r3, [r7, #3]
 801ecd8:	f003 0301 	and.w	r3, r3, #1
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d004      	beq.n	801ecea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801ece0:	687b      	ldr	r3, [r7, #4]
 801ece2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ece4:	1c5a      	adds	r2, r3, #1
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801ecea:	78fb      	ldrb	r3, [r7, #3]
 801ecec:	f003 0301 	and.w	r3, r3, #1
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	d006      	beq.n	801ed02 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801ecf4:	687b      	ldr	r3, [r7, #4]
 801ecf6:	8b5b      	ldrh	r3, [r3, #26]
 801ecf8:	f043 0320 	orr.w	r3, r3, #32
 801ecfc:	b29a      	uxth	r2, r3
 801ecfe:	687b      	ldr	r3, [r7, #4]
 801ed00:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ed02:	68fb      	ldr	r3, [r7, #12]
 801ed04:	685b      	ldr	r3, [r3, #4]
 801ed06:	4618      	mov	r0, r3
 801ed08:	f7fa fd62 	bl	80197d0 <pbuf_clen>
 801ed0c:	4603      	mov	r3, r0
 801ed0e:	461a      	mov	r2, r3
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ed16:	4413      	add	r3, r2
 801ed18:	b29a      	uxth	r2, r3
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ed26:	2b00      	cmp	r3, #0
 801ed28:	d00e      	beq.n	801ed48 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ed2e:	2b00      	cmp	r3, #0
 801ed30:	d10a      	bne.n	801ed48 <tcp_enqueue_flags+0x1b0>
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ed36:	2b00      	cmp	r3, #0
 801ed38:	d106      	bne.n	801ed48 <tcp_enqueue_flags+0x1b0>
 801ed3a:	4b06      	ldr	r3, [pc, #24]	; (801ed54 <tcp_enqueue_flags+0x1bc>)
 801ed3c:	f240 4265 	movw	r2, #1125	; 0x465
 801ed40:	490b      	ldr	r1, [pc, #44]	; (801ed70 <tcp_enqueue_flags+0x1d8>)
 801ed42:	4806      	ldr	r0, [pc, #24]	; (801ed5c <tcp_enqueue_flags+0x1c4>)
 801ed44:	f004 fd84 	bl	8023850 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801ed48:	2300      	movs	r3, #0
}
 801ed4a:	4618      	mov	r0, r3
 801ed4c:	3720      	adds	r7, #32
 801ed4e:	46bd      	mov	sp, r7
 801ed50:	bd80      	pop	{r7, pc}
 801ed52:	bf00      	nop
 801ed54:	08026df4 	.word	0x08026df4
 801ed58:	08027218 	.word	0x08027218
 801ed5c:	08026e48 	.word	0x08026e48
 801ed60:	08027270 	.word	0x08027270
 801ed64:	08027290 	.word	0x08027290
 801ed68:	080272cc 	.word	0x080272cc
 801ed6c:	080272e4 	.word	0x080272e4
 801ed70:	08027310 	.word	0x08027310

0801ed74 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801ed74:	b5b0      	push	{r4, r5, r7, lr}
 801ed76:	b08a      	sub	sp, #40	; 0x28
 801ed78:	af00      	add	r7, sp, #0
 801ed7a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d106      	bne.n	801ed90 <tcp_output+0x1c>
 801ed82:	4b8a      	ldr	r3, [pc, #552]	; (801efac <tcp_output+0x238>)
 801ed84:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801ed88:	4989      	ldr	r1, [pc, #548]	; (801efb0 <tcp_output+0x23c>)
 801ed8a:	488a      	ldr	r0, [pc, #552]	; (801efb4 <tcp_output+0x240>)
 801ed8c:	f004 fd60 	bl	8023850 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	7d1b      	ldrb	r3, [r3, #20]
 801ed94:	2b01      	cmp	r3, #1
 801ed96:	d106      	bne.n	801eda6 <tcp_output+0x32>
 801ed98:	4b84      	ldr	r3, [pc, #528]	; (801efac <tcp_output+0x238>)
 801ed9a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801ed9e:	4986      	ldr	r1, [pc, #536]	; (801efb8 <tcp_output+0x244>)
 801eda0:	4884      	ldr	r0, [pc, #528]	; (801efb4 <tcp_output+0x240>)
 801eda2:	f004 fd55 	bl	8023850 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801eda6:	4b85      	ldr	r3, [pc, #532]	; (801efbc <tcp_output+0x248>)
 801eda8:	681b      	ldr	r3, [r3, #0]
 801edaa:	687a      	ldr	r2, [r7, #4]
 801edac:	429a      	cmp	r2, r3
 801edae:	d101      	bne.n	801edb4 <tcp_output+0x40>
    return ERR_OK;
 801edb0:	2300      	movs	r3, #0
 801edb2:	e1ce      	b.n	801f152 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801edc0:	4293      	cmp	r3, r2
 801edc2:	bf28      	it	cs
 801edc4:	4613      	movcs	r3, r2
 801edc6:	b29b      	uxth	r3, r3
 801edc8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801edce:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	d10b      	bne.n	801edee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801edd6:	687b      	ldr	r3, [r7, #4]
 801edd8:	8b5b      	ldrh	r3, [r3, #26]
 801edda:	f003 0302 	and.w	r3, r3, #2
 801edde:	2b00      	cmp	r3, #0
 801ede0:	f000 81aa 	beq.w	801f138 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801ede4:	6878      	ldr	r0, [r7, #4]
 801ede6:	f000 fdcb 	bl	801f980 <tcp_send_empty_ack>
 801edea:	4603      	mov	r3, r0
 801edec:	e1b1      	b.n	801f152 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801edee:	6879      	ldr	r1, [r7, #4]
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	3304      	adds	r3, #4
 801edf4:	461a      	mov	r2, r3
 801edf6:	6878      	ldr	r0, [r7, #4]
 801edf8:	f7ff f824 	bl	801de44 <tcp_route>
 801edfc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801edfe:	697b      	ldr	r3, [r7, #20]
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	d102      	bne.n	801ee0a <tcp_output+0x96>
    return ERR_RTE;
 801ee04:	f06f 0303 	mvn.w	r3, #3
 801ee08:	e1a3      	b.n	801f152 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	d003      	beq.n	801ee18 <tcp_output+0xa4>
 801ee10:	687b      	ldr	r3, [r7, #4]
 801ee12:	681b      	ldr	r3, [r3, #0]
 801ee14:	2b00      	cmp	r3, #0
 801ee16:	d111      	bne.n	801ee3c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801ee18:	697b      	ldr	r3, [r7, #20]
 801ee1a:	2b00      	cmp	r3, #0
 801ee1c:	d002      	beq.n	801ee24 <tcp_output+0xb0>
 801ee1e:	697b      	ldr	r3, [r7, #20]
 801ee20:	3304      	adds	r3, #4
 801ee22:	e000      	b.n	801ee26 <tcp_output+0xb2>
 801ee24:	2300      	movs	r3, #0
 801ee26:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801ee28:	693b      	ldr	r3, [r7, #16]
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d102      	bne.n	801ee34 <tcp_output+0xc0>
      return ERR_RTE;
 801ee2e:	f06f 0303 	mvn.w	r3, #3
 801ee32:	e18e      	b.n	801f152 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ee34:	693b      	ldr	r3, [r7, #16]
 801ee36:	681a      	ldr	r2, [r3, #0]
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801ee3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee3e:	68db      	ldr	r3, [r3, #12]
 801ee40:	685b      	ldr	r3, [r3, #4]
 801ee42:	4618      	mov	r0, r3
 801ee44:	f7f9 f859 	bl	8017efa <lwip_htonl>
 801ee48:	4602      	mov	r2, r0
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ee4e:	1ad3      	subs	r3, r2, r3
 801ee50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ee52:	8912      	ldrh	r2, [r2, #8]
 801ee54:	4413      	add	r3, r2
 801ee56:	69ba      	ldr	r2, [r7, #24]
 801ee58:	429a      	cmp	r2, r3
 801ee5a:	d227      	bcs.n	801eeac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ee62:	461a      	mov	r2, r3
 801ee64:	69bb      	ldr	r3, [r7, #24]
 801ee66:	4293      	cmp	r3, r2
 801ee68:	d114      	bne.n	801ee94 <tcp_output+0x120>
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	d110      	bne.n	801ee94 <tcp_output+0x120>
 801ee72:	687b      	ldr	r3, [r7, #4]
 801ee74:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	d10b      	bne.n	801ee94 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	2200      	movs	r2, #0
 801ee80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	2201      	movs	r2, #1
 801ee88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	2200      	movs	r2, #0
 801ee90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	8b5b      	ldrh	r3, [r3, #26]
 801ee98:	f003 0302 	and.w	r3, r3, #2
 801ee9c:	2b00      	cmp	r3, #0
 801ee9e:	f000 814d 	beq.w	801f13c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801eea2:	6878      	ldr	r0, [r7, #4]
 801eea4:	f000 fd6c 	bl	801f980 <tcp_send_empty_ack>
 801eea8:	4603      	mov	r3, r0
 801eeaa:	e152      	b.n	801f152 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801eeac:	687b      	ldr	r3, [r7, #4]
 801eeae:	2200      	movs	r2, #0
 801eeb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801eeb4:	687b      	ldr	r3, [r7, #4]
 801eeb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eeb8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801eeba:	6a3b      	ldr	r3, [r7, #32]
 801eebc:	2b00      	cmp	r3, #0
 801eebe:	f000 811c 	beq.w	801f0fa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801eec2:	e002      	b.n	801eeca <tcp_output+0x156>
 801eec4:	6a3b      	ldr	r3, [r7, #32]
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	623b      	str	r3, [r7, #32]
 801eeca:	6a3b      	ldr	r3, [r7, #32]
 801eecc:	681b      	ldr	r3, [r3, #0]
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d1f8      	bne.n	801eec4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801eed2:	e112      	b.n	801f0fa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801eed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eed6:	68db      	ldr	r3, [r3, #12]
 801eed8:	899b      	ldrh	r3, [r3, #12]
 801eeda:	b29b      	uxth	r3, r3
 801eedc:	4618      	mov	r0, r3
 801eede:	f7f8 fff7 	bl	8017ed0 <lwip_htons>
 801eee2:	4603      	mov	r3, r0
 801eee4:	b2db      	uxtb	r3, r3
 801eee6:	f003 0304 	and.w	r3, r3, #4
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d006      	beq.n	801eefc <tcp_output+0x188>
 801eeee:	4b2f      	ldr	r3, [pc, #188]	; (801efac <tcp_output+0x238>)
 801eef0:	f240 5236 	movw	r2, #1334	; 0x536
 801eef4:	4932      	ldr	r1, [pc, #200]	; (801efc0 <tcp_output+0x24c>)
 801eef6:	482f      	ldr	r0, [pc, #188]	; (801efb4 <tcp_output+0x240>)
 801eef8:	f004 fcaa 	bl	8023850 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801eefc:	687b      	ldr	r3, [r7, #4]
 801eefe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d01f      	beq.n	801ef44 <tcp_output+0x1d0>
 801ef04:	687b      	ldr	r3, [r7, #4]
 801ef06:	8b5b      	ldrh	r3, [r3, #26]
 801ef08:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d119      	bne.n	801ef44 <tcp_output+0x1d0>
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	d00b      	beq.n	801ef30 <tcp_output+0x1bc>
 801ef18:	687b      	ldr	r3, [r7, #4]
 801ef1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ef1c:	681b      	ldr	r3, [r3, #0]
 801ef1e:	2b00      	cmp	r3, #0
 801ef20:	d110      	bne.n	801ef44 <tcp_output+0x1d0>
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ef26:	891a      	ldrh	r2, [r3, #8]
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ef2c:	429a      	cmp	r2, r3
 801ef2e:	d209      	bcs.n	801ef44 <tcp_output+0x1d0>
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d004      	beq.n	801ef44 <tcp_output+0x1d0>
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ef40:	2b08      	cmp	r3, #8
 801ef42:	d901      	bls.n	801ef48 <tcp_output+0x1d4>
 801ef44:	2301      	movs	r3, #1
 801ef46:	e000      	b.n	801ef4a <tcp_output+0x1d6>
 801ef48:	2300      	movs	r3, #0
 801ef4a:	2b00      	cmp	r3, #0
 801ef4c:	d106      	bne.n	801ef5c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	8b5b      	ldrh	r3, [r3, #26]
 801ef52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	f000 80e4 	beq.w	801f124 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	7d1b      	ldrb	r3, [r3, #20]
 801ef60:	2b02      	cmp	r3, #2
 801ef62:	d00d      	beq.n	801ef80 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef66:	68db      	ldr	r3, [r3, #12]
 801ef68:	899b      	ldrh	r3, [r3, #12]
 801ef6a:	b29c      	uxth	r4, r3
 801ef6c:	2010      	movs	r0, #16
 801ef6e:	f7f8 ffaf 	bl	8017ed0 <lwip_htons>
 801ef72:	4603      	mov	r3, r0
 801ef74:	461a      	mov	r2, r3
 801ef76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef78:	68db      	ldr	r3, [r3, #12]
 801ef7a:	4322      	orrs	r2, r4
 801ef7c:	b292      	uxth	r2, r2
 801ef7e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801ef80:	697a      	ldr	r2, [r7, #20]
 801ef82:	6879      	ldr	r1, [r7, #4]
 801ef84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ef86:	f000 f909 	bl	801f19c <tcp_output_segment>
 801ef8a:	4603      	mov	r3, r0
 801ef8c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801ef8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	d016      	beq.n	801efc4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ef96:	687b      	ldr	r3, [r7, #4]
 801ef98:	8b5b      	ldrh	r3, [r3, #26]
 801ef9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ef9e:	b29a      	uxth	r2, r3
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	835a      	strh	r2, [r3, #26]
      return err;
 801efa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801efa8:	e0d3      	b.n	801f152 <tcp_output+0x3de>
 801efaa:	bf00      	nop
 801efac:	08026df4 	.word	0x08026df4
 801efb0:	08027338 	.word	0x08027338
 801efb4:	08026e48 	.word	0x08026e48
 801efb8:	08027350 	.word	0x08027350
 801efbc:	20011364 	.word	0x20011364
 801efc0:	08027378 	.word	0x08027378
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801efc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efc6:	681a      	ldr	r2, [r3, #0]
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	7d1b      	ldrb	r3, [r3, #20]
 801efd0:	2b02      	cmp	r3, #2
 801efd2:	d006      	beq.n	801efe2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	8b5b      	ldrh	r3, [r3, #26]
 801efd8:	f023 0303 	bic.w	r3, r3, #3
 801efdc:	b29a      	uxth	r2, r3
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801efe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efe4:	68db      	ldr	r3, [r3, #12]
 801efe6:	685b      	ldr	r3, [r3, #4]
 801efe8:	4618      	mov	r0, r3
 801efea:	f7f8 ff86 	bl	8017efa <lwip_htonl>
 801efee:	4604      	mov	r4, r0
 801eff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eff2:	891b      	ldrh	r3, [r3, #8]
 801eff4:	461d      	mov	r5, r3
 801eff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eff8:	68db      	ldr	r3, [r3, #12]
 801effa:	899b      	ldrh	r3, [r3, #12]
 801effc:	b29b      	uxth	r3, r3
 801effe:	4618      	mov	r0, r3
 801f000:	f7f8 ff66 	bl	8017ed0 <lwip_htons>
 801f004:	4603      	mov	r3, r0
 801f006:	b2db      	uxtb	r3, r3
 801f008:	f003 0303 	and.w	r3, r3, #3
 801f00c:	2b00      	cmp	r3, #0
 801f00e:	d001      	beq.n	801f014 <tcp_output+0x2a0>
 801f010:	2301      	movs	r3, #1
 801f012:	e000      	b.n	801f016 <tcp_output+0x2a2>
 801f014:	2300      	movs	r3, #0
 801f016:	442b      	add	r3, r5
 801f018:	4423      	add	r3, r4
 801f01a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f020:	68bb      	ldr	r3, [r7, #8]
 801f022:	1ad3      	subs	r3, r2, r3
 801f024:	2b00      	cmp	r3, #0
 801f026:	da02      	bge.n	801f02e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	68ba      	ldr	r2, [r7, #8]
 801f02c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801f02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f030:	891b      	ldrh	r3, [r3, #8]
 801f032:	461c      	mov	r4, r3
 801f034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f036:	68db      	ldr	r3, [r3, #12]
 801f038:	899b      	ldrh	r3, [r3, #12]
 801f03a:	b29b      	uxth	r3, r3
 801f03c:	4618      	mov	r0, r3
 801f03e:	f7f8 ff47 	bl	8017ed0 <lwip_htons>
 801f042:	4603      	mov	r3, r0
 801f044:	b2db      	uxtb	r3, r3
 801f046:	f003 0303 	and.w	r3, r3, #3
 801f04a:	2b00      	cmp	r3, #0
 801f04c:	d001      	beq.n	801f052 <tcp_output+0x2de>
 801f04e:	2301      	movs	r3, #1
 801f050:	e000      	b.n	801f054 <tcp_output+0x2e0>
 801f052:	2300      	movs	r3, #0
 801f054:	4423      	add	r3, r4
 801f056:	2b00      	cmp	r3, #0
 801f058:	d049      	beq.n	801f0ee <tcp_output+0x37a>
      seg->next = NULL;
 801f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f05c:	2200      	movs	r2, #0
 801f05e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801f060:	687b      	ldr	r3, [r7, #4]
 801f062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f064:	2b00      	cmp	r3, #0
 801f066:	d105      	bne.n	801f074 <tcp_output+0x300>
        pcb->unacked = seg;
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f06c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801f06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f070:	623b      	str	r3, [r7, #32]
 801f072:	e03f      	b.n	801f0f4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801f074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f076:	68db      	ldr	r3, [r3, #12]
 801f078:	685b      	ldr	r3, [r3, #4]
 801f07a:	4618      	mov	r0, r3
 801f07c:	f7f8 ff3d 	bl	8017efa <lwip_htonl>
 801f080:	4604      	mov	r4, r0
 801f082:	6a3b      	ldr	r3, [r7, #32]
 801f084:	68db      	ldr	r3, [r3, #12]
 801f086:	685b      	ldr	r3, [r3, #4]
 801f088:	4618      	mov	r0, r3
 801f08a:	f7f8 ff36 	bl	8017efa <lwip_htonl>
 801f08e:	4603      	mov	r3, r0
 801f090:	1ae3      	subs	r3, r4, r3
 801f092:	2b00      	cmp	r3, #0
 801f094:	da24      	bge.n	801f0e0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	3370      	adds	r3, #112	; 0x70
 801f09a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801f09c:	e002      	b.n	801f0a4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801f09e:	69fb      	ldr	r3, [r7, #28]
 801f0a0:	681b      	ldr	r3, [r3, #0]
 801f0a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801f0a4:	69fb      	ldr	r3, [r7, #28]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	2b00      	cmp	r3, #0
 801f0aa:	d011      	beq.n	801f0d0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f0ac:	69fb      	ldr	r3, [r7, #28]
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	68db      	ldr	r3, [r3, #12]
 801f0b2:	685b      	ldr	r3, [r3, #4]
 801f0b4:	4618      	mov	r0, r3
 801f0b6:	f7f8 ff20 	bl	8017efa <lwip_htonl>
 801f0ba:	4604      	mov	r4, r0
 801f0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0be:	68db      	ldr	r3, [r3, #12]
 801f0c0:	685b      	ldr	r3, [r3, #4]
 801f0c2:	4618      	mov	r0, r3
 801f0c4:	f7f8 ff19 	bl	8017efa <lwip_htonl>
 801f0c8:	4603      	mov	r3, r0
 801f0ca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801f0cc:	2b00      	cmp	r3, #0
 801f0ce:	dbe6      	blt.n	801f09e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801f0d0:	69fb      	ldr	r3, [r7, #28]
 801f0d2:	681a      	ldr	r2, [r3, #0]
 801f0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0d6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801f0d8:	69fb      	ldr	r3, [r7, #28]
 801f0da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f0dc:	601a      	str	r2, [r3, #0]
 801f0de:	e009      	b.n	801f0f4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801f0e0:	6a3b      	ldr	r3, [r7, #32]
 801f0e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f0e4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801f0e6:	6a3b      	ldr	r3, [r7, #32]
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	623b      	str	r3, [r7, #32]
 801f0ec:	e002      	b.n	801f0f4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801f0ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f0f0:	f7fb ff19 	bl	801af26 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f0f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801f0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	d012      	beq.n	801f126 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801f100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f102:	68db      	ldr	r3, [r3, #12]
 801f104:	685b      	ldr	r3, [r3, #4]
 801f106:	4618      	mov	r0, r3
 801f108:	f7f8 fef7 	bl	8017efa <lwip_htonl>
 801f10c:	4602      	mov	r2, r0
 801f10e:	687b      	ldr	r3, [r7, #4]
 801f110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f112:	1ad3      	subs	r3, r2, r3
 801f114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f116:	8912      	ldrh	r2, [r2, #8]
 801f118:	4413      	add	r3, r2
  while (seg != NULL &&
 801f11a:	69ba      	ldr	r2, [r7, #24]
 801f11c:	429a      	cmp	r2, r3
 801f11e:	f4bf aed9 	bcs.w	801eed4 <tcp_output+0x160>
 801f122:	e000      	b.n	801f126 <tcp_output+0x3b2>
      break;
 801f124:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f12a:	2b00      	cmp	r3, #0
 801f12c:	d108      	bne.n	801f140 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	2200      	movs	r2, #0
 801f132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801f136:	e004      	b.n	801f142 <tcp_output+0x3ce>
    goto output_done;
 801f138:	bf00      	nop
 801f13a:	e002      	b.n	801f142 <tcp_output+0x3ce>
    goto output_done;
 801f13c:	bf00      	nop
 801f13e:	e000      	b.n	801f142 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801f140:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	8b5b      	ldrh	r3, [r3, #26]
 801f146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f14a:	b29a      	uxth	r2, r3
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801f150:	2300      	movs	r3, #0
}
 801f152:	4618      	mov	r0, r3
 801f154:	3728      	adds	r7, #40	; 0x28
 801f156:	46bd      	mov	sp, r7
 801f158:	bdb0      	pop	{r4, r5, r7, pc}
 801f15a:	bf00      	nop

0801f15c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801f15c:	b580      	push	{r7, lr}
 801f15e:	b082      	sub	sp, #8
 801f160:	af00      	add	r7, sp, #0
 801f162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	2b00      	cmp	r3, #0
 801f168:	d106      	bne.n	801f178 <tcp_output_segment_busy+0x1c>
 801f16a:	4b09      	ldr	r3, [pc, #36]	; (801f190 <tcp_output_segment_busy+0x34>)
 801f16c:	f240 529a 	movw	r2, #1434	; 0x59a
 801f170:	4908      	ldr	r1, [pc, #32]	; (801f194 <tcp_output_segment_busy+0x38>)
 801f172:	4809      	ldr	r0, [pc, #36]	; (801f198 <tcp_output_segment_busy+0x3c>)
 801f174:	f004 fb6c 	bl	8023850 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801f178:	687b      	ldr	r3, [r7, #4]
 801f17a:	685b      	ldr	r3, [r3, #4]
 801f17c:	7b9b      	ldrb	r3, [r3, #14]
 801f17e:	2b01      	cmp	r3, #1
 801f180:	d001      	beq.n	801f186 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801f182:	2301      	movs	r3, #1
 801f184:	e000      	b.n	801f188 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801f186:	2300      	movs	r3, #0
}
 801f188:	4618      	mov	r0, r3
 801f18a:	3708      	adds	r7, #8
 801f18c:	46bd      	mov	sp, r7
 801f18e:	bd80      	pop	{r7, pc}
 801f190:	08026df4 	.word	0x08026df4
 801f194:	08027390 	.word	0x08027390
 801f198:	08026e48 	.word	0x08026e48

0801f19c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801f19c:	b5b0      	push	{r4, r5, r7, lr}
 801f19e:	b08c      	sub	sp, #48	; 0x30
 801f1a0:	af04      	add	r7, sp, #16
 801f1a2:	60f8      	str	r0, [r7, #12]
 801f1a4:	60b9      	str	r1, [r7, #8]
 801f1a6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801f1a8:	68fb      	ldr	r3, [r7, #12]
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	d106      	bne.n	801f1bc <tcp_output_segment+0x20>
 801f1ae:	4b64      	ldr	r3, [pc, #400]	; (801f340 <tcp_output_segment+0x1a4>)
 801f1b0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801f1b4:	4963      	ldr	r1, [pc, #396]	; (801f344 <tcp_output_segment+0x1a8>)
 801f1b6:	4864      	ldr	r0, [pc, #400]	; (801f348 <tcp_output_segment+0x1ac>)
 801f1b8:	f004 fb4a 	bl	8023850 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801f1bc:	68bb      	ldr	r3, [r7, #8]
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	d106      	bne.n	801f1d0 <tcp_output_segment+0x34>
 801f1c2:	4b5f      	ldr	r3, [pc, #380]	; (801f340 <tcp_output_segment+0x1a4>)
 801f1c4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801f1c8:	4960      	ldr	r1, [pc, #384]	; (801f34c <tcp_output_segment+0x1b0>)
 801f1ca:	485f      	ldr	r0, [pc, #380]	; (801f348 <tcp_output_segment+0x1ac>)
 801f1cc:	f004 fb40 	bl	8023850 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	2b00      	cmp	r3, #0
 801f1d4:	d106      	bne.n	801f1e4 <tcp_output_segment+0x48>
 801f1d6:	4b5a      	ldr	r3, [pc, #360]	; (801f340 <tcp_output_segment+0x1a4>)
 801f1d8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801f1dc:	495c      	ldr	r1, [pc, #368]	; (801f350 <tcp_output_segment+0x1b4>)
 801f1de:	485a      	ldr	r0, [pc, #360]	; (801f348 <tcp_output_segment+0x1ac>)
 801f1e0:	f004 fb36 	bl	8023850 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801f1e4:	68f8      	ldr	r0, [r7, #12]
 801f1e6:	f7ff ffb9 	bl	801f15c <tcp_output_segment_busy>
 801f1ea:	4603      	mov	r3, r0
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d001      	beq.n	801f1f4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801f1f0:	2300      	movs	r3, #0
 801f1f2:	e0a1      	b.n	801f338 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801f1f4:	68bb      	ldr	r3, [r7, #8]
 801f1f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f1f8:	68fb      	ldr	r3, [r7, #12]
 801f1fa:	68dc      	ldr	r4, [r3, #12]
 801f1fc:	4610      	mov	r0, r2
 801f1fe:	f7f8 fe7c 	bl	8017efa <lwip_htonl>
 801f202:	4603      	mov	r3, r0
 801f204:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801f206:	68bb      	ldr	r3, [r7, #8]
 801f208:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801f20a:	68fb      	ldr	r3, [r7, #12]
 801f20c:	68dc      	ldr	r4, [r3, #12]
 801f20e:	4610      	mov	r0, r2
 801f210:	f7f8 fe5e 	bl	8017ed0 <lwip_htons>
 801f214:	4603      	mov	r3, r0
 801f216:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f218:	68bb      	ldr	r3, [r7, #8]
 801f21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f21c:	68ba      	ldr	r2, [r7, #8]
 801f21e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801f220:	441a      	add	r2, r3
 801f222:	68bb      	ldr	r3, [r7, #8]
 801f224:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801f226:	68fb      	ldr	r3, [r7, #12]
 801f228:	68db      	ldr	r3, [r3, #12]
 801f22a:	3314      	adds	r3, #20
 801f22c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801f22e:	68fb      	ldr	r3, [r7, #12]
 801f230:	7a9b      	ldrb	r3, [r3, #10]
 801f232:	f003 0301 	and.w	r3, r3, #1
 801f236:	2b00      	cmp	r3, #0
 801f238:	d015      	beq.n	801f266 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801f23a:	68bb      	ldr	r3, [r7, #8]
 801f23c:	3304      	adds	r3, #4
 801f23e:	461a      	mov	r2, r3
 801f240:	6879      	ldr	r1, [r7, #4]
 801f242:	f44f 7006 	mov.w	r0, #536	; 0x218
 801f246:	f7fc fa33 	bl	801b6b0 <tcp_eff_send_mss_netif>
 801f24a:	4603      	mov	r3, r0
 801f24c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801f24e:	8b7b      	ldrh	r3, [r7, #26]
 801f250:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801f254:	4618      	mov	r0, r3
 801f256:	f7f8 fe50 	bl	8017efa <lwip_htonl>
 801f25a:	4602      	mov	r2, r0
 801f25c:	69fb      	ldr	r3, [r7, #28]
 801f25e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801f260:	69fb      	ldr	r3, [r7, #28]
 801f262:	3304      	adds	r3, #4
 801f264:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801f266:	68bb      	ldr	r3, [r7, #8]
 801f268:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	da02      	bge.n	801f276 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801f270:	68bb      	ldr	r3, [r7, #8]
 801f272:	2200      	movs	r2, #0
 801f274:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801f276:	68bb      	ldr	r3, [r7, #8]
 801f278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	d10c      	bne.n	801f298 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801f27e:	4b35      	ldr	r3, [pc, #212]	; (801f354 <tcp_output_segment+0x1b8>)
 801f280:	681a      	ldr	r2, [r3, #0]
 801f282:	68bb      	ldr	r3, [r7, #8]
 801f284:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f286:	68fb      	ldr	r3, [r7, #12]
 801f288:	68db      	ldr	r3, [r3, #12]
 801f28a:	685b      	ldr	r3, [r3, #4]
 801f28c:	4618      	mov	r0, r3
 801f28e:	f7f8 fe34 	bl	8017efa <lwip_htonl>
 801f292:	4602      	mov	r2, r0
 801f294:	68bb      	ldr	r3, [r7, #8]
 801f296:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f298:	68fb      	ldr	r3, [r7, #12]
 801f29a:	68da      	ldr	r2, [r3, #12]
 801f29c:	68fb      	ldr	r3, [r7, #12]
 801f29e:	685b      	ldr	r3, [r3, #4]
 801f2a0:	685b      	ldr	r3, [r3, #4]
 801f2a2:	1ad3      	subs	r3, r2, r3
 801f2a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801f2a6:	68fb      	ldr	r3, [r7, #12]
 801f2a8:	685b      	ldr	r3, [r3, #4]
 801f2aa:	8959      	ldrh	r1, [r3, #10]
 801f2ac:	68fb      	ldr	r3, [r7, #12]
 801f2ae:	685b      	ldr	r3, [r3, #4]
 801f2b0:	8b3a      	ldrh	r2, [r7, #24]
 801f2b2:	1a8a      	subs	r2, r1, r2
 801f2b4:	b292      	uxth	r2, r2
 801f2b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801f2b8:	68fb      	ldr	r3, [r7, #12]
 801f2ba:	685b      	ldr	r3, [r3, #4]
 801f2bc:	8919      	ldrh	r1, [r3, #8]
 801f2be:	68fb      	ldr	r3, [r7, #12]
 801f2c0:	685b      	ldr	r3, [r3, #4]
 801f2c2:	8b3a      	ldrh	r2, [r7, #24]
 801f2c4:	1a8a      	subs	r2, r1, r2
 801f2c6:	b292      	uxth	r2, r2
 801f2c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801f2ca:	68fb      	ldr	r3, [r7, #12]
 801f2cc:	685b      	ldr	r3, [r3, #4]
 801f2ce:	68fa      	ldr	r2, [r7, #12]
 801f2d0:	68d2      	ldr	r2, [r2, #12]
 801f2d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801f2d4:	68fb      	ldr	r3, [r7, #12]
 801f2d6:	68db      	ldr	r3, [r3, #12]
 801f2d8:	2200      	movs	r2, #0
 801f2da:	741a      	strb	r2, [r3, #16]
 801f2dc:	2200      	movs	r2, #0
 801f2de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801f2e0:	68fb      	ldr	r3, [r7, #12]
 801f2e2:	68da      	ldr	r2, [r3, #12]
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	7a9b      	ldrb	r3, [r3, #10]
 801f2e8:	f003 0301 	and.w	r3, r3, #1
 801f2ec:	2b00      	cmp	r3, #0
 801f2ee:	d001      	beq.n	801f2f4 <tcp_output_segment+0x158>
 801f2f0:	2318      	movs	r3, #24
 801f2f2:	e000      	b.n	801f2f6 <tcp_output_segment+0x15a>
 801f2f4:	2314      	movs	r3, #20
 801f2f6:	4413      	add	r3, r2
 801f2f8:	69fa      	ldr	r2, [r7, #28]
 801f2fa:	429a      	cmp	r2, r3
 801f2fc:	d006      	beq.n	801f30c <tcp_output_segment+0x170>
 801f2fe:	4b10      	ldr	r3, [pc, #64]	; (801f340 <tcp_output_segment+0x1a4>)
 801f300:	f240 621c 	movw	r2, #1564	; 0x61c
 801f304:	4914      	ldr	r1, [pc, #80]	; (801f358 <tcp_output_segment+0x1bc>)
 801f306:	4810      	ldr	r0, [pc, #64]	; (801f348 <tcp_output_segment+0x1ac>)
 801f308:	f004 faa2 	bl	8023850 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801f30c:	68fb      	ldr	r3, [r7, #12]
 801f30e:	6858      	ldr	r0, [r3, #4]
 801f310:	68b9      	ldr	r1, [r7, #8]
 801f312:	68bb      	ldr	r3, [r7, #8]
 801f314:	1d1c      	adds	r4, r3, #4
 801f316:	68bb      	ldr	r3, [r7, #8]
 801f318:	7add      	ldrb	r5, [r3, #11]
 801f31a:	68bb      	ldr	r3, [r7, #8]
 801f31c:	7a9b      	ldrb	r3, [r3, #10]
 801f31e:	687a      	ldr	r2, [r7, #4]
 801f320:	9202      	str	r2, [sp, #8]
 801f322:	2206      	movs	r2, #6
 801f324:	9201      	str	r2, [sp, #4]
 801f326:	9300      	str	r3, [sp, #0]
 801f328:	462b      	mov	r3, r5
 801f32a:	4622      	mov	r2, r4
 801f32c:	f002 fbd6 	bl	8021adc <ip4_output_if>
 801f330:	4603      	mov	r3, r0
 801f332:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801f334:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f338:	4618      	mov	r0, r3
 801f33a:	3720      	adds	r7, #32
 801f33c:	46bd      	mov	sp, r7
 801f33e:	bdb0      	pop	{r4, r5, r7, pc}
 801f340:	08026df4 	.word	0x08026df4
 801f344:	080273b8 	.word	0x080273b8
 801f348:	08026e48 	.word	0x08026e48
 801f34c:	080273d8 	.word	0x080273d8
 801f350:	080273f8 	.word	0x080273f8
 801f354:	20011318 	.word	0x20011318
 801f358:	0802741c 	.word	0x0802741c

0801f35c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801f35c:	b5b0      	push	{r4, r5, r7, lr}
 801f35e:	b084      	sub	sp, #16
 801f360:	af00      	add	r7, sp, #0
 801f362:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801f364:	687b      	ldr	r3, [r7, #4]
 801f366:	2b00      	cmp	r3, #0
 801f368:	d106      	bne.n	801f378 <tcp_rexmit_rto_prepare+0x1c>
 801f36a:	4b31      	ldr	r3, [pc, #196]	; (801f430 <tcp_rexmit_rto_prepare+0xd4>)
 801f36c:	f240 6263 	movw	r2, #1635	; 0x663
 801f370:	4930      	ldr	r1, [pc, #192]	; (801f434 <tcp_rexmit_rto_prepare+0xd8>)
 801f372:	4831      	ldr	r0, [pc, #196]	; (801f438 <tcp_rexmit_rto_prepare+0xdc>)
 801f374:	f004 fa6c 	bl	8023850 <iprintf>

  if (pcb->unacked == NULL) {
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	d102      	bne.n	801f386 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801f380:	f06f 0305 	mvn.w	r3, #5
 801f384:	e050      	b.n	801f428 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801f386:	687b      	ldr	r3, [r7, #4]
 801f388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f38a:	60fb      	str	r3, [r7, #12]
 801f38c:	e00b      	b.n	801f3a6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801f38e:	68f8      	ldr	r0, [r7, #12]
 801f390:	f7ff fee4 	bl	801f15c <tcp_output_segment_busy>
 801f394:	4603      	mov	r3, r0
 801f396:	2b00      	cmp	r3, #0
 801f398:	d002      	beq.n	801f3a0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801f39a:	f06f 0305 	mvn.w	r3, #5
 801f39e:	e043      	b.n	801f428 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801f3a0:	68fb      	ldr	r3, [r7, #12]
 801f3a2:	681b      	ldr	r3, [r3, #0]
 801f3a4:	60fb      	str	r3, [r7, #12]
 801f3a6:	68fb      	ldr	r3, [r7, #12]
 801f3a8:	681b      	ldr	r3, [r3, #0]
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	d1ef      	bne.n	801f38e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801f3ae:	68f8      	ldr	r0, [r7, #12]
 801f3b0:	f7ff fed4 	bl	801f15c <tcp_output_segment_busy>
 801f3b4:	4603      	mov	r3, r0
 801f3b6:	2b00      	cmp	r3, #0
 801f3b8:	d002      	beq.n	801f3c0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801f3ba:	f06f 0305 	mvn.w	r3, #5
 801f3be:	e033      	b.n	801f428 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801f3c4:	68fb      	ldr	r3, [r7, #12]
 801f3c6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801f3d0:	687b      	ldr	r3, [r7, #4]
 801f3d2:	2200      	movs	r2, #0
 801f3d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801f3d6:	687b      	ldr	r3, [r7, #4]
 801f3d8:	8b5b      	ldrh	r3, [r3, #26]
 801f3da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801f3de:	b29a      	uxth	r2, r3
 801f3e0:	687b      	ldr	r3, [r7, #4]
 801f3e2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f3e4:	68fb      	ldr	r3, [r7, #12]
 801f3e6:	68db      	ldr	r3, [r3, #12]
 801f3e8:	685b      	ldr	r3, [r3, #4]
 801f3ea:	4618      	mov	r0, r3
 801f3ec:	f7f8 fd85 	bl	8017efa <lwip_htonl>
 801f3f0:	4604      	mov	r4, r0
 801f3f2:	68fb      	ldr	r3, [r7, #12]
 801f3f4:	891b      	ldrh	r3, [r3, #8]
 801f3f6:	461d      	mov	r5, r3
 801f3f8:	68fb      	ldr	r3, [r7, #12]
 801f3fa:	68db      	ldr	r3, [r3, #12]
 801f3fc:	899b      	ldrh	r3, [r3, #12]
 801f3fe:	b29b      	uxth	r3, r3
 801f400:	4618      	mov	r0, r3
 801f402:	f7f8 fd65 	bl	8017ed0 <lwip_htons>
 801f406:	4603      	mov	r3, r0
 801f408:	b2db      	uxtb	r3, r3
 801f40a:	f003 0303 	and.w	r3, r3, #3
 801f40e:	2b00      	cmp	r3, #0
 801f410:	d001      	beq.n	801f416 <tcp_rexmit_rto_prepare+0xba>
 801f412:	2301      	movs	r3, #1
 801f414:	e000      	b.n	801f418 <tcp_rexmit_rto_prepare+0xbc>
 801f416:	2300      	movs	r3, #0
 801f418:	442b      	add	r3, r5
 801f41a:	18e2      	adds	r2, r4, r3
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801f420:	687b      	ldr	r3, [r7, #4]
 801f422:	2200      	movs	r2, #0
 801f424:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801f426:	2300      	movs	r3, #0
}
 801f428:	4618      	mov	r0, r3
 801f42a:	3710      	adds	r7, #16
 801f42c:	46bd      	mov	sp, r7
 801f42e:	bdb0      	pop	{r4, r5, r7, pc}
 801f430:	08026df4 	.word	0x08026df4
 801f434:	08027430 	.word	0x08027430
 801f438:	08026e48 	.word	0x08026e48

0801f43c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801f43c:	b580      	push	{r7, lr}
 801f43e:	b082      	sub	sp, #8
 801f440:	af00      	add	r7, sp, #0
 801f442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	2b00      	cmp	r3, #0
 801f448:	d106      	bne.n	801f458 <tcp_rexmit_rto_commit+0x1c>
 801f44a:	4b0d      	ldr	r3, [pc, #52]	; (801f480 <tcp_rexmit_rto_commit+0x44>)
 801f44c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f450:	490c      	ldr	r1, [pc, #48]	; (801f484 <tcp_rexmit_rto_commit+0x48>)
 801f452:	480d      	ldr	r0, [pc, #52]	; (801f488 <tcp_rexmit_rto_commit+0x4c>)
 801f454:	f004 f9fc 	bl	8023850 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f45e:	2bff      	cmp	r3, #255	; 0xff
 801f460:	d007      	beq.n	801f472 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801f462:	687b      	ldr	r3, [r7, #4]
 801f464:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f468:	3301      	adds	r3, #1
 801f46a:	b2da      	uxtb	r2, r3
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801f472:	6878      	ldr	r0, [r7, #4]
 801f474:	f7ff fc7e 	bl	801ed74 <tcp_output>
}
 801f478:	bf00      	nop
 801f47a:	3708      	adds	r7, #8
 801f47c:	46bd      	mov	sp, r7
 801f47e:	bd80      	pop	{r7, pc}
 801f480:	08026df4 	.word	0x08026df4
 801f484:	08027454 	.word	0x08027454
 801f488:	08026e48 	.word	0x08026e48

0801f48c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801f48c:	b580      	push	{r7, lr}
 801f48e:	b082      	sub	sp, #8
 801f490:	af00      	add	r7, sp, #0
 801f492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f494:	687b      	ldr	r3, [r7, #4]
 801f496:	2b00      	cmp	r3, #0
 801f498:	d106      	bne.n	801f4a8 <tcp_rexmit_rto+0x1c>
 801f49a:	4b0a      	ldr	r3, [pc, #40]	; (801f4c4 <tcp_rexmit_rto+0x38>)
 801f49c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801f4a0:	4909      	ldr	r1, [pc, #36]	; (801f4c8 <tcp_rexmit_rto+0x3c>)
 801f4a2:	480a      	ldr	r0, [pc, #40]	; (801f4cc <tcp_rexmit_rto+0x40>)
 801f4a4:	f004 f9d4 	bl	8023850 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f4a8:	6878      	ldr	r0, [r7, #4]
 801f4aa:	f7ff ff57 	bl	801f35c <tcp_rexmit_rto_prepare>
 801f4ae:	4603      	mov	r3, r0
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	d102      	bne.n	801f4ba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801f4b4:	6878      	ldr	r0, [r7, #4]
 801f4b6:	f7ff ffc1 	bl	801f43c <tcp_rexmit_rto_commit>
  }
}
 801f4ba:	bf00      	nop
 801f4bc:	3708      	adds	r7, #8
 801f4be:	46bd      	mov	sp, r7
 801f4c0:	bd80      	pop	{r7, pc}
 801f4c2:	bf00      	nop
 801f4c4:	08026df4 	.word	0x08026df4
 801f4c8:	08027478 	.word	0x08027478
 801f4cc:	08026e48 	.word	0x08026e48

0801f4d0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801f4d0:	b590      	push	{r4, r7, lr}
 801f4d2:	b085      	sub	sp, #20
 801f4d4:	af00      	add	r7, sp, #0
 801f4d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d106      	bne.n	801f4ec <tcp_rexmit+0x1c>
 801f4de:	4b2f      	ldr	r3, [pc, #188]	; (801f59c <tcp_rexmit+0xcc>)
 801f4e0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801f4e4:	492e      	ldr	r1, [pc, #184]	; (801f5a0 <tcp_rexmit+0xd0>)
 801f4e6:	482f      	ldr	r0, [pc, #188]	; (801f5a4 <tcp_rexmit+0xd4>)
 801f4e8:	f004 f9b2 	bl	8023850 <iprintf>

  if (pcb->unacked == NULL) {
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	d102      	bne.n	801f4fa <tcp_rexmit+0x2a>
    return ERR_VAL;
 801f4f4:	f06f 0305 	mvn.w	r3, #5
 801f4f8:	e04c      	b.n	801f594 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801f4fa:	687b      	ldr	r3, [r7, #4]
 801f4fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f4fe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801f500:	68b8      	ldr	r0, [r7, #8]
 801f502:	f7ff fe2b 	bl	801f15c <tcp_output_segment_busy>
 801f506:	4603      	mov	r3, r0
 801f508:	2b00      	cmp	r3, #0
 801f50a:	d002      	beq.n	801f512 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801f50c:	f06f 0305 	mvn.w	r3, #5
 801f510:	e040      	b.n	801f594 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801f512:	68bb      	ldr	r3, [r7, #8]
 801f514:	681a      	ldr	r2, [r3, #0]
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	336c      	adds	r3, #108	; 0x6c
 801f51e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801f520:	e002      	b.n	801f528 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801f522:	68fb      	ldr	r3, [r7, #12]
 801f524:	681b      	ldr	r3, [r3, #0]
 801f526:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801f528:	68fb      	ldr	r3, [r7, #12]
 801f52a:	681b      	ldr	r3, [r3, #0]
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	d011      	beq.n	801f554 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f530:	68fb      	ldr	r3, [r7, #12]
 801f532:	681b      	ldr	r3, [r3, #0]
 801f534:	68db      	ldr	r3, [r3, #12]
 801f536:	685b      	ldr	r3, [r3, #4]
 801f538:	4618      	mov	r0, r3
 801f53a:	f7f8 fcde 	bl	8017efa <lwip_htonl>
 801f53e:	4604      	mov	r4, r0
 801f540:	68bb      	ldr	r3, [r7, #8]
 801f542:	68db      	ldr	r3, [r3, #12]
 801f544:	685b      	ldr	r3, [r3, #4]
 801f546:	4618      	mov	r0, r3
 801f548:	f7f8 fcd7 	bl	8017efa <lwip_htonl>
 801f54c:	4603      	mov	r3, r0
 801f54e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801f550:	2b00      	cmp	r3, #0
 801f552:	dbe6      	blt.n	801f522 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801f554:	68fb      	ldr	r3, [r7, #12]
 801f556:	681a      	ldr	r2, [r3, #0]
 801f558:	68bb      	ldr	r3, [r7, #8]
 801f55a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801f55c:	68fb      	ldr	r3, [r7, #12]
 801f55e:	68ba      	ldr	r2, [r7, #8]
 801f560:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801f562:	68bb      	ldr	r3, [r7, #8]
 801f564:	681b      	ldr	r3, [r3, #0]
 801f566:	2b00      	cmp	r3, #0
 801f568:	d103      	bne.n	801f572 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	2200      	movs	r2, #0
 801f56e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801f572:	687b      	ldr	r3, [r7, #4]
 801f574:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f578:	2bff      	cmp	r3, #255	; 0xff
 801f57a:	d007      	beq.n	801f58c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f582:	3301      	adds	r3, #1
 801f584:	b2da      	uxtb	r2, r3
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801f58c:	687b      	ldr	r3, [r7, #4]
 801f58e:	2200      	movs	r2, #0
 801f590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801f592:	2300      	movs	r3, #0
}
 801f594:	4618      	mov	r0, r3
 801f596:	3714      	adds	r7, #20
 801f598:	46bd      	mov	sp, r7
 801f59a:	bd90      	pop	{r4, r7, pc}
 801f59c:	08026df4 	.word	0x08026df4
 801f5a0:	08027494 	.word	0x08027494
 801f5a4:	08026e48 	.word	0x08026e48

0801f5a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801f5a8:	b580      	push	{r7, lr}
 801f5aa:	b082      	sub	sp, #8
 801f5ac:	af00      	add	r7, sp, #0
 801f5ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801f5b0:	687b      	ldr	r3, [r7, #4]
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	d106      	bne.n	801f5c4 <tcp_rexmit_fast+0x1c>
 801f5b6:	4b2a      	ldr	r3, [pc, #168]	; (801f660 <tcp_rexmit_fast+0xb8>)
 801f5b8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801f5bc:	4929      	ldr	r1, [pc, #164]	; (801f664 <tcp_rexmit_fast+0xbc>)
 801f5be:	482a      	ldr	r0, [pc, #168]	; (801f668 <tcp_rexmit_fast+0xc0>)
 801f5c0:	f004 f946 	bl	8023850 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f5c8:	2b00      	cmp	r3, #0
 801f5ca:	d045      	beq.n	801f658 <tcp_rexmit_fast+0xb0>
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	8b5b      	ldrh	r3, [r3, #26]
 801f5d0:	f003 0304 	and.w	r3, r3, #4
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	d13f      	bne.n	801f658 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801f5d8:	6878      	ldr	r0, [r7, #4]
 801f5da:	f7ff ff79 	bl	801f4d0 <tcp_rexmit>
 801f5de:	4603      	mov	r3, r0
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d139      	bne.n	801f658 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801f5f0:	4293      	cmp	r3, r2
 801f5f2:	bf28      	it	cs
 801f5f4:	4613      	movcs	r3, r2
 801f5f6:	b29b      	uxth	r3, r3
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	da00      	bge.n	801f5fe <tcp_rexmit_fast+0x56>
 801f5fc:	3301      	adds	r3, #1
 801f5fe:	105b      	asrs	r3, r3, #1
 801f600:	b29a      	uxth	r2, r3
 801f602:	687b      	ldr	r3, [r7, #4]
 801f604:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801f60e:	461a      	mov	r2, r3
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f614:	005b      	lsls	r3, r3, #1
 801f616:	429a      	cmp	r2, r3
 801f618:	d206      	bcs.n	801f628 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f61e:	005b      	lsls	r3, r3, #1
 801f620:	b29a      	uxth	r2, r3
 801f622:	687b      	ldr	r3, [r7, #4]
 801f624:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f632:	4619      	mov	r1, r3
 801f634:	0049      	lsls	r1, r1, #1
 801f636:	440b      	add	r3, r1
 801f638:	b29b      	uxth	r3, r3
 801f63a:	4413      	add	r3, r2
 801f63c:	b29a      	uxth	r2, r3
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801f644:	687b      	ldr	r3, [r7, #4]
 801f646:	8b5b      	ldrh	r3, [r3, #26]
 801f648:	f043 0304 	orr.w	r3, r3, #4
 801f64c:	b29a      	uxth	r2, r3
 801f64e:	687b      	ldr	r3, [r7, #4]
 801f650:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801f652:	687b      	ldr	r3, [r7, #4]
 801f654:	2200      	movs	r2, #0
 801f656:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801f658:	bf00      	nop
 801f65a:	3708      	adds	r7, #8
 801f65c:	46bd      	mov	sp, r7
 801f65e:	bd80      	pop	{r7, pc}
 801f660:	08026df4 	.word	0x08026df4
 801f664:	080274ac 	.word	0x080274ac
 801f668:	08026e48 	.word	0x08026e48

0801f66c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801f66c:	b580      	push	{r7, lr}
 801f66e:	b086      	sub	sp, #24
 801f670:	af00      	add	r7, sp, #0
 801f672:	60f8      	str	r0, [r7, #12]
 801f674:	607b      	str	r3, [r7, #4]
 801f676:	460b      	mov	r3, r1
 801f678:	817b      	strh	r3, [r7, #10]
 801f67a:	4613      	mov	r3, r2
 801f67c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801f67e:	897a      	ldrh	r2, [r7, #10]
 801f680:	893b      	ldrh	r3, [r7, #8]
 801f682:	4413      	add	r3, r2
 801f684:	b29b      	uxth	r3, r3
 801f686:	3314      	adds	r3, #20
 801f688:	b29b      	uxth	r3, r3
 801f68a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f68e:	4619      	mov	r1, r3
 801f690:	2022      	movs	r0, #34	; 0x22
 801f692:	f7f9 fd2b 	bl	80190ec <pbuf_alloc>
 801f696:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801f698:	697b      	ldr	r3, [r7, #20]
 801f69a:	2b00      	cmp	r3, #0
 801f69c:	d04d      	beq.n	801f73a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801f69e:	897b      	ldrh	r3, [r7, #10]
 801f6a0:	3313      	adds	r3, #19
 801f6a2:	697a      	ldr	r2, [r7, #20]
 801f6a4:	8952      	ldrh	r2, [r2, #10]
 801f6a6:	4293      	cmp	r3, r2
 801f6a8:	db06      	blt.n	801f6b8 <tcp_output_alloc_header_common+0x4c>
 801f6aa:	4b26      	ldr	r3, [pc, #152]	; (801f744 <tcp_output_alloc_header_common+0xd8>)
 801f6ac:	f240 7223 	movw	r2, #1827	; 0x723
 801f6b0:	4925      	ldr	r1, [pc, #148]	; (801f748 <tcp_output_alloc_header_common+0xdc>)
 801f6b2:	4826      	ldr	r0, [pc, #152]	; (801f74c <tcp_output_alloc_header_common+0xe0>)
 801f6b4:	f004 f8cc 	bl	8023850 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801f6b8:	697b      	ldr	r3, [r7, #20]
 801f6ba:	685b      	ldr	r3, [r3, #4]
 801f6bc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801f6be:	8c3b      	ldrh	r3, [r7, #32]
 801f6c0:	4618      	mov	r0, r3
 801f6c2:	f7f8 fc05 	bl	8017ed0 <lwip_htons>
 801f6c6:	4603      	mov	r3, r0
 801f6c8:	461a      	mov	r2, r3
 801f6ca:	693b      	ldr	r3, [r7, #16]
 801f6cc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801f6ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f6d0:	4618      	mov	r0, r3
 801f6d2:	f7f8 fbfd 	bl	8017ed0 <lwip_htons>
 801f6d6:	4603      	mov	r3, r0
 801f6d8:	461a      	mov	r2, r3
 801f6da:	693b      	ldr	r3, [r7, #16]
 801f6dc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801f6de:	693b      	ldr	r3, [r7, #16]
 801f6e0:	687a      	ldr	r2, [r7, #4]
 801f6e2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801f6e4:	68f8      	ldr	r0, [r7, #12]
 801f6e6:	f7f8 fc08 	bl	8017efa <lwip_htonl>
 801f6ea:	4602      	mov	r2, r0
 801f6ec:	693b      	ldr	r3, [r7, #16]
 801f6ee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801f6f0:	897b      	ldrh	r3, [r7, #10]
 801f6f2:	089b      	lsrs	r3, r3, #2
 801f6f4:	b29b      	uxth	r3, r3
 801f6f6:	3305      	adds	r3, #5
 801f6f8:	b29b      	uxth	r3, r3
 801f6fa:	031b      	lsls	r3, r3, #12
 801f6fc:	b29a      	uxth	r2, r3
 801f6fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801f702:	b29b      	uxth	r3, r3
 801f704:	4313      	orrs	r3, r2
 801f706:	b29b      	uxth	r3, r3
 801f708:	4618      	mov	r0, r3
 801f70a:	f7f8 fbe1 	bl	8017ed0 <lwip_htons>
 801f70e:	4603      	mov	r3, r0
 801f710:	461a      	mov	r2, r3
 801f712:	693b      	ldr	r3, [r7, #16]
 801f714:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801f716:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801f718:	4618      	mov	r0, r3
 801f71a:	f7f8 fbd9 	bl	8017ed0 <lwip_htons>
 801f71e:	4603      	mov	r3, r0
 801f720:	461a      	mov	r2, r3
 801f722:	693b      	ldr	r3, [r7, #16]
 801f724:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801f726:	693b      	ldr	r3, [r7, #16]
 801f728:	2200      	movs	r2, #0
 801f72a:	741a      	strb	r2, [r3, #16]
 801f72c:	2200      	movs	r2, #0
 801f72e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801f730:	693b      	ldr	r3, [r7, #16]
 801f732:	2200      	movs	r2, #0
 801f734:	749a      	strb	r2, [r3, #18]
 801f736:	2200      	movs	r2, #0
 801f738:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801f73a:	697b      	ldr	r3, [r7, #20]
}
 801f73c:	4618      	mov	r0, r3
 801f73e:	3718      	adds	r7, #24
 801f740:	46bd      	mov	sp, r7
 801f742:	bd80      	pop	{r7, pc}
 801f744:	08026df4 	.word	0x08026df4
 801f748:	080274cc 	.word	0x080274cc
 801f74c:	08026e48 	.word	0x08026e48

0801f750 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801f750:	b5b0      	push	{r4, r5, r7, lr}
 801f752:	b08a      	sub	sp, #40	; 0x28
 801f754:	af04      	add	r7, sp, #16
 801f756:	60f8      	str	r0, [r7, #12]
 801f758:	607b      	str	r3, [r7, #4]
 801f75a:	460b      	mov	r3, r1
 801f75c:	817b      	strh	r3, [r7, #10]
 801f75e:	4613      	mov	r3, r2
 801f760:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801f762:	68fb      	ldr	r3, [r7, #12]
 801f764:	2b00      	cmp	r3, #0
 801f766:	d106      	bne.n	801f776 <tcp_output_alloc_header+0x26>
 801f768:	4b15      	ldr	r3, [pc, #84]	; (801f7c0 <tcp_output_alloc_header+0x70>)
 801f76a:	f240 7242 	movw	r2, #1858	; 0x742
 801f76e:	4915      	ldr	r1, [pc, #84]	; (801f7c4 <tcp_output_alloc_header+0x74>)
 801f770:	4815      	ldr	r0, [pc, #84]	; (801f7c8 <tcp_output_alloc_header+0x78>)
 801f772:	f004 f86d 	bl	8023850 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801f776:	68fb      	ldr	r3, [r7, #12]
 801f778:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801f77a:	68fb      	ldr	r3, [r7, #12]
 801f77c:	8adb      	ldrh	r3, [r3, #22]
 801f77e:	68fa      	ldr	r2, [r7, #12]
 801f780:	8b12      	ldrh	r2, [r2, #24]
 801f782:	68f9      	ldr	r1, [r7, #12]
 801f784:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801f786:	893d      	ldrh	r5, [r7, #8]
 801f788:	897c      	ldrh	r4, [r7, #10]
 801f78a:	9103      	str	r1, [sp, #12]
 801f78c:	2110      	movs	r1, #16
 801f78e:	9102      	str	r1, [sp, #8]
 801f790:	9201      	str	r2, [sp, #4]
 801f792:	9300      	str	r3, [sp, #0]
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	462a      	mov	r2, r5
 801f798:	4621      	mov	r1, r4
 801f79a:	f7ff ff67 	bl	801f66c <tcp_output_alloc_header_common>
 801f79e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801f7a0:	697b      	ldr	r3, [r7, #20]
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	d006      	beq.n	801f7b4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f7a6:	68fb      	ldr	r3, [r7, #12]
 801f7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f7aa:	68fa      	ldr	r2, [r7, #12]
 801f7ac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801f7ae:	441a      	add	r2, r3
 801f7b0:	68fb      	ldr	r3, [r7, #12]
 801f7b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801f7b4:	697b      	ldr	r3, [r7, #20]
}
 801f7b6:	4618      	mov	r0, r3
 801f7b8:	3718      	adds	r7, #24
 801f7ba:	46bd      	mov	sp, r7
 801f7bc:	bdb0      	pop	{r4, r5, r7, pc}
 801f7be:	bf00      	nop
 801f7c0:	08026df4 	.word	0x08026df4
 801f7c4:	080274fc 	.word	0x080274fc
 801f7c8:	08026e48 	.word	0x08026e48

0801f7cc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801f7cc:	b580      	push	{r7, lr}
 801f7ce:	b088      	sub	sp, #32
 801f7d0:	af00      	add	r7, sp, #0
 801f7d2:	60f8      	str	r0, [r7, #12]
 801f7d4:	60b9      	str	r1, [r7, #8]
 801f7d6:	4611      	mov	r1, r2
 801f7d8:	461a      	mov	r2, r3
 801f7da:	460b      	mov	r3, r1
 801f7dc:	71fb      	strb	r3, [r7, #7]
 801f7de:	4613      	mov	r3, r2
 801f7e0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801f7e2:	2300      	movs	r3, #0
 801f7e4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801f7e6:	68bb      	ldr	r3, [r7, #8]
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	d106      	bne.n	801f7fa <tcp_output_fill_options+0x2e>
 801f7ec:	4b12      	ldr	r3, [pc, #72]	; (801f838 <tcp_output_fill_options+0x6c>)
 801f7ee:	f240 7256 	movw	r2, #1878	; 0x756
 801f7f2:	4912      	ldr	r1, [pc, #72]	; (801f83c <tcp_output_fill_options+0x70>)
 801f7f4:	4812      	ldr	r0, [pc, #72]	; (801f840 <tcp_output_fill_options+0x74>)
 801f7f6:	f004 f82b 	bl	8023850 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801f7fa:	68bb      	ldr	r3, [r7, #8]
 801f7fc:	685b      	ldr	r3, [r3, #4]
 801f7fe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801f800:	69bb      	ldr	r3, [r7, #24]
 801f802:	3314      	adds	r3, #20
 801f804:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801f806:	8bfb      	ldrh	r3, [r7, #30]
 801f808:	009b      	lsls	r3, r3, #2
 801f80a:	461a      	mov	r2, r3
 801f80c:	79fb      	ldrb	r3, [r7, #7]
 801f80e:	009b      	lsls	r3, r3, #2
 801f810:	f003 0304 	and.w	r3, r3, #4
 801f814:	4413      	add	r3, r2
 801f816:	3314      	adds	r3, #20
 801f818:	69ba      	ldr	r2, [r7, #24]
 801f81a:	4413      	add	r3, r2
 801f81c:	697a      	ldr	r2, [r7, #20]
 801f81e:	429a      	cmp	r2, r3
 801f820:	d006      	beq.n	801f830 <tcp_output_fill_options+0x64>
 801f822:	4b05      	ldr	r3, [pc, #20]	; (801f838 <tcp_output_fill_options+0x6c>)
 801f824:	f240 7275 	movw	r2, #1909	; 0x775
 801f828:	4906      	ldr	r1, [pc, #24]	; (801f844 <tcp_output_fill_options+0x78>)
 801f82a:	4805      	ldr	r0, [pc, #20]	; (801f840 <tcp_output_fill_options+0x74>)
 801f82c:	f004 f810 	bl	8023850 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801f830:	bf00      	nop
 801f832:	3720      	adds	r7, #32
 801f834:	46bd      	mov	sp, r7
 801f836:	bd80      	pop	{r7, pc}
 801f838:	08026df4 	.word	0x08026df4
 801f83c:	08027524 	.word	0x08027524
 801f840:	08026e48 	.word	0x08026e48
 801f844:	0802741c 	.word	0x0802741c

0801f848 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801f848:	b580      	push	{r7, lr}
 801f84a:	b08a      	sub	sp, #40	; 0x28
 801f84c:	af04      	add	r7, sp, #16
 801f84e:	60f8      	str	r0, [r7, #12]
 801f850:	60b9      	str	r1, [r7, #8]
 801f852:	607a      	str	r2, [r7, #4]
 801f854:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801f856:	68bb      	ldr	r3, [r7, #8]
 801f858:	2b00      	cmp	r3, #0
 801f85a:	d106      	bne.n	801f86a <tcp_output_control_segment+0x22>
 801f85c:	4b1c      	ldr	r3, [pc, #112]	; (801f8d0 <tcp_output_control_segment+0x88>)
 801f85e:	f240 7287 	movw	r2, #1927	; 0x787
 801f862:	491c      	ldr	r1, [pc, #112]	; (801f8d4 <tcp_output_control_segment+0x8c>)
 801f864:	481c      	ldr	r0, [pc, #112]	; (801f8d8 <tcp_output_control_segment+0x90>)
 801f866:	f003 fff3 	bl	8023850 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801f86a:	683a      	ldr	r2, [r7, #0]
 801f86c:	6879      	ldr	r1, [r7, #4]
 801f86e:	68f8      	ldr	r0, [r7, #12]
 801f870:	f7fe fae8 	bl	801de44 <tcp_route>
 801f874:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801f876:	693b      	ldr	r3, [r7, #16]
 801f878:	2b00      	cmp	r3, #0
 801f87a:	d102      	bne.n	801f882 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801f87c:	23fc      	movs	r3, #252	; 0xfc
 801f87e:	75fb      	strb	r3, [r7, #23]
 801f880:	e01c      	b.n	801f8bc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801f882:	68fb      	ldr	r3, [r7, #12]
 801f884:	2b00      	cmp	r3, #0
 801f886:	d006      	beq.n	801f896 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801f888:	68fb      	ldr	r3, [r7, #12]
 801f88a:	7adb      	ldrb	r3, [r3, #11]
 801f88c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801f88e:	68fb      	ldr	r3, [r7, #12]
 801f890:	7a9b      	ldrb	r3, [r3, #10]
 801f892:	757b      	strb	r3, [r7, #21]
 801f894:	e003      	b.n	801f89e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801f896:	23ff      	movs	r3, #255	; 0xff
 801f898:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801f89a:	2300      	movs	r3, #0
 801f89c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801f89e:	7dba      	ldrb	r2, [r7, #22]
 801f8a0:	693b      	ldr	r3, [r7, #16]
 801f8a2:	9302      	str	r3, [sp, #8]
 801f8a4:	2306      	movs	r3, #6
 801f8a6:	9301      	str	r3, [sp, #4]
 801f8a8:	7d7b      	ldrb	r3, [r7, #21]
 801f8aa:	9300      	str	r3, [sp, #0]
 801f8ac:	4613      	mov	r3, r2
 801f8ae:	683a      	ldr	r2, [r7, #0]
 801f8b0:	6879      	ldr	r1, [r7, #4]
 801f8b2:	68b8      	ldr	r0, [r7, #8]
 801f8b4:	f002 f912 	bl	8021adc <ip4_output_if>
 801f8b8:	4603      	mov	r3, r0
 801f8ba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801f8bc:	68b8      	ldr	r0, [r7, #8]
 801f8be:	f7f9 fef9 	bl	80196b4 <pbuf_free>
  return err;
 801f8c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f8c6:	4618      	mov	r0, r3
 801f8c8:	3718      	adds	r7, #24
 801f8ca:	46bd      	mov	sp, r7
 801f8cc:	bd80      	pop	{r7, pc}
 801f8ce:	bf00      	nop
 801f8d0:	08026df4 	.word	0x08026df4
 801f8d4:	0802754c 	.word	0x0802754c
 801f8d8:	08026e48 	.word	0x08026e48

0801f8dc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801f8dc:	b590      	push	{r4, r7, lr}
 801f8de:	b08b      	sub	sp, #44	; 0x2c
 801f8e0:	af04      	add	r7, sp, #16
 801f8e2:	60f8      	str	r0, [r7, #12]
 801f8e4:	60b9      	str	r1, [r7, #8]
 801f8e6:	607a      	str	r2, [r7, #4]
 801f8e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f8ea:	683b      	ldr	r3, [r7, #0]
 801f8ec:	2b00      	cmp	r3, #0
 801f8ee:	d106      	bne.n	801f8fe <tcp_rst+0x22>
 801f8f0:	4b1f      	ldr	r3, [pc, #124]	; (801f970 <tcp_rst+0x94>)
 801f8f2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801f8f6:	491f      	ldr	r1, [pc, #124]	; (801f974 <tcp_rst+0x98>)
 801f8f8:	481f      	ldr	r0, [pc, #124]	; (801f978 <tcp_rst+0x9c>)
 801f8fa:	f003 ffa9 	bl	8023850 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801f8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f900:	2b00      	cmp	r3, #0
 801f902:	d106      	bne.n	801f912 <tcp_rst+0x36>
 801f904:	4b1a      	ldr	r3, [pc, #104]	; (801f970 <tcp_rst+0x94>)
 801f906:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801f90a:	491c      	ldr	r1, [pc, #112]	; (801f97c <tcp_rst+0xa0>)
 801f90c:	481a      	ldr	r0, [pc, #104]	; (801f978 <tcp_rst+0x9c>)
 801f90e:	f003 ff9f 	bl	8023850 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f912:	2300      	movs	r3, #0
 801f914:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801f916:	f246 0308 	movw	r3, #24584	; 0x6008
 801f91a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801f91c:	7dfb      	ldrb	r3, [r7, #23]
 801f91e:	b29c      	uxth	r4, r3
 801f920:	68b8      	ldr	r0, [r7, #8]
 801f922:	f7f8 faea 	bl	8017efa <lwip_htonl>
 801f926:	4602      	mov	r2, r0
 801f928:	8abb      	ldrh	r3, [r7, #20]
 801f92a:	9303      	str	r3, [sp, #12]
 801f92c:	2314      	movs	r3, #20
 801f92e:	9302      	str	r3, [sp, #8]
 801f930:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801f932:	9301      	str	r3, [sp, #4]
 801f934:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801f936:	9300      	str	r3, [sp, #0]
 801f938:	4613      	mov	r3, r2
 801f93a:	2200      	movs	r2, #0
 801f93c:	4621      	mov	r1, r4
 801f93e:	6878      	ldr	r0, [r7, #4]
 801f940:	f7ff fe94 	bl	801f66c <tcp_output_alloc_header_common>
 801f944:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801f946:	693b      	ldr	r3, [r7, #16]
 801f948:	2b00      	cmp	r3, #0
 801f94a:	d00c      	beq.n	801f966 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f94c:	7dfb      	ldrb	r3, [r7, #23]
 801f94e:	2200      	movs	r2, #0
 801f950:	6939      	ldr	r1, [r7, #16]
 801f952:	68f8      	ldr	r0, [r7, #12]
 801f954:	f7ff ff3a 	bl	801f7cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801f958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f95a:	683a      	ldr	r2, [r7, #0]
 801f95c:	6939      	ldr	r1, [r7, #16]
 801f95e:	68f8      	ldr	r0, [r7, #12]
 801f960:	f7ff ff72 	bl	801f848 <tcp_output_control_segment>
 801f964:	e000      	b.n	801f968 <tcp_rst+0x8c>
    return;
 801f966:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801f968:	371c      	adds	r7, #28
 801f96a:	46bd      	mov	sp, r7
 801f96c:	bd90      	pop	{r4, r7, pc}
 801f96e:	bf00      	nop
 801f970:	08026df4 	.word	0x08026df4
 801f974:	08027578 	.word	0x08027578
 801f978:	08026e48 	.word	0x08026e48
 801f97c:	08027594 	.word	0x08027594

0801f980 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801f980:	b590      	push	{r4, r7, lr}
 801f982:	b087      	sub	sp, #28
 801f984:	af00      	add	r7, sp, #0
 801f986:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801f988:	2300      	movs	r3, #0
 801f98a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801f98c:	2300      	movs	r3, #0
 801f98e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f990:	687b      	ldr	r3, [r7, #4]
 801f992:	2b00      	cmp	r3, #0
 801f994:	d106      	bne.n	801f9a4 <tcp_send_empty_ack+0x24>
 801f996:	4b28      	ldr	r3, [pc, #160]	; (801fa38 <tcp_send_empty_ack+0xb8>)
 801f998:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801f99c:	4927      	ldr	r1, [pc, #156]	; (801fa3c <tcp_send_empty_ack+0xbc>)
 801f99e:	4828      	ldr	r0, [pc, #160]	; (801fa40 <tcp_send_empty_ack+0xc0>)
 801f9a0:	f003 ff56 	bl	8023850 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f9a4:	7dfb      	ldrb	r3, [r7, #23]
 801f9a6:	009b      	lsls	r3, r3, #2
 801f9a8:	b2db      	uxtb	r3, r3
 801f9aa:	f003 0304 	and.w	r3, r3, #4
 801f9ae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801f9b0:	7d7b      	ldrb	r3, [r7, #21]
 801f9b2:	b29c      	uxth	r4, r3
 801f9b4:	687b      	ldr	r3, [r7, #4]
 801f9b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f9b8:	4618      	mov	r0, r3
 801f9ba:	f7f8 fa9e 	bl	8017efa <lwip_htonl>
 801f9be:	4603      	mov	r3, r0
 801f9c0:	2200      	movs	r2, #0
 801f9c2:	4621      	mov	r1, r4
 801f9c4:	6878      	ldr	r0, [r7, #4]
 801f9c6:	f7ff fec3 	bl	801f750 <tcp_output_alloc_header>
 801f9ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f9cc:	693b      	ldr	r3, [r7, #16]
 801f9ce:	2b00      	cmp	r3, #0
 801f9d0:	d109      	bne.n	801f9e6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	8b5b      	ldrh	r3, [r3, #26]
 801f9d6:	f043 0303 	orr.w	r3, r3, #3
 801f9da:	b29a      	uxth	r2, r3
 801f9dc:	687b      	ldr	r3, [r7, #4]
 801f9de:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801f9e0:	f06f 0301 	mvn.w	r3, #1
 801f9e4:	e023      	b.n	801fa2e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801f9e6:	7dbb      	ldrb	r3, [r7, #22]
 801f9e8:	7dfa      	ldrb	r2, [r7, #23]
 801f9ea:	6939      	ldr	r1, [r7, #16]
 801f9ec:	6878      	ldr	r0, [r7, #4]
 801f9ee:	f7ff feed 	bl	801f7cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f9f2:	687a      	ldr	r2, [r7, #4]
 801f9f4:	687b      	ldr	r3, [r7, #4]
 801f9f6:	3304      	adds	r3, #4
 801f9f8:	6939      	ldr	r1, [r7, #16]
 801f9fa:	6878      	ldr	r0, [r7, #4]
 801f9fc:	f7ff ff24 	bl	801f848 <tcp_output_control_segment>
 801fa00:	4603      	mov	r3, r0
 801fa02:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801fa04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	d007      	beq.n	801fa1c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	8b5b      	ldrh	r3, [r3, #26]
 801fa10:	f043 0303 	orr.w	r3, r3, #3
 801fa14:	b29a      	uxth	r2, r3
 801fa16:	687b      	ldr	r3, [r7, #4]
 801fa18:	835a      	strh	r2, [r3, #26]
 801fa1a:	e006      	b.n	801fa2a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fa1c:	687b      	ldr	r3, [r7, #4]
 801fa1e:	8b5b      	ldrh	r3, [r3, #26]
 801fa20:	f023 0303 	bic.w	r3, r3, #3
 801fa24:	b29a      	uxth	r2, r3
 801fa26:	687b      	ldr	r3, [r7, #4]
 801fa28:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801fa2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801fa2e:	4618      	mov	r0, r3
 801fa30:	371c      	adds	r7, #28
 801fa32:	46bd      	mov	sp, r7
 801fa34:	bd90      	pop	{r4, r7, pc}
 801fa36:	bf00      	nop
 801fa38:	08026df4 	.word	0x08026df4
 801fa3c:	080275b0 	.word	0x080275b0
 801fa40:	08026e48 	.word	0x08026e48

0801fa44 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801fa44:	b590      	push	{r4, r7, lr}
 801fa46:	b087      	sub	sp, #28
 801fa48:	af00      	add	r7, sp, #0
 801fa4a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801fa4c:	2300      	movs	r3, #0
 801fa4e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801fa50:	687b      	ldr	r3, [r7, #4]
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	d106      	bne.n	801fa64 <tcp_keepalive+0x20>
 801fa56:	4b18      	ldr	r3, [pc, #96]	; (801fab8 <tcp_keepalive+0x74>)
 801fa58:	f640 0224 	movw	r2, #2084	; 0x824
 801fa5c:	4917      	ldr	r1, [pc, #92]	; (801fabc <tcp_keepalive+0x78>)
 801fa5e:	4818      	ldr	r0, [pc, #96]	; (801fac0 <tcp_keepalive+0x7c>)
 801fa60:	f003 fef6 	bl	8023850 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801fa64:	7dfb      	ldrb	r3, [r7, #23]
 801fa66:	b29c      	uxth	r4, r3
 801fa68:	687b      	ldr	r3, [r7, #4]
 801fa6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fa6c:	3b01      	subs	r3, #1
 801fa6e:	4618      	mov	r0, r3
 801fa70:	f7f8 fa43 	bl	8017efa <lwip_htonl>
 801fa74:	4603      	mov	r3, r0
 801fa76:	2200      	movs	r2, #0
 801fa78:	4621      	mov	r1, r4
 801fa7a:	6878      	ldr	r0, [r7, #4]
 801fa7c:	f7ff fe68 	bl	801f750 <tcp_output_alloc_header>
 801fa80:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801fa82:	693b      	ldr	r3, [r7, #16]
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	d102      	bne.n	801fa8e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801fa88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fa8c:	e010      	b.n	801fab0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801fa8e:	7dfb      	ldrb	r3, [r7, #23]
 801fa90:	2200      	movs	r2, #0
 801fa92:	6939      	ldr	r1, [r7, #16]
 801fa94:	6878      	ldr	r0, [r7, #4]
 801fa96:	f7ff fe99 	bl	801f7cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fa9a:	687a      	ldr	r2, [r7, #4]
 801fa9c:	687b      	ldr	r3, [r7, #4]
 801fa9e:	3304      	adds	r3, #4
 801faa0:	6939      	ldr	r1, [r7, #16]
 801faa2:	6878      	ldr	r0, [r7, #4]
 801faa4:	f7ff fed0 	bl	801f848 <tcp_output_control_segment>
 801faa8:	4603      	mov	r3, r0
 801faaa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801faac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801fab0:	4618      	mov	r0, r3
 801fab2:	371c      	adds	r7, #28
 801fab4:	46bd      	mov	sp, r7
 801fab6:	bd90      	pop	{r4, r7, pc}
 801fab8:	08026df4 	.word	0x08026df4
 801fabc:	080275d0 	.word	0x080275d0
 801fac0:	08026e48 	.word	0x08026e48

0801fac4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801fac4:	b590      	push	{r4, r7, lr}
 801fac6:	b08b      	sub	sp, #44	; 0x2c
 801fac8:	af00      	add	r7, sp, #0
 801faca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801facc:	2300      	movs	r3, #0
 801face:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801fad2:	687b      	ldr	r3, [r7, #4]
 801fad4:	2b00      	cmp	r3, #0
 801fad6:	d106      	bne.n	801fae6 <tcp_zero_window_probe+0x22>
 801fad8:	4b4c      	ldr	r3, [pc, #304]	; (801fc0c <tcp_zero_window_probe+0x148>)
 801fada:	f640 024f 	movw	r2, #2127	; 0x84f
 801fade:	494c      	ldr	r1, [pc, #304]	; (801fc10 <tcp_zero_window_probe+0x14c>)
 801fae0:	484c      	ldr	r0, [pc, #304]	; (801fc14 <tcp_zero_window_probe+0x150>)
 801fae2:	f003 feb5 	bl	8023850 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801fae6:	687b      	ldr	r3, [r7, #4]
 801fae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801faea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801faec:	6a3b      	ldr	r3, [r7, #32]
 801faee:	2b00      	cmp	r3, #0
 801faf0:	d101      	bne.n	801faf6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801faf2:	2300      	movs	r3, #0
 801faf4:	e086      	b.n	801fc04 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801fafc:	2bff      	cmp	r3, #255	; 0xff
 801fafe:	d007      	beq.n	801fb10 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801fb00:	687b      	ldr	r3, [r7, #4]
 801fb02:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801fb06:	3301      	adds	r3, #1
 801fb08:	b2da      	uxtb	r2, r3
 801fb0a:	687b      	ldr	r3, [r7, #4]
 801fb0c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801fb10:	6a3b      	ldr	r3, [r7, #32]
 801fb12:	68db      	ldr	r3, [r3, #12]
 801fb14:	899b      	ldrh	r3, [r3, #12]
 801fb16:	b29b      	uxth	r3, r3
 801fb18:	4618      	mov	r0, r3
 801fb1a:	f7f8 f9d9 	bl	8017ed0 <lwip_htons>
 801fb1e:	4603      	mov	r3, r0
 801fb20:	b2db      	uxtb	r3, r3
 801fb22:	f003 0301 	and.w	r3, r3, #1
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d005      	beq.n	801fb36 <tcp_zero_window_probe+0x72>
 801fb2a:	6a3b      	ldr	r3, [r7, #32]
 801fb2c:	891b      	ldrh	r3, [r3, #8]
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d101      	bne.n	801fb36 <tcp_zero_window_probe+0x72>
 801fb32:	2301      	movs	r3, #1
 801fb34:	e000      	b.n	801fb38 <tcp_zero_window_probe+0x74>
 801fb36:	2300      	movs	r3, #0
 801fb38:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801fb3a:	7ffb      	ldrb	r3, [r7, #31]
 801fb3c:	2b00      	cmp	r3, #0
 801fb3e:	bf0c      	ite	eq
 801fb40:	2301      	moveq	r3, #1
 801fb42:	2300      	movne	r3, #0
 801fb44:	b2db      	uxtb	r3, r3
 801fb46:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801fb48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fb4c:	b299      	uxth	r1, r3
 801fb4e:	6a3b      	ldr	r3, [r7, #32]
 801fb50:	68db      	ldr	r3, [r3, #12]
 801fb52:	685b      	ldr	r3, [r3, #4]
 801fb54:	8bba      	ldrh	r2, [r7, #28]
 801fb56:	6878      	ldr	r0, [r7, #4]
 801fb58:	f7ff fdfa 	bl	801f750 <tcp_output_alloc_header>
 801fb5c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801fb5e:	69bb      	ldr	r3, [r7, #24]
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	d102      	bne.n	801fb6a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801fb64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fb68:	e04c      	b.n	801fc04 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801fb6a:	69bb      	ldr	r3, [r7, #24]
 801fb6c:	685b      	ldr	r3, [r3, #4]
 801fb6e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801fb70:	7ffb      	ldrb	r3, [r7, #31]
 801fb72:	2b00      	cmp	r3, #0
 801fb74:	d011      	beq.n	801fb9a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801fb76:	697b      	ldr	r3, [r7, #20]
 801fb78:	899b      	ldrh	r3, [r3, #12]
 801fb7a:	b29b      	uxth	r3, r3
 801fb7c:	b21b      	sxth	r3, r3
 801fb7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801fb82:	b21c      	sxth	r4, r3
 801fb84:	2011      	movs	r0, #17
 801fb86:	f7f8 f9a3 	bl	8017ed0 <lwip_htons>
 801fb8a:	4603      	mov	r3, r0
 801fb8c:	b21b      	sxth	r3, r3
 801fb8e:	4323      	orrs	r3, r4
 801fb90:	b21b      	sxth	r3, r3
 801fb92:	b29a      	uxth	r2, r3
 801fb94:	697b      	ldr	r3, [r7, #20]
 801fb96:	819a      	strh	r2, [r3, #12]
 801fb98:	e010      	b.n	801fbbc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801fb9a:	69bb      	ldr	r3, [r7, #24]
 801fb9c:	685b      	ldr	r3, [r3, #4]
 801fb9e:	3314      	adds	r3, #20
 801fba0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801fba2:	6a3b      	ldr	r3, [r7, #32]
 801fba4:	6858      	ldr	r0, [r3, #4]
 801fba6:	6a3b      	ldr	r3, [r7, #32]
 801fba8:	685b      	ldr	r3, [r3, #4]
 801fbaa:	891a      	ldrh	r2, [r3, #8]
 801fbac:	6a3b      	ldr	r3, [r7, #32]
 801fbae:	891b      	ldrh	r3, [r3, #8]
 801fbb0:	1ad3      	subs	r3, r2, r3
 801fbb2:	b29b      	uxth	r3, r3
 801fbb4:	2201      	movs	r2, #1
 801fbb6:	6939      	ldr	r1, [r7, #16]
 801fbb8:	f7f9 ff72 	bl	8019aa0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801fbbc:	6a3b      	ldr	r3, [r7, #32]
 801fbbe:	68db      	ldr	r3, [r3, #12]
 801fbc0:	685b      	ldr	r3, [r3, #4]
 801fbc2:	4618      	mov	r0, r3
 801fbc4:	f7f8 f999 	bl	8017efa <lwip_htonl>
 801fbc8:	4603      	mov	r3, r0
 801fbca:	3301      	adds	r3, #1
 801fbcc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801fbce:	687b      	ldr	r3, [r7, #4]
 801fbd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fbd2:	68fb      	ldr	r3, [r7, #12]
 801fbd4:	1ad3      	subs	r3, r2, r3
 801fbd6:	2b00      	cmp	r3, #0
 801fbd8:	da02      	bge.n	801fbe0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801fbda:	687b      	ldr	r3, [r7, #4]
 801fbdc:	68fa      	ldr	r2, [r7, #12]
 801fbde:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801fbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801fbe4:	2200      	movs	r2, #0
 801fbe6:	69b9      	ldr	r1, [r7, #24]
 801fbe8:	6878      	ldr	r0, [r7, #4]
 801fbea:	f7ff fdef 	bl	801f7cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fbee:	687a      	ldr	r2, [r7, #4]
 801fbf0:	687b      	ldr	r3, [r7, #4]
 801fbf2:	3304      	adds	r3, #4
 801fbf4:	69b9      	ldr	r1, [r7, #24]
 801fbf6:	6878      	ldr	r0, [r7, #4]
 801fbf8:	f7ff fe26 	bl	801f848 <tcp_output_control_segment>
 801fbfc:	4603      	mov	r3, r0
 801fbfe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801fc00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801fc04:	4618      	mov	r0, r3
 801fc06:	372c      	adds	r7, #44	; 0x2c
 801fc08:	46bd      	mov	sp, r7
 801fc0a:	bd90      	pop	{r4, r7, pc}
 801fc0c:	08026df4 	.word	0x08026df4
 801fc10:	080275ec 	.word	0x080275ec
 801fc14:	08026e48 	.word	0x08026e48

0801fc18 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801fc18:	b580      	push	{r7, lr}
 801fc1a:	b082      	sub	sp, #8
 801fc1c:	af00      	add	r7, sp, #0
 801fc1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801fc20:	f7fa f82c 	bl	8019c7c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801fc24:	4b0a      	ldr	r3, [pc, #40]	; (801fc50 <tcpip_tcp_timer+0x38>)
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d103      	bne.n	801fc34 <tcpip_tcp_timer+0x1c>
 801fc2c:	4b09      	ldr	r3, [pc, #36]	; (801fc54 <tcpip_tcp_timer+0x3c>)
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	2b00      	cmp	r3, #0
 801fc32:	d005      	beq.n	801fc40 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801fc34:	2200      	movs	r2, #0
 801fc36:	4908      	ldr	r1, [pc, #32]	; (801fc58 <tcpip_tcp_timer+0x40>)
 801fc38:	20fa      	movs	r0, #250	; 0xfa
 801fc3a:	f000 f8f3 	bl	801fe24 <sys_timeout>
 801fc3e:	e003      	b.n	801fc48 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801fc40:	4b06      	ldr	r3, [pc, #24]	; (801fc5c <tcpip_tcp_timer+0x44>)
 801fc42:	2200      	movs	r2, #0
 801fc44:	601a      	str	r2, [r3, #0]
  }
}
 801fc46:	bf00      	nop
 801fc48:	bf00      	nop
 801fc4a:	3708      	adds	r7, #8
 801fc4c:	46bd      	mov	sp, r7
 801fc4e:	bd80      	pop	{r7, pc}
 801fc50:	20011324 	.word	0x20011324
 801fc54:	20011328 	.word	0x20011328
 801fc58:	0801fc19 	.word	0x0801fc19
 801fc5c:	20011370 	.word	0x20011370

0801fc60 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801fc60:	b580      	push	{r7, lr}
 801fc62:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801fc64:	4b0a      	ldr	r3, [pc, #40]	; (801fc90 <tcp_timer_needed+0x30>)
 801fc66:	681b      	ldr	r3, [r3, #0]
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d10f      	bne.n	801fc8c <tcp_timer_needed+0x2c>
 801fc6c:	4b09      	ldr	r3, [pc, #36]	; (801fc94 <tcp_timer_needed+0x34>)
 801fc6e:	681b      	ldr	r3, [r3, #0]
 801fc70:	2b00      	cmp	r3, #0
 801fc72:	d103      	bne.n	801fc7c <tcp_timer_needed+0x1c>
 801fc74:	4b08      	ldr	r3, [pc, #32]	; (801fc98 <tcp_timer_needed+0x38>)
 801fc76:	681b      	ldr	r3, [r3, #0]
 801fc78:	2b00      	cmp	r3, #0
 801fc7a:	d007      	beq.n	801fc8c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801fc7c:	4b04      	ldr	r3, [pc, #16]	; (801fc90 <tcp_timer_needed+0x30>)
 801fc7e:	2201      	movs	r2, #1
 801fc80:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801fc82:	2200      	movs	r2, #0
 801fc84:	4905      	ldr	r1, [pc, #20]	; (801fc9c <tcp_timer_needed+0x3c>)
 801fc86:	20fa      	movs	r0, #250	; 0xfa
 801fc88:	f000 f8cc 	bl	801fe24 <sys_timeout>
  }
}
 801fc8c:	bf00      	nop
 801fc8e:	bd80      	pop	{r7, pc}
 801fc90:	20011370 	.word	0x20011370
 801fc94:	20011324 	.word	0x20011324
 801fc98:	20011328 	.word	0x20011328
 801fc9c:	0801fc19 	.word	0x0801fc19

0801fca0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801fca0:	b580      	push	{r7, lr}
 801fca2:	b086      	sub	sp, #24
 801fca4:	af00      	add	r7, sp, #0
 801fca6:	60f8      	str	r0, [r7, #12]
 801fca8:	60b9      	str	r1, [r7, #8]
 801fcaa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801fcac:	200a      	movs	r0, #10
 801fcae:	f7f8 fde7 	bl	8018880 <memp_malloc>
 801fcb2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801fcb4:	693b      	ldr	r3, [r7, #16]
 801fcb6:	2b00      	cmp	r3, #0
 801fcb8:	d109      	bne.n	801fcce <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801fcba:	693b      	ldr	r3, [r7, #16]
 801fcbc:	2b00      	cmp	r3, #0
 801fcbe:	d151      	bne.n	801fd64 <sys_timeout_abs+0xc4>
 801fcc0:	4b2a      	ldr	r3, [pc, #168]	; (801fd6c <sys_timeout_abs+0xcc>)
 801fcc2:	22be      	movs	r2, #190	; 0xbe
 801fcc4:	492a      	ldr	r1, [pc, #168]	; (801fd70 <sys_timeout_abs+0xd0>)
 801fcc6:	482b      	ldr	r0, [pc, #172]	; (801fd74 <sys_timeout_abs+0xd4>)
 801fcc8:	f003 fdc2 	bl	8023850 <iprintf>
    return;
 801fccc:	e04a      	b.n	801fd64 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801fcce:	693b      	ldr	r3, [r7, #16]
 801fcd0:	2200      	movs	r2, #0
 801fcd2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801fcd4:	693b      	ldr	r3, [r7, #16]
 801fcd6:	68ba      	ldr	r2, [r7, #8]
 801fcd8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801fcda:	693b      	ldr	r3, [r7, #16]
 801fcdc:	687a      	ldr	r2, [r7, #4]
 801fcde:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801fce0:	693b      	ldr	r3, [r7, #16]
 801fce2:	68fa      	ldr	r2, [r7, #12]
 801fce4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801fce6:	4b24      	ldr	r3, [pc, #144]	; (801fd78 <sys_timeout_abs+0xd8>)
 801fce8:	681b      	ldr	r3, [r3, #0]
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	d103      	bne.n	801fcf6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801fcee:	4a22      	ldr	r2, [pc, #136]	; (801fd78 <sys_timeout_abs+0xd8>)
 801fcf0:	693b      	ldr	r3, [r7, #16]
 801fcf2:	6013      	str	r3, [r2, #0]
    return;
 801fcf4:	e037      	b.n	801fd66 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801fcf6:	693b      	ldr	r3, [r7, #16]
 801fcf8:	685a      	ldr	r2, [r3, #4]
 801fcfa:	4b1f      	ldr	r3, [pc, #124]	; (801fd78 <sys_timeout_abs+0xd8>)
 801fcfc:	681b      	ldr	r3, [r3, #0]
 801fcfe:	685b      	ldr	r3, [r3, #4]
 801fd00:	1ad3      	subs	r3, r2, r3
 801fd02:	0fdb      	lsrs	r3, r3, #31
 801fd04:	f003 0301 	and.w	r3, r3, #1
 801fd08:	b2db      	uxtb	r3, r3
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	d007      	beq.n	801fd1e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801fd0e:	4b1a      	ldr	r3, [pc, #104]	; (801fd78 <sys_timeout_abs+0xd8>)
 801fd10:	681a      	ldr	r2, [r3, #0]
 801fd12:	693b      	ldr	r3, [r7, #16]
 801fd14:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801fd16:	4a18      	ldr	r2, [pc, #96]	; (801fd78 <sys_timeout_abs+0xd8>)
 801fd18:	693b      	ldr	r3, [r7, #16]
 801fd1a:	6013      	str	r3, [r2, #0]
 801fd1c:	e023      	b.n	801fd66 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801fd1e:	4b16      	ldr	r3, [pc, #88]	; (801fd78 <sys_timeout_abs+0xd8>)
 801fd20:	681b      	ldr	r3, [r3, #0]
 801fd22:	617b      	str	r3, [r7, #20]
 801fd24:	e01a      	b.n	801fd5c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801fd26:	697b      	ldr	r3, [r7, #20]
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d00b      	beq.n	801fd46 <sys_timeout_abs+0xa6>
 801fd2e:	693b      	ldr	r3, [r7, #16]
 801fd30:	685a      	ldr	r2, [r3, #4]
 801fd32:	697b      	ldr	r3, [r7, #20]
 801fd34:	681b      	ldr	r3, [r3, #0]
 801fd36:	685b      	ldr	r3, [r3, #4]
 801fd38:	1ad3      	subs	r3, r2, r3
 801fd3a:	0fdb      	lsrs	r3, r3, #31
 801fd3c:	f003 0301 	and.w	r3, r3, #1
 801fd40:	b2db      	uxtb	r3, r3
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	d007      	beq.n	801fd56 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801fd46:	697b      	ldr	r3, [r7, #20]
 801fd48:	681a      	ldr	r2, [r3, #0]
 801fd4a:	693b      	ldr	r3, [r7, #16]
 801fd4c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801fd4e:	697b      	ldr	r3, [r7, #20]
 801fd50:	693a      	ldr	r2, [r7, #16]
 801fd52:	601a      	str	r2, [r3, #0]
        break;
 801fd54:	e007      	b.n	801fd66 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801fd56:	697b      	ldr	r3, [r7, #20]
 801fd58:	681b      	ldr	r3, [r3, #0]
 801fd5a:	617b      	str	r3, [r7, #20]
 801fd5c:	697b      	ldr	r3, [r7, #20]
 801fd5e:	2b00      	cmp	r3, #0
 801fd60:	d1e1      	bne.n	801fd26 <sys_timeout_abs+0x86>
 801fd62:	e000      	b.n	801fd66 <sys_timeout_abs+0xc6>
    return;
 801fd64:	bf00      	nop
      }
    }
  }
}
 801fd66:	3718      	adds	r7, #24
 801fd68:	46bd      	mov	sp, r7
 801fd6a:	bd80      	pop	{r7, pc}
 801fd6c:	08027610 	.word	0x08027610
 801fd70:	08027644 	.word	0x08027644
 801fd74:	08027684 	.word	0x08027684
 801fd78:	20011368 	.word	0x20011368

0801fd7c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801fd7c:	b580      	push	{r7, lr}
 801fd7e:	b086      	sub	sp, #24
 801fd80:	af00      	add	r7, sp, #0
 801fd82:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801fd88:	697b      	ldr	r3, [r7, #20]
 801fd8a:	685b      	ldr	r3, [r3, #4]
 801fd8c:	4798      	blx	r3

  now = sys_now();
 801fd8e:	f7f0 fd81 	bl	8010894 <sys_now>
 801fd92:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801fd94:	697b      	ldr	r3, [r7, #20]
 801fd96:	681a      	ldr	r2, [r3, #0]
 801fd98:	4b0f      	ldr	r3, [pc, #60]	; (801fdd8 <lwip_cyclic_timer+0x5c>)
 801fd9a:	681b      	ldr	r3, [r3, #0]
 801fd9c:	4413      	add	r3, r2
 801fd9e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801fda0:	68fa      	ldr	r2, [r7, #12]
 801fda2:	693b      	ldr	r3, [r7, #16]
 801fda4:	1ad3      	subs	r3, r2, r3
 801fda6:	0fdb      	lsrs	r3, r3, #31
 801fda8:	f003 0301 	and.w	r3, r3, #1
 801fdac:	b2db      	uxtb	r3, r3
 801fdae:	2b00      	cmp	r3, #0
 801fdb0:	d009      	beq.n	801fdc6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801fdb2:	697b      	ldr	r3, [r7, #20]
 801fdb4:	681a      	ldr	r2, [r3, #0]
 801fdb6:	693b      	ldr	r3, [r7, #16]
 801fdb8:	4413      	add	r3, r2
 801fdba:	687a      	ldr	r2, [r7, #4]
 801fdbc:	4907      	ldr	r1, [pc, #28]	; (801fddc <lwip_cyclic_timer+0x60>)
 801fdbe:	4618      	mov	r0, r3
 801fdc0:	f7ff ff6e 	bl	801fca0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801fdc4:	e004      	b.n	801fdd0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801fdc6:	687a      	ldr	r2, [r7, #4]
 801fdc8:	4904      	ldr	r1, [pc, #16]	; (801fddc <lwip_cyclic_timer+0x60>)
 801fdca:	68f8      	ldr	r0, [r7, #12]
 801fdcc:	f7ff ff68 	bl	801fca0 <sys_timeout_abs>
}
 801fdd0:	bf00      	nop
 801fdd2:	3718      	adds	r7, #24
 801fdd4:	46bd      	mov	sp, r7
 801fdd6:	bd80      	pop	{r7, pc}
 801fdd8:	2001136c 	.word	0x2001136c
 801fddc:	0801fd7d 	.word	0x0801fd7d

0801fde0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801fde0:	b580      	push	{r7, lr}
 801fde2:	b082      	sub	sp, #8
 801fde4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801fde6:	2301      	movs	r3, #1
 801fde8:	607b      	str	r3, [r7, #4]
 801fdea:	e00e      	b.n	801fe0a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801fdec:	4a0b      	ldr	r2, [pc, #44]	; (801fe1c <sys_timeouts_init+0x3c>)
 801fdee:	687b      	ldr	r3, [r7, #4]
 801fdf0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	00db      	lsls	r3, r3, #3
 801fdf8:	4a08      	ldr	r2, [pc, #32]	; (801fe1c <sys_timeouts_init+0x3c>)
 801fdfa:	4413      	add	r3, r2
 801fdfc:	461a      	mov	r2, r3
 801fdfe:	4908      	ldr	r1, [pc, #32]	; (801fe20 <sys_timeouts_init+0x40>)
 801fe00:	f000 f810 	bl	801fe24 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	3301      	adds	r3, #1
 801fe08:	607b      	str	r3, [r7, #4]
 801fe0a:	687b      	ldr	r3, [r7, #4]
 801fe0c:	2b02      	cmp	r3, #2
 801fe0e:	d9ed      	bls.n	801fdec <sys_timeouts_init+0xc>
  }
}
 801fe10:	bf00      	nop
 801fe12:	bf00      	nop
 801fe14:	3708      	adds	r7, #8
 801fe16:	46bd      	mov	sp, r7
 801fe18:	bd80      	pop	{r7, pc}
 801fe1a:	bf00      	nop
 801fe1c:	08028254 	.word	0x08028254
 801fe20:	0801fd7d 	.word	0x0801fd7d

0801fe24 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801fe24:	b580      	push	{r7, lr}
 801fe26:	b086      	sub	sp, #24
 801fe28:	af00      	add	r7, sp, #0
 801fe2a:	60f8      	str	r0, [r7, #12]
 801fe2c:	60b9      	str	r1, [r7, #8]
 801fe2e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801fe30:	68fb      	ldr	r3, [r7, #12]
 801fe32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fe36:	d306      	bcc.n	801fe46 <sys_timeout+0x22>
 801fe38:	4b0a      	ldr	r3, [pc, #40]	; (801fe64 <sys_timeout+0x40>)
 801fe3a:	f240 1229 	movw	r2, #297	; 0x129
 801fe3e:	490a      	ldr	r1, [pc, #40]	; (801fe68 <sys_timeout+0x44>)
 801fe40:	480a      	ldr	r0, [pc, #40]	; (801fe6c <sys_timeout+0x48>)
 801fe42:	f003 fd05 	bl	8023850 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801fe46:	f7f0 fd25 	bl	8010894 <sys_now>
 801fe4a:	4602      	mov	r2, r0
 801fe4c:	68fb      	ldr	r3, [r7, #12]
 801fe4e:	4413      	add	r3, r2
 801fe50:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fe52:	687a      	ldr	r2, [r7, #4]
 801fe54:	68b9      	ldr	r1, [r7, #8]
 801fe56:	6978      	ldr	r0, [r7, #20]
 801fe58:	f7ff ff22 	bl	801fca0 <sys_timeout_abs>
#endif
}
 801fe5c:	bf00      	nop
 801fe5e:	3718      	adds	r7, #24
 801fe60:	46bd      	mov	sp, r7
 801fe62:	bd80      	pop	{r7, pc}
 801fe64:	08027610 	.word	0x08027610
 801fe68:	080276ac 	.word	0x080276ac
 801fe6c:	08027684 	.word	0x08027684

0801fe70 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801fe70:	b580      	push	{r7, lr}
 801fe72:	b084      	sub	sp, #16
 801fe74:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801fe76:	f7f0 fd0d 	bl	8010894 <sys_now>
 801fe7a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801fe7c:	4b17      	ldr	r3, [pc, #92]	; (801fedc <sys_check_timeouts+0x6c>)
 801fe7e:	681b      	ldr	r3, [r3, #0]
 801fe80:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801fe82:	68bb      	ldr	r3, [r7, #8]
 801fe84:	2b00      	cmp	r3, #0
 801fe86:	d022      	beq.n	801fece <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801fe88:	68bb      	ldr	r3, [r7, #8]
 801fe8a:	685b      	ldr	r3, [r3, #4]
 801fe8c:	68fa      	ldr	r2, [r7, #12]
 801fe8e:	1ad3      	subs	r3, r2, r3
 801fe90:	0fdb      	lsrs	r3, r3, #31
 801fe92:	f003 0301 	and.w	r3, r3, #1
 801fe96:	b2db      	uxtb	r3, r3
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	d11a      	bne.n	801fed2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801fe9c:	68bb      	ldr	r3, [r7, #8]
 801fe9e:	681b      	ldr	r3, [r3, #0]
 801fea0:	4a0e      	ldr	r2, [pc, #56]	; (801fedc <sys_check_timeouts+0x6c>)
 801fea2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801fea4:	68bb      	ldr	r3, [r7, #8]
 801fea6:	689b      	ldr	r3, [r3, #8]
 801fea8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801feaa:	68bb      	ldr	r3, [r7, #8]
 801feac:	68db      	ldr	r3, [r3, #12]
 801feae:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801feb0:	68bb      	ldr	r3, [r7, #8]
 801feb2:	685b      	ldr	r3, [r3, #4]
 801feb4:	4a0a      	ldr	r2, [pc, #40]	; (801fee0 <sys_check_timeouts+0x70>)
 801feb6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801feb8:	68b9      	ldr	r1, [r7, #8]
 801feba:	200a      	movs	r0, #10
 801febc:	f7f8 fd56 	bl	801896c <memp_free>
    if (handler != NULL) {
 801fec0:	687b      	ldr	r3, [r7, #4]
 801fec2:	2b00      	cmp	r3, #0
 801fec4:	d0da      	beq.n	801fe7c <sys_check_timeouts+0xc>
      handler(arg);
 801fec6:	687b      	ldr	r3, [r7, #4]
 801fec8:	6838      	ldr	r0, [r7, #0]
 801feca:	4798      	blx	r3
  do {
 801fecc:	e7d6      	b.n	801fe7c <sys_check_timeouts+0xc>
      return;
 801fece:	bf00      	nop
 801fed0:	e000      	b.n	801fed4 <sys_check_timeouts+0x64>
      return;
 801fed2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801fed4:	3710      	adds	r7, #16
 801fed6:	46bd      	mov	sp, r7
 801fed8:	bd80      	pop	{r7, pc}
 801feda:	bf00      	nop
 801fedc:	20011368 	.word	0x20011368
 801fee0:	2001136c 	.word	0x2001136c

0801fee4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801fee4:	b580      	push	{r7, lr}
 801fee6:	b082      	sub	sp, #8
 801fee8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801feea:	4b16      	ldr	r3, [pc, #88]	; (801ff44 <sys_timeouts_sleeptime+0x60>)
 801feec:	681b      	ldr	r3, [r3, #0]
 801feee:	2b00      	cmp	r3, #0
 801fef0:	d102      	bne.n	801fef8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801fef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fef6:	e020      	b.n	801ff3a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801fef8:	f7f0 fccc 	bl	8010894 <sys_now>
 801fefc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801fefe:	4b11      	ldr	r3, [pc, #68]	; (801ff44 <sys_timeouts_sleeptime+0x60>)
 801ff00:	681b      	ldr	r3, [r3, #0]
 801ff02:	685a      	ldr	r2, [r3, #4]
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	1ad3      	subs	r3, r2, r3
 801ff08:	0fdb      	lsrs	r3, r3, #31
 801ff0a:	f003 0301 	and.w	r3, r3, #1
 801ff0e:	b2db      	uxtb	r3, r3
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	d001      	beq.n	801ff18 <sys_timeouts_sleeptime+0x34>
    return 0;
 801ff14:	2300      	movs	r3, #0
 801ff16:	e010      	b.n	801ff3a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801ff18:	4b0a      	ldr	r3, [pc, #40]	; (801ff44 <sys_timeouts_sleeptime+0x60>)
 801ff1a:	681b      	ldr	r3, [r3, #0]
 801ff1c:	685a      	ldr	r2, [r3, #4]
 801ff1e:	687b      	ldr	r3, [r7, #4]
 801ff20:	1ad3      	subs	r3, r2, r3
 801ff22:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ff24:	683b      	ldr	r3, [r7, #0]
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	da06      	bge.n	801ff38 <sys_timeouts_sleeptime+0x54>
 801ff2a:	4b07      	ldr	r3, [pc, #28]	; (801ff48 <sys_timeouts_sleeptime+0x64>)
 801ff2c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ff30:	4906      	ldr	r1, [pc, #24]	; (801ff4c <sys_timeouts_sleeptime+0x68>)
 801ff32:	4807      	ldr	r0, [pc, #28]	; (801ff50 <sys_timeouts_sleeptime+0x6c>)
 801ff34:	f003 fc8c 	bl	8023850 <iprintf>
    return ret;
 801ff38:	683b      	ldr	r3, [r7, #0]
  }
}
 801ff3a:	4618      	mov	r0, r3
 801ff3c:	3708      	adds	r7, #8
 801ff3e:	46bd      	mov	sp, r7
 801ff40:	bd80      	pop	{r7, pc}
 801ff42:	bf00      	nop
 801ff44:	20011368 	.word	0x20011368
 801ff48:	08027610 	.word	0x08027610
 801ff4c:	080276e4 	.word	0x080276e4
 801ff50:	08027684 	.word	0x08027684

0801ff54 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ff54:	b580      	push	{r7, lr}
 801ff56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ff58:	f003 fb7a 	bl	8023650 <rand>
 801ff5c:	4603      	mov	r3, r0
 801ff5e:	b29b      	uxth	r3, r3
 801ff60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ff64:	b29b      	uxth	r3, r3
 801ff66:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ff6a:	b29a      	uxth	r2, r3
 801ff6c:	4b01      	ldr	r3, [pc, #4]	; (801ff74 <udp_init+0x20>)
 801ff6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ff70:	bf00      	nop
 801ff72:	bd80      	pop	{r7, pc}
 801ff74:	2000004c 	.word	0x2000004c

0801ff78 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ff78:	b480      	push	{r7}
 801ff7a:	b083      	sub	sp, #12
 801ff7c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ff7e:	2300      	movs	r3, #0
 801ff80:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ff82:	4b17      	ldr	r3, [pc, #92]	; (801ffe0 <udp_new_port+0x68>)
 801ff84:	881b      	ldrh	r3, [r3, #0]
 801ff86:	1c5a      	adds	r2, r3, #1
 801ff88:	b291      	uxth	r1, r2
 801ff8a:	4a15      	ldr	r2, [pc, #84]	; (801ffe0 <udp_new_port+0x68>)
 801ff8c:	8011      	strh	r1, [r2, #0]
 801ff8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ff92:	4293      	cmp	r3, r2
 801ff94:	d103      	bne.n	801ff9e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ff96:	4b12      	ldr	r3, [pc, #72]	; (801ffe0 <udp_new_port+0x68>)
 801ff98:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ff9c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ff9e:	4b11      	ldr	r3, [pc, #68]	; (801ffe4 <udp_new_port+0x6c>)
 801ffa0:	681b      	ldr	r3, [r3, #0]
 801ffa2:	603b      	str	r3, [r7, #0]
 801ffa4:	e011      	b.n	801ffca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ffa6:	683b      	ldr	r3, [r7, #0]
 801ffa8:	8a5a      	ldrh	r2, [r3, #18]
 801ffaa:	4b0d      	ldr	r3, [pc, #52]	; (801ffe0 <udp_new_port+0x68>)
 801ffac:	881b      	ldrh	r3, [r3, #0]
 801ffae:	429a      	cmp	r2, r3
 801ffb0:	d108      	bne.n	801ffc4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ffb2:	88fb      	ldrh	r3, [r7, #6]
 801ffb4:	3301      	adds	r3, #1
 801ffb6:	80fb      	strh	r3, [r7, #6]
 801ffb8:	88fb      	ldrh	r3, [r7, #6]
 801ffba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ffbe:	d3e0      	bcc.n	801ff82 <udp_new_port+0xa>
        return 0;
 801ffc0:	2300      	movs	r3, #0
 801ffc2:	e007      	b.n	801ffd4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ffc4:	683b      	ldr	r3, [r7, #0]
 801ffc6:	68db      	ldr	r3, [r3, #12]
 801ffc8:	603b      	str	r3, [r7, #0]
 801ffca:	683b      	ldr	r3, [r7, #0]
 801ffcc:	2b00      	cmp	r3, #0
 801ffce:	d1ea      	bne.n	801ffa6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801ffd0:	4b03      	ldr	r3, [pc, #12]	; (801ffe0 <udp_new_port+0x68>)
 801ffd2:	881b      	ldrh	r3, [r3, #0]
}
 801ffd4:	4618      	mov	r0, r3
 801ffd6:	370c      	adds	r7, #12
 801ffd8:	46bd      	mov	sp, r7
 801ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffde:	4770      	bx	lr
 801ffe0:	2000004c 	.word	0x2000004c
 801ffe4:	20011374 	.word	0x20011374

0801ffe8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801ffe8:	b580      	push	{r7, lr}
 801ffea:	b084      	sub	sp, #16
 801ffec:	af00      	add	r7, sp, #0
 801ffee:	60f8      	str	r0, [r7, #12]
 801fff0:	60b9      	str	r1, [r7, #8]
 801fff2:	4613      	mov	r3, r2
 801fff4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801fff6:	68fb      	ldr	r3, [r7, #12]
 801fff8:	2b00      	cmp	r3, #0
 801fffa:	d105      	bne.n	8020008 <udp_input_local_match+0x20>
 801fffc:	4b27      	ldr	r3, [pc, #156]	; (802009c <udp_input_local_match+0xb4>)
 801fffe:	2287      	movs	r2, #135	; 0x87
 8020000:	4927      	ldr	r1, [pc, #156]	; (80200a0 <udp_input_local_match+0xb8>)
 8020002:	4828      	ldr	r0, [pc, #160]	; (80200a4 <udp_input_local_match+0xbc>)
 8020004:	f003 fc24 	bl	8023850 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8020008:	68bb      	ldr	r3, [r7, #8]
 802000a:	2b00      	cmp	r3, #0
 802000c:	d105      	bne.n	802001a <udp_input_local_match+0x32>
 802000e:	4b23      	ldr	r3, [pc, #140]	; (802009c <udp_input_local_match+0xb4>)
 8020010:	2288      	movs	r2, #136	; 0x88
 8020012:	4925      	ldr	r1, [pc, #148]	; (80200a8 <udp_input_local_match+0xc0>)
 8020014:	4823      	ldr	r0, [pc, #140]	; (80200a4 <udp_input_local_match+0xbc>)
 8020016:	f003 fc1b 	bl	8023850 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802001a:	68fb      	ldr	r3, [r7, #12]
 802001c:	7a1b      	ldrb	r3, [r3, #8]
 802001e:	2b00      	cmp	r3, #0
 8020020:	d00b      	beq.n	802003a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8020022:	68fb      	ldr	r3, [r7, #12]
 8020024:	7a1a      	ldrb	r2, [r3, #8]
 8020026:	4b21      	ldr	r3, [pc, #132]	; (80200ac <udp_input_local_match+0xc4>)
 8020028:	685b      	ldr	r3, [r3, #4]
 802002a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802002e:	3301      	adds	r3, #1
 8020030:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020032:	429a      	cmp	r2, r3
 8020034:	d001      	beq.n	802003a <udp_input_local_match+0x52>
    return 0;
 8020036:	2300      	movs	r3, #0
 8020038:	e02b      	b.n	8020092 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 802003a:	79fb      	ldrb	r3, [r7, #7]
 802003c:	2b00      	cmp	r3, #0
 802003e:	d018      	beq.n	8020072 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020040:	68fb      	ldr	r3, [r7, #12]
 8020042:	2b00      	cmp	r3, #0
 8020044:	d013      	beq.n	802006e <udp_input_local_match+0x86>
 8020046:	68fb      	ldr	r3, [r7, #12]
 8020048:	681b      	ldr	r3, [r3, #0]
 802004a:	2b00      	cmp	r3, #0
 802004c:	d00f      	beq.n	802006e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802004e:	4b17      	ldr	r3, [pc, #92]	; (80200ac <udp_input_local_match+0xc4>)
 8020050:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020056:	d00a      	beq.n	802006e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8020058:	68fb      	ldr	r3, [r7, #12]
 802005a:	681a      	ldr	r2, [r3, #0]
 802005c:	4b13      	ldr	r3, [pc, #76]	; (80200ac <udp_input_local_match+0xc4>)
 802005e:	695b      	ldr	r3, [r3, #20]
 8020060:	405a      	eors	r2, r3
 8020062:	68bb      	ldr	r3, [r7, #8]
 8020064:	3308      	adds	r3, #8
 8020066:	681b      	ldr	r3, [r3, #0]
 8020068:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802006a:	2b00      	cmp	r3, #0
 802006c:	d110      	bne.n	8020090 <udp_input_local_match+0xa8>
          return 1;
 802006e:	2301      	movs	r3, #1
 8020070:	e00f      	b.n	8020092 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8020072:	68fb      	ldr	r3, [r7, #12]
 8020074:	2b00      	cmp	r3, #0
 8020076:	d009      	beq.n	802008c <udp_input_local_match+0xa4>
 8020078:	68fb      	ldr	r3, [r7, #12]
 802007a:	681b      	ldr	r3, [r3, #0]
 802007c:	2b00      	cmp	r3, #0
 802007e:	d005      	beq.n	802008c <udp_input_local_match+0xa4>
 8020080:	68fb      	ldr	r3, [r7, #12]
 8020082:	681a      	ldr	r2, [r3, #0]
 8020084:	4b09      	ldr	r3, [pc, #36]	; (80200ac <udp_input_local_match+0xc4>)
 8020086:	695b      	ldr	r3, [r3, #20]
 8020088:	429a      	cmp	r2, r3
 802008a:	d101      	bne.n	8020090 <udp_input_local_match+0xa8>
        return 1;
 802008c:	2301      	movs	r3, #1
 802008e:	e000      	b.n	8020092 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8020090:	2300      	movs	r3, #0
}
 8020092:	4618      	mov	r0, r3
 8020094:	3710      	adds	r7, #16
 8020096:	46bd      	mov	sp, r7
 8020098:	bd80      	pop	{r7, pc}
 802009a:	bf00      	nop
 802009c:	080276f8 	.word	0x080276f8
 80200a0:	08027728 	.word	0x08027728
 80200a4:	0802774c 	.word	0x0802774c
 80200a8:	08027774 	.word	0x08027774
 80200ac:	2000dbc4 	.word	0x2000dbc4

080200b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80200b0:	b590      	push	{r4, r7, lr}
 80200b2:	b08d      	sub	sp, #52	; 0x34
 80200b4:	af02      	add	r7, sp, #8
 80200b6:	6078      	str	r0, [r7, #4]
 80200b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80200ba:	2300      	movs	r3, #0
 80200bc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80200be:	687b      	ldr	r3, [r7, #4]
 80200c0:	2b00      	cmp	r3, #0
 80200c2:	d105      	bne.n	80200d0 <udp_input+0x20>
 80200c4:	4b7c      	ldr	r3, [pc, #496]	; (80202b8 <udp_input+0x208>)
 80200c6:	22cf      	movs	r2, #207	; 0xcf
 80200c8:	497c      	ldr	r1, [pc, #496]	; (80202bc <udp_input+0x20c>)
 80200ca:	487d      	ldr	r0, [pc, #500]	; (80202c0 <udp_input+0x210>)
 80200cc:	f003 fbc0 	bl	8023850 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80200d0:	683b      	ldr	r3, [r7, #0]
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	d105      	bne.n	80200e2 <udp_input+0x32>
 80200d6:	4b78      	ldr	r3, [pc, #480]	; (80202b8 <udp_input+0x208>)
 80200d8:	22d0      	movs	r2, #208	; 0xd0
 80200da:	497a      	ldr	r1, [pc, #488]	; (80202c4 <udp_input+0x214>)
 80200dc:	4878      	ldr	r0, [pc, #480]	; (80202c0 <udp_input+0x210>)
 80200de:	f003 fbb7 	bl	8023850 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	895b      	ldrh	r3, [r3, #10]
 80200e6:	2b07      	cmp	r3, #7
 80200e8:	d803      	bhi.n	80200f2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80200ea:	6878      	ldr	r0, [r7, #4]
 80200ec:	f7f9 fae2 	bl	80196b4 <pbuf_free>
    goto end;
 80200f0:	e0de      	b.n	80202b0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80200f2:	687b      	ldr	r3, [r7, #4]
 80200f4:	685b      	ldr	r3, [r3, #4]
 80200f6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80200f8:	4b73      	ldr	r3, [pc, #460]	; (80202c8 <udp_input+0x218>)
 80200fa:	695b      	ldr	r3, [r3, #20]
 80200fc:	4a72      	ldr	r2, [pc, #456]	; (80202c8 <udp_input+0x218>)
 80200fe:	6812      	ldr	r2, [r2, #0]
 8020100:	4611      	mov	r1, r2
 8020102:	4618      	mov	r0, r3
 8020104:	f001 fdc2 	bl	8021c8c <ip4_addr_isbroadcast_u32>
 8020108:	4603      	mov	r3, r0
 802010a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 802010c:	697b      	ldr	r3, [r7, #20]
 802010e:	881b      	ldrh	r3, [r3, #0]
 8020110:	b29b      	uxth	r3, r3
 8020112:	4618      	mov	r0, r3
 8020114:	f7f7 fedc 	bl	8017ed0 <lwip_htons>
 8020118:	4603      	mov	r3, r0
 802011a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 802011c:	697b      	ldr	r3, [r7, #20]
 802011e:	885b      	ldrh	r3, [r3, #2]
 8020120:	b29b      	uxth	r3, r3
 8020122:	4618      	mov	r0, r3
 8020124:	f7f7 fed4 	bl	8017ed0 <lwip_htons>
 8020128:	4603      	mov	r3, r0
 802012a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 802012c:	2300      	movs	r3, #0
 802012e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8020130:	2300      	movs	r3, #0
 8020132:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8020134:	2300      	movs	r3, #0
 8020136:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020138:	4b64      	ldr	r3, [pc, #400]	; (80202cc <udp_input+0x21c>)
 802013a:	681b      	ldr	r3, [r3, #0]
 802013c:	627b      	str	r3, [r7, #36]	; 0x24
 802013e:	e054      	b.n	80201ea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8020140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020142:	8a5b      	ldrh	r3, [r3, #18]
 8020144:	89fa      	ldrh	r2, [r7, #14]
 8020146:	429a      	cmp	r2, r3
 8020148:	d14a      	bne.n	80201e0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 802014a:	7cfb      	ldrb	r3, [r7, #19]
 802014c:	461a      	mov	r2, r3
 802014e:	6839      	ldr	r1, [r7, #0]
 8020150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020152:	f7ff ff49 	bl	801ffe8 <udp_input_local_match>
 8020156:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8020158:	2b00      	cmp	r3, #0
 802015a:	d041      	beq.n	80201e0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 802015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802015e:	7c1b      	ldrb	r3, [r3, #16]
 8020160:	f003 0304 	and.w	r3, r3, #4
 8020164:	2b00      	cmp	r3, #0
 8020166:	d11d      	bne.n	80201a4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8020168:	69fb      	ldr	r3, [r7, #28]
 802016a:	2b00      	cmp	r3, #0
 802016c:	d102      	bne.n	8020174 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 802016e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020170:	61fb      	str	r3, [r7, #28]
 8020172:	e017      	b.n	80201a4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8020174:	7cfb      	ldrb	r3, [r7, #19]
 8020176:	2b00      	cmp	r3, #0
 8020178:	d014      	beq.n	80201a4 <udp_input+0xf4>
 802017a:	4b53      	ldr	r3, [pc, #332]	; (80202c8 <udp_input+0x218>)
 802017c:	695b      	ldr	r3, [r3, #20]
 802017e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020182:	d10f      	bne.n	80201a4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8020184:	69fb      	ldr	r3, [r7, #28]
 8020186:	681a      	ldr	r2, [r3, #0]
 8020188:	683b      	ldr	r3, [r7, #0]
 802018a:	3304      	adds	r3, #4
 802018c:	681b      	ldr	r3, [r3, #0]
 802018e:	429a      	cmp	r2, r3
 8020190:	d008      	beq.n	80201a4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8020192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020194:	681a      	ldr	r2, [r3, #0]
 8020196:	683b      	ldr	r3, [r7, #0]
 8020198:	3304      	adds	r3, #4
 802019a:	681b      	ldr	r3, [r3, #0]
 802019c:	429a      	cmp	r2, r3
 802019e:	d101      	bne.n	80201a4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80201a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80201a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201a6:	8a9b      	ldrh	r3, [r3, #20]
 80201a8:	8a3a      	ldrh	r2, [r7, #16]
 80201aa:	429a      	cmp	r2, r3
 80201ac:	d118      	bne.n	80201e0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80201ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	d005      	beq.n	80201c2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80201b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201b8:	685a      	ldr	r2, [r3, #4]
 80201ba:	4b43      	ldr	r3, [pc, #268]	; (80202c8 <udp_input+0x218>)
 80201bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80201be:	429a      	cmp	r2, r3
 80201c0:	d10e      	bne.n	80201e0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80201c2:	6a3b      	ldr	r3, [r7, #32]
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d014      	beq.n	80201f2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80201c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201ca:	68da      	ldr	r2, [r3, #12]
 80201cc:	6a3b      	ldr	r3, [r7, #32]
 80201ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80201d0:	4b3e      	ldr	r3, [pc, #248]	; (80202cc <udp_input+0x21c>)
 80201d2:	681a      	ldr	r2, [r3, #0]
 80201d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80201d8:	4a3c      	ldr	r2, [pc, #240]	; (80202cc <udp_input+0x21c>)
 80201da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80201de:	e008      	b.n	80201f2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80201e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201e2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80201e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201e6:	68db      	ldr	r3, [r3, #12]
 80201e8:	627b      	str	r3, [r7, #36]	; 0x24
 80201ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201ec:	2b00      	cmp	r3, #0
 80201ee:	d1a7      	bne.n	8020140 <udp_input+0x90>
 80201f0:	e000      	b.n	80201f4 <udp_input+0x144>
        break;
 80201f2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80201f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	d101      	bne.n	80201fe <udp_input+0x14e>
    pcb = uncon_pcb;
 80201fa:	69fb      	ldr	r3, [r7, #28]
 80201fc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80201fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020200:	2b00      	cmp	r3, #0
 8020202:	d002      	beq.n	802020a <udp_input+0x15a>
    for_us = 1;
 8020204:	2301      	movs	r3, #1
 8020206:	76fb      	strb	r3, [r7, #27]
 8020208:	e00a      	b.n	8020220 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 802020a:	683b      	ldr	r3, [r7, #0]
 802020c:	3304      	adds	r3, #4
 802020e:	681a      	ldr	r2, [r3, #0]
 8020210:	4b2d      	ldr	r3, [pc, #180]	; (80202c8 <udp_input+0x218>)
 8020212:	695b      	ldr	r3, [r3, #20]
 8020214:	429a      	cmp	r2, r3
 8020216:	bf0c      	ite	eq
 8020218:	2301      	moveq	r3, #1
 802021a:	2300      	movne	r3, #0
 802021c:	b2db      	uxtb	r3, r3
 802021e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8020220:	7efb      	ldrb	r3, [r7, #27]
 8020222:	2b00      	cmp	r3, #0
 8020224:	d041      	beq.n	80202aa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8020226:	2108      	movs	r1, #8
 8020228:	6878      	ldr	r0, [r7, #4]
 802022a:	f7f9 f9bd 	bl	80195a8 <pbuf_remove_header>
 802022e:	4603      	mov	r3, r0
 8020230:	2b00      	cmp	r3, #0
 8020232:	d00a      	beq.n	802024a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8020234:	4b20      	ldr	r3, [pc, #128]	; (80202b8 <udp_input+0x208>)
 8020236:	f44f 72b8 	mov.w	r2, #368	; 0x170
 802023a:	4925      	ldr	r1, [pc, #148]	; (80202d0 <udp_input+0x220>)
 802023c:	4820      	ldr	r0, [pc, #128]	; (80202c0 <udp_input+0x210>)
 802023e:	f003 fb07 	bl	8023850 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8020242:	6878      	ldr	r0, [r7, #4]
 8020244:	f7f9 fa36 	bl	80196b4 <pbuf_free>
      goto end;
 8020248:	e032      	b.n	80202b0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 802024a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802024c:	2b00      	cmp	r3, #0
 802024e:	d012      	beq.n	8020276 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8020250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020252:	699b      	ldr	r3, [r3, #24]
 8020254:	2b00      	cmp	r3, #0
 8020256:	d00a      	beq.n	802026e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8020258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802025a:	699c      	ldr	r4, [r3, #24]
 802025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802025e:	69d8      	ldr	r0, [r3, #28]
 8020260:	8a3b      	ldrh	r3, [r7, #16]
 8020262:	9300      	str	r3, [sp, #0]
 8020264:	4b1b      	ldr	r3, [pc, #108]	; (80202d4 <udp_input+0x224>)
 8020266:	687a      	ldr	r2, [r7, #4]
 8020268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802026a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 802026c:	e021      	b.n	80202b2 <udp_input+0x202>
        pbuf_free(p);
 802026e:	6878      	ldr	r0, [r7, #4]
 8020270:	f7f9 fa20 	bl	80196b4 <pbuf_free>
        goto end;
 8020274:	e01c      	b.n	80202b0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8020276:	7cfb      	ldrb	r3, [r7, #19]
 8020278:	2b00      	cmp	r3, #0
 802027a:	d112      	bne.n	80202a2 <udp_input+0x1f2>
 802027c:	4b12      	ldr	r3, [pc, #72]	; (80202c8 <udp_input+0x218>)
 802027e:	695b      	ldr	r3, [r3, #20]
 8020280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020284:	2be0      	cmp	r3, #224	; 0xe0
 8020286:	d00c      	beq.n	80202a2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8020288:	4b0f      	ldr	r3, [pc, #60]	; (80202c8 <udp_input+0x218>)
 802028a:	899b      	ldrh	r3, [r3, #12]
 802028c:	3308      	adds	r3, #8
 802028e:	b29b      	uxth	r3, r3
 8020290:	b21b      	sxth	r3, r3
 8020292:	4619      	mov	r1, r3
 8020294:	6878      	ldr	r0, [r7, #4]
 8020296:	f7f9 f9fa 	bl	801968e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 802029a:	2103      	movs	r1, #3
 802029c:	6878      	ldr	r0, [r7, #4]
 802029e:	f001 f9d5 	bl	802164c <icmp_dest_unreach>
      pbuf_free(p);
 80202a2:	6878      	ldr	r0, [r7, #4]
 80202a4:	f7f9 fa06 	bl	80196b4 <pbuf_free>
  return;
 80202a8:	e003      	b.n	80202b2 <udp_input+0x202>
    pbuf_free(p);
 80202aa:	6878      	ldr	r0, [r7, #4]
 80202ac:	f7f9 fa02 	bl	80196b4 <pbuf_free>
  return;
 80202b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80202b2:	372c      	adds	r7, #44	; 0x2c
 80202b4:	46bd      	mov	sp, r7
 80202b6:	bd90      	pop	{r4, r7, pc}
 80202b8:	080276f8 	.word	0x080276f8
 80202bc:	0802779c 	.word	0x0802779c
 80202c0:	0802774c 	.word	0x0802774c
 80202c4:	080277b4 	.word	0x080277b4
 80202c8:	2000dbc4 	.word	0x2000dbc4
 80202cc:	20011374 	.word	0x20011374
 80202d0:	080277d0 	.word	0x080277d0
 80202d4:	2000dbd4 	.word	0x2000dbd4

080202d8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80202d8:	b580      	push	{r7, lr}
 80202da:	b086      	sub	sp, #24
 80202dc:	af00      	add	r7, sp, #0
 80202de:	60f8      	str	r0, [r7, #12]
 80202e0:	60b9      	str	r1, [r7, #8]
 80202e2:	4613      	mov	r3, r2
 80202e4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80202e6:	68bb      	ldr	r3, [r7, #8]
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	d101      	bne.n	80202f0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80202ec:	4b39      	ldr	r3, [pc, #228]	; (80203d4 <udp_bind+0xfc>)
 80202ee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80202f0:	68fb      	ldr	r3, [r7, #12]
 80202f2:	2b00      	cmp	r3, #0
 80202f4:	d109      	bne.n	802030a <udp_bind+0x32>
 80202f6:	4b38      	ldr	r3, [pc, #224]	; (80203d8 <udp_bind+0x100>)
 80202f8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80202fc:	4937      	ldr	r1, [pc, #220]	; (80203dc <udp_bind+0x104>)
 80202fe:	4838      	ldr	r0, [pc, #224]	; (80203e0 <udp_bind+0x108>)
 8020300:	f003 faa6 	bl	8023850 <iprintf>
 8020304:	f06f 030f 	mvn.w	r3, #15
 8020308:	e060      	b.n	80203cc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802030a:	2300      	movs	r3, #0
 802030c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802030e:	4b35      	ldr	r3, [pc, #212]	; (80203e4 <udp_bind+0x10c>)
 8020310:	681b      	ldr	r3, [r3, #0]
 8020312:	617b      	str	r3, [r7, #20]
 8020314:	e009      	b.n	802032a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8020316:	68fa      	ldr	r2, [r7, #12]
 8020318:	697b      	ldr	r3, [r7, #20]
 802031a:	429a      	cmp	r2, r3
 802031c:	d102      	bne.n	8020324 <udp_bind+0x4c>
      rebind = 1;
 802031e:	2301      	movs	r3, #1
 8020320:	74fb      	strb	r3, [r7, #19]
      break;
 8020322:	e005      	b.n	8020330 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020324:	697b      	ldr	r3, [r7, #20]
 8020326:	68db      	ldr	r3, [r3, #12]
 8020328:	617b      	str	r3, [r7, #20]
 802032a:	697b      	ldr	r3, [r7, #20]
 802032c:	2b00      	cmp	r3, #0
 802032e:	d1f2      	bne.n	8020316 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8020330:	88fb      	ldrh	r3, [r7, #6]
 8020332:	2b00      	cmp	r3, #0
 8020334:	d109      	bne.n	802034a <udp_bind+0x72>
    port = udp_new_port();
 8020336:	f7ff fe1f 	bl	801ff78 <udp_new_port>
 802033a:	4603      	mov	r3, r0
 802033c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 802033e:	88fb      	ldrh	r3, [r7, #6]
 8020340:	2b00      	cmp	r3, #0
 8020342:	d12c      	bne.n	802039e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8020344:	f06f 0307 	mvn.w	r3, #7
 8020348:	e040      	b.n	80203cc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802034a:	4b26      	ldr	r3, [pc, #152]	; (80203e4 <udp_bind+0x10c>)
 802034c:	681b      	ldr	r3, [r3, #0]
 802034e:	617b      	str	r3, [r7, #20]
 8020350:	e022      	b.n	8020398 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8020352:	68fa      	ldr	r2, [r7, #12]
 8020354:	697b      	ldr	r3, [r7, #20]
 8020356:	429a      	cmp	r2, r3
 8020358:	d01b      	beq.n	8020392 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 802035a:	697b      	ldr	r3, [r7, #20]
 802035c:	8a5b      	ldrh	r3, [r3, #18]
 802035e:	88fa      	ldrh	r2, [r7, #6]
 8020360:	429a      	cmp	r2, r3
 8020362:	d116      	bne.n	8020392 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8020364:	697b      	ldr	r3, [r7, #20]
 8020366:	681a      	ldr	r2, [r3, #0]
 8020368:	68bb      	ldr	r3, [r7, #8]
 802036a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 802036c:	429a      	cmp	r2, r3
 802036e:	d00d      	beq.n	802038c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8020370:	68bb      	ldr	r3, [r7, #8]
 8020372:	2b00      	cmp	r3, #0
 8020374:	d00a      	beq.n	802038c <udp_bind+0xb4>
 8020376:	68bb      	ldr	r3, [r7, #8]
 8020378:	681b      	ldr	r3, [r3, #0]
 802037a:	2b00      	cmp	r3, #0
 802037c:	d006      	beq.n	802038c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 802037e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8020380:	2b00      	cmp	r3, #0
 8020382:	d003      	beq.n	802038c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8020384:	697b      	ldr	r3, [r7, #20]
 8020386:	681b      	ldr	r3, [r3, #0]
 8020388:	2b00      	cmp	r3, #0
 802038a:	d102      	bne.n	8020392 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 802038c:	f06f 0307 	mvn.w	r3, #7
 8020390:	e01c      	b.n	80203cc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020392:	697b      	ldr	r3, [r7, #20]
 8020394:	68db      	ldr	r3, [r3, #12]
 8020396:	617b      	str	r3, [r7, #20]
 8020398:	697b      	ldr	r3, [r7, #20]
 802039a:	2b00      	cmp	r3, #0
 802039c:	d1d9      	bne.n	8020352 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 802039e:	68bb      	ldr	r3, [r7, #8]
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	d002      	beq.n	80203aa <udp_bind+0xd2>
 80203a4:	68bb      	ldr	r3, [r7, #8]
 80203a6:	681b      	ldr	r3, [r3, #0]
 80203a8:	e000      	b.n	80203ac <udp_bind+0xd4>
 80203aa:	2300      	movs	r3, #0
 80203ac:	68fa      	ldr	r2, [r7, #12]
 80203ae:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80203b0:	68fb      	ldr	r3, [r7, #12]
 80203b2:	88fa      	ldrh	r2, [r7, #6]
 80203b4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80203b6:	7cfb      	ldrb	r3, [r7, #19]
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	d106      	bne.n	80203ca <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80203bc:	4b09      	ldr	r3, [pc, #36]	; (80203e4 <udp_bind+0x10c>)
 80203be:	681a      	ldr	r2, [r3, #0]
 80203c0:	68fb      	ldr	r3, [r7, #12]
 80203c2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80203c4:	4a07      	ldr	r2, [pc, #28]	; (80203e4 <udp_bind+0x10c>)
 80203c6:	68fb      	ldr	r3, [r7, #12]
 80203c8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80203ca:	2300      	movs	r3, #0
}
 80203cc:	4618      	mov	r0, r3
 80203ce:	3718      	adds	r7, #24
 80203d0:	46bd      	mov	sp, r7
 80203d2:	bd80      	pop	{r7, pc}
 80203d4:	0802826c 	.word	0x0802826c
 80203d8:	080276f8 	.word	0x080276f8
 80203dc:	080279c0 	.word	0x080279c0
 80203e0:	0802774c 	.word	0x0802774c
 80203e4:	20011374 	.word	0x20011374

080203e8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80203e8:	b580      	push	{r7, lr}
 80203ea:	b086      	sub	sp, #24
 80203ec:	af00      	add	r7, sp, #0
 80203ee:	60f8      	str	r0, [r7, #12]
 80203f0:	60b9      	str	r1, [r7, #8]
 80203f2:	4613      	mov	r3, r2
 80203f4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80203f6:	68fb      	ldr	r3, [r7, #12]
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	d109      	bne.n	8020410 <udp_connect+0x28>
 80203fc:	4b2c      	ldr	r3, [pc, #176]	; (80204b0 <udp_connect+0xc8>)
 80203fe:	f240 4235 	movw	r2, #1077	; 0x435
 8020402:	492c      	ldr	r1, [pc, #176]	; (80204b4 <udp_connect+0xcc>)
 8020404:	482c      	ldr	r0, [pc, #176]	; (80204b8 <udp_connect+0xd0>)
 8020406:	f003 fa23 	bl	8023850 <iprintf>
 802040a:	f06f 030f 	mvn.w	r3, #15
 802040e:	e04b      	b.n	80204a8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8020410:	68bb      	ldr	r3, [r7, #8]
 8020412:	2b00      	cmp	r3, #0
 8020414:	d109      	bne.n	802042a <udp_connect+0x42>
 8020416:	4b26      	ldr	r3, [pc, #152]	; (80204b0 <udp_connect+0xc8>)
 8020418:	f240 4236 	movw	r2, #1078	; 0x436
 802041c:	4927      	ldr	r1, [pc, #156]	; (80204bc <udp_connect+0xd4>)
 802041e:	4826      	ldr	r0, [pc, #152]	; (80204b8 <udp_connect+0xd0>)
 8020420:	f003 fa16 	bl	8023850 <iprintf>
 8020424:	f06f 030f 	mvn.w	r3, #15
 8020428:	e03e      	b.n	80204a8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 802042a:	68fb      	ldr	r3, [r7, #12]
 802042c:	8a5b      	ldrh	r3, [r3, #18]
 802042e:	2b00      	cmp	r3, #0
 8020430:	d10f      	bne.n	8020452 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8020432:	68f9      	ldr	r1, [r7, #12]
 8020434:	68fb      	ldr	r3, [r7, #12]
 8020436:	8a5b      	ldrh	r3, [r3, #18]
 8020438:	461a      	mov	r2, r3
 802043a:	68f8      	ldr	r0, [r7, #12]
 802043c:	f7ff ff4c 	bl	80202d8 <udp_bind>
 8020440:	4603      	mov	r3, r0
 8020442:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8020444:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8020448:	2b00      	cmp	r3, #0
 802044a:	d002      	beq.n	8020452 <udp_connect+0x6a>
      return err;
 802044c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8020450:	e02a      	b.n	80204a8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8020452:	68bb      	ldr	r3, [r7, #8]
 8020454:	2b00      	cmp	r3, #0
 8020456:	d002      	beq.n	802045e <udp_connect+0x76>
 8020458:	68bb      	ldr	r3, [r7, #8]
 802045a:	681b      	ldr	r3, [r3, #0]
 802045c:	e000      	b.n	8020460 <udp_connect+0x78>
 802045e:	2300      	movs	r3, #0
 8020460:	68fa      	ldr	r2, [r7, #12]
 8020462:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8020464:	68fb      	ldr	r3, [r7, #12]
 8020466:	88fa      	ldrh	r2, [r7, #6]
 8020468:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 802046a:	68fb      	ldr	r3, [r7, #12]
 802046c:	7c1b      	ldrb	r3, [r3, #16]
 802046e:	f043 0304 	orr.w	r3, r3, #4
 8020472:	b2da      	uxtb	r2, r3
 8020474:	68fb      	ldr	r3, [r7, #12]
 8020476:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020478:	4b11      	ldr	r3, [pc, #68]	; (80204c0 <udp_connect+0xd8>)
 802047a:	681b      	ldr	r3, [r3, #0]
 802047c:	617b      	str	r3, [r7, #20]
 802047e:	e008      	b.n	8020492 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8020480:	68fa      	ldr	r2, [r7, #12]
 8020482:	697b      	ldr	r3, [r7, #20]
 8020484:	429a      	cmp	r2, r3
 8020486:	d101      	bne.n	802048c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8020488:	2300      	movs	r3, #0
 802048a:	e00d      	b.n	80204a8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802048c:	697b      	ldr	r3, [r7, #20]
 802048e:	68db      	ldr	r3, [r3, #12]
 8020490:	617b      	str	r3, [r7, #20]
 8020492:	697b      	ldr	r3, [r7, #20]
 8020494:	2b00      	cmp	r3, #0
 8020496:	d1f3      	bne.n	8020480 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8020498:	4b09      	ldr	r3, [pc, #36]	; (80204c0 <udp_connect+0xd8>)
 802049a:	681a      	ldr	r2, [r3, #0]
 802049c:	68fb      	ldr	r3, [r7, #12]
 802049e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80204a0:	4a07      	ldr	r2, [pc, #28]	; (80204c0 <udp_connect+0xd8>)
 80204a2:	68fb      	ldr	r3, [r7, #12]
 80204a4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80204a6:	2300      	movs	r3, #0
}
 80204a8:	4618      	mov	r0, r3
 80204aa:	3718      	adds	r7, #24
 80204ac:	46bd      	mov	sp, r7
 80204ae:	bd80      	pop	{r7, pc}
 80204b0:	080276f8 	.word	0x080276f8
 80204b4:	080279d8 	.word	0x080279d8
 80204b8:	0802774c 	.word	0x0802774c
 80204bc:	080279f4 	.word	0x080279f4
 80204c0:	20011374 	.word	0x20011374

080204c4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80204c4:	b580      	push	{r7, lr}
 80204c6:	b084      	sub	sp, #16
 80204c8:	af00      	add	r7, sp, #0
 80204ca:	60f8      	str	r0, [r7, #12]
 80204cc:	60b9      	str	r1, [r7, #8]
 80204ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80204d0:	68fb      	ldr	r3, [r7, #12]
 80204d2:	2b00      	cmp	r3, #0
 80204d4:	d107      	bne.n	80204e6 <udp_recv+0x22>
 80204d6:	4b08      	ldr	r3, [pc, #32]	; (80204f8 <udp_recv+0x34>)
 80204d8:	f240 428a 	movw	r2, #1162	; 0x48a
 80204dc:	4907      	ldr	r1, [pc, #28]	; (80204fc <udp_recv+0x38>)
 80204de:	4808      	ldr	r0, [pc, #32]	; (8020500 <udp_recv+0x3c>)
 80204e0:	f003 f9b6 	bl	8023850 <iprintf>
 80204e4:	e005      	b.n	80204f2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80204e6:	68fb      	ldr	r3, [r7, #12]
 80204e8:	68ba      	ldr	r2, [r7, #8]
 80204ea:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80204ec:	68fb      	ldr	r3, [r7, #12]
 80204ee:	687a      	ldr	r2, [r7, #4]
 80204f0:	61da      	str	r2, [r3, #28]
}
 80204f2:	3710      	adds	r7, #16
 80204f4:	46bd      	mov	sp, r7
 80204f6:	bd80      	pop	{r7, pc}
 80204f8:	080276f8 	.word	0x080276f8
 80204fc:	08027a2c 	.word	0x08027a2c
 8020500:	0802774c 	.word	0x0802774c

08020504 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8020504:	b580      	push	{r7, lr}
 8020506:	b082      	sub	sp, #8
 8020508:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 802050a:	2000      	movs	r0, #0
 802050c:	f7f8 f9b8 	bl	8018880 <memp_malloc>
 8020510:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8020512:	687b      	ldr	r3, [r7, #4]
 8020514:	2b00      	cmp	r3, #0
 8020516:	d007      	beq.n	8020528 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8020518:	2220      	movs	r2, #32
 802051a:	2100      	movs	r1, #0
 802051c:	6878      	ldr	r0, [r7, #4]
 802051e:	f003 f9f4 	bl	802390a <memset>
    pcb->ttl = UDP_TTL;
 8020522:	687b      	ldr	r3, [r7, #4]
 8020524:	22ff      	movs	r2, #255	; 0xff
 8020526:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8020528:	687b      	ldr	r3, [r7, #4]
}
 802052a:	4618      	mov	r0, r3
 802052c:	3708      	adds	r7, #8
 802052e:	46bd      	mov	sp, r7
 8020530:	bd80      	pop	{r7, pc}

08020532 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8020532:	b580      	push	{r7, lr}
 8020534:	b084      	sub	sp, #16
 8020536:	af00      	add	r7, sp, #0
 8020538:	4603      	mov	r3, r0
 802053a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 802053c:	f7ff ffe2 	bl	8020504 <udp_new>
 8020540:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8020542:	68fb      	ldr	r3, [r7, #12]
}
 8020544:	4618      	mov	r0, r3
 8020546:	3710      	adds	r7, #16
 8020548:	46bd      	mov	sp, r7
 802054a:	bd80      	pop	{r7, pc}

0802054c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 802054c:	b480      	push	{r7}
 802054e:	b085      	sub	sp, #20
 8020550:	af00      	add	r7, sp, #0
 8020552:	6078      	str	r0, [r7, #4]
 8020554:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8020556:	687b      	ldr	r3, [r7, #4]
 8020558:	2b00      	cmp	r3, #0
 802055a:	d01e      	beq.n	802059a <udp_netif_ip_addr_changed+0x4e>
 802055c:	687b      	ldr	r3, [r7, #4]
 802055e:	681b      	ldr	r3, [r3, #0]
 8020560:	2b00      	cmp	r3, #0
 8020562:	d01a      	beq.n	802059a <udp_netif_ip_addr_changed+0x4e>
 8020564:	683b      	ldr	r3, [r7, #0]
 8020566:	2b00      	cmp	r3, #0
 8020568:	d017      	beq.n	802059a <udp_netif_ip_addr_changed+0x4e>
 802056a:	683b      	ldr	r3, [r7, #0]
 802056c:	681b      	ldr	r3, [r3, #0]
 802056e:	2b00      	cmp	r3, #0
 8020570:	d013      	beq.n	802059a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8020572:	4b0d      	ldr	r3, [pc, #52]	; (80205a8 <udp_netif_ip_addr_changed+0x5c>)
 8020574:	681b      	ldr	r3, [r3, #0]
 8020576:	60fb      	str	r3, [r7, #12]
 8020578:	e00c      	b.n	8020594 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802057a:	68fb      	ldr	r3, [r7, #12]
 802057c:	681a      	ldr	r2, [r3, #0]
 802057e:	687b      	ldr	r3, [r7, #4]
 8020580:	681b      	ldr	r3, [r3, #0]
 8020582:	429a      	cmp	r2, r3
 8020584:	d103      	bne.n	802058e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8020586:	683b      	ldr	r3, [r7, #0]
 8020588:	681a      	ldr	r2, [r3, #0]
 802058a:	68fb      	ldr	r3, [r7, #12]
 802058c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802058e:	68fb      	ldr	r3, [r7, #12]
 8020590:	68db      	ldr	r3, [r3, #12]
 8020592:	60fb      	str	r3, [r7, #12]
 8020594:	68fb      	ldr	r3, [r7, #12]
 8020596:	2b00      	cmp	r3, #0
 8020598:	d1ef      	bne.n	802057a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 802059a:	bf00      	nop
 802059c:	3714      	adds	r7, #20
 802059e:	46bd      	mov	sp, r7
 80205a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205a4:	4770      	bx	lr
 80205a6:	bf00      	nop
 80205a8:	20011374 	.word	0x20011374

080205ac <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80205ac:	b580      	push	{r7, lr}
 80205ae:	b082      	sub	sp, #8
 80205b0:	af00      	add	r7, sp, #0
 80205b2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80205b4:	4915      	ldr	r1, [pc, #84]	; (802060c <etharp_free_entry+0x60>)
 80205b6:	687a      	ldr	r2, [r7, #4]
 80205b8:	4613      	mov	r3, r2
 80205ba:	005b      	lsls	r3, r3, #1
 80205bc:	4413      	add	r3, r2
 80205be:	00db      	lsls	r3, r3, #3
 80205c0:	440b      	add	r3, r1
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	2b00      	cmp	r3, #0
 80205c6:	d013      	beq.n	80205f0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80205c8:	4910      	ldr	r1, [pc, #64]	; (802060c <etharp_free_entry+0x60>)
 80205ca:	687a      	ldr	r2, [r7, #4]
 80205cc:	4613      	mov	r3, r2
 80205ce:	005b      	lsls	r3, r3, #1
 80205d0:	4413      	add	r3, r2
 80205d2:	00db      	lsls	r3, r3, #3
 80205d4:	440b      	add	r3, r1
 80205d6:	681b      	ldr	r3, [r3, #0]
 80205d8:	4618      	mov	r0, r3
 80205da:	f7f9 f86b 	bl	80196b4 <pbuf_free>
    arp_table[i].q = NULL;
 80205de:	490b      	ldr	r1, [pc, #44]	; (802060c <etharp_free_entry+0x60>)
 80205e0:	687a      	ldr	r2, [r7, #4]
 80205e2:	4613      	mov	r3, r2
 80205e4:	005b      	lsls	r3, r3, #1
 80205e6:	4413      	add	r3, r2
 80205e8:	00db      	lsls	r3, r3, #3
 80205ea:	440b      	add	r3, r1
 80205ec:	2200      	movs	r2, #0
 80205ee:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80205f0:	4906      	ldr	r1, [pc, #24]	; (802060c <etharp_free_entry+0x60>)
 80205f2:	687a      	ldr	r2, [r7, #4]
 80205f4:	4613      	mov	r3, r2
 80205f6:	005b      	lsls	r3, r3, #1
 80205f8:	4413      	add	r3, r2
 80205fa:	00db      	lsls	r3, r3, #3
 80205fc:	440b      	add	r3, r1
 80205fe:	3314      	adds	r3, #20
 8020600:	2200      	movs	r2, #0
 8020602:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8020604:	bf00      	nop
 8020606:	3708      	adds	r7, #8
 8020608:	46bd      	mov	sp, r7
 802060a:	bd80      	pop	{r7, pc}
 802060c:	20011378 	.word	0x20011378

08020610 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8020610:	b580      	push	{r7, lr}
 8020612:	b082      	sub	sp, #8
 8020614:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020616:	2300      	movs	r3, #0
 8020618:	607b      	str	r3, [r7, #4]
 802061a:	e096      	b.n	802074a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 802061c:	494f      	ldr	r1, [pc, #316]	; (802075c <etharp_tmr+0x14c>)
 802061e:	687a      	ldr	r2, [r7, #4]
 8020620:	4613      	mov	r3, r2
 8020622:	005b      	lsls	r3, r3, #1
 8020624:	4413      	add	r3, r2
 8020626:	00db      	lsls	r3, r3, #3
 8020628:	440b      	add	r3, r1
 802062a:	3314      	adds	r3, #20
 802062c:	781b      	ldrb	r3, [r3, #0]
 802062e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8020630:	78fb      	ldrb	r3, [r7, #3]
 8020632:	2b00      	cmp	r3, #0
 8020634:	f000 8086 	beq.w	8020744 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8020638:	4948      	ldr	r1, [pc, #288]	; (802075c <etharp_tmr+0x14c>)
 802063a:	687a      	ldr	r2, [r7, #4]
 802063c:	4613      	mov	r3, r2
 802063e:	005b      	lsls	r3, r3, #1
 8020640:	4413      	add	r3, r2
 8020642:	00db      	lsls	r3, r3, #3
 8020644:	440b      	add	r3, r1
 8020646:	3312      	adds	r3, #18
 8020648:	881b      	ldrh	r3, [r3, #0]
 802064a:	3301      	adds	r3, #1
 802064c:	b298      	uxth	r0, r3
 802064e:	4943      	ldr	r1, [pc, #268]	; (802075c <etharp_tmr+0x14c>)
 8020650:	687a      	ldr	r2, [r7, #4]
 8020652:	4613      	mov	r3, r2
 8020654:	005b      	lsls	r3, r3, #1
 8020656:	4413      	add	r3, r2
 8020658:	00db      	lsls	r3, r3, #3
 802065a:	440b      	add	r3, r1
 802065c:	3312      	adds	r3, #18
 802065e:	4602      	mov	r2, r0
 8020660:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8020662:	493e      	ldr	r1, [pc, #248]	; (802075c <etharp_tmr+0x14c>)
 8020664:	687a      	ldr	r2, [r7, #4]
 8020666:	4613      	mov	r3, r2
 8020668:	005b      	lsls	r3, r3, #1
 802066a:	4413      	add	r3, r2
 802066c:	00db      	lsls	r3, r3, #3
 802066e:	440b      	add	r3, r1
 8020670:	3312      	adds	r3, #18
 8020672:	881b      	ldrh	r3, [r3, #0]
 8020674:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8020678:	d215      	bcs.n	80206a6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802067a:	4938      	ldr	r1, [pc, #224]	; (802075c <etharp_tmr+0x14c>)
 802067c:	687a      	ldr	r2, [r7, #4]
 802067e:	4613      	mov	r3, r2
 8020680:	005b      	lsls	r3, r3, #1
 8020682:	4413      	add	r3, r2
 8020684:	00db      	lsls	r3, r3, #3
 8020686:	440b      	add	r3, r1
 8020688:	3314      	adds	r3, #20
 802068a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802068c:	2b01      	cmp	r3, #1
 802068e:	d10e      	bne.n	80206ae <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8020690:	4932      	ldr	r1, [pc, #200]	; (802075c <etharp_tmr+0x14c>)
 8020692:	687a      	ldr	r2, [r7, #4]
 8020694:	4613      	mov	r3, r2
 8020696:	005b      	lsls	r3, r3, #1
 8020698:	4413      	add	r3, r2
 802069a:	00db      	lsls	r3, r3, #3
 802069c:	440b      	add	r3, r1
 802069e:	3312      	adds	r3, #18
 80206a0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80206a2:	2b04      	cmp	r3, #4
 80206a4:	d903      	bls.n	80206ae <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80206a6:	6878      	ldr	r0, [r7, #4]
 80206a8:	f7ff ff80 	bl	80205ac <etharp_free_entry>
 80206ac:	e04a      	b.n	8020744 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80206ae:	492b      	ldr	r1, [pc, #172]	; (802075c <etharp_tmr+0x14c>)
 80206b0:	687a      	ldr	r2, [r7, #4]
 80206b2:	4613      	mov	r3, r2
 80206b4:	005b      	lsls	r3, r3, #1
 80206b6:	4413      	add	r3, r2
 80206b8:	00db      	lsls	r3, r3, #3
 80206ba:	440b      	add	r3, r1
 80206bc:	3314      	adds	r3, #20
 80206be:	781b      	ldrb	r3, [r3, #0]
 80206c0:	2b03      	cmp	r3, #3
 80206c2:	d10a      	bne.n	80206da <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80206c4:	4925      	ldr	r1, [pc, #148]	; (802075c <etharp_tmr+0x14c>)
 80206c6:	687a      	ldr	r2, [r7, #4]
 80206c8:	4613      	mov	r3, r2
 80206ca:	005b      	lsls	r3, r3, #1
 80206cc:	4413      	add	r3, r2
 80206ce:	00db      	lsls	r3, r3, #3
 80206d0:	440b      	add	r3, r1
 80206d2:	3314      	adds	r3, #20
 80206d4:	2204      	movs	r2, #4
 80206d6:	701a      	strb	r2, [r3, #0]
 80206d8:	e034      	b.n	8020744 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80206da:	4920      	ldr	r1, [pc, #128]	; (802075c <etharp_tmr+0x14c>)
 80206dc:	687a      	ldr	r2, [r7, #4]
 80206de:	4613      	mov	r3, r2
 80206e0:	005b      	lsls	r3, r3, #1
 80206e2:	4413      	add	r3, r2
 80206e4:	00db      	lsls	r3, r3, #3
 80206e6:	440b      	add	r3, r1
 80206e8:	3314      	adds	r3, #20
 80206ea:	781b      	ldrb	r3, [r3, #0]
 80206ec:	2b04      	cmp	r3, #4
 80206ee:	d10a      	bne.n	8020706 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80206f0:	491a      	ldr	r1, [pc, #104]	; (802075c <etharp_tmr+0x14c>)
 80206f2:	687a      	ldr	r2, [r7, #4]
 80206f4:	4613      	mov	r3, r2
 80206f6:	005b      	lsls	r3, r3, #1
 80206f8:	4413      	add	r3, r2
 80206fa:	00db      	lsls	r3, r3, #3
 80206fc:	440b      	add	r3, r1
 80206fe:	3314      	adds	r3, #20
 8020700:	2202      	movs	r2, #2
 8020702:	701a      	strb	r2, [r3, #0]
 8020704:	e01e      	b.n	8020744 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020706:	4915      	ldr	r1, [pc, #84]	; (802075c <etharp_tmr+0x14c>)
 8020708:	687a      	ldr	r2, [r7, #4]
 802070a:	4613      	mov	r3, r2
 802070c:	005b      	lsls	r3, r3, #1
 802070e:	4413      	add	r3, r2
 8020710:	00db      	lsls	r3, r3, #3
 8020712:	440b      	add	r3, r1
 8020714:	3314      	adds	r3, #20
 8020716:	781b      	ldrb	r3, [r3, #0]
 8020718:	2b01      	cmp	r3, #1
 802071a:	d113      	bne.n	8020744 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 802071c:	490f      	ldr	r1, [pc, #60]	; (802075c <etharp_tmr+0x14c>)
 802071e:	687a      	ldr	r2, [r7, #4]
 8020720:	4613      	mov	r3, r2
 8020722:	005b      	lsls	r3, r3, #1
 8020724:	4413      	add	r3, r2
 8020726:	00db      	lsls	r3, r3, #3
 8020728:	440b      	add	r3, r1
 802072a:	3308      	adds	r3, #8
 802072c:	6818      	ldr	r0, [r3, #0]
 802072e:	687a      	ldr	r2, [r7, #4]
 8020730:	4613      	mov	r3, r2
 8020732:	005b      	lsls	r3, r3, #1
 8020734:	4413      	add	r3, r2
 8020736:	00db      	lsls	r3, r3, #3
 8020738:	4a08      	ldr	r2, [pc, #32]	; (802075c <etharp_tmr+0x14c>)
 802073a:	4413      	add	r3, r2
 802073c:	3304      	adds	r3, #4
 802073e:	4619      	mov	r1, r3
 8020740:	f000 fe6e 	bl	8021420 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020744:	687b      	ldr	r3, [r7, #4]
 8020746:	3301      	adds	r3, #1
 8020748:	607b      	str	r3, [r7, #4]
 802074a:	687b      	ldr	r3, [r7, #4]
 802074c:	2b09      	cmp	r3, #9
 802074e:	f77f af65 	ble.w	802061c <etharp_tmr+0xc>
      }
    }
  }
}
 8020752:	bf00      	nop
 8020754:	bf00      	nop
 8020756:	3708      	adds	r7, #8
 8020758:	46bd      	mov	sp, r7
 802075a:	bd80      	pop	{r7, pc}
 802075c:	20011378 	.word	0x20011378

08020760 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8020760:	b580      	push	{r7, lr}
 8020762:	b08a      	sub	sp, #40	; 0x28
 8020764:	af00      	add	r7, sp, #0
 8020766:	60f8      	str	r0, [r7, #12]
 8020768:	460b      	mov	r3, r1
 802076a:	607a      	str	r2, [r7, #4]
 802076c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 802076e:	230a      	movs	r3, #10
 8020770:	84fb      	strh	r3, [r7, #38]	; 0x26
 8020772:	230a      	movs	r3, #10
 8020774:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8020776:	230a      	movs	r3, #10
 8020778:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 802077a:	2300      	movs	r3, #0
 802077c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 802077e:	230a      	movs	r3, #10
 8020780:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8020782:	2300      	movs	r3, #0
 8020784:	83bb      	strh	r3, [r7, #28]
 8020786:	2300      	movs	r3, #0
 8020788:	837b      	strh	r3, [r7, #26]
 802078a:	2300      	movs	r3, #0
 802078c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802078e:	2300      	movs	r3, #0
 8020790:	843b      	strh	r3, [r7, #32]
 8020792:	e0ae      	b.n	80208f2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8020794:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020798:	49a6      	ldr	r1, [pc, #664]	; (8020a34 <etharp_find_entry+0x2d4>)
 802079a:	4613      	mov	r3, r2
 802079c:	005b      	lsls	r3, r3, #1
 802079e:	4413      	add	r3, r2
 80207a0:	00db      	lsls	r3, r3, #3
 80207a2:	440b      	add	r3, r1
 80207a4:	3314      	adds	r3, #20
 80207a6:	781b      	ldrb	r3, [r3, #0]
 80207a8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80207aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80207ae:	2b0a      	cmp	r3, #10
 80207b0:	d105      	bne.n	80207be <etharp_find_entry+0x5e>
 80207b2:	7dfb      	ldrb	r3, [r7, #23]
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d102      	bne.n	80207be <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80207b8:	8c3b      	ldrh	r3, [r7, #32]
 80207ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80207bc:	e095      	b.n	80208ea <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80207be:	7dfb      	ldrb	r3, [r7, #23]
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	f000 8092 	beq.w	80208ea <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80207c6:	7dfb      	ldrb	r3, [r7, #23]
 80207c8:	2b01      	cmp	r3, #1
 80207ca:	d009      	beq.n	80207e0 <etharp_find_entry+0x80>
 80207cc:	7dfb      	ldrb	r3, [r7, #23]
 80207ce:	2b01      	cmp	r3, #1
 80207d0:	d806      	bhi.n	80207e0 <etharp_find_entry+0x80>
 80207d2:	4b99      	ldr	r3, [pc, #612]	; (8020a38 <etharp_find_entry+0x2d8>)
 80207d4:	f240 1223 	movw	r2, #291	; 0x123
 80207d8:	4998      	ldr	r1, [pc, #608]	; (8020a3c <etharp_find_entry+0x2dc>)
 80207da:	4899      	ldr	r0, [pc, #612]	; (8020a40 <etharp_find_entry+0x2e0>)
 80207dc:	f003 f838 	bl	8023850 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80207e0:	68fb      	ldr	r3, [r7, #12]
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d020      	beq.n	8020828 <etharp_find_entry+0xc8>
 80207e6:	68fb      	ldr	r3, [r7, #12]
 80207e8:	6819      	ldr	r1, [r3, #0]
 80207ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80207ee:	4891      	ldr	r0, [pc, #580]	; (8020a34 <etharp_find_entry+0x2d4>)
 80207f0:	4613      	mov	r3, r2
 80207f2:	005b      	lsls	r3, r3, #1
 80207f4:	4413      	add	r3, r2
 80207f6:	00db      	lsls	r3, r3, #3
 80207f8:	4403      	add	r3, r0
 80207fa:	3304      	adds	r3, #4
 80207fc:	681b      	ldr	r3, [r3, #0]
 80207fe:	4299      	cmp	r1, r3
 8020800:	d112      	bne.n	8020828 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8020802:	687b      	ldr	r3, [r7, #4]
 8020804:	2b00      	cmp	r3, #0
 8020806:	d00c      	beq.n	8020822 <etharp_find_entry+0xc2>
 8020808:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802080c:	4989      	ldr	r1, [pc, #548]	; (8020a34 <etharp_find_entry+0x2d4>)
 802080e:	4613      	mov	r3, r2
 8020810:	005b      	lsls	r3, r3, #1
 8020812:	4413      	add	r3, r2
 8020814:	00db      	lsls	r3, r3, #3
 8020816:	440b      	add	r3, r1
 8020818:	3308      	adds	r3, #8
 802081a:	681b      	ldr	r3, [r3, #0]
 802081c:	687a      	ldr	r2, [r7, #4]
 802081e:	429a      	cmp	r2, r3
 8020820:	d102      	bne.n	8020828 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8020822:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020826:	e100      	b.n	8020a2a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8020828:	7dfb      	ldrb	r3, [r7, #23]
 802082a:	2b01      	cmp	r3, #1
 802082c:	d140      	bne.n	80208b0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 802082e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020832:	4980      	ldr	r1, [pc, #512]	; (8020a34 <etharp_find_entry+0x2d4>)
 8020834:	4613      	mov	r3, r2
 8020836:	005b      	lsls	r3, r3, #1
 8020838:	4413      	add	r3, r2
 802083a:	00db      	lsls	r3, r3, #3
 802083c:	440b      	add	r3, r1
 802083e:	681b      	ldr	r3, [r3, #0]
 8020840:	2b00      	cmp	r3, #0
 8020842:	d01a      	beq.n	802087a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8020844:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020848:	497a      	ldr	r1, [pc, #488]	; (8020a34 <etharp_find_entry+0x2d4>)
 802084a:	4613      	mov	r3, r2
 802084c:	005b      	lsls	r3, r3, #1
 802084e:	4413      	add	r3, r2
 8020850:	00db      	lsls	r3, r3, #3
 8020852:	440b      	add	r3, r1
 8020854:	3312      	adds	r3, #18
 8020856:	881b      	ldrh	r3, [r3, #0]
 8020858:	8bba      	ldrh	r2, [r7, #28]
 802085a:	429a      	cmp	r2, r3
 802085c:	d845      	bhi.n	80208ea <etharp_find_entry+0x18a>
            old_queue = i;
 802085e:	8c3b      	ldrh	r3, [r7, #32]
 8020860:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8020862:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020866:	4973      	ldr	r1, [pc, #460]	; (8020a34 <etharp_find_entry+0x2d4>)
 8020868:	4613      	mov	r3, r2
 802086a:	005b      	lsls	r3, r3, #1
 802086c:	4413      	add	r3, r2
 802086e:	00db      	lsls	r3, r3, #3
 8020870:	440b      	add	r3, r1
 8020872:	3312      	adds	r3, #18
 8020874:	881b      	ldrh	r3, [r3, #0]
 8020876:	83bb      	strh	r3, [r7, #28]
 8020878:	e037      	b.n	80208ea <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 802087a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802087e:	496d      	ldr	r1, [pc, #436]	; (8020a34 <etharp_find_entry+0x2d4>)
 8020880:	4613      	mov	r3, r2
 8020882:	005b      	lsls	r3, r3, #1
 8020884:	4413      	add	r3, r2
 8020886:	00db      	lsls	r3, r3, #3
 8020888:	440b      	add	r3, r1
 802088a:	3312      	adds	r3, #18
 802088c:	881b      	ldrh	r3, [r3, #0]
 802088e:	8b7a      	ldrh	r2, [r7, #26]
 8020890:	429a      	cmp	r2, r3
 8020892:	d82a      	bhi.n	80208ea <etharp_find_entry+0x18a>
            old_pending = i;
 8020894:	8c3b      	ldrh	r3, [r7, #32]
 8020896:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8020898:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802089c:	4965      	ldr	r1, [pc, #404]	; (8020a34 <etharp_find_entry+0x2d4>)
 802089e:	4613      	mov	r3, r2
 80208a0:	005b      	lsls	r3, r3, #1
 80208a2:	4413      	add	r3, r2
 80208a4:	00db      	lsls	r3, r3, #3
 80208a6:	440b      	add	r3, r1
 80208a8:	3312      	adds	r3, #18
 80208aa:	881b      	ldrh	r3, [r3, #0]
 80208ac:	837b      	strh	r3, [r7, #26]
 80208ae:	e01c      	b.n	80208ea <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80208b0:	7dfb      	ldrb	r3, [r7, #23]
 80208b2:	2b01      	cmp	r3, #1
 80208b4:	d919      	bls.n	80208ea <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80208b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80208ba:	495e      	ldr	r1, [pc, #376]	; (8020a34 <etharp_find_entry+0x2d4>)
 80208bc:	4613      	mov	r3, r2
 80208be:	005b      	lsls	r3, r3, #1
 80208c0:	4413      	add	r3, r2
 80208c2:	00db      	lsls	r3, r3, #3
 80208c4:	440b      	add	r3, r1
 80208c6:	3312      	adds	r3, #18
 80208c8:	881b      	ldrh	r3, [r3, #0]
 80208ca:	8b3a      	ldrh	r2, [r7, #24]
 80208cc:	429a      	cmp	r2, r3
 80208ce:	d80c      	bhi.n	80208ea <etharp_find_entry+0x18a>
            old_stable = i;
 80208d0:	8c3b      	ldrh	r3, [r7, #32]
 80208d2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80208d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80208d8:	4956      	ldr	r1, [pc, #344]	; (8020a34 <etharp_find_entry+0x2d4>)
 80208da:	4613      	mov	r3, r2
 80208dc:	005b      	lsls	r3, r3, #1
 80208de:	4413      	add	r3, r2
 80208e0:	00db      	lsls	r3, r3, #3
 80208e2:	440b      	add	r3, r1
 80208e4:	3312      	adds	r3, #18
 80208e6:	881b      	ldrh	r3, [r3, #0]
 80208e8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80208ea:	8c3b      	ldrh	r3, [r7, #32]
 80208ec:	3301      	adds	r3, #1
 80208ee:	b29b      	uxth	r3, r3
 80208f0:	843b      	strh	r3, [r7, #32]
 80208f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80208f6:	2b09      	cmp	r3, #9
 80208f8:	f77f af4c 	ble.w	8020794 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80208fc:	7afb      	ldrb	r3, [r7, #11]
 80208fe:	f003 0302 	and.w	r3, r3, #2
 8020902:	2b00      	cmp	r3, #0
 8020904:	d108      	bne.n	8020918 <etharp_find_entry+0x1b8>
 8020906:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802090a:	2b0a      	cmp	r3, #10
 802090c:	d107      	bne.n	802091e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 802090e:	7afb      	ldrb	r3, [r7, #11]
 8020910:	f003 0301 	and.w	r3, r3, #1
 8020914:	2b00      	cmp	r3, #0
 8020916:	d102      	bne.n	802091e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8020918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802091c:	e085      	b.n	8020a2a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 802091e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020922:	2b09      	cmp	r3, #9
 8020924:	dc02      	bgt.n	802092c <etharp_find_entry+0x1cc>
    i = empty;
 8020926:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020928:	843b      	strh	r3, [r7, #32]
 802092a:	e039      	b.n	80209a0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 802092c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8020930:	2b09      	cmp	r3, #9
 8020932:	dc14      	bgt.n	802095e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8020934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020936:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8020938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802093c:	493d      	ldr	r1, [pc, #244]	; (8020a34 <etharp_find_entry+0x2d4>)
 802093e:	4613      	mov	r3, r2
 8020940:	005b      	lsls	r3, r3, #1
 8020942:	4413      	add	r3, r2
 8020944:	00db      	lsls	r3, r3, #3
 8020946:	440b      	add	r3, r1
 8020948:	681b      	ldr	r3, [r3, #0]
 802094a:	2b00      	cmp	r3, #0
 802094c:	d018      	beq.n	8020980 <etharp_find_entry+0x220>
 802094e:	4b3a      	ldr	r3, [pc, #232]	; (8020a38 <etharp_find_entry+0x2d8>)
 8020950:	f240 126d 	movw	r2, #365	; 0x16d
 8020954:	493b      	ldr	r1, [pc, #236]	; (8020a44 <etharp_find_entry+0x2e4>)
 8020956:	483a      	ldr	r0, [pc, #232]	; (8020a40 <etharp_find_entry+0x2e0>)
 8020958:	f002 ff7a 	bl	8023850 <iprintf>
 802095c:	e010      	b.n	8020980 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 802095e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020962:	2b09      	cmp	r3, #9
 8020964:	dc02      	bgt.n	802096c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8020966:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020968:	843b      	strh	r3, [r7, #32]
 802096a:	e009      	b.n	8020980 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 802096c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8020970:	2b09      	cmp	r3, #9
 8020972:	dc02      	bgt.n	802097a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8020974:	8bfb      	ldrh	r3, [r7, #30]
 8020976:	843b      	strh	r3, [r7, #32]
 8020978:	e002      	b.n	8020980 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 802097a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802097e:	e054      	b.n	8020a2a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020980:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020984:	2b09      	cmp	r3, #9
 8020986:	dd06      	ble.n	8020996 <etharp_find_entry+0x236>
 8020988:	4b2b      	ldr	r3, [pc, #172]	; (8020a38 <etharp_find_entry+0x2d8>)
 802098a:	f240 127f 	movw	r2, #383	; 0x17f
 802098e:	492e      	ldr	r1, [pc, #184]	; (8020a48 <etharp_find_entry+0x2e8>)
 8020990:	482b      	ldr	r0, [pc, #172]	; (8020a40 <etharp_find_entry+0x2e0>)
 8020992:	f002 ff5d 	bl	8023850 <iprintf>
    etharp_free_entry(i);
 8020996:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802099a:	4618      	mov	r0, r3
 802099c:	f7ff fe06 	bl	80205ac <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80209a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80209a4:	2b09      	cmp	r3, #9
 80209a6:	dd06      	ble.n	80209b6 <etharp_find_entry+0x256>
 80209a8:	4b23      	ldr	r3, [pc, #140]	; (8020a38 <etharp_find_entry+0x2d8>)
 80209aa:	f240 1283 	movw	r2, #387	; 0x183
 80209ae:	4926      	ldr	r1, [pc, #152]	; (8020a48 <etharp_find_entry+0x2e8>)
 80209b0:	4823      	ldr	r0, [pc, #140]	; (8020a40 <etharp_find_entry+0x2e0>)
 80209b2:	f002 ff4d 	bl	8023850 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80209b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80209ba:	491e      	ldr	r1, [pc, #120]	; (8020a34 <etharp_find_entry+0x2d4>)
 80209bc:	4613      	mov	r3, r2
 80209be:	005b      	lsls	r3, r3, #1
 80209c0:	4413      	add	r3, r2
 80209c2:	00db      	lsls	r3, r3, #3
 80209c4:	440b      	add	r3, r1
 80209c6:	3314      	adds	r3, #20
 80209c8:	781b      	ldrb	r3, [r3, #0]
 80209ca:	2b00      	cmp	r3, #0
 80209cc:	d006      	beq.n	80209dc <etharp_find_entry+0x27c>
 80209ce:	4b1a      	ldr	r3, [pc, #104]	; (8020a38 <etharp_find_entry+0x2d8>)
 80209d0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80209d4:	491d      	ldr	r1, [pc, #116]	; (8020a4c <etharp_find_entry+0x2ec>)
 80209d6:	481a      	ldr	r0, [pc, #104]	; (8020a40 <etharp_find_entry+0x2e0>)
 80209d8:	f002 ff3a 	bl	8023850 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80209dc:	68fb      	ldr	r3, [r7, #12]
 80209de:	2b00      	cmp	r3, #0
 80209e0:	d00b      	beq.n	80209fa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80209e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80209e6:	68fb      	ldr	r3, [r7, #12]
 80209e8:	6819      	ldr	r1, [r3, #0]
 80209ea:	4812      	ldr	r0, [pc, #72]	; (8020a34 <etharp_find_entry+0x2d4>)
 80209ec:	4613      	mov	r3, r2
 80209ee:	005b      	lsls	r3, r3, #1
 80209f0:	4413      	add	r3, r2
 80209f2:	00db      	lsls	r3, r3, #3
 80209f4:	4403      	add	r3, r0
 80209f6:	3304      	adds	r3, #4
 80209f8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80209fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80209fe:	490d      	ldr	r1, [pc, #52]	; (8020a34 <etharp_find_entry+0x2d4>)
 8020a00:	4613      	mov	r3, r2
 8020a02:	005b      	lsls	r3, r3, #1
 8020a04:	4413      	add	r3, r2
 8020a06:	00db      	lsls	r3, r3, #3
 8020a08:	440b      	add	r3, r1
 8020a0a:	3312      	adds	r3, #18
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8020a10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020a14:	4907      	ldr	r1, [pc, #28]	; (8020a34 <etharp_find_entry+0x2d4>)
 8020a16:	4613      	mov	r3, r2
 8020a18:	005b      	lsls	r3, r3, #1
 8020a1a:	4413      	add	r3, r2
 8020a1c:	00db      	lsls	r3, r3, #3
 8020a1e:	440b      	add	r3, r1
 8020a20:	3308      	adds	r3, #8
 8020a22:	687a      	ldr	r2, [r7, #4]
 8020a24:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8020a26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8020a2a:	4618      	mov	r0, r3
 8020a2c:	3728      	adds	r7, #40	; 0x28
 8020a2e:	46bd      	mov	sp, r7
 8020a30:	bd80      	pop	{r7, pc}
 8020a32:	bf00      	nop
 8020a34:	20011378 	.word	0x20011378
 8020a38:	08027a5c 	.word	0x08027a5c
 8020a3c:	08027a94 	.word	0x08027a94
 8020a40:	08027ad4 	.word	0x08027ad4
 8020a44:	08027afc 	.word	0x08027afc
 8020a48:	08027b14 	.word	0x08027b14
 8020a4c:	08027b28 	.word	0x08027b28

08020a50 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8020a50:	b580      	push	{r7, lr}
 8020a52:	b088      	sub	sp, #32
 8020a54:	af02      	add	r7, sp, #8
 8020a56:	60f8      	str	r0, [r7, #12]
 8020a58:	60b9      	str	r1, [r7, #8]
 8020a5a:	607a      	str	r2, [r7, #4]
 8020a5c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8020a5e:	68fb      	ldr	r3, [r7, #12]
 8020a60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8020a64:	2b06      	cmp	r3, #6
 8020a66:	d006      	beq.n	8020a76 <etharp_update_arp_entry+0x26>
 8020a68:	4b48      	ldr	r3, [pc, #288]	; (8020b8c <etharp_update_arp_entry+0x13c>)
 8020a6a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8020a6e:	4948      	ldr	r1, [pc, #288]	; (8020b90 <etharp_update_arp_entry+0x140>)
 8020a70:	4848      	ldr	r0, [pc, #288]	; (8020b94 <etharp_update_arp_entry+0x144>)
 8020a72:	f002 feed 	bl	8023850 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8020a76:	68bb      	ldr	r3, [r7, #8]
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	d012      	beq.n	8020aa2 <etharp_update_arp_entry+0x52>
 8020a7c:	68bb      	ldr	r3, [r7, #8]
 8020a7e:	681b      	ldr	r3, [r3, #0]
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	d00e      	beq.n	8020aa2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020a84:	68bb      	ldr	r3, [r7, #8]
 8020a86:	681b      	ldr	r3, [r3, #0]
 8020a88:	68f9      	ldr	r1, [r7, #12]
 8020a8a:	4618      	mov	r0, r3
 8020a8c:	f001 f8fe 	bl	8021c8c <ip4_addr_isbroadcast_u32>
 8020a90:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	d105      	bne.n	8020aa2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8020a96:	68bb      	ldr	r3, [r7, #8]
 8020a98:	681b      	ldr	r3, [r3, #0]
 8020a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020a9e:	2be0      	cmp	r3, #224	; 0xe0
 8020aa0:	d102      	bne.n	8020aa8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020aa2:	f06f 030f 	mvn.w	r3, #15
 8020aa6:	e06c      	b.n	8020b82 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8020aa8:	78fb      	ldrb	r3, [r7, #3]
 8020aaa:	68fa      	ldr	r2, [r7, #12]
 8020aac:	4619      	mov	r1, r3
 8020aae:	68b8      	ldr	r0, [r7, #8]
 8020ab0:	f7ff fe56 	bl	8020760 <etharp_find_entry>
 8020ab4:	4603      	mov	r3, r0
 8020ab6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8020ab8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	da02      	bge.n	8020ac6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8020ac0:	8afb      	ldrh	r3, [r7, #22]
 8020ac2:	b25b      	sxtb	r3, r3
 8020ac4:	e05d      	b.n	8020b82 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8020ac6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020aca:	4933      	ldr	r1, [pc, #204]	; (8020b98 <etharp_update_arp_entry+0x148>)
 8020acc:	4613      	mov	r3, r2
 8020ace:	005b      	lsls	r3, r3, #1
 8020ad0:	4413      	add	r3, r2
 8020ad2:	00db      	lsls	r3, r3, #3
 8020ad4:	440b      	add	r3, r1
 8020ad6:	3314      	adds	r3, #20
 8020ad8:	2202      	movs	r2, #2
 8020ada:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8020adc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020ae0:	492d      	ldr	r1, [pc, #180]	; (8020b98 <etharp_update_arp_entry+0x148>)
 8020ae2:	4613      	mov	r3, r2
 8020ae4:	005b      	lsls	r3, r3, #1
 8020ae6:	4413      	add	r3, r2
 8020ae8:	00db      	lsls	r3, r3, #3
 8020aea:	440b      	add	r3, r1
 8020aec:	3308      	adds	r3, #8
 8020aee:	68fa      	ldr	r2, [r7, #12]
 8020af0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8020af2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020af6:	4613      	mov	r3, r2
 8020af8:	005b      	lsls	r3, r3, #1
 8020afa:	4413      	add	r3, r2
 8020afc:	00db      	lsls	r3, r3, #3
 8020afe:	3308      	adds	r3, #8
 8020b00:	4a25      	ldr	r2, [pc, #148]	; (8020b98 <etharp_update_arp_entry+0x148>)
 8020b02:	4413      	add	r3, r2
 8020b04:	3304      	adds	r3, #4
 8020b06:	2206      	movs	r2, #6
 8020b08:	6879      	ldr	r1, [r7, #4]
 8020b0a:	4618      	mov	r0, r3
 8020b0c:	f002 ff93 	bl	8023a36 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8020b10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020b14:	4920      	ldr	r1, [pc, #128]	; (8020b98 <etharp_update_arp_entry+0x148>)
 8020b16:	4613      	mov	r3, r2
 8020b18:	005b      	lsls	r3, r3, #1
 8020b1a:	4413      	add	r3, r2
 8020b1c:	00db      	lsls	r3, r3, #3
 8020b1e:	440b      	add	r3, r1
 8020b20:	3312      	adds	r3, #18
 8020b22:	2200      	movs	r2, #0
 8020b24:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8020b26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020b2a:	491b      	ldr	r1, [pc, #108]	; (8020b98 <etharp_update_arp_entry+0x148>)
 8020b2c:	4613      	mov	r3, r2
 8020b2e:	005b      	lsls	r3, r3, #1
 8020b30:	4413      	add	r3, r2
 8020b32:	00db      	lsls	r3, r3, #3
 8020b34:	440b      	add	r3, r1
 8020b36:	681b      	ldr	r3, [r3, #0]
 8020b38:	2b00      	cmp	r3, #0
 8020b3a:	d021      	beq.n	8020b80 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8020b3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020b40:	4915      	ldr	r1, [pc, #84]	; (8020b98 <etharp_update_arp_entry+0x148>)
 8020b42:	4613      	mov	r3, r2
 8020b44:	005b      	lsls	r3, r3, #1
 8020b46:	4413      	add	r3, r2
 8020b48:	00db      	lsls	r3, r3, #3
 8020b4a:	440b      	add	r3, r1
 8020b4c:	681b      	ldr	r3, [r3, #0]
 8020b4e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8020b50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020b54:	4910      	ldr	r1, [pc, #64]	; (8020b98 <etharp_update_arp_entry+0x148>)
 8020b56:	4613      	mov	r3, r2
 8020b58:	005b      	lsls	r3, r3, #1
 8020b5a:	4413      	add	r3, r2
 8020b5c:	00db      	lsls	r3, r3, #3
 8020b5e:	440b      	add	r3, r1
 8020b60:	2200      	movs	r2, #0
 8020b62:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8020b64:	68fb      	ldr	r3, [r7, #12]
 8020b66:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8020b6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020b6e:	9300      	str	r3, [sp, #0]
 8020b70:	687b      	ldr	r3, [r7, #4]
 8020b72:	6939      	ldr	r1, [r7, #16]
 8020b74:	68f8      	ldr	r0, [r7, #12]
 8020b76:	f001 ff97 	bl	8022aa8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8020b7a:	6938      	ldr	r0, [r7, #16]
 8020b7c:	f7f8 fd9a 	bl	80196b4 <pbuf_free>
  }
  return ERR_OK;
 8020b80:	2300      	movs	r3, #0
}
 8020b82:	4618      	mov	r0, r3
 8020b84:	3718      	adds	r7, #24
 8020b86:	46bd      	mov	sp, r7
 8020b88:	bd80      	pop	{r7, pc}
 8020b8a:	bf00      	nop
 8020b8c:	08027a5c 	.word	0x08027a5c
 8020b90:	08027b54 	.word	0x08027b54
 8020b94:	08027ad4 	.word	0x08027ad4
 8020b98:	20011378 	.word	0x20011378

08020b9c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8020b9c:	b580      	push	{r7, lr}
 8020b9e:	b084      	sub	sp, #16
 8020ba0:	af00      	add	r7, sp, #0
 8020ba2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020ba4:	2300      	movs	r3, #0
 8020ba6:	60fb      	str	r3, [r7, #12]
 8020ba8:	e01e      	b.n	8020be8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8020baa:	4913      	ldr	r1, [pc, #76]	; (8020bf8 <etharp_cleanup_netif+0x5c>)
 8020bac:	68fa      	ldr	r2, [r7, #12]
 8020bae:	4613      	mov	r3, r2
 8020bb0:	005b      	lsls	r3, r3, #1
 8020bb2:	4413      	add	r3, r2
 8020bb4:	00db      	lsls	r3, r3, #3
 8020bb6:	440b      	add	r3, r1
 8020bb8:	3314      	adds	r3, #20
 8020bba:	781b      	ldrb	r3, [r3, #0]
 8020bbc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8020bbe:	7afb      	ldrb	r3, [r7, #11]
 8020bc0:	2b00      	cmp	r3, #0
 8020bc2:	d00e      	beq.n	8020be2 <etharp_cleanup_netif+0x46>
 8020bc4:	490c      	ldr	r1, [pc, #48]	; (8020bf8 <etharp_cleanup_netif+0x5c>)
 8020bc6:	68fa      	ldr	r2, [r7, #12]
 8020bc8:	4613      	mov	r3, r2
 8020bca:	005b      	lsls	r3, r3, #1
 8020bcc:	4413      	add	r3, r2
 8020bce:	00db      	lsls	r3, r3, #3
 8020bd0:	440b      	add	r3, r1
 8020bd2:	3308      	adds	r3, #8
 8020bd4:	681b      	ldr	r3, [r3, #0]
 8020bd6:	687a      	ldr	r2, [r7, #4]
 8020bd8:	429a      	cmp	r2, r3
 8020bda:	d102      	bne.n	8020be2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8020bdc:	68f8      	ldr	r0, [r7, #12]
 8020bde:	f7ff fce5 	bl	80205ac <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020be2:	68fb      	ldr	r3, [r7, #12]
 8020be4:	3301      	adds	r3, #1
 8020be6:	60fb      	str	r3, [r7, #12]
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	2b09      	cmp	r3, #9
 8020bec:	dddd      	ble.n	8020baa <etharp_cleanup_netif+0xe>
    }
  }
}
 8020bee:	bf00      	nop
 8020bf0:	bf00      	nop
 8020bf2:	3710      	adds	r7, #16
 8020bf4:	46bd      	mov	sp, r7
 8020bf6:	bd80      	pop	{r7, pc}
 8020bf8:	20011378 	.word	0x20011378

08020bfc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8020bfc:	b5b0      	push	{r4, r5, r7, lr}
 8020bfe:	b08a      	sub	sp, #40	; 0x28
 8020c00:	af04      	add	r7, sp, #16
 8020c02:	6078      	str	r0, [r7, #4]
 8020c04:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8020c06:	683b      	ldr	r3, [r7, #0]
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	d107      	bne.n	8020c1c <etharp_input+0x20>
 8020c0c:	4b3d      	ldr	r3, [pc, #244]	; (8020d04 <etharp_input+0x108>)
 8020c0e:	f240 228a 	movw	r2, #650	; 0x28a
 8020c12:	493d      	ldr	r1, [pc, #244]	; (8020d08 <etharp_input+0x10c>)
 8020c14:	483d      	ldr	r0, [pc, #244]	; (8020d0c <etharp_input+0x110>)
 8020c16:	f002 fe1b 	bl	8023850 <iprintf>
 8020c1a:	e06f      	b.n	8020cfc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	685b      	ldr	r3, [r3, #4]
 8020c20:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8020c22:	693b      	ldr	r3, [r7, #16]
 8020c24:	881b      	ldrh	r3, [r3, #0]
 8020c26:	b29b      	uxth	r3, r3
 8020c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020c2c:	d10c      	bne.n	8020c48 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8020c2e:	693b      	ldr	r3, [r7, #16]
 8020c30:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8020c32:	2b06      	cmp	r3, #6
 8020c34:	d108      	bne.n	8020c48 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8020c36:	693b      	ldr	r3, [r7, #16]
 8020c38:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8020c3a:	2b04      	cmp	r3, #4
 8020c3c:	d104      	bne.n	8020c48 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8020c3e:	693b      	ldr	r3, [r7, #16]
 8020c40:	885b      	ldrh	r3, [r3, #2]
 8020c42:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8020c44:	2b08      	cmp	r3, #8
 8020c46:	d003      	beq.n	8020c50 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8020c48:	6878      	ldr	r0, [r7, #4]
 8020c4a:	f7f8 fd33 	bl	80196b4 <pbuf_free>
    return;
 8020c4e:	e055      	b.n	8020cfc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8020c50:	693b      	ldr	r3, [r7, #16]
 8020c52:	330e      	adds	r3, #14
 8020c54:	681b      	ldr	r3, [r3, #0]
 8020c56:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8020c58:	693b      	ldr	r3, [r7, #16]
 8020c5a:	3318      	adds	r3, #24
 8020c5c:	681b      	ldr	r3, [r3, #0]
 8020c5e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020c60:	683b      	ldr	r3, [r7, #0]
 8020c62:	3304      	adds	r3, #4
 8020c64:	681b      	ldr	r3, [r3, #0]
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	d102      	bne.n	8020c70 <etharp_input+0x74>
    for_us = 0;
 8020c6a:	2300      	movs	r3, #0
 8020c6c:	75fb      	strb	r3, [r7, #23]
 8020c6e:	e009      	b.n	8020c84 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8020c70:	68ba      	ldr	r2, [r7, #8]
 8020c72:	683b      	ldr	r3, [r7, #0]
 8020c74:	3304      	adds	r3, #4
 8020c76:	681b      	ldr	r3, [r3, #0]
 8020c78:	429a      	cmp	r2, r3
 8020c7a:	bf0c      	ite	eq
 8020c7c:	2301      	moveq	r3, #1
 8020c7e:	2300      	movne	r3, #0
 8020c80:	b2db      	uxtb	r3, r3
 8020c82:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8020c84:	693b      	ldr	r3, [r7, #16]
 8020c86:	f103 0208 	add.w	r2, r3, #8
 8020c8a:	7dfb      	ldrb	r3, [r7, #23]
 8020c8c:	2b00      	cmp	r3, #0
 8020c8e:	d001      	beq.n	8020c94 <etharp_input+0x98>
 8020c90:	2301      	movs	r3, #1
 8020c92:	e000      	b.n	8020c96 <etharp_input+0x9a>
 8020c94:	2302      	movs	r3, #2
 8020c96:	f107 010c 	add.w	r1, r7, #12
 8020c9a:	6838      	ldr	r0, [r7, #0]
 8020c9c:	f7ff fed8 	bl	8020a50 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8020ca0:	693b      	ldr	r3, [r7, #16]
 8020ca2:	88db      	ldrh	r3, [r3, #6]
 8020ca4:	b29b      	uxth	r3, r3
 8020ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020caa:	d003      	beq.n	8020cb4 <etharp_input+0xb8>
 8020cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020cb0:	d01e      	beq.n	8020cf0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8020cb2:	e020      	b.n	8020cf6 <etharp_input+0xfa>
      if (for_us) {
 8020cb4:	7dfb      	ldrb	r3, [r7, #23]
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	d01c      	beq.n	8020cf4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8020cba:	683b      	ldr	r3, [r7, #0]
 8020cbc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8020cc0:	693b      	ldr	r3, [r7, #16]
 8020cc2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8020cc6:	683b      	ldr	r3, [r7, #0]
 8020cc8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8020ccc:	683b      	ldr	r3, [r7, #0]
 8020cce:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8020cd0:	693a      	ldr	r2, [r7, #16]
 8020cd2:	3208      	adds	r2, #8
        etharp_raw(netif,
 8020cd4:	2102      	movs	r1, #2
 8020cd6:	9103      	str	r1, [sp, #12]
 8020cd8:	f107 010c 	add.w	r1, r7, #12
 8020cdc:	9102      	str	r1, [sp, #8]
 8020cde:	9201      	str	r2, [sp, #4]
 8020ce0:	9300      	str	r3, [sp, #0]
 8020ce2:	462b      	mov	r3, r5
 8020ce4:	4622      	mov	r2, r4
 8020ce6:	4601      	mov	r1, r0
 8020ce8:	6838      	ldr	r0, [r7, #0]
 8020cea:	f000 faeb 	bl	80212c4 <etharp_raw>
      break;
 8020cee:	e001      	b.n	8020cf4 <etharp_input+0xf8>
      break;
 8020cf0:	bf00      	nop
 8020cf2:	e000      	b.n	8020cf6 <etharp_input+0xfa>
      break;
 8020cf4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8020cf6:	6878      	ldr	r0, [r7, #4]
 8020cf8:	f7f8 fcdc 	bl	80196b4 <pbuf_free>
}
 8020cfc:	3718      	adds	r7, #24
 8020cfe:	46bd      	mov	sp, r7
 8020d00:	bdb0      	pop	{r4, r5, r7, pc}
 8020d02:	bf00      	nop
 8020d04:	08027a5c 	.word	0x08027a5c
 8020d08:	08027bac 	.word	0x08027bac
 8020d0c:	08027ad4 	.word	0x08027ad4

08020d10 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8020d10:	b580      	push	{r7, lr}
 8020d12:	b086      	sub	sp, #24
 8020d14:	af02      	add	r7, sp, #8
 8020d16:	60f8      	str	r0, [r7, #12]
 8020d18:	60b9      	str	r1, [r7, #8]
 8020d1a:	4613      	mov	r3, r2
 8020d1c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8020d1e:	79fa      	ldrb	r2, [r7, #7]
 8020d20:	4944      	ldr	r1, [pc, #272]	; (8020e34 <etharp_output_to_arp_index+0x124>)
 8020d22:	4613      	mov	r3, r2
 8020d24:	005b      	lsls	r3, r3, #1
 8020d26:	4413      	add	r3, r2
 8020d28:	00db      	lsls	r3, r3, #3
 8020d2a:	440b      	add	r3, r1
 8020d2c:	3314      	adds	r3, #20
 8020d2e:	781b      	ldrb	r3, [r3, #0]
 8020d30:	2b01      	cmp	r3, #1
 8020d32:	d806      	bhi.n	8020d42 <etharp_output_to_arp_index+0x32>
 8020d34:	4b40      	ldr	r3, [pc, #256]	; (8020e38 <etharp_output_to_arp_index+0x128>)
 8020d36:	f240 22ee 	movw	r2, #750	; 0x2ee
 8020d3a:	4940      	ldr	r1, [pc, #256]	; (8020e3c <etharp_output_to_arp_index+0x12c>)
 8020d3c:	4840      	ldr	r0, [pc, #256]	; (8020e40 <etharp_output_to_arp_index+0x130>)
 8020d3e:	f002 fd87 	bl	8023850 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8020d42:	79fa      	ldrb	r2, [r7, #7]
 8020d44:	493b      	ldr	r1, [pc, #236]	; (8020e34 <etharp_output_to_arp_index+0x124>)
 8020d46:	4613      	mov	r3, r2
 8020d48:	005b      	lsls	r3, r3, #1
 8020d4a:	4413      	add	r3, r2
 8020d4c:	00db      	lsls	r3, r3, #3
 8020d4e:	440b      	add	r3, r1
 8020d50:	3314      	adds	r3, #20
 8020d52:	781b      	ldrb	r3, [r3, #0]
 8020d54:	2b02      	cmp	r3, #2
 8020d56:	d153      	bne.n	8020e00 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8020d58:	79fa      	ldrb	r2, [r7, #7]
 8020d5a:	4936      	ldr	r1, [pc, #216]	; (8020e34 <etharp_output_to_arp_index+0x124>)
 8020d5c:	4613      	mov	r3, r2
 8020d5e:	005b      	lsls	r3, r3, #1
 8020d60:	4413      	add	r3, r2
 8020d62:	00db      	lsls	r3, r3, #3
 8020d64:	440b      	add	r3, r1
 8020d66:	3312      	adds	r3, #18
 8020d68:	881b      	ldrh	r3, [r3, #0]
 8020d6a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8020d6e:	d919      	bls.n	8020da4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8020d70:	79fa      	ldrb	r2, [r7, #7]
 8020d72:	4613      	mov	r3, r2
 8020d74:	005b      	lsls	r3, r3, #1
 8020d76:	4413      	add	r3, r2
 8020d78:	00db      	lsls	r3, r3, #3
 8020d7a:	4a2e      	ldr	r2, [pc, #184]	; (8020e34 <etharp_output_to_arp_index+0x124>)
 8020d7c:	4413      	add	r3, r2
 8020d7e:	3304      	adds	r3, #4
 8020d80:	4619      	mov	r1, r3
 8020d82:	68f8      	ldr	r0, [r7, #12]
 8020d84:	f000 fb4c 	bl	8021420 <etharp_request>
 8020d88:	4603      	mov	r3, r0
 8020d8a:	2b00      	cmp	r3, #0
 8020d8c:	d138      	bne.n	8020e00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020d8e:	79fa      	ldrb	r2, [r7, #7]
 8020d90:	4928      	ldr	r1, [pc, #160]	; (8020e34 <etharp_output_to_arp_index+0x124>)
 8020d92:	4613      	mov	r3, r2
 8020d94:	005b      	lsls	r3, r3, #1
 8020d96:	4413      	add	r3, r2
 8020d98:	00db      	lsls	r3, r3, #3
 8020d9a:	440b      	add	r3, r1
 8020d9c:	3314      	adds	r3, #20
 8020d9e:	2203      	movs	r2, #3
 8020da0:	701a      	strb	r2, [r3, #0]
 8020da2:	e02d      	b.n	8020e00 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8020da4:	79fa      	ldrb	r2, [r7, #7]
 8020da6:	4923      	ldr	r1, [pc, #140]	; (8020e34 <etharp_output_to_arp_index+0x124>)
 8020da8:	4613      	mov	r3, r2
 8020daa:	005b      	lsls	r3, r3, #1
 8020dac:	4413      	add	r3, r2
 8020dae:	00db      	lsls	r3, r3, #3
 8020db0:	440b      	add	r3, r1
 8020db2:	3312      	adds	r3, #18
 8020db4:	881b      	ldrh	r3, [r3, #0]
 8020db6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8020dba:	d321      	bcc.n	8020e00 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8020dbc:	79fa      	ldrb	r2, [r7, #7]
 8020dbe:	4613      	mov	r3, r2
 8020dc0:	005b      	lsls	r3, r3, #1
 8020dc2:	4413      	add	r3, r2
 8020dc4:	00db      	lsls	r3, r3, #3
 8020dc6:	4a1b      	ldr	r2, [pc, #108]	; (8020e34 <etharp_output_to_arp_index+0x124>)
 8020dc8:	4413      	add	r3, r2
 8020dca:	1d19      	adds	r1, r3, #4
 8020dcc:	79fa      	ldrb	r2, [r7, #7]
 8020dce:	4613      	mov	r3, r2
 8020dd0:	005b      	lsls	r3, r3, #1
 8020dd2:	4413      	add	r3, r2
 8020dd4:	00db      	lsls	r3, r3, #3
 8020dd6:	3308      	adds	r3, #8
 8020dd8:	4a16      	ldr	r2, [pc, #88]	; (8020e34 <etharp_output_to_arp_index+0x124>)
 8020dda:	4413      	add	r3, r2
 8020ddc:	3304      	adds	r3, #4
 8020dde:	461a      	mov	r2, r3
 8020de0:	68f8      	ldr	r0, [r7, #12]
 8020de2:	f000 fafb 	bl	80213dc <etharp_request_dst>
 8020de6:	4603      	mov	r3, r0
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	d109      	bne.n	8020e00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020dec:	79fa      	ldrb	r2, [r7, #7]
 8020dee:	4911      	ldr	r1, [pc, #68]	; (8020e34 <etharp_output_to_arp_index+0x124>)
 8020df0:	4613      	mov	r3, r2
 8020df2:	005b      	lsls	r3, r3, #1
 8020df4:	4413      	add	r3, r2
 8020df6:	00db      	lsls	r3, r3, #3
 8020df8:	440b      	add	r3, r1
 8020dfa:	3314      	adds	r3, #20
 8020dfc:	2203      	movs	r2, #3
 8020dfe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8020e00:	68fb      	ldr	r3, [r7, #12]
 8020e02:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8020e06:	79fa      	ldrb	r2, [r7, #7]
 8020e08:	4613      	mov	r3, r2
 8020e0a:	005b      	lsls	r3, r3, #1
 8020e0c:	4413      	add	r3, r2
 8020e0e:	00db      	lsls	r3, r3, #3
 8020e10:	3308      	adds	r3, #8
 8020e12:	4a08      	ldr	r2, [pc, #32]	; (8020e34 <etharp_output_to_arp_index+0x124>)
 8020e14:	4413      	add	r3, r2
 8020e16:	3304      	adds	r3, #4
 8020e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020e1c:	9200      	str	r2, [sp, #0]
 8020e1e:	460a      	mov	r2, r1
 8020e20:	68b9      	ldr	r1, [r7, #8]
 8020e22:	68f8      	ldr	r0, [r7, #12]
 8020e24:	f001 fe40 	bl	8022aa8 <ethernet_output>
 8020e28:	4603      	mov	r3, r0
}
 8020e2a:	4618      	mov	r0, r3
 8020e2c:	3710      	adds	r7, #16
 8020e2e:	46bd      	mov	sp, r7
 8020e30:	bd80      	pop	{r7, pc}
 8020e32:	bf00      	nop
 8020e34:	20011378 	.word	0x20011378
 8020e38:	08027a5c 	.word	0x08027a5c
 8020e3c:	08027bcc 	.word	0x08027bcc
 8020e40:	08027ad4 	.word	0x08027ad4

08020e44 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8020e44:	b580      	push	{r7, lr}
 8020e46:	b08a      	sub	sp, #40	; 0x28
 8020e48:	af02      	add	r7, sp, #8
 8020e4a:	60f8      	str	r0, [r7, #12]
 8020e4c:	60b9      	str	r1, [r7, #8]
 8020e4e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8020e50:	687b      	ldr	r3, [r7, #4]
 8020e52:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020e54:	68fb      	ldr	r3, [r7, #12]
 8020e56:	2b00      	cmp	r3, #0
 8020e58:	d106      	bne.n	8020e68 <etharp_output+0x24>
 8020e5a:	4b73      	ldr	r3, [pc, #460]	; (8021028 <etharp_output+0x1e4>)
 8020e5c:	f240 321e 	movw	r2, #798	; 0x31e
 8020e60:	4972      	ldr	r1, [pc, #456]	; (802102c <etharp_output+0x1e8>)
 8020e62:	4873      	ldr	r0, [pc, #460]	; (8021030 <etharp_output+0x1ec>)
 8020e64:	f002 fcf4 	bl	8023850 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8020e68:	68bb      	ldr	r3, [r7, #8]
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d106      	bne.n	8020e7c <etharp_output+0x38>
 8020e6e:	4b6e      	ldr	r3, [pc, #440]	; (8021028 <etharp_output+0x1e4>)
 8020e70:	f240 321f 	movw	r2, #799	; 0x31f
 8020e74:	496f      	ldr	r1, [pc, #444]	; (8021034 <etharp_output+0x1f0>)
 8020e76:	486e      	ldr	r0, [pc, #440]	; (8021030 <etharp_output+0x1ec>)
 8020e78:	f002 fcea 	bl	8023850 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8020e7c:	687b      	ldr	r3, [r7, #4]
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	d106      	bne.n	8020e90 <etharp_output+0x4c>
 8020e82:	4b69      	ldr	r3, [pc, #420]	; (8021028 <etharp_output+0x1e4>)
 8020e84:	f44f 7248 	mov.w	r2, #800	; 0x320
 8020e88:	496b      	ldr	r1, [pc, #428]	; (8021038 <etharp_output+0x1f4>)
 8020e8a:	4869      	ldr	r0, [pc, #420]	; (8021030 <etharp_output+0x1ec>)
 8020e8c:	f002 fce0 	bl	8023850 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	681b      	ldr	r3, [r3, #0]
 8020e94:	68f9      	ldr	r1, [r7, #12]
 8020e96:	4618      	mov	r0, r3
 8020e98:	f000 fef8 	bl	8021c8c <ip4_addr_isbroadcast_u32>
 8020e9c:	4603      	mov	r3, r0
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	d002      	beq.n	8020ea8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8020ea2:	4b66      	ldr	r3, [pc, #408]	; (802103c <etharp_output+0x1f8>)
 8020ea4:	61fb      	str	r3, [r7, #28]
 8020ea6:	e0af      	b.n	8021008 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8020ea8:	687b      	ldr	r3, [r7, #4]
 8020eaa:	681b      	ldr	r3, [r3, #0]
 8020eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020eb0:	2be0      	cmp	r3, #224	; 0xe0
 8020eb2:	d118      	bne.n	8020ee6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8020eb4:	2301      	movs	r3, #1
 8020eb6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8020eb8:	2300      	movs	r3, #0
 8020eba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8020ebc:	235e      	movs	r3, #94	; 0x5e
 8020ebe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8020ec0:	687b      	ldr	r3, [r7, #4]
 8020ec2:	3301      	adds	r3, #1
 8020ec4:	781b      	ldrb	r3, [r3, #0]
 8020ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020eca:	b2db      	uxtb	r3, r3
 8020ecc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8020ece:	687b      	ldr	r3, [r7, #4]
 8020ed0:	3302      	adds	r3, #2
 8020ed2:	781b      	ldrb	r3, [r3, #0]
 8020ed4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8020ed6:	687b      	ldr	r3, [r7, #4]
 8020ed8:	3303      	adds	r3, #3
 8020eda:	781b      	ldrb	r3, [r3, #0]
 8020edc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8020ede:	f107 0310 	add.w	r3, r7, #16
 8020ee2:	61fb      	str	r3, [r7, #28]
 8020ee4:	e090      	b.n	8021008 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	681a      	ldr	r2, [r3, #0]
 8020eea:	68fb      	ldr	r3, [r7, #12]
 8020eec:	3304      	adds	r3, #4
 8020eee:	681b      	ldr	r3, [r3, #0]
 8020ef0:	405a      	eors	r2, r3
 8020ef2:	68fb      	ldr	r3, [r7, #12]
 8020ef4:	3308      	adds	r3, #8
 8020ef6:	681b      	ldr	r3, [r3, #0]
 8020ef8:	4013      	ands	r3, r2
 8020efa:	2b00      	cmp	r3, #0
 8020efc:	d012      	beq.n	8020f24 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	681b      	ldr	r3, [r3, #0]
 8020f02:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020f04:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8020f08:	4293      	cmp	r3, r2
 8020f0a:	d00b      	beq.n	8020f24 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8020f0c:	68fb      	ldr	r3, [r7, #12]
 8020f0e:	330c      	adds	r3, #12
 8020f10:	681b      	ldr	r3, [r3, #0]
 8020f12:	2b00      	cmp	r3, #0
 8020f14:	d003      	beq.n	8020f1e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8020f16:	68fb      	ldr	r3, [r7, #12]
 8020f18:	330c      	adds	r3, #12
 8020f1a:	61bb      	str	r3, [r7, #24]
 8020f1c:	e002      	b.n	8020f24 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8020f1e:	f06f 0303 	mvn.w	r3, #3
 8020f22:	e07d      	b.n	8021020 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020f24:	4b46      	ldr	r3, [pc, #280]	; (8021040 <etharp_output+0x1fc>)
 8020f26:	781b      	ldrb	r3, [r3, #0]
 8020f28:	4619      	mov	r1, r3
 8020f2a:	4a46      	ldr	r2, [pc, #280]	; (8021044 <etharp_output+0x200>)
 8020f2c:	460b      	mov	r3, r1
 8020f2e:	005b      	lsls	r3, r3, #1
 8020f30:	440b      	add	r3, r1
 8020f32:	00db      	lsls	r3, r3, #3
 8020f34:	4413      	add	r3, r2
 8020f36:	3314      	adds	r3, #20
 8020f38:	781b      	ldrb	r3, [r3, #0]
 8020f3a:	2b01      	cmp	r3, #1
 8020f3c:	d925      	bls.n	8020f8a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020f3e:	4b40      	ldr	r3, [pc, #256]	; (8021040 <etharp_output+0x1fc>)
 8020f40:	781b      	ldrb	r3, [r3, #0]
 8020f42:	4619      	mov	r1, r3
 8020f44:	4a3f      	ldr	r2, [pc, #252]	; (8021044 <etharp_output+0x200>)
 8020f46:	460b      	mov	r3, r1
 8020f48:	005b      	lsls	r3, r3, #1
 8020f4a:	440b      	add	r3, r1
 8020f4c:	00db      	lsls	r3, r3, #3
 8020f4e:	4413      	add	r3, r2
 8020f50:	3308      	adds	r3, #8
 8020f52:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020f54:	68fa      	ldr	r2, [r7, #12]
 8020f56:	429a      	cmp	r2, r3
 8020f58:	d117      	bne.n	8020f8a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8020f5a:	69bb      	ldr	r3, [r7, #24]
 8020f5c:	681a      	ldr	r2, [r3, #0]
 8020f5e:	4b38      	ldr	r3, [pc, #224]	; (8021040 <etharp_output+0x1fc>)
 8020f60:	781b      	ldrb	r3, [r3, #0]
 8020f62:	4618      	mov	r0, r3
 8020f64:	4937      	ldr	r1, [pc, #220]	; (8021044 <etharp_output+0x200>)
 8020f66:	4603      	mov	r3, r0
 8020f68:	005b      	lsls	r3, r3, #1
 8020f6a:	4403      	add	r3, r0
 8020f6c:	00db      	lsls	r3, r3, #3
 8020f6e:	440b      	add	r3, r1
 8020f70:	3304      	adds	r3, #4
 8020f72:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020f74:	429a      	cmp	r2, r3
 8020f76:	d108      	bne.n	8020f8a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8020f78:	4b31      	ldr	r3, [pc, #196]	; (8021040 <etharp_output+0x1fc>)
 8020f7a:	781b      	ldrb	r3, [r3, #0]
 8020f7c:	461a      	mov	r2, r3
 8020f7e:	68b9      	ldr	r1, [r7, #8]
 8020f80:	68f8      	ldr	r0, [r7, #12]
 8020f82:	f7ff fec5 	bl	8020d10 <etharp_output_to_arp_index>
 8020f86:	4603      	mov	r3, r0
 8020f88:	e04a      	b.n	8021020 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020f8a:	2300      	movs	r3, #0
 8020f8c:	75fb      	strb	r3, [r7, #23]
 8020f8e:	e031      	b.n	8020ff4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020f90:	7dfa      	ldrb	r2, [r7, #23]
 8020f92:	492c      	ldr	r1, [pc, #176]	; (8021044 <etharp_output+0x200>)
 8020f94:	4613      	mov	r3, r2
 8020f96:	005b      	lsls	r3, r3, #1
 8020f98:	4413      	add	r3, r2
 8020f9a:	00db      	lsls	r3, r3, #3
 8020f9c:	440b      	add	r3, r1
 8020f9e:	3314      	adds	r3, #20
 8020fa0:	781b      	ldrb	r3, [r3, #0]
 8020fa2:	2b01      	cmp	r3, #1
 8020fa4:	d923      	bls.n	8020fee <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8020fa6:	7dfa      	ldrb	r2, [r7, #23]
 8020fa8:	4926      	ldr	r1, [pc, #152]	; (8021044 <etharp_output+0x200>)
 8020faa:	4613      	mov	r3, r2
 8020fac:	005b      	lsls	r3, r3, #1
 8020fae:	4413      	add	r3, r2
 8020fb0:	00db      	lsls	r3, r3, #3
 8020fb2:	440b      	add	r3, r1
 8020fb4:	3308      	adds	r3, #8
 8020fb6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020fb8:	68fa      	ldr	r2, [r7, #12]
 8020fba:	429a      	cmp	r2, r3
 8020fbc:	d117      	bne.n	8020fee <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8020fbe:	69bb      	ldr	r3, [r7, #24]
 8020fc0:	6819      	ldr	r1, [r3, #0]
 8020fc2:	7dfa      	ldrb	r2, [r7, #23]
 8020fc4:	481f      	ldr	r0, [pc, #124]	; (8021044 <etharp_output+0x200>)
 8020fc6:	4613      	mov	r3, r2
 8020fc8:	005b      	lsls	r3, r3, #1
 8020fca:	4413      	add	r3, r2
 8020fcc:	00db      	lsls	r3, r3, #3
 8020fce:	4403      	add	r3, r0
 8020fd0:	3304      	adds	r3, #4
 8020fd2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020fd4:	4299      	cmp	r1, r3
 8020fd6:	d10a      	bne.n	8020fee <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8020fd8:	4a19      	ldr	r2, [pc, #100]	; (8021040 <etharp_output+0x1fc>)
 8020fda:	7dfb      	ldrb	r3, [r7, #23]
 8020fdc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8020fde:	7dfb      	ldrb	r3, [r7, #23]
 8020fe0:	461a      	mov	r2, r3
 8020fe2:	68b9      	ldr	r1, [r7, #8]
 8020fe4:	68f8      	ldr	r0, [r7, #12]
 8020fe6:	f7ff fe93 	bl	8020d10 <etharp_output_to_arp_index>
 8020fea:	4603      	mov	r3, r0
 8020fec:	e018      	b.n	8021020 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020fee:	7dfb      	ldrb	r3, [r7, #23]
 8020ff0:	3301      	adds	r3, #1
 8020ff2:	75fb      	strb	r3, [r7, #23]
 8020ff4:	7dfb      	ldrb	r3, [r7, #23]
 8020ff6:	2b09      	cmp	r3, #9
 8020ff8:	d9ca      	bls.n	8020f90 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8020ffa:	68ba      	ldr	r2, [r7, #8]
 8020ffc:	69b9      	ldr	r1, [r7, #24]
 8020ffe:	68f8      	ldr	r0, [r7, #12]
 8021000:	f000 f822 	bl	8021048 <etharp_query>
 8021004:	4603      	mov	r3, r0
 8021006:	e00b      	b.n	8021020 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8021008:	68fb      	ldr	r3, [r7, #12]
 802100a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 802100e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021012:	9300      	str	r3, [sp, #0]
 8021014:	69fb      	ldr	r3, [r7, #28]
 8021016:	68b9      	ldr	r1, [r7, #8]
 8021018:	68f8      	ldr	r0, [r7, #12]
 802101a:	f001 fd45 	bl	8022aa8 <ethernet_output>
 802101e:	4603      	mov	r3, r0
}
 8021020:	4618      	mov	r0, r3
 8021022:	3720      	adds	r7, #32
 8021024:	46bd      	mov	sp, r7
 8021026:	bd80      	pop	{r7, pc}
 8021028:	08027a5c 	.word	0x08027a5c
 802102c:	08027bac 	.word	0x08027bac
 8021030:	08027ad4 	.word	0x08027ad4
 8021034:	08027bfc 	.word	0x08027bfc
 8021038:	08027b9c 	.word	0x08027b9c
 802103c:	08028270 	.word	0x08028270
 8021040:	20011468 	.word	0x20011468
 8021044:	20011378 	.word	0x20011378

08021048 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8021048:	b580      	push	{r7, lr}
 802104a:	b08c      	sub	sp, #48	; 0x30
 802104c:	af02      	add	r7, sp, #8
 802104e:	60f8      	str	r0, [r7, #12]
 8021050:	60b9      	str	r1, [r7, #8]
 8021052:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8021054:	68fb      	ldr	r3, [r7, #12]
 8021056:	3326      	adds	r3, #38	; 0x26
 8021058:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 802105a:	23ff      	movs	r3, #255	; 0xff
 802105c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8021060:	2300      	movs	r3, #0
 8021062:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8021064:	68bb      	ldr	r3, [r7, #8]
 8021066:	681b      	ldr	r3, [r3, #0]
 8021068:	68f9      	ldr	r1, [r7, #12]
 802106a:	4618      	mov	r0, r3
 802106c:	f000 fe0e 	bl	8021c8c <ip4_addr_isbroadcast_u32>
 8021070:	4603      	mov	r3, r0
 8021072:	2b00      	cmp	r3, #0
 8021074:	d10c      	bne.n	8021090 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8021076:	68bb      	ldr	r3, [r7, #8]
 8021078:	681b      	ldr	r3, [r3, #0]
 802107a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802107e:	2be0      	cmp	r3, #224	; 0xe0
 8021080:	d006      	beq.n	8021090 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8021082:	68bb      	ldr	r3, [r7, #8]
 8021084:	2b00      	cmp	r3, #0
 8021086:	d003      	beq.n	8021090 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8021088:	68bb      	ldr	r3, [r7, #8]
 802108a:	681b      	ldr	r3, [r3, #0]
 802108c:	2b00      	cmp	r3, #0
 802108e:	d102      	bne.n	8021096 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8021090:	f06f 030f 	mvn.w	r3, #15
 8021094:	e101      	b.n	802129a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8021096:	68fa      	ldr	r2, [r7, #12]
 8021098:	2101      	movs	r1, #1
 802109a:	68b8      	ldr	r0, [r7, #8]
 802109c:	f7ff fb60 	bl	8020760 <etharp_find_entry>
 80210a0:	4603      	mov	r3, r0
 80210a2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80210a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	da02      	bge.n	80210b2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80210ac:	8a7b      	ldrh	r3, [r7, #18]
 80210ae:	b25b      	sxtb	r3, r3
 80210b0:	e0f3      	b.n	802129a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80210b2:	8a7b      	ldrh	r3, [r7, #18]
 80210b4:	2b7e      	cmp	r3, #126	; 0x7e
 80210b6:	d906      	bls.n	80210c6 <etharp_query+0x7e>
 80210b8:	4b7a      	ldr	r3, [pc, #488]	; (80212a4 <etharp_query+0x25c>)
 80210ba:	f240 32c1 	movw	r2, #961	; 0x3c1
 80210be:	497a      	ldr	r1, [pc, #488]	; (80212a8 <etharp_query+0x260>)
 80210c0:	487a      	ldr	r0, [pc, #488]	; (80212ac <etharp_query+0x264>)
 80210c2:	f002 fbc5 	bl	8023850 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80210c6:	8a7b      	ldrh	r3, [r7, #18]
 80210c8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80210ca:	7c7a      	ldrb	r2, [r7, #17]
 80210cc:	4978      	ldr	r1, [pc, #480]	; (80212b0 <etharp_query+0x268>)
 80210ce:	4613      	mov	r3, r2
 80210d0:	005b      	lsls	r3, r3, #1
 80210d2:	4413      	add	r3, r2
 80210d4:	00db      	lsls	r3, r3, #3
 80210d6:	440b      	add	r3, r1
 80210d8:	3314      	adds	r3, #20
 80210da:	781b      	ldrb	r3, [r3, #0]
 80210dc:	2b00      	cmp	r3, #0
 80210de:	d115      	bne.n	802110c <etharp_query+0xc4>
    is_new_entry = 1;
 80210e0:	2301      	movs	r3, #1
 80210e2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80210e4:	7c7a      	ldrb	r2, [r7, #17]
 80210e6:	4972      	ldr	r1, [pc, #456]	; (80212b0 <etharp_query+0x268>)
 80210e8:	4613      	mov	r3, r2
 80210ea:	005b      	lsls	r3, r3, #1
 80210ec:	4413      	add	r3, r2
 80210ee:	00db      	lsls	r3, r3, #3
 80210f0:	440b      	add	r3, r1
 80210f2:	3314      	adds	r3, #20
 80210f4:	2201      	movs	r2, #1
 80210f6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80210f8:	7c7a      	ldrb	r2, [r7, #17]
 80210fa:	496d      	ldr	r1, [pc, #436]	; (80212b0 <etharp_query+0x268>)
 80210fc:	4613      	mov	r3, r2
 80210fe:	005b      	lsls	r3, r3, #1
 8021100:	4413      	add	r3, r2
 8021102:	00db      	lsls	r3, r3, #3
 8021104:	440b      	add	r3, r1
 8021106:	3308      	adds	r3, #8
 8021108:	68fa      	ldr	r2, [r7, #12]
 802110a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 802110c:	7c7a      	ldrb	r2, [r7, #17]
 802110e:	4968      	ldr	r1, [pc, #416]	; (80212b0 <etharp_query+0x268>)
 8021110:	4613      	mov	r3, r2
 8021112:	005b      	lsls	r3, r3, #1
 8021114:	4413      	add	r3, r2
 8021116:	00db      	lsls	r3, r3, #3
 8021118:	440b      	add	r3, r1
 802111a:	3314      	adds	r3, #20
 802111c:	781b      	ldrb	r3, [r3, #0]
 802111e:	2b01      	cmp	r3, #1
 8021120:	d011      	beq.n	8021146 <etharp_query+0xfe>
 8021122:	7c7a      	ldrb	r2, [r7, #17]
 8021124:	4962      	ldr	r1, [pc, #392]	; (80212b0 <etharp_query+0x268>)
 8021126:	4613      	mov	r3, r2
 8021128:	005b      	lsls	r3, r3, #1
 802112a:	4413      	add	r3, r2
 802112c:	00db      	lsls	r3, r3, #3
 802112e:	440b      	add	r3, r1
 8021130:	3314      	adds	r3, #20
 8021132:	781b      	ldrb	r3, [r3, #0]
 8021134:	2b01      	cmp	r3, #1
 8021136:	d806      	bhi.n	8021146 <etharp_query+0xfe>
 8021138:	4b5a      	ldr	r3, [pc, #360]	; (80212a4 <etharp_query+0x25c>)
 802113a:	f240 32cd 	movw	r2, #973	; 0x3cd
 802113e:	495d      	ldr	r1, [pc, #372]	; (80212b4 <etharp_query+0x26c>)
 8021140:	485a      	ldr	r0, [pc, #360]	; (80212ac <etharp_query+0x264>)
 8021142:	f002 fb85 	bl	8023850 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8021146:	6a3b      	ldr	r3, [r7, #32]
 8021148:	2b00      	cmp	r3, #0
 802114a:	d102      	bne.n	8021152 <etharp_query+0x10a>
 802114c:	687b      	ldr	r3, [r7, #4]
 802114e:	2b00      	cmp	r3, #0
 8021150:	d10c      	bne.n	802116c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8021152:	68b9      	ldr	r1, [r7, #8]
 8021154:	68f8      	ldr	r0, [r7, #12]
 8021156:	f000 f963 	bl	8021420 <etharp_request>
 802115a:	4603      	mov	r3, r0
 802115c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	2b00      	cmp	r3, #0
 8021164:	d102      	bne.n	802116c <etharp_query+0x124>
      return result;
 8021166:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802116a:	e096      	b.n	802129a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	2b00      	cmp	r3, #0
 8021170:	d106      	bne.n	8021180 <etharp_query+0x138>
 8021172:	4b4c      	ldr	r3, [pc, #304]	; (80212a4 <etharp_query+0x25c>)
 8021174:	f240 32e1 	movw	r2, #993	; 0x3e1
 8021178:	494f      	ldr	r1, [pc, #316]	; (80212b8 <etharp_query+0x270>)
 802117a:	484c      	ldr	r0, [pc, #304]	; (80212ac <etharp_query+0x264>)
 802117c:	f002 fb68 	bl	8023850 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021180:	7c7a      	ldrb	r2, [r7, #17]
 8021182:	494b      	ldr	r1, [pc, #300]	; (80212b0 <etharp_query+0x268>)
 8021184:	4613      	mov	r3, r2
 8021186:	005b      	lsls	r3, r3, #1
 8021188:	4413      	add	r3, r2
 802118a:	00db      	lsls	r3, r3, #3
 802118c:	440b      	add	r3, r1
 802118e:	3314      	adds	r3, #20
 8021190:	781b      	ldrb	r3, [r3, #0]
 8021192:	2b01      	cmp	r3, #1
 8021194:	d917      	bls.n	80211c6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8021196:	4a49      	ldr	r2, [pc, #292]	; (80212bc <etharp_query+0x274>)
 8021198:	7c7b      	ldrb	r3, [r7, #17]
 802119a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802119c:	7c7a      	ldrb	r2, [r7, #17]
 802119e:	4613      	mov	r3, r2
 80211a0:	005b      	lsls	r3, r3, #1
 80211a2:	4413      	add	r3, r2
 80211a4:	00db      	lsls	r3, r3, #3
 80211a6:	3308      	adds	r3, #8
 80211a8:	4a41      	ldr	r2, [pc, #260]	; (80212b0 <etharp_query+0x268>)
 80211aa:	4413      	add	r3, r2
 80211ac:	3304      	adds	r3, #4
 80211ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80211b2:	9200      	str	r2, [sp, #0]
 80211b4:	697a      	ldr	r2, [r7, #20]
 80211b6:	6879      	ldr	r1, [r7, #4]
 80211b8:	68f8      	ldr	r0, [r7, #12]
 80211ba:	f001 fc75 	bl	8022aa8 <ethernet_output>
 80211be:	4603      	mov	r3, r0
 80211c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80211c4:	e067      	b.n	8021296 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80211c6:	7c7a      	ldrb	r2, [r7, #17]
 80211c8:	4939      	ldr	r1, [pc, #228]	; (80212b0 <etharp_query+0x268>)
 80211ca:	4613      	mov	r3, r2
 80211cc:	005b      	lsls	r3, r3, #1
 80211ce:	4413      	add	r3, r2
 80211d0:	00db      	lsls	r3, r3, #3
 80211d2:	440b      	add	r3, r1
 80211d4:	3314      	adds	r3, #20
 80211d6:	781b      	ldrb	r3, [r3, #0]
 80211d8:	2b01      	cmp	r3, #1
 80211da:	d15c      	bne.n	8021296 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80211dc:	2300      	movs	r3, #0
 80211de:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80211e0:	687b      	ldr	r3, [r7, #4]
 80211e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80211e4:	e01c      	b.n	8021220 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80211e6:	69fb      	ldr	r3, [r7, #28]
 80211e8:	895a      	ldrh	r2, [r3, #10]
 80211ea:	69fb      	ldr	r3, [r7, #28]
 80211ec:	891b      	ldrh	r3, [r3, #8]
 80211ee:	429a      	cmp	r2, r3
 80211f0:	d10a      	bne.n	8021208 <etharp_query+0x1c0>
 80211f2:	69fb      	ldr	r3, [r7, #28]
 80211f4:	681b      	ldr	r3, [r3, #0]
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	d006      	beq.n	8021208 <etharp_query+0x1c0>
 80211fa:	4b2a      	ldr	r3, [pc, #168]	; (80212a4 <etharp_query+0x25c>)
 80211fc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8021200:	492f      	ldr	r1, [pc, #188]	; (80212c0 <etharp_query+0x278>)
 8021202:	482a      	ldr	r0, [pc, #168]	; (80212ac <etharp_query+0x264>)
 8021204:	f002 fb24 	bl	8023850 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8021208:	69fb      	ldr	r3, [r7, #28]
 802120a:	7b1b      	ldrb	r3, [r3, #12]
 802120c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021210:	2b00      	cmp	r3, #0
 8021212:	d002      	beq.n	802121a <etharp_query+0x1d2>
        copy_needed = 1;
 8021214:	2301      	movs	r3, #1
 8021216:	61bb      	str	r3, [r7, #24]
        break;
 8021218:	e005      	b.n	8021226 <etharp_query+0x1de>
      }
      p = p->next;
 802121a:	69fb      	ldr	r3, [r7, #28]
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8021220:	69fb      	ldr	r3, [r7, #28]
 8021222:	2b00      	cmp	r3, #0
 8021224:	d1df      	bne.n	80211e6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8021226:	69bb      	ldr	r3, [r7, #24]
 8021228:	2b00      	cmp	r3, #0
 802122a:	d007      	beq.n	802123c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 802122c:	687a      	ldr	r2, [r7, #4]
 802122e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8021232:	200e      	movs	r0, #14
 8021234:	f7f8 fca6 	bl	8019b84 <pbuf_clone>
 8021238:	61f8      	str	r0, [r7, #28]
 802123a:	e004      	b.n	8021246 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8021240:	69f8      	ldr	r0, [r7, #28]
 8021242:	f7f8 fadd 	bl	8019800 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8021246:	69fb      	ldr	r3, [r7, #28]
 8021248:	2b00      	cmp	r3, #0
 802124a:	d021      	beq.n	8021290 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 802124c:	7c7a      	ldrb	r2, [r7, #17]
 802124e:	4918      	ldr	r1, [pc, #96]	; (80212b0 <etharp_query+0x268>)
 8021250:	4613      	mov	r3, r2
 8021252:	005b      	lsls	r3, r3, #1
 8021254:	4413      	add	r3, r2
 8021256:	00db      	lsls	r3, r3, #3
 8021258:	440b      	add	r3, r1
 802125a:	681b      	ldr	r3, [r3, #0]
 802125c:	2b00      	cmp	r3, #0
 802125e:	d00a      	beq.n	8021276 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8021260:	7c7a      	ldrb	r2, [r7, #17]
 8021262:	4913      	ldr	r1, [pc, #76]	; (80212b0 <etharp_query+0x268>)
 8021264:	4613      	mov	r3, r2
 8021266:	005b      	lsls	r3, r3, #1
 8021268:	4413      	add	r3, r2
 802126a:	00db      	lsls	r3, r3, #3
 802126c:	440b      	add	r3, r1
 802126e:	681b      	ldr	r3, [r3, #0]
 8021270:	4618      	mov	r0, r3
 8021272:	f7f8 fa1f 	bl	80196b4 <pbuf_free>
      }
      arp_table[i].q = p;
 8021276:	7c7a      	ldrb	r2, [r7, #17]
 8021278:	490d      	ldr	r1, [pc, #52]	; (80212b0 <etharp_query+0x268>)
 802127a:	4613      	mov	r3, r2
 802127c:	005b      	lsls	r3, r3, #1
 802127e:	4413      	add	r3, r2
 8021280:	00db      	lsls	r3, r3, #3
 8021282:	440b      	add	r3, r1
 8021284:	69fa      	ldr	r2, [r7, #28]
 8021286:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8021288:	2300      	movs	r3, #0
 802128a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802128e:	e002      	b.n	8021296 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8021290:	23ff      	movs	r3, #255	; 0xff
 8021292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8021296:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 802129a:	4618      	mov	r0, r3
 802129c:	3728      	adds	r7, #40	; 0x28
 802129e:	46bd      	mov	sp, r7
 80212a0:	bd80      	pop	{r7, pc}
 80212a2:	bf00      	nop
 80212a4:	08027a5c 	.word	0x08027a5c
 80212a8:	08027c08 	.word	0x08027c08
 80212ac:	08027ad4 	.word	0x08027ad4
 80212b0:	20011378 	.word	0x20011378
 80212b4:	08027c18 	.word	0x08027c18
 80212b8:	08027bfc 	.word	0x08027bfc
 80212bc:	20011468 	.word	0x20011468
 80212c0:	08027c40 	.word	0x08027c40

080212c4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80212c4:	b580      	push	{r7, lr}
 80212c6:	b08a      	sub	sp, #40	; 0x28
 80212c8:	af02      	add	r7, sp, #8
 80212ca:	60f8      	str	r0, [r7, #12]
 80212cc:	60b9      	str	r1, [r7, #8]
 80212ce:	607a      	str	r2, [r7, #4]
 80212d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80212d2:	2300      	movs	r3, #0
 80212d4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80212d6:	68fb      	ldr	r3, [r7, #12]
 80212d8:	2b00      	cmp	r3, #0
 80212da:	d106      	bne.n	80212ea <etharp_raw+0x26>
 80212dc:	4b3a      	ldr	r3, [pc, #232]	; (80213c8 <etharp_raw+0x104>)
 80212de:	f240 4257 	movw	r2, #1111	; 0x457
 80212e2:	493a      	ldr	r1, [pc, #232]	; (80213cc <etharp_raw+0x108>)
 80212e4:	483a      	ldr	r0, [pc, #232]	; (80213d0 <etharp_raw+0x10c>)
 80212e6:	f002 fab3 	bl	8023850 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80212ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80212ee:	211c      	movs	r1, #28
 80212f0:	200e      	movs	r0, #14
 80212f2:	f7f7 fefb 	bl	80190ec <pbuf_alloc>
 80212f6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80212f8:	69bb      	ldr	r3, [r7, #24]
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	d102      	bne.n	8021304 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80212fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021302:	e05d      	b.n	80213c0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8021304:	69bb      	ldr	r3, [r7, #24]
 8021306:	895b      	ldrh	r3, [r3, #10]
 8021308:	2b1b      	cmp	r3, #27
 802130a:	d806      	bhi.n	802131a <etharp_raw+0x56>
 802130c:	4b2e      	ldr	r3, [pc, #184]	; (80213c8 <etharp_raw+0x104>)
 802130e:	f240 4262 	movw	r2, #1122	; 0x462
 8021312:	4930      	ldr	r1, [pc, #192]	; (80213d4 <etharp_raw+0x110>)
 8021314:	482e      	ldr	r0, [pc, #184]	; (80213d0 <etharp_raw+0x10c>)
 8021316:	f002 fa9b 	bl	8023850 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 802131a:	69bb      	ldr	r3, [r7, #24]
 802131c:	685b      	ldr	r3, [r3, #4]
 802131e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8021320:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8021322:	4618      	mov	r0, r3
 8021324:	f7f6 fdd4 	bl	8017ed0 <lwip_htons>
 8021328:	4603      	mov	r3, r0
 802132a:	461a      	mov	r2, r3
 802132c:	697b      	ldr	r3, [r7, #20]
 802132e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8021330:	68fb      	ldr	r3, [r7, #12]
 8021332:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8021336:	2b06      	cmp	r3, #6
 8021338:	d006      	beq.n	8021348 <etharp_raw+0x84>
 802133a:	4b23      	ldr	r3, [pc, #140]	; (80213c8 <etharp_raw+0x104>)
 802133c:	f240 4269 	movw	r2, #1129	; 0x469
 8021340:	4925      	ldr	r1, [pc, #148]	; (80213d8 <etharp_raw+0x114>)
 8021342:	4823      	ldr	r0, [pc, #140]	; (80213d0 <etharp_raw+0x10c>)
 8021344:	f002 fa84 	bl	8023850 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8021348:	697b      	ldr	r3, [r7, #20]
 802134a:	3308      	adds	r3, #8
 802134c:	2206      	movs	r2, #6
 802134e:	6839      	ldr	r1, [r7, #0]
 8021350:	4618      	mov	r0, r3
 8021352:	f002 fb70 	bl	8023a36 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8021356:	697b      	ldr	r3, [r7, #20]
 8021358:	3312      	adds	r3, #18
 802135a:	2206      	movs	r2, #6
 802135c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802135e:	4618      	mov	r0, r3
 8021360:	f002 fb69 	bl	8023a36 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8021364:	697b      	ldr	r3, [r7, #20]
 8021366:	330e      	adds	r3, #14
 8021368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802136a:	6812      	ldr	r2, [r2, #0]
 802136c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 802136e:	697b      	ldr	r3, [r7, #20]
 8021370:	3318      	adds	r3, #24
 8021372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021374:	6812      	ldr	r2, [r2, #0]
 8021376:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021378:	697b      	ldr	r3, [r7, #20]
 802137a:	2200      	movs	r2, #0
 802137c:	701a      	strb	r2, [r3, #0]
 802137e:	2200      	movs	r2, #0
 8021380:	f042 0201 	orr.w	r2, r2, #1
 8021384:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8021386:	697b      	ldr	r3, [r7, #20]
 8021388:	2200      	movs	r2, #0
 802138a:	f042 0208 	orr.w	r2, r2, #8
 802138e:	709a      	strb	r2, [r3, #2]
 8021390:	2200      	movs	r2, #0
 8021392:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8021394:	697b      	ldr	r3, [r7, #20]
 8021396:	2206      	movs	r2, #6
 8021398:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 802139a:	697b      	ldr	r3, [r7, #20]
 802139c:	2204      	movs	r2, #4
 802139e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80213a0:	f640 0306 	movw	r3, #2054	; 0x806
 80213a4:	9300      	str	r3, [sp, #0]
 80213a6:	687b      	ldr	r3, [r7, #4]
 80213a8:	68ba      	ldr	r2, [r7, #8]
 80213aa:	69b9      	ldr	r1, [r7, #24]
 80213ac:	68f8      	ldr	r0, [r7, #12]
 80213ae:	f001 fb7b 	bl	8022aa8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80213b2:	69b8      	ldr	r0, [r7, #24]
 80213b4:	f7f8 f97e 	bl	80196b4 <pbuf_free>
  p = NULL;
 80213b8:	2300      	movs	r3, #0
 80213ba:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80213bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80213c0:	4618      	mov	r0, r3
 80213c2:	3720      	adds	r7, #32
 80213c4:	46bd      	mov	sp, r7
 80213c6:	bd80      	pop	{r7, pc}
 80213c8:	08027a5c 	.word	0x08027a5c
 80213cc:	08027bac 	.word	0x08027bac
 80213d0:	08027ad4 	.word	0x08027ad4
 80213d4:	08027c5c 	.word	0x08027c5c
 80213d8:	08027c90 	.word	0x08027c90

080213dc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80213dc:	b580      	push	{r7, lr}
 80213de:	b088      	sub	sp, #32
 80213e0:	af04      	add	r7, sp, #16
 80213e2:	60f8      	str	r0, [r7, #12]
 80213e4:	60b9      	str	r1, [r7, #8]
 80213e6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80213e8:	68fb      	ldr	r3, [r7, #12]
 80213ea:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80213ee:	68fb      	ldr	r3, [r7, #12]
 80213f0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80213f4:	68fb      	ldr	r3, [r7, #12]
 80213f6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80213f8:	2201      	movs	r2, #1
 80213fa:	9203      	str	r2, [sp, #12]
 80213fc:	68ba      	ldr	r2, [r7, #8]
 80213fe:	9202      	str	r2, [sp, #8]
 8021400:	4a06      	ldr	r2, [pc, #24]	; (802141c <etharp_request_dst+0x40>)
 8021402:	9201      	str	r2, [sp, #4]
 8021404:	9300      	str	r3, [sp, #0]
 8021406:	4603      	mov	r3, r0
 8021408:	687a      	ldr	r2, [r7, #4]
 802140a:	68f8      	ldr	r0, [r7, #12]
 802140c:	f7ff ff5a 	bl	80212c4 <etharp_raw>
 8021410:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8021412:	4618      	mov	r0, r3
 8021414:	3710      	adds	r7, #16
 8021416:	46bd      	mov	sp, r7
 8021418:	bd80      	pop	{r7, pc}
 802141a:	bf00      	nop
 802141c:	08028278 	.word	0x08028278

08021420 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8021420:	b580      	push	{r7, lr}
 8021422:	b082      	sub	sp, #8
 8021424:	af00      	add	r7, sp, #0
 8021426:	6078      	str	r0, [r7, #4]
 8021428:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 802142a:	4a05      	ldr	r2, [pc, #20]	; (8021440 <etharp_request+0x20>)
 802142c:	6839      	ldr	r1, [r7, #0]
 802142e:	6878      	ldr	r0, [r7, #4]
 8021430:	f7ff ffd4 	bl	80213dc <etharp_request_dst>
 8021434:	4603      	mov	r3, r0
}
 8021436:	4618      	mov	r0, r3
 8021438:	3708      	adds	r7, #8
 802143a:	46bd      	mov	sp, r7
 802143c:	bd80      	pop	{r7, pc}
 802143e:	bf00      	nop
 8021440:	08028270 	.word	0x08028270

08021444 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8021444:	b580      	push	{r7, lr}
 8021446:	b08e      	sub	sp, #56	; 0x38
 8021448:	af04      	add	r7, sp, #16
 802144a:	6078      	str	r0, [r7, #4]
 802144c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 802144e:	4b79      	ldr	r3, [pc, #484]	; (8021634 <icmp_input+0x1f0>)
 8021450:	689b      	ldr	r3, [r3, #8]
 8021452:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8021454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021456:	781b      	ldrb	r3, [r3, #0]
 8021458:	f003 030f 	and.w	r3, r3, #15
 802145c:	b2db      	uxtb	r3, r3
 802145e:	009b      	lsls	r3, r3, #2
 8021460:	b2db      	uxtb	r3, r3
 8021462:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8021464:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021466:	2b13      	cmp	r3, #19
 8021468:	f240 80cd 	bls.w	8021606 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 802146c:	687b      	ldr	r3, [r7, #4]
 802146e:	895b      	ldrh	r3, [r3, #10]
 8021470:	2b03      	cmp	r3, #3
 8021472:	f240 80ca 	bls.w	802160a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8021476:	687b      	ldr	r3, [r7, #4]
 8021478:	685b      	ldr	r3, [r3, #4]
 802147a:	781b      	ldrb	r3, [r3, #0]
 802147c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8021480:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8021484:	2b00      	cmp	r3, #0
 8021486:	f000 80b7 	beq.w	80215f8 <icmp_input+0x1b4>
 802148a:	2b08      	cmp	r3, #8
 802148c:	f040 80b7 	bne.w	80215fe <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8021490:	4b69      	ldr	r3, [pc, #420]	; (8021638 <icmp_input+0x1f4>)
 8021492:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021494:	4b67      	ldr	r3, [pc, #412]	; (8021634 <icmp_input+0x1f0>)
 8021496:	695b      	ldr	r3, [r3, #20]
 8021498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802149c:	2be0      	cmp	r3, #224	; 0xe0
 802149e:	f000 80bb 	beq.w	8021618 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80214a2:	4b64      	ldr	r3, [pc, #400]	; (8021634 <icmp_input+0x1f0>)
 80214a4:	695b      	ldr	r3, [r3, #20]
 80214a6:	4a63      	ldr	r2, [pc, #396]	; (8021634 <icmp_input+0x1f0>)
 80214a8:	6812      	ldr	r2, [r2, #0]
 80214aa:	4611      	mov	r1, r2
 80214ac:	4618      	mov	r0, r3
 80214ae:	f000 fbed 	bl	8021c8c <ip4_addr_isbroadcast_u32>
 80214b2:	4603      	mov	r3, r0
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	f040 80b1 	bne.w	802161c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80214ba:	687b      	ldr	r3, [r7, #4]
 80214bc:	891b      	ldrh	r3, [r3, #8]
 80214be:	2b07      	cmp	r3, #7
 80214c0:	f240 80a5 	bls.w	802160e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80214c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80214c6:	330e      	adds	r3, #14
 80214c8:	4619      	mov	r1, r3
 80214ca:	6878      	ldr	r0, [r7, #4]
 80214cc:	f7f8 f85c 	bl	8019588 <pbuf_add_header>
 80214d0:	4603      	mov	r3, r0
 80214d2:	2b00      	cmp	r3, #0
 80214d4:	d04b      	beq.n	802156e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80214d6:	687b      	ldr	r3, [r7, #4]
 80214d8:	891a      	ldrh	r2, [r3, #8]
 80214da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80214dc:	4413      	add	r3, r2
 80214de:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	891b      	ldrh	r3, [r3, #8]
 80214e4:	8b7a      	ldrh	r2, [r7, #26]
 80214e6:	429a      	cmp	r2, r3
 80214e8:	f0c0 809a 	bcc.w	8021620 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80214ec:	8b7b      	ldrh	r3, [r7, #26]
 80214ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80214f2:	4619      	mov	r1, r3
 80214f4:	200e      	movs	r0, #14
 80214f6:	f7f7 fdf9 	bl	80190ec <pbuf_alloc>
 80214fa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80214fc:	697b      	ldr	r3, [r7, #20]
 80214fe:	2b00      	cmp	r3, #0
 8021500:	f000 8090 	beq.w	8021624 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8021504:	697b      	ldr	r3, [r7, #20]
 8021506:	895b      	ldrh	r3, [r3, #10]
 8021508:	461a      	mov	r2, r3
 802150a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802150c:	3308      	adds	r3, #8
 802150e:	429a      	cmp	r2, r3
 8021510:	d203      	bcs.n	802151a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8021512:	6978      	ldr	r0, [r7, #20]
 8021514:	f7f8 f8ce 	bl	80196b4 <pbuf_free>
          goto icmperr;
 8021518:	e085      	b.n	8021626 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 802151a:	697b      	ldr	r3, [r7, #20]
 802151c:	685b      	ldr	r3, [r3, #4]
 802151e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8021522:	4618      	mov	r0, r3
 8021524:	f002 fa87 	bl	8023a36 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8021528:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802152a:	4619      	mov	r1, r3
 802152c:	6978      	ldr	r0, [r7, #20]
 802152e:	f7f8 f83b 	bl	80195a8 <pbuf_remove_header>
 8021532:	4603      	mov	r3, r0
 8021534:	2b00      	cmp	r3, #0
 8021536:	d009      	beq.n	802154c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8021538:	4b40      	ldr	r3, [pc, #256]	; (802163c <icmp_input+0x1f8>)
 802153a:	22b6      	movs	r2, #182	; 0xb6
 802153c:	4940      	ldr	r1, [pc, #256]	; (8021640 <icmp_input+0x1fc>)
 802153e:	4841      	ldr	r0, [pc, #260]	; (8021644 <icmp_input+0x200>)
 8021540:	f002 f986 	bl	8023850 <iprintf>
          pbuf_free(r);
 8021544:	6978      	ldr	r0, [r7, #20]
 8021546:	f7f8 f8b5 	bl	80196b4 <pbuf_free>
          goto icmperr;
 802154a:	e06c      	b.n	8021626 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 802154c:	6879      	ldr	r1, [r7, #4]
 802154e:	6978      	ldr	r0, [r7, #20]
 8021550:	f7f8 f9d4 	bl	80198fc <pbuf_copy>
 8021554:	4603      	mov	r3, r0
 8021556:	2b00      	cmp	r3, #0
 8021558:	d003      	beq.n	8021562 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 802155a:	6978      	ldr	r0, [r7, #20]
 802155c:	f7f8 f8aa 	bl	80196b4 <pbuf_free>
          goto icmperr;
 8021560:	e061      	b.n	8021626 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8021562:	6878      	ldr	r0, [r7, #4]
 8021564:	f7f8 f8a6 	bl	80196b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8021568:	697b      	ldr	r3, [r7, #20]
 802156a:	607b      	str	r3, [r7, #4]
 802156c:	e00f      	b.n	802158e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802156e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021570:	330e      	adds	r3, #14
 8021572:	4619      	mov	r1, r3
 8021574:	6878      	ldr	r0, [r7, #4]
 8021576:	f7f8 f817 	bl	80195a8 <pbuf_remove_header>
 802157a:	4603      	mov	r3, r0
 802157c:	2b00      	cmp	r3, #0
 802157e:	d006      	beq.n	802158e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8021580:	4b2e      	ldr	r3, [pc, #184]	; (802163c <icmp_input+0x1f8>)
 8021582:	22c7      	movs	r2, #199	; 0xc7
 8021584:	4930      	ldr	r1, [pc, #192]	; (8021648 <icmp_input+0x204>)
 8021586:	482f      	ldr	r0, [pc, #188]	; (8021644 <icmp_input+0x200>)
 8021588:	f002 f962 	bl	8023850 <iprintf>
          goto icmperr;
 802158c:	e04b      	b.n	8021626 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	685b      	ldr	r3, [r3, #4]
 8021592:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8021594:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021596:	4619      	mov	r1, r3
 8021598:	6878      	ldr	r0, [r7, #4]
 802159a:	f7f7 fff5 	bl	8019588 <pbuf_add_header>
 802159e:	4603      	mov	r3, r0
 80215a0:	2b00      	cmp	r3, #0
 80215a2:	d12b      	bne.n	80215fc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80215a4:	687b      	ldr	r3, [r7, #4]
 80215a6:	685b      	ldr	r3, [r3, #4]
 80215a8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80215aa:	69fb      	ldr	r3, [r7, #28]
 80215ac:	681a      	ldr	r2, [r3, #0]
 80215ae:	68fb      	ldr	r3, [r7, #12]
 80215b0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80215b2:	4b20      	ldr	r3, [pc, #128]	; (8021634 <icmp_input+0x1f0>)
 80215b4:	691a      	ldr	r2, [r3, #16]
 80215b6:	68fb      	ldr	r3, [r7, #12]
 80215b8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80215ba:	693b      	ldr	r3, [r7, #16]
 80215bc:	2200      	movs	r2, #0
 80215be:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80215c0:	693b      	ldr	r3, [r7, #16]
 80215c2:	2200      	movs	r2, #0
 80215c4:	709a      	strb	r2, [r3, #2]
 80215c6:	2200      	movs	r2, #0
 80215c8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80215ca:	68fb      	ldr	r3, [r7, #12]
 80215cc:	22ff      	movs	r2, #255	; 0xff
 80215ce:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80215d0:	68fb      	ldr	r3, [r7, #12]
 80215d2:	2200      	movs	r2, #0
 80215d4:	729a      	strb	r2, [r3, #10]
 80215d6:	2200      	movs	r2, #0
 80215d8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80215da:	683b      	ldr	r3, [r7, #0]
 80215dc:	9302      	str	r3, [sp, #8]
 80215de:	2301      	movs	r3, #1
 80215e0:	9301      	str	r3, [sp, #4]
 80215e2:	2300      	movs	r3, #0
 80215e4:	9300      	str	r3, [sp, #0]
 80215e6:	23ff      	movs	r3, #255	; 0xff
 80215e8:	2200      	movs	r2, #0
 80215ea:	69f9      	ldr	r1, [r7, #28]
 80215ec:	6878      	ldr	r0, [r7, #4]
 80215ee:	f000 fa75 	bl	8021adc <ip4_output_if>
 80215f2:	4603      	mov	r3, r0
 80215f4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80215f6:	e001      	b.n	80215fc <icmp_input+0x1b8>
      break;
 80215f8:	bf00      	nop
 80215fa:	e000      	b.n	80215fe <icmp_input+0x1ba>
      break;
 80215fc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80215fe:	6878      	ldr	r0, [r7, #4]
 8021600:	f7f8 f858 	bl	80196b4 <pbuf_free>
  return;
 8021604:	e013      	b.n	802162e <icmp_input+0x1ea>
    goto lenerr;
 8021606:	bf00      	nop
 8021608:	e002      	b.n	8021610 <icmp_input+0x1cc>
    goto lenerr;
 802160a:	bf00      	nop
 802160c:	e000      	b.n	8021610 <icmp_input+0x1cc>
        goto lenerr;
 802160e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8021610:	6878      	ldr	r0, [r7, #4]
 8021612:	f7f8 f84f 	bl	80196b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8021616:	e00a      	b.n	802162e <icmp_input+0x1ea>
        goto icmperr;
 8021618:	bf00      	nop
 802161a:	e004      	b.n	8021626 <icmp_input+0x1e2>
        goto icmperr;
 802161c:	bf00      	nop
 802161e:	e002      	b.n	8021626 <icmp_input+0x1e2>
          goto icmperr;
 8021620:	bf00      	nop
 8021622:	e000      	b.n	8021626 <icmp_input+0x1e2>
          goto icmperr;
 8021624:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8021626:	6878      	ldr	r0, [r7, #4]
 8021628:	f7f8 f844 	bl	80196b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802162c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 802162e:	3728      	adds	r7, #40	; 0x28
 8021630:	46bd      	mov	sp, r7
 8021632:	bd80      	pop	{r7, pc}
 8021634:	2000dbc4 	.word	0x2000dbc4
 8021638:	2000dbd8 	.word	0x2000dbd8
 802163c:	08027cd4 	.word	0x08027cd4
 8021640:	08027d0c 	.word	0x08027d0c
 8021644:	08027d44 	.word	0x08027d44
 8021648:	08027d6c 	.word	0x08027d6c

0802164c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 802164c:	b580      	push	{r7, lr}
 802164e:	b082      	sub	sp, #8
 8021650:	af00      	add	r7, sp, #0
 8021652:	6078      	str	r0, [r7, #4]
 8021654:	460b      	mov	r3, r1
 8021656:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8021658:	78fb      	ldrb	r3, [r7, #3]
 802165a:	461a      	mov	r2, r3
 802165c:	2103      	movs	r1, #3
 802165e:	6878      	ldr	r0, [r7, #4]
 8021660:	f000 f814 	bl	802168c <icmp_send_response>
}
 8021664:	bf00      	nop
 8021666:	3708      	adds	r7, #8
 8021668:	46bd      	mov	sp, r7
 802166a:	bd80      	pop	{r7, pc}

0802166c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 802166c:	b580      	push	{r7, lr}
 802166e:	b082      	sub	sp, #8
 8021670:	af00      	add	r7, sp, #0
 8021672:	6078      	str	r0, [r7, #4]
 8021674:	460b      	mov	r3, r1
 8021676:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8021678:	78fb      	ldrb	r3, [r7, #3]
 802167a:	461a      	mov	r2, r3
 802167c:	210b      	movs	r1, #11
 802167e:	6878      	ldr	r0, [r7, #4]
 8021680:	f000 f804 	bl	802168c <icmp_send_response>
}
 8021684:	bf00      	nop
 8021686:	3708      	adds	r7, #8
 8021688:	46bd      	mov	sp, r7
 802168a:	bd80      	pop	{r7, pc}

0802168c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 802168c:	b580      	push	{r7, lr}
 802168e:	b08c      	sub	sp, #48	; 0x30
 8021690:	af04      	add	r7, sp, #16
 8021692:	6078      	str	r0, [r7, #4]
 8021694:	460b      	mov	r3, r1
 8021696:	70fb      	strb	r3, [r7, #3]
 8021698:	4613      	mov	r3, r2
 802169a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 802169c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80216a0:	2124      	movs	r1, #36	; 0x24
 80216a2:	2022      	movs	r0, #34	; 0x22
 80216a4:	f7f7 fd22 	bl	80190ec <pbuf_alloc>
 80216a8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80216aa:	69fb      	ldr	r3, [r7, #28]
 80216ac:	2b00      	cmp	r3, #0
 80216ae:	d04c      	beq.n	802174a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80216b0:	69fb      	ldr	r3, [r7, #28]
 80216b2:	895b      	ldrh	r3, [r3, #10]
 80216b4:	2b23      	cmp	r3, #35	; 0x23
 80216b6:	d806      	bhi.n	80216c6 <icmp_send_response+0x3a>
 80216b8:	4b26      	ldr	r3, [pc, #152]	; (8021754 <icmp_send_response+0xc8>)
 80216ba:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80216be:	4926      	ldr	r1, [pc, #152]	; (8021758 <icmp_send_response+0xcc>)
 80216c0:	4826      	ldr	r0, [pc, #152]	; (802175c <icmp_send_response+0xd0>)
 80216c2:	f002 f8c5 	bl	8023850 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80216c6:	687b      	ldr	r3, [r7, #4]
 80216c8:	685b      	ldr	r3, [r3, #4]
 80216ca:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80216cc:	69fb      	ldr	r3, [r7, #28]
 80216ce:	685b      	ldr	r3, [r3, #4]
 80216d0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80216d2:	697b      	ldr	r3, [r7, #20]
 80216d4:	78fa      	ldrb	r2, [r7, #3]
 80216d6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80216d8:	697b      	ldr	r3, [r7, #20]
 80216da:	78ba      	ldrb	r2, [r7, #2]
 80216dc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80216de:	697b      	ldr	r3, [r7, #20]
 80216e0:	2200      	movs	r2, #0
 80216e2:	711a      	strb	r2, [r3, #4]
 80216e4:	2200      	movs	r2, #0
 80216e6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80216e8:	697b      	ldr	r3, [r7, #20]
 80216ea:	2200      	movs	r2, #0
 80216ec:	719a      	strb	r2, [r3, #6]
 80216ee:	2200      	movs	r2, #0
 80216f0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80216f2:	69fb      	ldr	r3, [r7, #28]
 80216f4:	685b      	ldr	r3, [r3, #4]
 80216f6:	f103 0008 	add.w	r0, r3, #8
 80216fa:	687b      	ldr	r3, [r7, #4]
 80216fc:	685b      	ldr	r3, [r3, #4]
 80216fe:	221c      	movs	r2, #28
 8021700:	4619      	mov	r1, r3
 8021702:	f002 f998 	bl	8023a36 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8021706:	69bb      	ldr	r3, [r7, #24]
 8021708:	68db      	ldr	r3, [r3, #12]
 802170a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 802170c:	f107 030c 	add.w	r3, r7, #12
 8021710:	4618      	mov	r0, r3
 8021712:	f000 f825 	bl	8021760 <ip4_route>
 8021716:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8021718:	693b      	ldr	r3, [r7, #16]
 802171a:	2b00      	cmp	r3, #0
 802171c:	d011      	beq.n	8021742 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 802171e:	697b      	ldr	r3, [r7, #20]
 8021720:	2200      	movs	r2, #0
 8021722:	709a      	strb	r2, [r3, #2]
 8021724:	2200      	movs	r2, #0
 8021726:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8021728:	f107 020c 	add.w	r2, r7, #12
 802172c:	693b      	ldr	r3, [r7, #16]
 802172e:	9302      	str	r3, [sp, #8]
 8021730:	2301      	movs	r3, #1
 8021732:	9301      	str	r3, [sp, #4]
 8021734:	2300      	movs	r3, #0
 8021736:	9300      	str	r3, [sp, #0]
 8021738:	23ff      	movs	r3, #255	; 0xff
 802173a:	2100      	movs	r1, #0
 802173c:	69f8      	ldr	r0, [r7, #28]
 802173e:	f000 f9cd 	bl	8021adc <ip4_output_if>
  }
  pbuf_free(q);
 8021742:	69f8      	ldr	r0, [r7, #28]
 8021744:	f7f7 ffb6 	bl	80196b4 <pbuf_free>
 8021748:	e000      	b.n	802174c <icmp_send_response+0xc0>
    return;
 802174a:	bf00      	nop
}
 802174c:	3720      	adds	r7, #32
 802174e:	46bd      	mov	sp, r7
 8021750:	bd80      	pop	{r7, pc}
 8021752:	bf00      	nop
 8021754:	08027cd4 	.word	0x08027cd4
 8021758:	08027da0 	.word	0x08027da0
 802175c:	08027d44 	.word	0x08027d44

08021760 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8021760:	b480      	push	{r7}
 8021762:	b085      	sub	sp, #20
 8021764:	af00      	add	r7, sp, #0
 8021766:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8021768:	4b33      	ldr	r3, [pc, #204]	; (8021838 <ip4_route+0xd8>)
 802176a:	681b      	ldr	r3, [r3, #0]
 802176c:	60fb      	str	r3, [r7, #12]
 802176e:	e036      	b.n	80217de <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021770:	68fb      	ldr	r3, [r7, #12]
 8021772:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021776:	f003 0301 	and.w	r3, r3, #1
 802177a:	b2db      	uxtb	r3, r3
 802177c:	2b00      	cmp	r3, #0
 802177e:	d02b      	beq.n	80217d8 <ip4_route+0x78>
 8021780:	68fb      	ldr	r3, [r7, #12]
 8021782:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021786:	089b      	lsrs	r3, r3, #2
 8021788:	f003 0301 	and.w	r3, r3, #1
 802178c:	b2db      	uxtb	r3, r3
 802178e:	2b00      	cmp	r3, #0
 8021790:	d022      	beq.n	80217d8 <ip4_route+0x78>
 8021792:	68fb      	ldr	r3, [r7, #12]
 8021794:	3304      	adds	r3, #4
 8021796:	681b      	ldr	r3, [r3, #0]
 8021798:	2b00      	cmp	r3, #0
 802179a:	d01d      	beq.n	80217d8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 802179c:	687b      	ldr	r3, [r7, #4]
 802179e:	681a      	ldr	r2, [r3, #0]
 80217a0:	68fb      	ldr	r3, [r7, #12]
 80217a2:	3304      	adds	r3, #4
 80217a4:	681b      	ldr	r3, [r3, #0]
 80217a6:	405a      	eors	r2, r3
 80217a8:	68fb      	ldr	r3, [r7, #12]
 80217aa:	3308      	adds	r3, #8
 80217ac:	681b      	ldr	r3, [r3, #0]
 80217ae:	4013      	ands	r3, r2
 80217b0:	2b00      	cmp	r3, #0
 80217b2:	d101      	bne.n	80217b8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80217b4:	68fb      	ldr	r3, [r7, #12]
 80217b6:	e038      	b.n	802182a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80217b8:	68fb      	ldr	r3, [r7, #12]
 80217ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80217be:	f003 0302 	and.w	r3, r3, #2
 80217c2:	2b00      	cmp	r3, #0
 80217c4:	d108      	bne.n	80217d8 <ip4_route+0x78>
 80217c6:	687b      	ldr	r3, [r7, #4]
 80217c8:	681a      	ldr	r2, [r3, #0]
 80217ca:	68fb      	ldr	r3, [r7, #12]
 80217cc:	330c      	adds	r3, #12
 80217ce:	681b      	ldr	r3, [r3, #0]
 80217d0:	429a      	cmp	r2, r3
 80217d2:	d101      	bne.n	80217d8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80217d4:	68fb      	ldr	r3, [r7, #12]
 80217d6:	e028      	b.n	802182a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80217d8:	68fb      	ldr	r3, [r7, #12]
 80217da:	681b      	ldr	r3, [r3, #0]
 80217dc:	60fb      	str	r3, [r7, #12]
 80217de:	68fb      	ldr	r3, [r7, #12]
 80217e0:	2b00      	cmp	r3, #0
 80217e2:	d1c5      	bne.n	8021770 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80217e4:	4b15      	ldr	r3, [pc, #84]	; (802183c <ip4_route+0xdc>)
 80217e6:	681b      	ldr	r3, [r3, #0]
 80217e8:	2b00      	cmp	r3, #0
 80217ea:	d01a      	beq.n	8021822 <ip4_route+0xc2>
 80217ec:	4b13      	ldr	r3, [pc, #76]	; (802183c <ip4_route+0xdc>)
 80217ee:	681b      	ldr	r3, [r3, #0]
 80217f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80217f4:	f003 0301 	and.w	r3, r3, #1
 80217f8:	2b00      	cmp	r3, #0
 80217fa:	d012      	beq.n	8021822 <ip4_route+0xc2>
 80217fc:	4b0f      	ldr	r3, [pc, #60]	; (802183c <ip4_route+0xdc>)
 80217fe:	681b      	ldr	r3, [r3, #0]
 8021800:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021804:	f003 0304 	and.w	r3, r3, #4
 8021808:	2b00      	cmp	r3, #0
 802180a:	d00a      	beq.n	8021822 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 802180c:	4b0b      	ldr	r3, [pc, #44]	; (802183c <ip4_route+0xdc>)
 802180e:	681b      	ldr	r3, [r3, #0]
 8021810:	3304      	adds	r3, #4
 8021812:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8021814:	2b00      	cmp	r3, #0
 8021816:	d004      	beq.n	8021822 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8021818:	687b      	ldr	r3, [r7, #4]
 802181a:	681b      	ldr	r3, [r3, #0]
 802181c:	b2db      	uxtb	r3, r3
 802181e:	2b7f      	cmp	r3, #127	; 0x7f
 8021820:	d101      	bne.n	8021826 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8021822:	2300      	movs	r3, #0
 8021824:	e001      	b.n	802182a <ip4_route+0xca>
  }

  return netif_default;
 8021826:	4b05      	ldr	r3, [pc, #20]	; (802183c <ip4_route+0xdc>)
 8021828:	681b      	ldr	r3, [r3, #0]
}
 802182a:	4618      	mov	r0, r3
 802182c:	3714      	adds	r7, #20
 802182e:	46bd      	mov	sp, r7
 8021830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021834:	4770      	bx	lr
 8021836:	bf00      	nop
 8021838:	2001130c 	.word	0x2001130c
 802183c:	20011310 	.word	0x20011310

08021840 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8021840:	b580      	push	{r7, lr}
 8021842:	b082      	sub	sp, #8
 8021844:	af00      	add	r7, sp, #0
 8021846:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8021848:	687b      	ldr	r3, [r7, #4]
 802184a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802184e:	f003 0301 	and.w	r3, r3, #1
 8021852:	b2db      	uxtb	r3, r3
 8021854:	2b00      	cmp	r3, #0
 8021856:	d016      	beq.n	8021886 <ip4_input_accept+0x46>
 8021858:	687b      	ldr	r3, [r7, #4]
 802185a:	3304      	adds	r3, #4
 802185c:	681b      	ldr	r3, [r3, #0]
 802185e:	2b00      	cmp	r3, #0
 8021860:	d011      	beq.n	8021886 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021862:	4b0b      	ldr	r3, [pc, #44]	; (8021890 <ip4_input_accept+0x50>)
 8021864:	695a      	ldr	r2, [r3, #20]
 8021866:	687b      	ldr	r3, [r7, #4]
 8021868:	3304      	adds	r3, #4
 802186a:	681b      	ldr	r3, [r3, #0]
 802186c:	429a      	cmp	r2, r3
 802186e:	d008      	beq.n	8021882 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021870:	4b07      	ldr	r3, [pc, #28]	; (8021890 <ip4_input_accept+0x50>)
 8021872:	695b      	ldr	r3, [r3, #20]
 8021874:	6879      	ldr	r1, [r7, #4]
 8021876:	4618      	mov	r0, r3
 8021878:	f000 fa08 	bl	8021c8c <ip4_addr_isbroadcast_u32>
 802187c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802187e:	2b00      	cmp	r3, #0
 8021880:	d001      	beq.n	8021886 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8021882:	2301      	movs	r3, #1
 8021884:	e000      	b.n	8021888 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8021886:	2300      	movs	r3, #0
}
 8021888:	4618      	mov	r0, r3
 802188a:	3708      	adds	r7, #8
 802188c:	46bd      	mov	sp, r7
 802188e:	bd80      	pop	{r7, pc}
 8021890:	2000dbc4 	.word	0x2000dbc4

08021894 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8021894:	b580      	push	{r7, lr}
 8021896:	b086      	sub	sp, #24
 8021898:	af00      	add	r7, sp, #0
 802189a:	6078      	str	r0, [r7, #4]
 802189c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 802189e:	687b      	ldr	r3, [r7, #4]
 80218a0:	685b      	ldr	r3, [r3, #4]
 80218a2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80218a4:	697b      	ldr	r3, [r7, #20]
 80218a6:	781b      	ldrb	r3, [r3, #0]
 80218a8:	091b      	lsrs	r3, r3, #4
 80218aa:	b2db      	uxtb	r3, r3
 80218ac:	2b04      	cmp	r3, #4
 80218ae:	d004      	beq.n	80218ba <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80218b0:	6878      	ldr	r0, [r7, #4]
 80218b2:	f7f7 feff 	bl	80196b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80218b6:	2300      	movs	r3, #0
 80218b8:	e107      	b.n	8021aca <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80218ba:	697b      	ldr	r3, [r7, #20]
 80218bc:	781b      	ldrb	r3, [r3, #0]
 80218be:	f003 030f 	and.w	r3, r3, #15
 80218c2:	b2db      	uxtb	r3, r3
 80218c4:	009b      	lsls	r3, r3, #2
 80218c6:	b2db      	uxtb	r3, r3
 80218c8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80218ca:	697b      	ldr	r3, [r7, #20]
 80218cc:	885b      	ldrh	r3, [r3, #2]
 80218ce:	b29b      	uxth	r3, r3
 80218d0:	4618      	mov	r0, r3
 80218d2:	f7f6 fafd 	bl	8017ed0 <lwip_htons>
 80218d6:	4603      	mov	r3, r0
 80218d8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80218da:	687b      	ldr	r3, [r7, #4]
 80218dc:	891b      	ldrh	r3, [r3, #8]
 80218de:	89ba      	ldrh	r2, [r7, #12]
 80218e0:	429a      	cmp	r2, r3
 80218e2:	d204      	bcs.n	80218ee <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80218e4:	89bb      	ldrh	r3, [r7, #12]
 80218e6:	4619      	mov	r1, r3
 80218e8:	6878      	ldr	r0, [r7, #4]
 80218ea:	f7f7 fd5d 	bl	80193a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80218ee:	687b      	ldr	r3, [r7, #4]
 80218f0:	895b      	ldrh	r3, [r3, #10]
 80218f2:	89fa      	ldrh	r2, [r7, #14]
 80218f4:	429a      	cmp	r2, r3
 80218f6:	d807      	bhi.n	8021908 <ip4_input+0x74>
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	891b      	ldrh	r3, [r3, #8]
 80218fc:	89ba      	ldrh	r2, [r7, #12]
 80218fe:	429a      	cmp	r2, r3
 8021900:	d802      	bhi.n	8021908 <ip4_input+0x74>
 8021902:	89fb      	ldrh	r3, [r7, #14]
 8021904:	2b13      	cmp	r3, #19
 8021906:	d804      	bhi.n	8021912 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8021908:	6878      	ldr	r0, [r7, #4]
 802190a:	f7f7 fed3 	bl	80196b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 802190e:	2300      	movs	r3, #0
 8021910:	e0db      	b.n	8021aca <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8021912:	697b      	ldr	r3, [r7, #20]
 8021914:	691b      	ldr	r3, [r3, #16]
 8021916:	4a6f      	ldr	r2, [pc, #444]	; (8021ad4 <ip4_input+0x240>)
 8021918:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 802191a:	697b      	ldr	r3, [r7, #20]
 802191c:	68db      	ldr	r3, [r3, #12]
 802191e:	4a6d      	ldr	r2, [pc, #436]	; (8021ad4 <ip4_input+0x240>)
 8021920:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021922:	4b6c      	ldr	r3, [pc, #432]	; (8021ad4 <ip4_input+0x240>)
 8021924:	695b      	ldr	r3, [r3, #20]
 8021926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802192a:	2be0      	cmp	r3, #224	; 0xe0
 802192c:	d112      	bne.n	8021954 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 802192e:	683b      	ldr	r3, [r7, #0]
 8021930:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021934:	f003 0301 	and.w	r3, r3, #1
 8021938:	b2db      	uxtb	r3, r3
 802193a:	2b00      	cmp	r3, #0
 802193c:	d007      	beq.n	802194e <ip4_input+0xba>
 802193e:	683b      	ldr	r3, [r7, #0]
 8021940:	3304      	adds	r3, #4
 8021942:	681b      	ldr	r3, [r3, #0]
 8021944:	2b00      	cmp	r3, #0
 8021946:	d002      	beq.n	802194e <ip4_input+0xba>
      netif = inp;
 8021948:	683b      	ldr	r3, [r7, #0]
 802194a:	613b      	str	r3, [r7, #16]
 802194c:	e02a      	b.n	80219a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 802194e:	2300      	movs	r3, #0
 8021950:	613b      	str	r3, [r7, #16]
 8021952:	e027      	b.n	80219a4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8021954:	6838      	ldr	r0, [r7, #0]
 8021956:	f7ff ff73 	bl	8021840 <ip4_input_accept>
 802195a:	4603      	mov	r3, r0
 802195c:	2b00      	cmp	r3, #0
 802195e:	d002      	beq.n	8021966 <ip4_input+0xd2>
      netif = inp;
 8021960:	683b      	ldr	r3, [r7, #0]
 8021962:	613b      	str	r3, [r7, #16]
 8021964:	e01e      	b.n	80219a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8021966:	2300      	movs	r3, #0
 8021968:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 802196a:	4b5a      	ldr	r3, [pc, #360]	; (8021ad4 <ip4_input+0x240>)
 802196c:	695b      	ldr	r3, [r3, #20]
 802196e:	b2db      	uxtb	r3, r3
 8021970:	2b7f      	cmp	r3, #127	; 0x7f
 8021972:	d017      	beq.n	80219a4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8021974:	4b58      	ldr	r3, [pc, #352]	; (8021ad8 <ip4_input+0x244>)
 8021976:	681b      	ldr	r3, [r3, #0]
 8021978:	613b      	str	r3, [r7, #16]
 802197a:	e00e      	b.n	802199a <ip4_input+0x106>
          if (netif == inp) {
 802197c:	693a      	ldr	r2, [r7, #16]
 802197e:	683b      	ldr	r3, [r7, #0]
 8021980:	429a      	cmp	r2, r3
 8021982:	d006      	beq.n	8021992 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8021984:	6938      	ldr	r0, [r7, #16]
 8021986:	f7ff ff5b 	bl	8021840 <ip4_input_accept>
 802198a:	4603      	mov	r3, r0
 802198c:	2b00      	cmp	r3, #0
 802198e:	d108      	bne.n	80219a2 <ip4_input+0x10e>
 8021990:	e000      	b.n	8021994 <ip4_input+0x100>
            continue;
 8021992:	bf00      	nop
        NETIF_FOREACH(netif) {
 8021994:	693b      	ldr	r3, [r7, #16]
 8021996:	681b      	ldr	r3, [r3, #0]
 8021998:	613b      	str	r3, [r7, #16]
 802199a:	693b      	ldr	r3, [r7, #16]
 802199c:	2b00      	cmp	r3, #0
 802199e:	d1ed      	bne.n	802197c <ip4_input+0xe8>
 80219a0:	e000      	b.n	80219a4 <ip4_input+0x110>
            break;
 80219a2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80219a4:	4b4b      	ldr	r3, [pc, #300]	; (8021ad4 <ip4_input+0x240>)
 80219a6:	691b      	ldr	r3, [r3, #16]
 80219a8:	6839      	ldr	r1, [r7, #0]
 80219aa:	4618      	mov	r0, r3
 80219ac:	f000 f96e 	bl	8021c8c <ip4_addr_isbroadcast_u32>
 80219b0:	4603      	mov	r3, r0
 80219b2:	2b00      	cmp	r3, #0
 80219b4:	d105      	bne.n	80219c2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80219b6:	4b47      	ldr	r3, [pc, #284]	; (8021ad4 <ip4_input+0x240>)
 80219b8:	691b      	ldr	r3, [r3, #16]
 80219ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80219be:	2be0      	cmp	r3, #224	; 0xe0
 80219c0:	d104      	bne.n	80219cc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80219c2:	6878      	ldr	r0, [r7, #4]
 80219c4:	f7f7 fe76 	bl	80196b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80219c8:	2300      	movs	r3, #0
 80219ca:	e07e      	b.n	8021aca <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80219cc:	693b      	ldr	r3, [r7, #16]
 80219ce:	2b00      	cmp	r3, #0
 80219d0:	d104      	bne.n	80219dc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80219d2:	6878      	ldr	r0, [r7, #4]
 80219d4:	f7f7 fe6e 	bl	80196b4 <pbuf_free>
    return ERR_OK;
 80219d8:	2300      	movs	r3, #0
 80219da:	e076      	b.n	8021aca <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80219dc:	697b      	ldr	r3, [r7, #20]
 80219de:	88db      	ldrh	r3, [r3, #6]
 80219e0:	b29b      	uxth	r3, r3
 80219e2:	461a      	mov	r2, r3
 80219e4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80219e8:	4013      	ands	r3, r2
 80219ea:	2b00      	cmp	r3, #0
 80219ec:	d00b      	beq.n	8021a06 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80219ee:	6878      	ldr	r0, [r7, #4]
 80219f0:	f000 fc92 	bl	8022318 <ip4_reass>
 80219f4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80219f6:	687b      	ldr	r3, [r7, #4]
 80219f8:	2b00      	cmp	r3, #0
 80219fa:	d101      	bne.n	8021a00 <ip4_input+0x16c>
      return ERR_OK;
 80219fc:	2300      	movs	r3, #0
 80219fe:	e064      	b.n	8021aca <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8021a00:	687b      	ldr	r3, [r7, #4]
 8021a02:	685b      	ldr	r3, [r3, #4]
 8021a04:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8021a06:	4a33      	ldr	r2, [pc, #204]	; (8021ad4 <ip4_input+0x240>)
 8021a08:	693b      	ldr	r3, [r7, #16]
 8021a0a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8021a0c:	4a31      	ldr	r2, [pc, #196]	; (8021ad4 <ip4_input+0x240>)
 8021a0e:	683b      	ldr	r3, [r7, #0]
 8021a10:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8021a12:	4a30      	ldr	r2, [pc, #192]	; (8021ad4 <ip4_input+0x240>)
 8021a14:	697b      	ldr	r3, [r7, #20]
 8021a16:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8021a18:	697b      	ldr	r3, [r7, #20]
 8021a1a:	781b      	ldrb	r3, [r3, #0]
 8021a1c:	f003 030f 	and.w	r3, r3, #15
 8021a20:	b2db      	uxtb	r3, r3
 8021a22:	009b      	lsls	r3, r3, #2
 8021a24:	b2db      	uxtb	r3, r3
 8021a26:	b29a      	uxth	r2, r3
 8021a28:	4b2a      	ldr	r3, [pc, #168]	; (8021ad4 <ip4_input+0x240>)
 8021a2a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8021a2c:	89fb      	ldrh	r3, [r7, #14]
 8021a2e:	4619      	mov	r1, r3
 8021a30:	6878      	ldr	r0, [r7, #4]
 8021a32:	f7f7 fdb9 	bl	80195a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8021a36:	697b      	ldr	r3, [r7, #20]
 8021a38:	7a5b      	ldrb	r3, [r3, #9]
 8021a3a:	2b11      	cmp	r3, #17
 8021a3c:	d006      	beq.n	8021a4c <ip4_input+0x1b8>
 8021a3e:	2b11      	cmp	r3, #17
 8021a40:	dc13      	bgt.n	8021a6a <ip4_input+0x1d6>
 8021a42:	2b01      	cmp	r3, #1
 8021a44:	d00c      	beq.n	8021a60 <ip4_input+0x1cc>
 8021a46:	2b06      	cmp	r3, #6
 8021a48:	d005      	beq.n	8021a56 <ip4_input+0x1c2>
 8021a4a:	e00e      	b.n	8021a6a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8021a4c:	6839      	ldr	r1, [r7, #0]
 8021a4e:	6878      	ldr	r0, [r7, #4]
 8021a50:	f7fe fb2e 	bl	80200b0 <udp_input>
        break;
 8021a54:	e026      	b.n	8021aa4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8021a56:	6839      	ldr	r1, [r7, #0]
 8021a58:	6878      	ldr	r0, [r7, #4]
 8021a5a:	f7f9 fee7 	bl	801b82c <tcp_input>
        break;
 8021a5e:	e021      	b.n	8021aa4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8021a60:	6839      	ldr	r1, [r7, #0]
 8021a62:	6878      	ldr	r0, [r7, #4]
 8021a64:	f7ff fcee 	bl	8021444 <icmp_input>
        break;
 8021a68:	e01c      	b.n	8021aa4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021a6a:	4b1a      	ldr	r3, [pc, #104]	; (8021ad4 <ip4_input+0x240>)
 8021a6c:	695b      	ldr	r3, [r3, #20]
 8021a6e:	6939      	ldr	r1, [r7, #16]
 8021a70:	4618      	mov	r0, r3
 8021a72:	f000 f90b 	bl	8021c8c <ip4_addr_isbroadcast_u32>
 8021a76:	4603      	mov	r3, r0
 8021a78:	2b00      	cmp	r3, #0
 8021a7a:	d10f      	bne.n	8021a9c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021a7c:	4b15      	ldr	r3, [pc, #84]	; (8021ad4 <ip4_input+0x240>)
 8021a7e:	695b      	ldr	r3, [r3, #20]
 8021a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021a84:	2be0      	cmp	r3, #224	; 0xe0
 8021a86:	d009      	beq.n	8021a9c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8021a88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8021a8c:	4619      	mov	r1, r3
 8021a8e:	6878      	ldr	r0, [r7, #4]
 8021a90:	f7f7 fdfd 	bl	801968e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8021a94:	2102      	movs	r1, #2
 8021a96:	6878      	ldr	r0, [r7, #4]
 8021a98:	f7ff fdd8 	bl	802164c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8021a9c:	6878      	ldr	r0, [r7, #4]
 8021a9e:	f7f7 fe09 	bl	80196b4 <pbuf_free>
        break;
 8021aa2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8021aa4:	4b0b      	ldr	r3, [pc, #44]	; (8021ad4 <ip4_input+0x240>)
 8021aa6:	2200      	movs	r2, #0
 8021aa8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8021aaa:	4b0a      	ldr	r3, [pc, #40]	; (8021ad4 <ip4_input+0x240>)
 8021aac:	2200      	movs	r2, #0
 8021aae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8021ab0:	4b08      	ldr	r3, [pc, #32]	; (8021ad4 <ip4_input+0x240>)
 8021ab2:	2200      	movs	r2, #0
 8021ab4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8021ab6:	4b07      	ldr	r3, [pc, #28]	; (8021ad4 <ip4_input+0x240>)
 8021ab8:	2200      	movs	r2, #0
 8021aba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8021abc:	4b05      	ldr	r3, [pc, #20]	; (8021ad4 <ip4_input+0x240>)
 8021abe:	2200      	movs	r2, #0
 8021ac0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8021ac2:	4b04      	ldr	r3, [pc, #16]	; (8021ad4 <ip4_input+0x240>)
 8021ac4:	2200      	movs	r2, #0
 8021ac6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8021ac8:	2300      	movs	r3, #0
}
 8021aca:	4618      	mov	r0, r3
 8021acc:	3718      	adds	r7, #24
 8021ace:	46bd      	mov	sp, r7
 8021ad0:	bd80      	pop	{r7, pc}
 8021ad2:	bf00      	nop
 8021ad4:	2000dbc4 	.word	0x2000dbc4
 8021ad8:	2001130c 	.word	0x2001130c

08021adc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8021adc:	b580      	push	{r7, lr}
 8021ade:	b08a      	sub	sp, #40	; 0x28
 8021ae0:	af04      	add	r7, sp, #16
 8021ae2:	60f8      	str	r0, [r7, #12]
 8021ae4:	60b9      	str	r1, [r7, #8]
 8021ae6:	607a      	str	r2, [r7, #4]
 8021ae8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8021aea:	68bb      	ldr	r3, [r7, #8]
 8021aec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8021aee:	687b      	ldr	r3, [r7, #4]
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	d009      	beq.n	8021b08 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8021af4:	68bb      	ldr	r3, [r7, #8]
 8021af6:	2b00      	cmp	r3, #0
 8021af8:	d003      	beq.n	8021b02 <ip4_output_if+0x26>
 8021afa:	68bb      	ldr	r3, [r7, #8]
 8021afc:	681b      	ldr	r3, [r3, #0]
 8021afe:	2b00      	cmp	r3, #0
 8021b00:	d102      	bne.n	8021b08 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8021b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b04:	3304      	adds	r3, #4
 8021b06:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8021b08:	78fa      	ldrb	r2, [r7, #3]
 8021b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b0c:	9302      	str	r3, [sp, #8]
 8021b0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8021b12:	9301      	str	r3, [sp, #4]
 8021b14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8021b18:	9300      	str	r3, [sp, #0]
 8021b1a:	4613      	mov	r3, r2
 8021b1c:	687a      	ldr	r2, [r7, #4]
 8021b1e:	6979      	ldr	r1, [r7, #20]
 8021b20:	68f8      	ldr	r0, [r7, #12]
 8021b22:	f000 f805 	bl	8021b30 <ip4_output_if_src>
 8021b26:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8021b28:	4618      	mov	r0, r3
 8021b2a:	3718      	adds	r7, #24
 8021b2c:	46bd      	mov	sp, r7
 8021b2e:	bd80      	pop	{r7, pc}

08021b30 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8021b30:	b580      	push	{r7, lr}
 8021b32:	b088      	sub	sp, #32
 8021b34:	af00      	add	r7, sp, #0
 8021b36:	60f8      	str	r0, [r7, #12]
 8021b38:	60b9      	str	r1, [r7, #8]
 8021b3a:	607a      	str	r2, [r7, #4]
 8021b3c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021b3e:	68fb      	ldr	r3, [r7, #12]
 8021b40:	7b9b      	ldrb	r3, [r3, #14]
 8021b42:	2b01      	cmp	r3, #1
 8021b44:	d006      	beq.n	8021b54 <ip4_output_if_src+0x24>
 8021b46:	4b4b      	ldr	r3, [pc, #300]	; (8021c74 <ip4_output_if_src+0x144>)
 8021b48:	f44f 7255 	mov.w	r2, #852	; 0x354
 8021b4c:	494a      	ldr	r1, [pc, #296]	; (8021c78 <ip4_output_if_src+0x148>)
 8021b4e:	484b      	ldr	r0, [pc, #300]	; (8021c7c <ip4_output_if_src+0x14c>)
 8021b50:	f001 fe7e 	bl	8023850 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8021b54:	687b      	ldr	r3, [r7, #4]
 8021b56:	2b00      	cmp	r3, #0
 8021b58:	d060      	beq.n	8021c1c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8021b5a:	2314      	movs	r3, #20
 8021b5c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8021b5e:	2114      	movs	r1, #20
 8021b60:	68f8      	ldr	r0, [r7, #12]
 8021b62:	f7f7 fd11 	bl	8019588 <pbuf_add_header>
 8021b66:	4603      	mov	r3, r0
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d002      	beq.n	8021b72 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8021b6c:	f06f 0301 	mvn.w	r3, #1
 8021b70:	e07c      	b.n	8021c6c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8021b72:	68fb      	ldr	r3, [r7, #12]
 8021b74:	685b      	ldr	r3, [r3, #4]
 8021b76:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021b78:	68fb      	ldr	r3, [r7, #12]
 8021b7a:	895b      	ldrh	r3, [r3, #10]
 8021b7c:	2b13      	cmp	r3, #19
 8021b7e:	d806      	bhi.n	8021b8e <ip4_output_if_src+0x5e>
 8021b80:	4b3c      	ldr	r3, [pc, #240]	; (8021c74 <ip4_output_if_src+0x144>)
 8021b82:	f44f 7262 	mov.w	r2, #904	; 0x388
 8021b86:	493e      	ldr	r1, [pc, #248]	; (8021c80 <ip4_output_if_src+0x150>)
 8021b88:	483c      	ldr	r0, [pc, #240]	; (8021c7c <ip4_output_if_src+0x14c>)
 8021b8a:	f001 fe61 	bl	8023850 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8021b8e:	69fb      	ldr	r3, [r7, #28]
 8021b90:	78fa      	ldrb	r2, [r7, #3]
 8021b92:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8021b94:	69fb      	ldr	r3, [r7, #28]
 8021b96:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8021b9a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8021b9c:	687b      	ldr	r3, [r7, #4]
 8021b9e:	681a      	ldr	r2, [r3, #0]
 8021ba0:	69fb      	ldr	r3, [r7, #28]
 8021ba2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8021ba4:	8b7b      	ldrh	r3, [r7, #26]
 8021ba6:	089b      	lsrs	r3, r3, #2
 8021ba8:	b29b      	uxth	r3, r3
 8021baa:	b2db      	uxtb	r3, r3
 8021bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021bb0:	b2da      	uxtb	r2, r3
 8021bb2:	69fb      	ldr	r3, [r7, #28]
 8021bb4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8021bb6:	69fb      	ldr	r3, [r7, #28]
 8021bb8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8021bbc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8021bbe:	68fb      	ldr	r3, [r7, #12]
 8021bc0:	891b      	ldrh	r3, [r3, #8]
 8021bc2:	4618      	mov	r0, r3
 8021bc4:	f7f6 f984 	bl	8017ed0 <lwip_htons>
 8021bc8:	4603      	mov	r3, r0
 8021bca:	461a      	mov	r2, r3
 8021bcc:	69fb      	ldr	r3, [r7, #28]
 8021bce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8021bd0:	69fb      	ldr	r3, [r7, #28]
 8021bd2:	2200      	movs	r2, #0
 8021bd4:	719a      	strb	r2, [r3, #6]
 8021bd6:	2200      	movs	r2, #0
 8021bd8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8021bda:	4b2a      	ldr	r3, [pc, #168]	; (8021c84 <ip4_output_if_src+0x154>)
 8021bdc:	881b      	ldrh	r3, [r3, #0]
 8021bde:	4618      	mov	r0, r3
 8021be0:	f7f6 f976 	bl	8017ed0 <lwip_htons>
 8021be4:	4603      	mov	r3, r0
 8021be6:	461a      	mov	r2, r3
 8021be8:	69fb      	ldr	r3, [r7, #28]
 8021bea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8021bec:	4b25      	ldr	r3, [pc, #148]	; (8021c84 <ip4_output_if_src+0x154>)
 8021bee:	881b      	ldrh	r3, [r3, #0]
 8021bf0:	3301      	adds	r3, #1
 8021bf2:	b29a      	uxth	r2, r3
 8021bf4:	4b23      	ldr	r3, [pc, #140]	; (8021c84 <ip4_output_if_src+0x154>)
 8021bf6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8021bf8:	68bb      	ldr	r3, [r7, #8]
 8021bfa:	2b00      	cmp	r3, #0
 8021bfc:	d104      	bne.n	8021c08 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8021bfe:	4b22      	ldr	r3, [pc, #136]	; (8021c88 <ip4_output_if_src+0x158>)
 8021c00:	681a      	ldr	r2, [r3, #0]
 8021c02:	69fb      	ldr	r3, [r7, #28]
 8021c04:	60da      	str	r2, [r3, #12]
 8021c06:	e003      	b.n	8021c10 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8021c08:	68bb      	ldr	r3, [r7, #8]
 8021c0a:	681a      	ldr	r2, [r3, #0]
 8021c0c:	69fb      	ldr	r3, [r7, #28]
 8021c0e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8021c10:	69fb      	ldr	r3, [r7, #28]
 8021c12:	2200      	movs	r2, #0
 8021c14:	729a      	strb	r2, [r3, #10]
 8021c16:	2200      	movs	r2, #0
 8021c18:	72da      	strb	r2, [r3, #11]
 8021c1a:	e00f      	b.n	8021c3c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8021c1c:	68fb      	ldr	r3, [r7, #12]
 8021c1e:	895b      	ldrh	r3, [r3, #10]
 8021c20:	2b13      	cmp	r3, #19
 8021c22:	d802      	bhi.n	8021c2a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8021c24:	f06f 0301 	mvn.w	r3, #1
 8021c28:	e020      	b.n	8021c6c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8021c2a:	68fb      	ldr	r3, [r7, #12]
 8021c2c:	685b      	ldr	r3, [r3, #4]
 8021c2e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8021c30:	69fb      	ldr	r3, [r7, #28]
 8021c32:	691b      	ldr	r3, [r3, #16]
 8021c34:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8021c36:	f107 0314 	add.w	r3, r7, #20
 8021c3a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8021c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8021c40:	2b00      	cmp	r3, #0
 8021c42:	d00c      	beq.n	8021c5e <ip4_output_if_src+0x12e>
 8021c44:	68fb      	ldr	r3, [r7, #12]
 8021c46:	891a      	ldrh	r2, [r3, #8]
 8021c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8021c4c:	429a      	cmp	r2, r3
 8021c4e:	d906      	bls.n	8021c5e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8021c50:	687a      	ldr	r2, [r7, #4]
 8021c52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021c54:	68f8      	ldr	r0, [r7, #12]
 8021c56:	f000 fd53 	bl	8022700 <ip4_frag>
 8021c5a:	4603      	mov	r3, r0
 8021c5c:	e006      	b.n	8021c6c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8021c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c60:	695b      	ldr	r3, [r3, #20]
 8021c62:	687a      	ldr	r2, [r7, #4]
 8021c64:	68f9      	ldr	r1, [r7, #12]
 8021c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021c68:	4798      	blx	r3
 8021c6a:	4603      	mov	r3, r0
}
 8021c6c:	4618      	mov	r0, r3
 8021c6e:	3720      	adds	r7, #32
 8021c70:	46bd      	mov	sp, r7
 8021c72:	bd80      	pop	{r7, pc}
 8021c74:	08027dcc 	.word	0x08027dcc
 8021c78:	08027e00 	.word	0x08027e00
 8021c7c:	08027e0c 	.word	0x08027e0c
 8021c80:	08027e34 	.word	0x08027e34
 8021c84:	2001146a 	.word	0x2001146a
 8021c88:	0802826c 	.word	0x0802826c

08021c8c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8021c8c:	b480      	push	{r7}
 8021c8e:	b085      	sub	sp, #20
 8021c90:	af00      	add	r7, sp, #0
 8021c92:	6078      	str	r0, [r7, #4]
 8021c94:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8021c96:	687b      	ldr	r3, [r7, #4]
 8021c98:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8021c9a:	687b      	ldr	r3, [r7, #4]
 8021c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8021ca0:	d002      	beq.n	8021ca8 <ip4_addr_isbroadcast_u32+0x1c>
 8021ca2:	687b      	ldr	r3, [r7, #4]
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d101      	bne.n	8021cac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8021ca8:	2301      	movs	r3, #1
 8021caa:	e02a      	b.n	8021d02 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8021cac:	683b      	ldr	r3, [r7, #0]
 8021cae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021cb2:	f003 0302 	and.w	r3, r3, #2
 8021cb6:	2b00      	cmp	r3, #0
 8021cb8:	d101      	bne.n	8021cbe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8021cba:	2300      	movs	r3, #0
 8021cbc:	e021      	b.n	8021d02 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8021cbe:	683b      	ldr	r3, [r7, #0]
 8021cc0:	3304      	adds	r3, #4
 8021cc2:	681b      	ldr	r3, [r3, #0]
 8021cc4:	687a      	ldr	r2, [r7, #4]
 8021cc6:	429a      	cmp	r2, r3
 8021cc8:	d101      	bne.n	8021cce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8021cca:	2300      	movs	r3, #0
 8021ccc:	e019      	b.n	8021d02 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8021cce:	68fa      	ldr	r2, [r7, #12]
 8021cd0:	683b      	ldr	r3, [r7, #0]
 8021cd2:	3304      	adds	r3, #4
 8021cd4:	681b      	ldr	r3, [r3, #0]
 8021cd6:	405a      	eors	r2, r3
 8021cd8:	683b      	ldr	r3, [r7, #0]
 8021cda:	3308      	adds	r3, #8
 8021cdc:	681b      	ldr	r3, [r3, #0]
 8021cde:	4013      	ands	r3, r2
 8021ce0:	2b00      	cmp	r3, #0
 8021ce2:	d10d      	bne.n	8021d00 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021ce4:	683b      	ldr	r3, [r7, #0]
 8021ce6:	3308      	adds	r3, #8
 8021ce8:	681b      	ldr	r3, [r3, #0]
 8021cea:	43da      	mvns	r2, r3
 8021cec:	687b      	ldr	r3, [r7, #4]
 8021cee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8021cf0:	683b      	ldr	r3, [r7, #0]
 8021cf2:	3308      	adds	r3, #8
 8021cf4:	681b      	ldr	r3, [r3, #0]
 8021cf6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021cf8:	429a      	cmp	r2, r3
 8021cfa:	d101      	bne.n	8021d00 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8021cfc:	2301      	movs	r3, #1
 8021cfe:	e000      	b.n	8021d02 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8021d00:	2300      	movs	r3, #0
  }
}
 8021d02:	4618      	mov	r0, r3
 8021d04:	3714      	adds	r7, #20
 8021d06:	46bd      	mov	sp, r7
 8021d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d0c:	4770      	bx	lr
	...

08021d10 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8021d10:	b580      	push	{r7, lr}
 8021d12:	b084      	sub	sp, #16
 8021d14:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8021d16:	2300      	movs	r3, #0
 8021d18:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8021d1a:	4b12      	ldr	r3, [pc, #72]	; (8021d64 <ip_reass_tmr+0x54>)
 8021d1c:	681b      	ldr	r3, [r3, #0]
 8021d1e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8021d20:	e018      	b.n	8021d54 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8021d22:	68fb      	ldr	r3, [r7, #12]
 8021d24:	7fdb      	ldrb	r3, [r3, #31]
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d00b      	beq.n	8021d42 <ip_reass_tmr+0x32>
      r->timer--;
 8021d2a:	68fb      	ldr	r3, [r7, #12]
 8021d2c:	7fdb      	ldrb	r3, [r3, #31]
 8021d2e:	3b01      	subs	r3, #1
 8021d30:	b2da      	uxtb	r2, r3
 8021d32:	68fb      	ldr	r3, [r7, #12]
 8021d34:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8021d36:	68fb      	ldr	r3, [r7, #12]
 8021d38:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8021d3a:	68fb      	ldr	r3, [r7, #12]
 8021d3c:	681b      	ldr	r3, [r3, #0]
 8021d3e:	60fb      	str	r3, [r7, #12]
 8021d40:	e008      	b.n	8021d54 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8021d42:	68fb      	ldr	r3, [r7, #12]
 8021d44:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8021d46:	68fb      	ldr	r3, [r7, #12]
 8021d48:	681b      	ldr	r3, [r3, #0]
 8021d4a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8021d4c:	68b9      	ldr	r1, [r7, #8]
 8021d4e:	6878      	ldr	r0, [r7, #4]
 8021d50:	f000 f80a 	bl	8021d68 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8021d54:	68fb      	ldr	r3, [r7, #12]
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d1e3      	bne.n	8021d22 <ip_reass_tmr+0x12>
    }
  }
}
 8021d5a:	bf00      	nop
 8021d5c:	bf00      	nop
 8021d5e:	3710      	adds	r7, #16
 8021d60:	46bd      	mov	sp, r7
 8021d62:	bd80      	pop	{r7, pc}
 8021d64:	2001146c 	.word	0x2001146c

08021d68 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021d68:	b580      	push	{r7, lr}
 8021d6a:	b088      	sub	sp, #32
 8021d6c:	af00      	add	r7, sp, #0
 8021d6e:	6078      	str	r0, [r7, #4]
 8021d70:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8021d72:	2300      	movs	r3, #0
 8021d74:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8021d76:	683a      	ldr	r2, [r7, #0]
 8021d78:	687b      	ldr	r3, [r7, #4]
 8021d7a:	429a      	cmp	r2, r3
 8021d7c:	d105      	bne.n	8021d8a <ip_reass_free_complete_datagram+0x22>
 8021d7e:	4b45      	ldr	r3, [pc, #276]	; (8021e94 <ip_reass_free_complete_datagram+0x12c>)
 8021d80:	22ab      	movs	r2, #171	; 0xab
 8021d82:	4945      	ldr	r1, [pc, #276]	; (8021e98 <ip_reass_free_complete_datagram+0x130>)
 8021d84:	4845      	ldr	r0, [pc, #276]	; (8021e9c <ip_reass_free_complete_datagram+0x134>)
 8021d86:	f001 fd63 	bl	8023850 <iprintf>
  if (prev != NULL) {
 8021d8a:	683b      	ldr	r3, [r7, #0]
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d00a      	beq.n	8021da6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8021d90:	683b      	ldr	r3, [r7, #0]
 8021d92:	681b      	ldr	r3, [r3, #0]
 8021d94:	687a      	ldr	r2, [r7, #4]
 8021d96:	429a      	cmp	r2, r3
 8021d98:	d005      	beq.n	8021da6 <ip_reass_free_complete_datagram+0x3e>
 8021d9a:	4b3e      	ldr	r3, [pc, #248]	; (8021e94 <ip_reass_free_complete_datagram+0x12c>)
 8021d9c:	22ad      	movs	r2, #173	; 0xad
 8021d9e:	4940      	ldr	r1, [pc, #256]	; (8021ea0 <ip_reass_free_complete_datagram+0x138>)
 8021da0:	483e      	ldr	r0, [pc, #248]	; (8021e9c <ip_reass_free_complete_datagram+0x134>)
 8021da2:	f001 fd55 	bl	8023850 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	685b      	ldr	r3, [r3, #4]
 8021daa:	685b      	ldr	r3, [r3, #4]
 8021dac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8021dae:	697b      	ldr	r3, [r7, #20]
 8021db0:	889b      	ldrh	r3, [r3, #4]
 8021db2:	b29b      	uxth	r3, r3
 8021db4:	2b00      	cmp	r3, #0
 8021db6:	d12a      	bne.n	8021e0e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8021db8:	687b      	ldr	r3, [r7, #4]
 8021dba:	685b      	ldr	r3, [r3, #4]
 8021dbc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8021dbe:	697b      	ldr	r3, [r7, #20]
 8021dc0:	681a      	ldr	r2, [r3, #0]
 8021dc2:	687b      	ldr	r3, [r7, #4]
 8021dc4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8021dc6:	69bb      	ldr	r3, [r7, #24]
 8021dc8:	6858      	ldr	r0, [r3, #4]
 8021dca:	687b      	ldr	r3, [r7, #4]
 8021dcc:	3308      	adds	r3, #8
 8021dce:	2214      	movs	r2, #20
 8021dd0:	4619      	mov	r1, r3
 8021dd2:	f001 fe30 	bl	8023a36 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8021dd6:	2101      	movs	r1, #1
 8021dd8:	69b8      	ldr	r0, [r7, #24]
 8021dda:	f7ff fc47 	bl	802166c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8021dde:	69b8      	ldr	r0, [r7, #24]
 8021de0:	f7f7 fcf6 	bl	80197d0 <pbuf_clen>
 8021de4:	4603      	mov	r3, r0
 8021de6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021de8:	8bfa      	ldrh	r2, [r7, #30]
 8021dea:	8a7b      	ldrh	r3, [r7, #18]
 8021dec:	4413      	add	r3, r2
 8021dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021df2:	db05      	blt.n	8021e00 <ip_reass_free_complete_datagram+0x98>
 8021df4:	4b27      	ldr	r3, [pc, #156]	; (8021e94 <ip_reass_free_complete_datagram+0x12c>)
 8021df6:	22bc      	movs	r2, #188	; 0xbc
 8021df8:	492a      	ldr	r1, [pc, #168]	; (8021ea4 <ip_reass_free_complete_datagram+0x13c>)
 8021dfa:	4828      	ldr	r0, [pc, #160]	; (8021e9c <ip_reass_free_complete_datagram+0x134>)
 8021dfc:	f001 fd28 	bl	8023850 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021e00:	8bfa      	ldrh	r2, [r7, #30]
 8021e02:	8a7b      	ldrh	r3, [r7, #18]
 8021e04:	4413      	add	r3, r2
 8021e06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8021e08:	69b8      	ldr	r0, [r7, #24]
 8021e0a:	f7f7 fc53 	bl	80196b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8021e0e:	687b      	ldr	r3, [r7, #4]
 8021e10:	685b      	ldr	r3, [r3, #4]
 8021e12:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8021e14:	e01f      	b.n	8021e56 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8021e16:	69bb      	ldr	r3, [r7, #24]
 8021e18:	685b      	ldr	r3, [r3, #4]
 8021e1a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8021e1c:	69bb      	ldr	r3, [r7, #24]
 8021e1e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8021e20:	697b      	ldr	r3, [r7, #20]
 8021e22:	681b      	ldr	r3, [r3, #0]
 8021e24:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8021e26:	68f8      	ldr	r0, [r7, #12]
 8021e28:	f7f7 fcd2 	bl	80197d0 <pbuf_clen>
 8021e2c:	4603      	mov	r3, r0
 8021e2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021e30:	8bfa      	ldrh	r2, [r7, #30]
 8021e32:	8a7b      	ldrh	r3, [r7, #18]
 8021e34:	4413      	add	r3, r2
 8021e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021e3a:	db05      	blt.n	8021e48 <ip_reass_free_complete_datagram+0xe0>
 8021e3c:	4b15      	ldr	r3, [pc, #84]	; (8021e94 <ip_reass_free_complete_datagram+0x12c>)
 8021e3e:	22cc      	movs	r2, #204	; 0xcc
 8021e40:	4918      	ldr	r1, [pc, #96]	; (8021ea4 <ip_reass_free_complete_datagram+0x13c>)
 8021e42:	4816      	ldr	r0, [pc, #88]	; (8021e9c <ip_reass_free_complete_datagram+0x134>)
 8021e44:	f001 fd04 	bl	8023850 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021e48:	8bfa      	ldrh	r2, [r7, #30]
 8021e4a:	8a7b      	ldrh	r3, [r7, #18]
 8021e4c:	4413      	add	r3, r2
 8021e4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8021e50:	68f8      	ldr	r0, [r7, #12]
 8021e52:	f7f7 fc2f 	bl	80196b4 <pbuf_free>
  while (p != NULL) {
 8021e56:	69bb      	ldr	r3, [r7, #24]
 8021e58:	2b00      	cmp	r3, #0
 8021e5a:	d1dc      	bne.n	8021e16 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8021e5c:	6839      	ldr	r1, [r7, #0]
 8021e5e:	6878      	ldr	r0, [r7, #4]
 8021e60:	f000 f8c2 	bl	8021fe8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8021e64:	4b10      	ldr	r3, [pc, #64]	; (8021ea8 <ip_reass_free_complete_datagram+0x140>)
 8021e66:	881b      	ldrh	r3, [r3, #0]
 8021e68:	8bfa      	ldrh	r2, [r7, #30]
 8021e6a:	429a      	cmp	r2, r3
 8021e6c:	d905      	bls.n	8021e7a <ip_reass_free_complete_datagram+0x112>
 8021e6e:	4b09      	ldr	r3, [pc, #36]	; (8021e94 <ip_reass_free_complete_datagram+0x12c>)
 8021e70:	22d2      	movs	r2, #210	; 0xd2
 8021e72:	490e      	ldr	r1, [pc, #56]	; (8021eac <ip_reass_free_complete_datagram+0x144>)
 8021e74:	4809      	ldr	r0, [pc, #36]	; (8021e9c <ip_reass_free_complete_datagram+0x134>)
 8021e76:	f001 fceb 	bl	8023850 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021e7a:	4b0b      	ldr	r3, [pc, #44]	; (8021ea8 <ip_reass_free_complete_datagram+0x140>)
 8021e7c:	881a      	ldrh	r2, [r3, #0]
 8021e7e:	8bfb      	ldrh	r3, [r7, #30]
 8021e80:	1ad3      	subs	r3, r2, r3
 8021e82:	b29a      	uxth	r2, r3
 8021e84:	4b08      	ldr	r3, [pc, #32]	; (8021ea8 <ip_reass_free_complete_datagram+0x140>)
 8021e86:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8021e88:	8bfb      	ldrh	r3, [r7, #30]
}
 8021e8a:	4618      	mov	r0, r3
 8021e8c:	3720      	adds	r7, #32
 8021e8e:	46bd      	mov	sp, r7
 8021e90:	bd80      	pop	{r7, pc}
 8021e92:	bf00      	nop
 8021e94:	08027e64 	.word	0x08027e64
 8021e98:	08027ea0 	.word	0x08027ea0
 8021e9c:	08027eac 	.word	0x08027eac
 8021ea0:	08027ed4 	.word	0x08027ed4
 8021ea4:	08027ee8 	.word	0x08027ee8
 8021ea8:	20011470 	.word	0x20011470
 8021eac:	08027f08 	.word	0x08027f08

08021eb0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8021eb0:	b580      	push	{r7, lr}
 8021eb2:	b08a      	sub	sp, #40	; 0x28
 8021eb4:	af00      	add	r7, sp, #0
 8021eb6:	6078      	str	r0, [r7, #4]
 8021eb8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8021eba:	2300      	movs	r3, #0
 8021ebc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8021ebe:	2300      	movs	r3, #0
 8021ec0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8021ec2:	2300      	movs	r3, #0
 8021ec4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8021ec6:	2300      	movs	r3, #0
 8021ec8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8021eca:	2300      	movs	r3, #0
 8021ecc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8021ece:	4b28      	ldr	r3, [pc, #160]	; (8021f70 <ip_reass_remove_oldest_datagram+0xc0>)
 8021ed0:	681b      	ldr	r3, [r3, #0]
 8021ed2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021ed4:	e030      	b.n	8021f38 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8021ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ed8:	695a      	ldr	r2, [r3, #20]
 8021eda:	687b      	ldr	r3, [r7, #4]
 8021edc:	68db      	ldr	r3, [r3, #12]
 8021ede:	429a      	cmp	r2, r3
 8021ee0:	d10c      	bne.n	8021efc <ip_reass_remove_oldest_datagram+0x4c>
 8021ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ee4:	699a      	ldr	r2, [r3, #24]
 8021ee6:	687b      	ldr	r3, [r7, #4]
 8021ee8:	691b      	ldr	r3, [r3, #16]
 8021eea:	429a      	cmp	r2, r3
 8021eec:	d106      	bne.n	8021efc <ip_reass_remove_oldest_datagram+0x4c>
 8021eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ef0:	899a      	ldrh	r2, [r3, #12]
 8021ef2:	687b      	ldr	r3, [r7, #4]
 8021ef4:	889b      	ldrh	r3, [r3, #4]
 8021ef6:	b29b      	uxth	r3, r3
 8021ef8:	429a      	cmp	r2, r3
 8021efa:	d014      	beq.n	8021f26 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8021efc:	693b      	ldr	r3, [r7, #16]
 8021efe:	3301      	adds	r3, #1
 8021f00:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8021f02:	6a3b      	ldr	r3, [r7, #32]
 8021f04:	2b00      	cmp	r3, #0
 8021f06:	d104      	bne.n	8021f12 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8021f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f0a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021f0c:	69fb      	ldr	r3, [r7, #28]
 8021f0e:	61bb      	str	r3, [r7, #24]
 8021f10:	e009      	b.n	8021f26 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8021f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f14:	7fda      	ldrb	r2, [r3, #31]
 8021f16:	6a3b      	ldr	r3, [r7, #32]
 8021f18:	7fdb      	ldrb	r3, [r3, #31]
 8021f1a:	429a      	cmp	r2, r3
 8021f1c:	d803      	bhi.n	8021f26 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8021f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f20:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021f22:	69fb      	ldr	r3, [r7, #28]
 8021f24:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8021f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f28:	681b      	ldr	r3, [r3, #0]
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d001      	beq.n	8021f32 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8021f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f30:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8021f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f34:	681b      	ldr	r3, [r3, #0]
 8021f36:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	d1cb      	bne.n	8021ed6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8021f3e:	6a3b      	ldr	r3, [r7, #32]
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	d008      	beq.n	8021f56 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8021f44:	69b9      	ldr	r1, [r7, #24]
 8021f46:	6a38      	ldr	r0, [r7, #32]
 8021f48:	f7ff ff0e 	bl	8021d68 <ip_reass_free_complete_datagram>
 8021f4c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8021f4e:	697a      	ldr	r2, [r7, #20]
 8021f50:	68fb      	ldr	r3, [r7, #12]
 8021f52:	4413      	add	r3, r2
 8021f54:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8021f56:	697a      	ldr	r2, [r7, #20]
 8021f58:	683b      	ldr	r3, [r7, #0]
 8021f5a:	429a      	cmp	r2, r3
 8021f5c:	da02      	bge.n	8021f64 <ip_reass_remove_oldest_datagram+0xb4>
 8021f5e:	693b      	ldr	r3, [r7, #16]
 8021f60:	2b01      	cmp	r3, #1
 8021f62:	dcac      	bgt.n	8021ebe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8021f64:	697b      	ldr	r3, [r7, #20]
}
 8021f66:	4618      	mov	r0, r3
 8021f68:	3728      	adds	r7, #40	; 0x28
 8021f6a:	46bd      	mov	sp, r7
 8021f6c:	bd80      	pop	{r7, pc}
 8021f6e:	bf00      	nop
 8021f70:	2001146c 	.word	0x2001146c

08021f74 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8021f74:	b580      	push	{r7, lr}
 8021f76:	b084      	sub	sp, #16
 8021f78:	af00      	add	r7, sp, #0
 8021f7a:	6078      	str	r0, [r7, #4]
 8021f7c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021f7e:	2004      	movs	r0, #4
 8021f80:	f7f6 fc7e 	bl	8018880 <memp_malloc>
 8021f84:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8021f86:	68fb      	ldr	r3, [r7, #12]
 8021f88:	2b00      	cmp	r3, #0
 8021f8a:	d110      	bne.n	8021fae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8021f8c:	6839      	ldr	r1, [r7, #0]
 8021f8e:	6878      	ldr	r0, [r7, #4]
 8021f90:	f7ff ff8e 	bl	8021eb0 <ip_reass_remove_oldest_datagram>
 8021f94:	4602      	mov	r2, r0
 8021f96:	683b      	ldr	r3, [r7, #0]
 8021f98:	4293      	cmp	r3, r2
 8021f9a:	dc03      	bgt.n	8021fa4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021f9c:	2004      	movs	r0, #4
 8021f9e:	f7f6 fc6f 	bl	8018880 <memp_malloc>
 8021fa2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8021fa4:	68fb      	ldr	r3, [r7, #12]
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	d101      	bne.n	8021fae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8021faa:	2300      	movs	r3, #0
 8021fac:	e016      	b.n	8021fdc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8021fae:	2220      	movs	r2, #32
 8021fb0:	2100      	movs	r1, #0
 8021fb2:	68f8      	ldr	r0, [r7, #12]
 8021fb4:	f001 fca9 	bl	802390a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8021fb8:	68fb      	ldr	r3, [r7, #12]
 8021fba:	220f      	movs	r2, #15
 8021fbc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8021fbe:	4b09      	ldr	r3, [pc, #36]	; (8021fe4 <ip_reass_enqueue_new_datagram+0x70>)
 8021fc0:	681a      	ldr	r2, [r3, #0]
 8021fc2:	68fb      	ldr	r3, [r7, #12]
 8021fc4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8021fc6:	4a07      	ldr	r2, [pc, #28]	; (8021fe4 <ip_reass_enqueue_new_datagram+0x70>)
 8021fc8:	68fb      	ldr	r3, [r7, #12]
 8021fca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021fcc:	68fb      	ldr	r3, [r7, #12]
 8021fce:	3308      	adds	r3, #8
 8021fd0:	2214      	movs	r2, #20
 8021fd2:	6879      	ldr	r1, [r7, #4]
 8021fd4:	4618      	mov	r0, r3
 8021fd6:	f001 fd2e 	bl	8023a36 <memcpy>
  return ipr;
 8021fda:	68fb      	ldr	r3, [r7, #12]
}
 8021fdc:	4618      	mov	r0, r3
 8021fde:	3710      	adds	r7, #16
 8021fe0:	46bd      	mov	sp, r7
 8021fe2:	bd80      	pop	{r7, pc}
 8021fe4:	2001146c 	.word	0x2001146c

08021fe8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021fe8:	b580      	push	{r7, lr}
 8021fea:	b082      	sub	sp, #8
 8021fec:	af00      	add	r7, sp, #0
 8021fee:	6078      	str	r0, [r7, #4]
 8021ff0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8021ff2:	4b10      	ldr	r3, [pc, #64]	; (8022034 <ip_reass_dequeue_datagram+0x4c>)
 8021ff4:	681b      	ldr	r3, [r3, #0]
 8021ff6:	687a      	ldr	r2, [r7, #4]
 8021ff8:	429a      	cmp	r2, r3
 8021ffa:	d104      	bne.n	8022006 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	681b      	ldr	r3, [r3, #0]
 8022000:	4a0c      	ldr	r2, [pc, #48]	; (8022034 <ip_reass_dequeue_datagram+0x4c>)
 8022002:	6013      	str	r3, [r2, #0]
 8022004:	e00d      	b.n	8022022 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022006:	683b      	ldr	r3, [r7, #0]
 8022008:	2b00      	cmp	r3, #0
 802200a:	d106      	bne.n	802201a <ip_reass_dequeue_datagram+0x32>
 802200c:	4b0a      	ldr	r3, [pc, #40]	; (8022038 <ip_reass_dequeue_datagram+0x50>)
 802200e:	f240 1245 	movw	r2, #325	; 0x145
 8022012:	490a      	ldr	r1, [pc, #40]	; (802203c <ip_reass_dequeue_datagram+0x54>)
 8022014:	480a      	ldr	r0, [pc, #40]	; (8022040 <ip_reass_dequeue_datagram+0x58>)
 8022016:	f001 fc1b 	bl	8023850 <iprintf>
    prev->next = ipr->next;
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	681a      	ldr	r2, [r3, #0]
 802201e:	683b      	ldr	r3, [r7, #0]
 8022020:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8022022:	6879      	ldr	r1, [r7, #4]
 8022024:	2004      	movs	r0, #4
 8022026:	f7f6 fca1 	bl	801896c <memp_free>
}
 802202a:	bf00      	nop
 802202c:	3708      	adds	r7, #8
 802202e:	46bd      	mov	sp, r7
 8022030:	bd80      	pop	{r7, pc}
 8022032:	bf00      	nop
 8022034:	2001146c 	.word	0x2001146c
 8022038:	08027e64 	.word	0x08027e64
 802203c:	08027f2c 	.word	0x08027f2c
 8022040:	08027eac 	.word	0x08027eac

08022044 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8022044:	b580      	push	{r7, lr}
 8022046:	b08c      	sub	sp, #48	; 0x30
 8022048:	af00      	add	r7, sp, #0
 802204a:	60f8      	str	r0, [r7, #12]
 802204c:	60b9      	str	r1, [r7, #8]
 802204e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8022050:	2300      	movs	r3, #0
 8022052:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8022054:	2301      	movs	r3, #1
 8022056:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8022058:	68bb      	ldr	r3, [r7, #8]
 802205a:	685b      	ldr	r3, [r3, #4]
 802205c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802205e:	69fb      	ldr	r3, [r7, #28]
 8022060:	885b      	ldrh	r3, [r3, #2]
 8022062:	b29b      	uxth	r3, r3
 8022064:	4618      	mov	r0, r3
 8022066:	f7f5 ff33 	bl	8017ed0 <lwip_htons>
 802206a:	4603      	mov	r3, r0
 802206c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 802206e:	69fb      	ldr	r3, [r7, #28]
 8022070:	781b      	ldrb	r3, [r3, #0]
 8022072:	f003 030f 	and.w	r3, r3, #15
 8022076:	b2db      	uxtb	r3, r3
 8022078:	009b      	lsls	r3, r3, #2
 802207a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 802207c:	7e7b      	ldrb	r3, [r7, #25]
 802207e:	b29b      	uxth	r3, r3
 8022080:	8b7a      	ldrh	r2, [r7, #26]
 8022082:	429a      	cmp	r2, r3
 8022084:	d202      	bcs.n	802208c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802208a:	e135      	b.n	80222f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 802208c:	7e7b      	ldrb	r3, [r7, #25]
 802208e:	b29b      	uxth	r3, r3
 8022090:	8b7a      	ldrh	r2, [r7, #26]
 8022092:	1ad3      	subs	r3, r2, r3
 8022094:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022096:	69fb      	ldr	r3, [r7, #28]
 8022098:	88db      	ldrh	r3, [r3, #6]
 802209a:	b29b      	uxth	r3, r3
 802209c:	4618      	mov	r0, r3
 802209e:	f7f5 ff17 	bl	8017ed0 <lwip_htons>
 80220a2:	4603      	mov	r3, r0
 80220a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80220a8:	b29b      	uxth	r3, r3
 80220aa:	00db      	lsls	r3, r3, #3
 80220ac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80220ae:	68bb      	ldr	r3, [r7, #8]
 80220b0:	685b      	ldr	r3, [r3, #4]
 80220b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80220b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80220b6:	2200      	movs	r2, #0
 80220b8:	701a      	strb	r2, [r3, #0]
 80220ba:	2200      	movs	r2, #0
 80220bc:	705a      	strb	r2, [r3, #1]
 80220be:	2200      	movs	r2, #0
 80220c0:	709a      	strb	r2, [r3, #2]
 80220c2:	2200      	movs	r2, #0
 80220c4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80220c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80220c8:	8afa      	ldrh	r2, [r7, #22]
 80220ca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80220cc:	8afa      	ldrh	r2, [r7, #22]
 80220ce:	8b7b      	ldrh	r3, [r7, #26]
 80220d0:	4413      	add	r3, r2
 80220d2:	b29a      	uxth	r2, r3
 80220d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80220d6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80220d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80220da:	88db      	ldrh	r3, [r3, #6]
 80220dc:	b29b      	uxth	r3, r3
 80220de:	8afa      	ldrh	r2, [r7, #22]
 80220e0:	429a      	cmp	r2, r3
 80220e2:	d902      	bls.n	80220ea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80220e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80220e8:	e106      	b.n	80222f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80220ea:	68fb      	ldr	r3, [r7, #12]
 80220ec:	685b      	ldr	r3, [r3, #4]
 80220ee:	627b      	str	r3, [r7, #36]	; 0x24
 80220f0:	e068      	b.n	80221c4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80220f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220f4:	685b      	ldr	r3, [r3, #4]
 80220f6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80220f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80220fa:	889b      	ldrh	r3, [r3, #4]
 80220fc:	b29a      	uxth	r2, r3
 80220fe:	693b      	ldr	r3, [r7, #16]
 8022100:	889b      	ldrh	r3, [r3, #4]
 8022102:	b29b      	uxth	r3, r3
 8022104:	429a      	cmp	r2, r3
 8022106:	d235      	bcs.n	8022174 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8022108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802210a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802210c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 802210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022110:	2b00      	cmp	r3, #0
 8022112:	d020      	beq.n	8022156 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8022114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022116:	889b      	ldrh	r3, [r3, #4]
 8022118:	b29a      	uxth	r2, r3
 802211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802211c:	88db      	ldrh	r3, [r3, #6]
 802211e:	b29b      	uxth	r3, r3
 8022120:	429a      	cmp	r2, r3
 8022122:	d307      	bcc.n	8022134 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8022124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022126:	88db      	ldrh	r3, [r3, #6]
 8022128:	b29a      	uxth	r2, r3
 802212a:	693b      	ldr	r3, [r7, #16]
 802212c:	889b      	ldrh	r3, [r3, #4]
 802212e:	b29b      	uxth	r3, r3
 8022130:	429a      	cmp	r2, r3
 8022132:	d902      	bls.n	802213a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022138:	e0de      	b.n	80222f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 802213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802213c:	68ba      	ldr	r2, [r7, #8]
 802213e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8022140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022142:	88db      	ldrh	r3, [r3, #6]
 8022144:	b29a      	uxth	r2, r3
 8022146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022148:	889b      	ldrh	r3, [r3, #4]
 802214a:	b29b      	uxth	r3, r3
 802214c:	429a      	cmp	r2, r3
 802214e:	d03d      	beq.n	80221cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8022150:	2300      	movs	r3, #0
 8022152:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8022154:	e03a      	b.n	80221cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8022156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022158:	88db      	ldrh	r3, [r3, #6]
 802215a:	b29a      	uxth	r2, r3
 802215c:	693b      	ldr	r3, [r7, #16]
 802215e:	889b      	ldrh	r3, [r3, #4]
 8022160:	b29b      	uxth	r3, r3
 8022162:	429a      	cmp	r2, r3
 8022164:	d902      	bls.n	802216c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802216a:	e0c5      	b.n	80222f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 802216c:	68fb      	ldr	r3, [r7, #12]
 802216e:	68ba      	ldr	r2, [r7, #8]
 8022170:	605a      	str	r2, [r3, #4]
      break;
 8022172:	e02b      	b.n	80221cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8022174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022176:	889b      	ldrh	r3, [r3, #4]
 8022178:	b29a      	uxth	r2, r3
 802217a:	693b      	ldr	r3, [r7, #16]
 802217c:	889b      	ldrh	r3, [r3, #4]
 802217e:	b29b      	uxth	r3, r3
 8022180:	429a      	cmp	r2, r3
 8022182:	d102      	bne.n	802218a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022188:	e0b6      	b.n	80222f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 802218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802218c:	889b      	ldrh	r3, [r3, #4]
 802218e:	b29a      	uxth	r2, r3
 8022190:	693b      	ldr	r3, [r7, #16]
 8022192:	88db      	ldrh	r3, [r3, #6]
 8022194:	b29b      	uxth	r3, r3
 8022196:	429a      	cmp	r2, r3
 8022198:	d202      	bcs.n	80221a0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802219a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802219e:	e0ab      	b.n	80222f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80221a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221a2:	2b00      	cmp	r3, #0
 80221a4:	d009      	beq.n	80221ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80221a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221a8:	88db      	ldrh	r3, [r3, #6]
 80221aa:	b29a      	uxth	r2, r3
 80221ac:	693b      	ldr	r3, [r7, #16]
 80221ae:	889b      	ldrh	r3, [r3, #4]
 80221b0:	b29b      	uxth	r3, r3
 80221b2:	429a      	cmp	r2, r3
 80221b4:	d001      	beq.n	80221ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80221b6:	2300      	movs	r3, #0
 80221b8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80221ba:	693b      	ldr	r3, [r7, #16]
 80221bc:	681b      	ldr	r3, [r3, #0]
 80221be:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80221c0:	693b      	ldr	r3, [r7, #16]
 80221c2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80221c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d193      	bne.n	80220f2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80221ca:	e000      	b.n	80221ce <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80221cc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80221ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221d0:	2b00      	cmp	r3, #0
 80221d2:	d12d      	bne.n	8022230 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80221d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221d6:	2b00      	cmp	r3, #0
 80221d8:	d01c      	beq.n	8022214 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80221da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221dc:	88db      	ldrh	r3, [r3, #6]
 80221de:	b29a      	uxth	r2, r3
 80221e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80221e2:	889b      	ldrh	r3, [r3, #4]
 80221e4:	b29b      	uxth	r3, r3
 80221e6:	429a      	cmp	r2, r3
 80221e8:	d906      	bls.n	80221f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80221ea:	4b45      	ldr	r3, [pc, #276]	; (8022300 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80221ec:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80221f0:	4944      	ldr	r1, [pc, #272]	; (8022304 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80221f2:	4845      	ldr	r0, [pc, #276]	; (8022308 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80221f4:	f001 fb2c 	bl	8023850 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80221f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221fa:	68ba      	ldr	r2, [r7, #8]
 80221fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80221fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022200:	88db      	ldrh	r3, [r3, #6]
 8022202:	b29a      	uxth	r2, r3
 8022204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022206:	889b      	ldrh	r3, [r3, #4]
 8022208:	b29b      	uxth	r3, r3
 802220a:	429a      	cmp	r2, r3
 802220c:	d010      	beq.n	8022230 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 802220e:	2300      	movs	r3, #0
 8022210:	623b      	str	r3, [r7, #32]
 8022212:	e00d      	b.n	8022230 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8022214:	68fb      	ldr	r3, [r7, #12]
 8022216:	685b      	ldr	r3, [r3, #4]
 8022218:	2b00      	cmp	r3, #0
 802221a:	d006      	beq.n	802222a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 802221c:	4b38      	ldr	r3, [pc, #224]	; (8022300 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802221e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8022222:	493a      	ldr	r1, [pc, #232]	; (802230c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8022224:	4838      	ldr	r0, [pc, #224]	; (8022308 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022226:	f001 fb13 	bl	8023850 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 802222a:	68fb      	ldr	r3, [r7, #12]
 802222c:	68ba      	ldr	r2, [r7, #8]
 802222e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022230:	687b      	ldr	r3, [r7, #4]
 8022232:	2b00      	cmp	r3, #0
 8022234:	d105      	bne.n	8022242 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8022236:	68fb      	ldr	r3, [r7, #12]
 8022238:	7f9b      	ldrb	r3, [r3, #30]
 802223a:	f003 0301 	and.w	r3, r3, #1
 802223e:	2b00      	cmp	r3, #0
 8022240:	d059      	beq.n	80222f6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8022242:	6a3b      	ldr	r3, [r7, #32]
 8022244:	2b00      	cmp	r3, #0
 8022246:	d04f      	beq.n	80222e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022248:	68fb      	ldr	r3, [r7, #12]
 802224a:	685b      	ldr	r3, [r3, #4]
 802224c:	2b00      	cmp	r3, #0
 802224e:	d006      	beq.n	802225e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8022250:	68fb      	ldr	r3, [r7, #12]
 8022252:	685b      	ldr	r3, [r3, #4]
 8022254:	685b      	ldr	r3, [r3, #4]
 8022256:	889b      	ldrh	r3, [r3, #4]
 8022258:	b29b      	uxth	r3, r3
 802225a:	2b00      	cmp	r3, #0
 802225c:	d002      	beq.n	8022264 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 802225e:	2300      	movs	r3, #0
 8022260:	623b      	str	r3, [r7, #32]
 8022262:	e041      	b.n	80222e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8022264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022266:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8022268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802226a:	681b      	ldr	r3, [r3, #0]
 802226c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802226e:	e012      	b.n	8022296 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8022270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022272:	685b      	ldr	r3, [r3, #4]
 8022274:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8022276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022278:	88db      	ldrh	r3, [r3, #6]
 802227a:	b29a      	uxth	r2, r3
 802227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802227e:	889b      	ldrh	r3, [r3, #4]
 8022280:	b29b      	uxth	r3, r3
 8022282:	429a      	cmp	r2, r3
 8022284:	d002      	beq.n	802228c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8022286:	2300      	movs	r3, #0
 8022288:	623b      	str	r3, [r7, #32]
            break;
 802228a:	e007      	b.n	802229c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 802228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802228e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8022290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022292:	681b      	ldr	r3, [r3, #0]
 8022294:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8022296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022298:	2b00      	cmp	r3, #0
 802229a:	d1e9      	bne.n	8022270 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 802229c:	6a3b      	ldr	r3, [r7, #32]
 802229e:	2b00      	cmp	r3, #0
 80222a0:	d022      	beq.n	80222e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80222a2:	68fb      	ldr	r3, [r7, #12]
 80222a4:	685b      	ldr	r3, [r3, #4]
 80222a6:	2b00      	cmp	r3, #0
 80222a8:	d106      	bne.n	80222b8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80222aa:	4b15      	ldr	r3, [pc, #84]	; (8022300 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80222ac:	f240 12df 	movw	r2, #479	; 0x1df
 80222b0:	4917      	ldr	r1, [pc, #92]	; (8022310 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80222b2:	4815      	ldr	r0, [pc, #84]	; (8022308 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80222b4:	f001 facc 	bl	8023850 <iprintf>
          LWIP_ASSERT("sanity check",
 80222b8:	68fb      	ldr	r3, [r7, #12]
 80222ba:	685b      	ldr	r3, [r3, #4]
 80222bc:	685b      	ldr	r3, [r3, #4]
 80222be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80222c0:	429a      	cmp	r2, r3
 80222c2:	d106      	bne.n	80222d2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80222c4:	4b0e      	ldr	r3, [pc, #56]	; (8022300 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80222c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80222ca:	4911      	ldr	r1, [pc, #68]	; (8022310 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80222cc:	480e      	ldr	r0, [pc, #56]	; (8022308 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80222ce:	f001 fabf 	bl	8023850 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80222d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80222d4:	681b      	ldr	r3, [r3, #0]
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	d006      	beq.n	80222e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80222da:	4b09      	ldr	r3, [pc, #36]	; (8022300 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80222dc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80222e0:	490c      	ldr	r1, [pc, #48]	; (8022314 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80222e2:	4809      	ldr	r0, [pc, #36]	; (8022308 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80222e4:	f001 fab4 	bl	8023850 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80222e8:	6a3b      	ldr	r3, [r7, #32]
 80222ea:	2b00      	cmp	r3, #0
 80222ec:	bf14      	ite	ne
 80222ee:	2301      	movne	r3, #1
 80222f0:	2300      	moveq	r3, #0
 80222f2:	b2db      	uxtb	r3, r3
 80222f4:	e000      	b.n	80222f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80222f6:	2300      	movs	r3, #0
}
 80222f8:	4618      	mov	r0, r3
 80222fa:	3730      	adds	r7, #48	; 0x30
 80222fc:	46bd      	mov	sp, r7
 80222fe:	bd80      	pop	{r7, pc}
 8022300:	08027e64 	.word	0x08027e64
 8022304:	08027f48 	.word	0x08027f48
 8022308:	08027eac 	.word	0x08027eac
 802230c:	08027f68 	.word	0x08027f68
 8022310:	08027fa0 	.word	0x08027fa0
 8022314:	08027fb0 	.word	0x08027fb0

08022318 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8022318:	b580      	push	{r7, lr}
 802231a:	b08e      	sub	sp, #56	; 0x38
 802231c:	af00      	add	r7, sp, #0
 802231e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8022320:	687b      	ldr	r3, [r7, #4]
 8022322:	685b      	ldr	r3, [r3, #4]
 8022324:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8022326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022328:	781b      	ldrb	r3, [r3, #0]
 802232a:	f003 030f 	and.w	r3, r3, #15
 802232e:	b2db      	uxtb	r3, r3
 8022330:	009b      	lsls	r3, r3, #2
 8022332:	b2db      	uxtb	r3, r3
 8022334:	2b14      	cmp	r3, #20
 8022336:	f040 8171 	bne.w	802261c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 802233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802233c:	88db      	ldrh	r3, [r3, #6]
 802233e:	b29b      	uxth	r3, r3
 8022340:	4618      	mov	r0, r3
 8022342:	f7f5 fdc5 	bl	8017ed0 <lwip_htons>
 8022346:	4603      	mov	r3, r0
 8022348:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802234c:	b29b      	uxth	r3, r3
 802234e:	00db      	lsls	r3, r3, #3
 8022350:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8022352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022354:	885b      	ldrh	r3, [r3, #2]
 8022356:	b29b      	uxth	r3, r3
 8022358:	4618      	mov	r0, r3
 802235a:	f7f5 fdb9 	bl	8017ed0 <lwip_htons>
 802235e:	4603      	mov	r3, r0
 8022360:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8022362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022364:	781b      	ldrb	r3, [r3, #0]
 8022366:	f003 030f 	and.w	r3, r3, #15
 802236a:	b2db      	uxtb	r3, r3
 802236c:	009b      	lsls	r3, r3, #2
 802236e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8022372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8022376:	b29b      	uxth	r3, r3
 8022378:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802237a:	429a      	cmp	r2, r3
 802237c:	f0c0 8150 	bcc.w	8022620 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8022380:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8022384:	b29b      	uxth	r3, r3
 8022386:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8022388:	1ad3      	subs	r3, r2, r3
 802238a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 802238c:	6878      	ldr	r0, [r7, #4]
 802238e:	f7f7 fa1f 	bl	80197d0 <pbuf_clen>
 8022392:	4603      	mov	r3, r0
 8022394:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022396:	4b8c      	ldr	r3, [pc, #560]	; (80225c8 <ip4_reass+0x2b0>)
 8022398:	881b      	ldrh	r3, [r3, #0]
 802239a:	461a      	mov	r2, r3
 802239c:	8c3b      	ldrh	r3, [r7, #32]
 802239e:	4413      	add	r3, r2
 80223a0:	2b0a      	cmp	r3, #10
 80223a2:	dd10      	ble.n	80223c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80223a4:	8c3b      	ldrh	r3, [r7, #32]
 80223a6:	4619      	mov	r1, r3
 80223a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80223aa:	f7ff fd81 	bl	8021eb0 <ip_reass_remove_oldest_datagram>
 80223ae:	4603      	mov	r3, r0
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	f000 8137 	beq.w	8022624 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80223b6:	4b84      	ldr	r3, [pc, #528]	; (80225c8 <ip4_reass+0x2b0>)
 80223b8:	881b      	ldrh	r3, [r3, #0]
 80223ba:	461a      	mov	r2, r3
 80223bc:	8c3b      	ldrh	r3, [r7, #32]
 80223be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80223c0:	2b0a      	cmp	r3, #10
 80223c2:	f300 812f 	bgt.w	8022624 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80223c6:	4b81      	ldr	r3, [pc, #516]	; (80225cc <ip4_reass+0x2b4>)
 80223c8:	681b      	ldr	r3, [r3, #0]
 80223ca:	633b      	str	r3, [r7, #48]	; 0x30
 80223cc:	e015      	b.n	80223fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80223ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223d0:	695a      	ldr	r2, [r3, #20]
 80223d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80223d4:	68db      	ldr	r3, [r3, #12]
 80223d6:	429a      	cmp	r2, r3
 80223d8:	d10c      	bne.n	80223f4 <ip4_reass+0xdc>
 80223da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223dc:	699a      	ldr	r2, [r3, #24]
 80223de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80223e0:	691b      	ldr	r3, [r3, #16]
 80223e2:	429a      	cmp	r2, r3
 80223e4:	d106      	bne.n	80223f4 <ip4_reass+0xdc>
 80223e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223e8:	899a      	ldrh	r2, [r3, #12]
 80223ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80223ec:	889b      	ldrh	r3, [r3, #4]
 80223ee:	b29b      	uxth	r3, r3
 80223f0:	429a      	cmp	r2, r3
 80223f2:	d006      	beq.n	8022402 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80223f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223f6:	681b      	ldr	r3, [r3, #0]
 80223f8:	633b      	str	r3, [r7, #48]	; 0x30
 80223fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223fc:	2b00      	cmp	r3, #0
 80223fe:	d1e6      	bne.n	80223ce <ip4_reass+0xb6>
 8022400:	e000      	b.n	8022404 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8022402:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8022404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022406:	2b00      	cmp	r3, #0
 8022408:	d109      	bne.n	802241e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 802240a:	8c3b      	ldrh	r3, [r7, #32]
 802240c:	4619      	mov	r1, r3
 802240e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022410:	f7ff fdb0 	bl	8021f74 <ip_reass_enqueue_new_datagram>
 8022414:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8022416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022418:	2b00      	cmp	r3, #0
 802241a:	d11c      	bne.n	8022456 <ip4_reass+0x13e>
      goto nullreturn;
 802241c:	e105      	b.n	802262a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022420:	88db      	ldrh	r3, [r3, #6]
 8022422:	b29b      	uxth	r3, r3
 8022424:	4618      	mov	r0, r3
 8022426:	f7f5 fd53 	bl	8017ed0 <lwip_htons>
 802242a:	4603      	mov	r3, r0
 802242c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022430:	2b00      	cmp	r3, #0
 8022432:	d110      	bne.n	8022456 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8022434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022436:	89db      	ldrh	r3, [r3, #14]
 8022438:	4618      	mov	r0, r3
 802243a:	f7f5 fd49 	bl	8017ed0 <lwip_htons>
 802243e:	4603      	mov	r3, r0
 8022440:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022444:	2b00      	cmp	r3, #0
 8022446:	d006      	beq.n	8022456 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8022448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802244a:	3308      	adds	r3, #8
 802244c:	2214      	movs	r2, #20
 802244e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8022450:	4618      	mov	r0, r3
 8022452:	f001 faf0 	bl	8023a36 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8022456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022458:	88db      	ldrh	r3, [r3, #6]
 802245a:	b29b      	uxth	r3, r3
 802245c:	f003 0320 	and.w	r3, r3, #32
 8022460:	2b00      	cmp	r3, #0
 8022462:	bf0c      	ite	eq
 8022464:	2301      	moveq	r3, #1
 8022466:	2300      	movne	r3, #0
 8022468:	b2db      	uxtb	r3, r3
 802246a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 802246c:	69fb      	ldr	r3, [r7, #28]
 802246e:	2b00      	cmp	r3, #0
 8022470:	d00e      	beq.n	8022490 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8022472:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8022474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022476:	4413      	add	r3, r2
 8022478:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802247a:	8b7a      	ldrh	r2, [r7, #26]
 802247c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802247e:	429a      	cmp	r2, r3
 8022480:	f0c0 80a0 	bcc.w	80225c4 <ip4_reass+0x2ac>
 8022484:	8b7b      	ldrh	r3, [r7, #26]
 8022486:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802248a:	4293      	cmp	r3, r2
 802248c:	f200 809a 	bhi.w	80225c4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8022490:	69fa      	ldr	r2, [r7, #28]
 8022492:	6879      	ldr	r1, [r7, #4]
 8022494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022496:	f7ff fdd5 	bl	8022044 <ip_reass_chain_frag_into_datagram_and_validate>
 802249a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 802249c:	697b      	ldr	r3, [r7, #20]
 802249e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80224a2:	f000 809b 	beq.w	80225dc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80224a6:	4b48      	ldr	r3, [pc, #288]	; (80225c8 <ip4_reass+0x2b0>)
 80224a8:	881a      	ldrh	r2, [r3, #0]
 80224aa:	8c3b      	ldrh	r3, [r7, #32]
 80224ac:	4413      	add	r3, r2
 80224ae:	b29a      	uxth	r2, r3
 80224b0:	4b45      	ldr	r3, [pc, #276]	; (80225c8 <ip4_reass+0x2b0>)
 80224b2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80224b4:	69fb      	ldr	r3, [r7, #28]
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d00d      	beq.n	80224d6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80224ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80224bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80224be:	4413      	add	r3, r2
 80224c0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80224c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224c4:	8a7a      	ldrh	r2, [r7, #18]
 80224c6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80224c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224ca:	7f9b      	ldrb	r3, [r3, #30]
 80224cc:	f043 0301 	orr.w	r3, r3, #1
 80224d0:	b2da      	uxtb	r2, r3
 80224d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224d4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80224d6:	697b      	ldr	r3, [r7, #20]
 80224d8:	2b01      	cmp	r3, #1
 80224da:	d171      	bne.n	80225c0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80224dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224de:	8b9b      	ldrh	r3, [r3, #28]
 80224e0:	3314      	adds	r3, #20
 80224e2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80224e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224e6:	685b      	ldr	r3, [r3, #4]
 80224e8:	685b      	ldr	r3, [r3, #4]
 80224ea:	681b      	ldr	r3, [r3, #0]
 80224ec:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80224ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224f0:	685b      	ldr	r3, [r3, #4]
 80224f2:	685b      	ldr	r3, [r3, #4]
 80224f4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80224f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224f8:	3308      	adds	r3, #8
 80224fa:	2214      	movs	r2, #20
 80224fc:	4619      	mov	r1, r3
 80224fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022500:	f001 fa99 	bl	8023a36 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8022504:	8a3b      	ldrh	r3, [r7, #16]
 8022506:	4618      	mov	r0, r3
 8022508:	f7f5 fce2 	bl	8017ed0 <lwip_htons>
 802250c:	4603      	mov	r3, r0
 802250e:	461a      	mov	r2, r3
 8022510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022512:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8022514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022516:	2200      	movs	r2, #0
 8022518:	719a      	strb	r2, [r3, #6]
 802251a:	2200      	movs	r2, #0
 802251c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 802251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022520:	2200      	movs	r2, #0
 8022522:	729a      	strb	r2, [r3, #10]
 8022524:	2200      	movs	r2, #0
 8022526:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8022528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802252a:	685b      	ldr	r3, [r3, #4]
 802252c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 802252e:	e00d      	b.n	802254c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8022530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022532:	685b      	ldr	r3, [r3, #4]
 8022534:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8022536:	2114      	movs	r1, #20
 8022538:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802253a:	f7f7 f835 	bl	80195a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 802253e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022540:	6878      	ldr	r0, [r7, #4]
 8022542:	f7f7 f985 	bl	8019850 <pbuf_cat>
      r = iprh->next_pbuf;
 8022546:	68fb      	ldr	r3, [r7, #12]
 8022548:	681b      	ldr	r3, [r3, #0]
 802254a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 802254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802254e:	2b00      	cmp	r3, #0
 8022550:	d1ee      	bne.n	8022530 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8022552:	4b1e      	ldr	r3, [pc, #120]	; (80225cc <ip4_reass+0x2b4>)
 8022554:	681b      	ldr	r3, [r3, #0]
 8022556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022558:	429a      	cmp	r2, r3
 802255a:	d102      	bne.n	8022562 <ip4_reass+0x24a>
      ipr_prev = NULL;
 802255c:	2300      	movs	r3, #0
 802255e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022560:	e010      	b.n	8022584 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8022562:	4b1a      	ldr	r3, [pc, #104]	; (80225cc <ip4_reass+0x2b4>)
 8022564:	681b      	ldr	r3, [r3, #0]
 8022566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022568:	e007      	b.n	802257a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 802256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802256c:	681b      	ldr	r3, [r3, #0]
 802256e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022570:	429a      	cmp	r2, r3
 8022572:	d006      	beq.n	8022582 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8022574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022576:	681b      	ldr	r3, [r3, #0]
 8022578:	62fb      	str	r3, [r7, #44]	; 0x2c
 802257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802257c:	2b00      	cmp	r3, #0
 802257e:	d1f4      	bne.n	802256a <ip4_reass+0x252>
 8022580:	e000      	b.n	8022584 <ip4_reass+0x26c>
          break;
 8022582:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8022584:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022588:	f7ff fd2e 	bl	8021fe8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 802258c:	6878      	ldr	r0, [r7, #4]
 802258e:	f7f7 f91f 	bl	80197d0 <pbuf_clen>
 8022592:	4603      	mov	r3, r0
 8022594:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8022596:	4b0c      	ldr	r3, [pc, #48]	; (80225c8 <ip4_reass+0x2b0>)
 8022598:	881b      	ldrh	r3, [r3, #0]
 802259a:	8c3a      	ldrh	r2, [r7, #32]
 802259c:	429a      	cmp	r2, r3
 802259e:	d906      	bls.n	80225ae <ip4_reass+0x296>
 80225a0:	4b0b      	ldr	r3, [pc, #44]	; (80225d0 <ip4_reass+0x2b8>)
 80225a2:	f240 229b 	movw	r2, #667	; 0x29b
 80225a6:	490b      	ldr	r1, [pc, #44]	; (80225d4 <ip4_reass+0x2bc>)
 80225a8:	480b      	ldr	r0, [pc, #44]	; (80225d8 <ip4_reass+0x2c0>)
 80225aa:	f001 f951 	bl	8023850 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80225ae:	4b06      	ldr	r3, [pc, #24]	; (80225c8 <ip4_reass+0x2b0>)
 80225b0:	881a      	ldrh	r2, [r3, #0]
 80225b2:	8c3b      	ldrh	r3, [r7, #32]
 80225b4:	1ad3      	subs	r3, r2, r3
 80225b6:	b29a      	uxth	r2, r3
 80225b8:	4b03      	ldr	r3, [pc, #12]	; (80225c8 <ip4_reass+0x2b0>)
 80225ba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80225bc:	687b      	ldr	r3, [r7, #4]
 80225be:	e038      	b.n	8022632 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80225c0:	2300      	movs	r3, #0
 80225c2:	e036      	b.n	8022632 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80225c4:	bf00      	nop
 80225c6:	e00a      	b.n	80225de <ip4_reass+0x2c6>
 80225c8:	20011470 	.word	0x20011470
 80225cc:	2001146c 	.word	0x2001146c
 80225d0:	08027e64 	.word	0x08027e64
 80225d4:	08027fd4 	.word	0x08027fd4
 80225d8:	08027eac 	.word	0x08027eac
    goto nullreturn_ipr;
 80225dc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80225de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	d106      	bne.n	80225f2 <ip4_reass+0x2da>
 80225e4:	4b15      	ldr	r3, [pc, #84]	; (802263c <ip4_reass+0x324>)
 80225e6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80225ea:	4915      	ldr	r1, [pc, #84]	; (8022640 <ip4_reass+0x328>)
 80225ec:	4815      	ldr	r0, [pc, #84]	; (8022644 <ip4_reass+0x32c>)
 80225ee:	f001 f92f 	bl	8023850 <iprintf>
  if (ipr->p == NULL) {
 80225f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80225f4:	685b      	ldr	r3, [r3, #4]
 80225f6:	2b00      	cmp	r3, #0
 80225f8:	d116      	bne.n	8022628 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80225fa:	4b13      	ldr	r3, [pc, #76]	; (8022648 <ip4_reass+0x330>)
 80225fc:	681b      	ldr	r3, [r3, #0]
 80225fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022600:	429a      	cmp	r2, r3
 8022602:	d006      	beq.n	8022612 <ip4_reass+0x2fa>
 8022604:	4b0d      	ldr	r3, [pc, #52]	; (802263c <ip4_reass+0x324>)
 8022606:	f240 22ab 	movw	r2, #683	; 0x2ab
 802260a:	4910      	ldr	r1, [pc, #64]	; (802264c <ip4_reass+0x334>)
 802260c:	480d      	ldr	r0, [pc, #52]	; (8022644 <ip4_reass+0x32c>)
 802260e:	f001 f91f 	bl	8023850 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8022612:	2100      	movs	r1, #0
 8022614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022616:	f7ff fce7 	bl	8021fe8 <ip_reass_dequeue_datagram>
 802261a:	e006      	b.n	802262a <ip4_reass+0x312>
    goto nullreturn;
 802261c:	bf00      	nop
 802261e:	e004      	b.n	802262a <ip4_reass+0x312>
    goto nullreturn;
 8022620:	bf00      	nop
 8022622:	e002      	b.n	802262a <ip4_reass+0x312>
      goto nullreturn;
 8022624:	bf00      	nop
 8022626:	e000      	b.n	802262a <ip4_reass+0x312>
  }

nullreturn:
 8022628:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802262a:	6878      	ldr	r0, [r7, #4]
 802262c:	f7f7 f842 	bl	80196b4 <pbuf_free>
  return NULL;
 8022630:	2300      	movs	r3, #0
}
 8022632:	4618      	mov	r0, r3
 8022634:	3738      	adds	r7, #56	; 0x38
 8022636:	46bd      	mov	sp, r7
 8022638:	bd80      	pop	{r7, pc}
 802263a:	bf00      	nop
 802263c:	08027e64 	.word	0x08027e64
 8022640:	08027ff0 	.word	0x08027ff0
 8022644:	08027eac 	.word	0x08027eac
 8022648:	2001146c 	.word	0x2001146c
 802264c:	08027ffc 	.word	0x08027ffc

08022650 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8022650:	b580      	push	{r7, lr}
 8022652:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8022654:	2005      	movs	r0, #5
 8022656:	f7f6 f913 	bl	8018880 <memp_malloc>
 802265a:	4603      	mov	r3, r0
}
 802265c:	4618      	mov	r0, r3
 802265e:	bd80      	pop	{r7, pc}

08022660 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8022660:	b580      	push	{r7, lr}
 8022662:	b082      	sub	sp, #8
 8022664:	af00      	add	r7, sp, #0
 8022666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	2b00      	cmp	r3, #0
 802266c:	d106      	bne.n	802267c <ip_frag_free_pbuf_custom_ref+0x1c>
 802266e:	4b07      	ldr	r3, [pc, #28]	; (802268c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8022670:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8022674:	4906      	ldr	r1, [pc, #24]	; (8022690 <ip_frag_free_pbuf_custom_ref+0x30>)
 8022676:	4807      	ldr	r0, [pc, #28]	; (8022694 <ip_frag_free_pbuf_custom_ref+0x34>)
 8022678:	f001 f8ea 	bl	8023850 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 802267c:	6879      	ldr	r1, [r7, #4]
 802267e:	2005      	movs	r0, #5
 8022680:	f7f6 f974 	bl	801896c <memp_free>
}
 8022684:	bf00      	nop
 8022686:	3708      	adds	r7, #8
 8022688:	46bd      	mov	sp, r7
 802268a:	bd80      	pop	{r7, pc}
 802268c:	08027e64 	.word	0x08027e64
 8022690:	0802801c 	.word	0x0802801c
 8022694:	08027eac 	.word	0x08027eac

08022698 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8022698:	b580      	push	{r7, lr}
 802269a:	b084      	sub	sp, #16
 802269c:	af00      	add	r7, sp, #0
 802269e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80226a0:	687b      	ldr	r3, [r7, #4]
 80226a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80226a4:	68fb      	ldr	r3, [r7, #12]
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	d106      	bne.n	80226b8 <ipfrag_free_pbuf_custom+0x20>
 80226aa:	4b11      	ldr	r3, [pc, #68]	; (80226f0 <ipfrag_free_pbuf_custom+0x58>)
 80226ac:	f240 22ce 	movw	r2, #718	; 0x2ce
 80226b0:	4910      	ldr	r1, [pc, #64]	; (80226f4 <ipfrag_free_pbuf_custom+0x5c>)
 80226b2:	4811      	ldr	r0, [pc, #68]	; (80226f8 <ipfrag_free_pbuf_custom+0x60>)
 80226b4:	f001 f8cc 	bl	8023850 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80226b8:	68fa      	ldr	r2, [r7, #12]
 80226ba:	687b      	ldr	r3, [r7, #4]
 80226bc:	429a      	cmp	r2, r3
 80226be:	d006      	beq.n	80226ce <ipfrag_free_pbuf_custom+0x36>
 80226c0:	4b0b      	ldr	r3, [pc, #44]	; (80226f0 <ipfrag_free_pbuf_custom+0x58>)
 80226c2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80226c6:	490d      	ldr	r1, [pc, #52]	; (80226fc <ipfrag_free_pbuf_custom+0x64>)
 80226c8:	480b      	ldr	r0, [pc, #44]	; (80226f8 <ipfrag_free_pbuf_custom+0x60>)
 80226ca:	f001 f8c1 	bl	8023850 <iprintf>
  if (pcr->original != NULL) {
 80226ce:	68fb      	ldr	r3, [r7, #12]
 80226d0:	695b      	ldr	r3, [r3, #20]
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	d004      	beq.n	80226e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80226d6:	68fb      	ldr	r3, [r7, #12]
 80226d8:	695b      	ldr	r3, [r3, #20]
 80226da:	4618      	mov	r0, r3
 80226dc:	f7f6 ffea 	bl	80196b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80226e0:	68f8      	ldr	r0, [r7, #12]
 80226e2:	f7ff ffbd 	bl	8022660 <ip_frag_free_pbuf_custom_ref>
}
 80226e6:	bf00      	nop
 80226e8:	3710      	adds	r7, #16
 80226ea:	46bd      	mov	sp, r7
 80226ec:	bd80      	pop	{r7, pc}
 80226ee:	bf00      	nop
 80226f0:	08027e64 	.word	0x08027e64
 80226f4:	08028028 	.word	0x08028028
 80226f8:	08027eac 	.word	0x08027eac
 80226fc:	08028034 	.word	0x08028034

08022700 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8022700:	b580      	push	{r7, lr}
 8022702:	b094      	sub	sp, #80	; 0x50
 8022704:	af02      	add	r7, sp, #8
 8022706:	60f8      	str	r0, [r7, #12]
 8022708:	60b9      	str	r1, [r7, #8]
 802270a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 802270c:	2300      	movs	r3, #0
 802270e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8022712:	68bb      	ldr	r3, [r7, #8]
 8022714:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8022716:	3b14      	subs	r3, #20
 8022718:	2b00      	cmp	r3, #0
 802271a:	da00      	bge.n	802271e <ip4_frag+0x1e>
 802271c:	3307      	adds	r3, #7
 802271e:	10db      	asrs	r3, r3, #3
 8022720:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8022722:	2314      	movs	r3, #20
 8022724:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8022726:	68fb      	ldr	r3, [r7, #12]
 8022728:	685b      	ldr	r3, [r3, #4]
 802272a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 802272c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802272e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8022730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022732:	781b      	ldrb	r3, [r3, #0]
 8022734:	f003 030f 	and.w	r3, r3, #15
 8022738:	b2db      	uxtb	r3, r3
 802273a:	009b      	lsls	r3, r3, #2
 802273c:	b2db      	uxtb	r3, r3
 802273e:	2b14      	cmp	r3, #20
 8022740:	d002      	beq.n	8022748 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8022742:	f06f 0305 	mvn.w	r3, #5
 8022746:	e110      	b.n	802296a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8022748:	68fb      	ldr	r3, [r7, #12]
 802274a:	895b      	ldrh	r3, [r3, #10]
 802274c:	2b13      	cmp	r3, #19
 802274e:	d809      	bhi.n	8022764 <ip4_frag+0x64>
 8022750:	4b88      	ldr	r3, [pc, #544]	; (8022974 <ip4_frag+0x274>)
 8022752:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8022756:	4988      	ldr	r1, [pc, #544]	; (8022978 <ip4_frag+0x278>)
 8022758:	4888      	ldr	r0, [pc, #544]	; (802297c <ip4_frag+0x27c>)
 802275a:	f001 f879 	bl	8023850 <iprintf>
 802275e:	f06f 0305 	mvn.w	r3, #5
 8022762:	e102      	b.n	802296a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8022764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022766:	88db      	ldrh	r3, [r3, #6]
 8022768:	b29b      	uxth	r3, r3
 802276a:	4618      	mov	r0, r3
 802276c:	f7f5 fbb0 	bl	8017ed0 <lwip_htons>
 8022770:	4603      	mov	r3, r0
 8022772:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8022774:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022776:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802277a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802277e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8022784:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8022786:	68fb      	ldr	r3, [r7, #12]
 8022788:	891b      	ldrh	r3, [r3, #8]
 802278a:	3b14      	subs	r3, #20
 802278c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8022790:	e0e1      	b.n	8022956 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8022792:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8022794:	00db      	lsls	r3, r3, #3
 8022796:	b29b      	uxth	r3, r3
 8022798:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802279c:	4293      	cmp	r3, r2
 802279e:	bf28      	it	cs
 80227a0:	4613      	movcs	r3, r2
 80227a2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80227a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80227a8:	2114      	movs	r1, #20
 80227aa:	200e      	movs	r0, #14
 80227ac:	f7f6 fc9e 	bl	80190ec <pbuf_alloc>
 80227b0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80227b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227b4:	2b00      	cmp	r3, #0
 80227b6:	f000 80d5 	beq.w	8022964 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80227ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227bc:	895b      	ldrh	r3, [r3, #10]
 80227be:	2b13      	cmp	r3, #19
 80227c0:	d806      	bhi.n	80227d0 <ip4_frag+0xd0>
 80227c2:	4b6c      	ldr	r3, [pc, #432]	; (8022974 <ip4_frag+0x274>)
 80227c4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80227c8:	496d      	ldr	r1, [pc, #436]	; (8022980 <ip4_frag+0x280>)
 80227ca:	486c      	ldr	r0, [pc, #432]	; (802297c <ip4_frag+0x27c>)
 80227cc:	f001 f840 	bl	8023850 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80227d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227d2:	685b      	ldr	r3, [r3, #4]
 80227d4:	2214      	movs	r2, #20
 80227d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80227d8:	4618      	mov	r0, r3
 80227da:	f001 f92c 	bl	8023a36 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80227de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227e0:	685b      	ldr	r3, [r3, #4]
 80227e2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80227e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80227e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80227ea:	e064      	b.n	80228b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80227ec:	68fb      	ldr	r3, [r7, #12]
 80227ee:	895a      	ldrh	r2, [r3, #10]
 80227f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80227f2:	1ad3      	subs	r3, r2, r3
 80227f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80227f6:	68fb      	ldr	r3, [r7, #12]
 80227f8:	895b      	ldrh	r3, [r3, #10]
 80227fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80227fc:	429a      	cmp	r2, r3
 80227fe:	d906      	bls.n	802280e <ip4_frag+0x10e>
 8022800:	4b5c      	ldr	r3, [pc, #368]	; (8022974 <ip4_frag+0x274>)
 8022802:	f240 322d 	movw	r2, #813	; 0x32d
 8022806:	495f      	ldr	r1, [pc, #380]	; (8022984 <ip4_frag+0x284>)
 8022808:	485c      	ldr	r0, [pc, #368]	; (802297c <ip4_frag+0x27c>)
 802280a:	f001 f821 	bl	8023850 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 802280e:	8bfa      	ldrh	r2, [r7, #30]
 8022810:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8022814:	4293      	cmp	r3, r2
 8022816:	bf28      	it	cs
 8022818:	4613      	movcs	r3, r2
 802281a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 802281e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8022822:	2b00      	cmp	r3, #0
 8022824:	d105      	bne.n	8022832 <ip4_frag+0x132>
        poff = 0;
 8022826:	2300      	movs	r3, #0
 8022828:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 802282a:	68fb      	ldr	r3, [r7, #12]
 802282c:	681b      	ldr	r3, [r3, #0]
 802282e:	60fb      	str	r3, [r7, #12]
        continue;
 8022830:	e041      	b.n	80228b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8022832:	f7ff ff0d 	bl	8022650 <ip_frag_alloc_pbuf_custom_ref>
 8022836:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8022838:	69bb      	ldr	r3, [r7, #24]
 802283a:	2b00      	cmp	r3, #0
 802283c:	d103      	bne.n	8022846 <ip4_frag+0x146>
        pbuf_free(rambuf);
 802283e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022840:	f7f6 ff38 	bl	80196b4 <pbuf_free>
        goto memerr;
 8022844:	e08f      	b.n	8022966 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8022846:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8022848:	68fb      	ldr	r3, [r7, #12]
 802284a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802284c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802284e:	4413      	add	r3, r2
 8022850:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8022854:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8022858:	9201      	str	r2, [sp, #4]
 802285a:	9300      	str	r3, [sp, #0]
 802285c:	4603      	mov	r3, r0
 802285e:	2241      	movs	r2, #65	; 0x41
 8022860:	2000      	movs	r0, #0
 8022862:	f7f6 fd6d 	bl	8019340 <pbuf_alloced_custom>
 8022866:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8022868:	697b      	ldr	r3, [r7, #20]
 802286a:	2b00      	cmp	r3, #0
 802286c:	d106      	bne.n	802287c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 802286e:	69b8      	ldr	r0, [r7, #24]
 8022870:	f7ff fef6 	bl	8022660 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8022874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022876:	f7f6 ff1d 	bl	80196b4 <pbuf_free>
        goto memerr;
 802287a:	e074      	b.n	8022966 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 802287c:	68f8      	ldr	r0, [r7, #12]
 802287e:	f7f6 ffbf 	bl	8019800 <pbuf_ref>
      pcr->original = p;
 8022882:	69bb      	ldr	r3, [r7, #24]
 8022884:	68fa      	ldr	r2, [r7, #12]
 8022886:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8022888:	69bb      	ldr	r3, [r7, #24]
 802288a:	4a3f      	ldr	r2, [pc, #252]	; (8022988 <ip4_frag+0x288>)
 802288c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802288e:	6979      	ldr	r1, [r7, #20]
 8022890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022892:	f7f6 ffdd 	bl	8019850 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8022896:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 802289a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802289e:	1ad3      	subs	r3, r2, r3
 80228a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80228a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	d004      	beq.n	80228b6 <ip4_frag+0x1b6>
        poff = 0;
 80228ac:	2300      	movs	r3, #0
 80228ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80228b0:	68fb      	ldr	r3, [r7, #12]
 80228b2:	681b      	ldr	r3, [r3, #0]
 80228b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80228b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d196      	bne.n	80227ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80228be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80228c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80228c4:	4413      	add	r3, r2
 80228c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80228c8:	68bb      	ldr	r3, [r7, #8]
 80228ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80228cc:	f1a3 0213 	sub.w	r2, r3, #19
 80228d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80228d4:	429a      	cmp	r2, r3
 80228d6:	bfcc      	ite	gt
 80228d8:	2301      	movgt	r3, #1
 80228da:	2300      	movle	r3, #0
 80228dc:	b2db      	uxtb	r3, r3
 80228de:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80228e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80228e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80228e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80228ea:	6a3b      	ldr	r3, [r7, #32]
 80228ec:	2b00      	cmp	r3, #0
 80228ee:	d002      	beq.n	80228f6 <ip4_frag+0x1f6>
 80228f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228f2:	2b00      	cmp	r3, #0
 80228f4:	d003      	beq.n	80228fe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80228f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80228f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80228fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80228fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022900:	4618      	mov	r0, r3
 8022902:	f7f5 fae5 	bl	8017ed0 <lwip_htons>
 8022906:	4603      	mov	r3, r0
 8022908:	461a      	mov	r2, r3
 802290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802290c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802290e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8022910:	3314      	adds	r3, #20
 8022912:	b29b      	uxth	r3, r3
 8022914:	4618      	mov	r0, r3
 8022916:	f7f5 fadb 	bl	8017ed0 <lwip_htons>
 802291a:	4603      	mov	r3, r0
 802291c:	461a      	mov	r2, r3
 802291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022920:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8022922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022924:	2200      	movs	r2, #0
 8022926:	729a      	strb	r2, [r3, #10]
 8022928:	2200      	movs	r2, #0
 802292a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 802292c:	68bb      	ldr	r3, [r7, #8]
 802292e:	695b      	ldr	r3, [r3, #20]
 8022930:	687a      	ldr	r2, [r7, #4]
 8022932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022934:	68b8      	ldr	r0, [r7, #8]
 8022936:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8022938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802293a:	f7f6 febb 	bl	80196b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 802293e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8022942:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8022944:	1ad3      	subs	r3, r2, r3
 8022946:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 802294a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 802294e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8022950:	4413      	add	r3, r2
 8022952:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8022956:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802295a:	2b00      	cmp	r3, #0
 802295c:	f47f af19 	bne.w	8022792 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8022960:	2300      	movs	r3, #0
 8022962:	e002      	b.n	802296a <ip4_frag+0x26a>
      goto memerr;
 8022964:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8022966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802296a:	4618      	mov	r0, r3
 802296c:	3748      	adds	r7, #72	; 0x48
 802296e:	46bd      	mov	sp, r7
 8022970:	bd80      	pop	{r7, pc}
 8022972:	bf00      	nop
 8022974:	08027e64 	.word	0x08027e64
 8022978:	08028040 	.word	0x08028040
 802297c:	08027eac 	.word	0x08027eac
 8022980:	0802805c 	.word	0x0802805c
 8022984:	0802807c 	.word	0x0802807c
 8022988:	08022699 	.word	0x08022699

0802298c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 802298c:	b580      	push	{r7, lr}
 802298e:	b086      	sub	sp, #24
 8022990:	af00      	add	r7, sp, #0
 8022992:	6078      	str	r0, [r7, #4]
 8022994:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8022996:	230e      	movs	r3, #14
 8022998:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802299a:	687b      	ldr	r3, [r7, #4]
 802299c:	895b      	ldrh	r3, [r3, #10]
 802299e:	2b0e      	cmp	r3, #14
 80229a0:	d96e      	bls.n	8022a80 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80229a2:	687b      	ldr	r3, [r7, #4]
 80229a4:	7bdb      	ldrb	r3, [r3, #15]
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d106      	bne.n	80229b8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80229aa:	683b      	ldr	r3, [r7, #0]
 80229ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80229b0:	3301      	adds	r3, #1
 80229b2:	b2da      	uxtb	r2, r3
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80229b8:	687b      	ldr	r3, [r7, #4]
 80229ba:	685b      	ldr	r3, [r3, #4]
 80229bc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80229be:	693b      	ldr	r3, [r7, #16]
 80229c0:	7b1a      	ldrb	r2, [r3, #12]
 80229c2:	7b5b      	ldrb	r3, [r3, #13]
 80229c4:	021b      	lsls	r3, r3, #8
 80229c6:	4313      	orrs	r3, r2
 80229c8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80229ca:	693b      	ldr	r3, [r7, #16]
 80229cc:	781b      	ldrb	r3, [r3, #0]
 80229ce:	f003 0301 	and.w	r3, r3, #1
 80229d2:	2b00      	cmp	r3, #0
 80229d4:	d023      	beq.n	8022a1e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80229d6:	693b      	ldr	r3, [r7, #16]
 80229d8:	781b      	ldrb	r3, [r3, #0]
 80229da:	2b01      	cmp	r3, #1
 80229dc:	d10f      	bne.n	80229fe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80229de:	693b      	ldr	r3, [r7, #16]
 80229e0:	785b      	ldrb	r3, [r3, #1]
 80229e2:	2b00      	cmp	r3, #0
 80229e4:	d11b      	bne.n	8022a1e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80229e6:	693b      	ldr	r3, [r7, #16]
 80229e8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80229ea:	2b5e      	cmp	r3, #94	; 0x5e
 80229ec:	d117      	bne.n	8022a1e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80229ee:	687b      	ldr	r3, [r7, #4]
 80229f0:	7b5b      	ldrb	r3, [r3, #13]
 80229f2:	f043 0310 	orr.w	r3, r3, #16
 80229f6:	b2da      	uxtb	r2, r3
 80229f8:	687b      	ldr	r3, [r7, #4]
 80229fa:	735a      	strb	r2, [r3, #13]
 80229fc:	e00f      	b.n	8022a1e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80229fe:	693b      	ldr	r3, [r7, #16]
 8022a00:	2206      	movs	r2, #6
 8022a02:	4928      	ldr	r1, [pc, #160]	; (8022aa4 <ethernet_input+0x118>)
 8022a04:	4618      	mov	r0, r3
 8022a06:	f000 ff56 	bl	80238b6 <memcmp>
 8022a0a:	4603      	mov	r3, r0
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	d106      	bne.n	8022a1e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8022a10:	687b      	ldr	r3, [r7, #4]
 8022a12:	7b5b      	ldrb	r3, [r3, #13]
 8022a14:	f043 0308 	orr.w	r3, r3, #8
 8022a18:	b2da      	uxtb	r2, r3
 8022a1a:	687b      	ldr	r3, [r7, #4]
 8022a1c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8022a1e:	89fb      	ldrh	r3, [r7, #14]
 8022a20:	2b08      	cmp	r3, #8
 8022a22:	d003      	beq.n	8022a2c <ethernet_input+0xa0>
 8022a24:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8022a28:	d014      	beq.n	8022a54 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8022a2a:	e032      	b.n	8022a92 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022a2c:	683b      	ldr	r3, [r7, #0]
 8022a2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022a32:	f003 0308 	and.w	r3, r3, #8
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d024      	beq.n	8022a84 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022a3a:	8afb      	ldrh	r3, [r7, #22]
 8022a3c:	4619      	mov	r1, r3
 8022a3e:	6878      	ldr	r0, [r7, #4]
 8022a40:	f7f6 fdb2 	bl	80195a8 <pbuf_remove_header>
 8022a44:	4603      	mov	r3, r0
 8022a46:	2b00      	cmp	r3, #0
 8022a48:	d11e      	bne.n	8022a88 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8022a4a:	6839      	ldr	r1, [r7, #0]
 8022a4c:	6878      	ldr	r0, [r7, #4]
 8022a4e:	f7fe ff21 	bl	8021894 <ip4_input>
      break;
 8022a52:	e013      	b.n	8022a7c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022a54:	683b      	ldr	r3, [r7, #0]
 8022a56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022a5a:	f003 0308 	and.w	r3, r3, #8
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d014      	beq.n	8022a8c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022a62:	8afb      	ldrh	r3, [r7, #22]
 8022a64:	4619      	mov	r1, r3
 8022a66:	6878      	ldr	r0, [r7, #4]
 8022a68:	f7f6 fd9e 	bl	80195a8 <pbuf_remove_header>
 8022a6c:	4603      	mov	r3, r0
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	d10e      	bne.n	8022a90 <ethernet_input+0x104>
        etharp_input(p, netif);
 8022a72:	6839      	ldr	r1, [r7, #0]
 8022a74:	6878      	ldr	r0, [r7, #4]
 8022a76:	f7fe f8c1 	bl	8020bfc <etharp_input>
      break;
 8022a7a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022a7c:	2300      	movs	r3, #0
 8022a7e:	e00c      	b.n	8022a9a <ethernet_input+0x10e>
    goto free_and_return;
 8022a80:	bf00      	nop
 8022a82:	e006      	b.n	8022a92 <ethernet_input+0x106>
        goto free_and_return;
 8022a84:	bf00      	nop
 8022a86:	e004      	b.n	8022a92 <ethernet_input+0x106>
        goto free_and_return;
 8022a88:	bf00      	nop
 8022a8a:	e002      	b.n	8022a92 <ethernet_input+0x106>
        goto free_and_return;
 8022a8c:	bf00      	nop
 8022a8e:	e000      	b.n	8022a92 <ethernet_input+0x106>
        goto free_and_return;
 8022a90:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8022a92:	6878      	ldr	r0, [r7, #4]
 8022a94:	f7f6 fe0e 	bl	80196b4 <pbuf_free>
  return ERR_OK;
 8022a98:	2300      	movs	r3, #0
}
 8022a9a:	4618      	mov	r0, r3
 8022a9c:	3718      	adds	r7, #24
 8022a9e:	46bd      	mov	sp, r7
 8022aa0:	bd80      	pop	{r7, pc}
 8022aa2:	bf00      	nop
 8022aa4:	08028270 	.word	0x08028270

08022aa8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8022aa8:	b580      	push	{r7, lr}
 8022aaa:	b086      	sub	sp, #24
 8022aac:	af00      	add	r7, sp, #0
 8022aae:	60f8      	str	r0, [r7, #12]
 8022ab0:	60b9      	str	r1, [r7, #8]
 8022ab2:	607a      	str	r2, [r7, #4]
 8022ab4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8022ab6:	8c3b      	ldrh	r3, [r7, #32]
 8022ab8:	4618      	mov	r0, r3
 8022aba:	f7f5 fa09 	bl	8017ed0 <lwip_htons>
 8022abe:	4603      	mov	r3, r0
 8022ac0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8022ac2:	210e      	movs	r1, #14
 8022ac4:	68b8      	ldr	r0, [r7, #8]
 8022ac6:	f7f6 fd5f 	bl	8019588 <pbuf_add_header>
 8022aca:	4603      	mov	r3, r0
 8022acc:	2b00      	cmp	r3, #0
 8022ace:	d125      	bne.n	8022b1c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8022ad0:	68bb      	ldr	r3, [r7, #8]
 8022ad2:	685b      	ldr	r3, [r3, #4]
 8022ad4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8022ad6:	693b      	ldr	r3, [r7, #16]
 8022ad8:	8afa      	ldrh	r2, [r7, #22]
 8022ada:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8022adc:	693b      	ldr	r3, [r7, #16]
 8022ade:	2206      	movs	r2, #6
 8022ae0:	6839      	ldr	r1, [r7, #0]
 8022ae2:	4618      	mov	r0, r3
 8022ae4:	f000 ffa7 	bl	8023a36 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8022ae8:	693b      	ldr	r3, [r7, #16]
 8022aea:	3306      	adds	r3, #6
 8022aec:	2206      	movs	r2, #6
 8022aee:	6879      	ldr	r1, [r7, #4]
 8022af0:	4618      	mov	r0, r3
 8022af2:	f000 ffa0 	bl	8023a36 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8022af6:	68fb      	ldr	r3, [r7, #12]
 8022af8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8022afc:	2b06      	cmp	r3, #6
 8022afe:	d006      	beq.n	8022b0e <ethernet_output+0x66>
 8022b00:	4b0a      	ldr	r3, [pc, #40]	; (8022b2c <ethernet_output+0x84>)
 8022b02:	f44f 7299 	mov.w	r2, #306	; 0x132
 8022b06:	490a      	ldr	r1, [pc, #40]	; (8022b30 <ethernet_output+0x88>)
 8022b08:	480a      	ldr	r0, [pc, #40]	; (8022b34 <ethernet_output+0x8c>)
 8022b0a:	f000 fea1 	bl	8023850 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8022b0e:	68fb      	ldr	r3, [r7, #12]
 8022b10:	699b      	ldr	r3, [r3, #24]
 8022b12:	68b9      	ldr	r1, [r7, #8]
 8022b14:	68f8      	ldr	r0, [r7, #12]
 8022b16:	4798      	blx	r3
 8022b18:	4603      	mov	r3, r0
 8022b1a:	e002      	b.n	8022b22 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8022b1c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8022b1e:	f06f 0301 	mvn.w	r3, #1
}
 8022b22:	4618      	mov	r0, r3
 8022b24:	3718      	adds	r7, #24
 8022b26:	46bd      	mov	sp, r7
 8022b28:	bd80      	pop	{r7, pc}
 8022b2a:	bf00      	nop
 8022b2c:	0802808c 	.word	0x0802808c
 8022b30:	080280c4 	.word	0x080280c4
 8022b34:	080280f8 	.word	0x080280f8

08022b38 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8022b38:	b580      	push	{r7, lr}
 8022b3a:	b086      	sub	sp, #24
 8022b3c:	af00      	add	r7, sp, #0
 8022b3e:	6078      	str	r0, [r7, #4]
 8022b40:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8022b42:	683b      	ldr	r3, [r7, #0]
 8022b44:	60bb      	str	r3, [r7, #8]
 8022b46:	2304      	movs	r3, #4
 8022b48:	60fb      	str	r3, [r7, #12]
 8022b4a:	2300      	movs	r3, #0
 8022b4c:	613b      	str	r3, [r7, #16]
 8022b4e:	2300      	movs	r3, #0
 8022b50:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8022b52:	f107 0308 	add.w	r3, r7, #8
 8022b56:	2100      	movs	r1, #0
 8022b58:	4618      	mov	r0, r3
 8022b5a:	f7f0 fda0 	bl	801369e <osMessageCreate>
 8022b5e:	4602      	mov	r2, r0
 8022b60:	687b      	ldr	r3, [r7, #4]
 8022b62:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8022b64:	687b      	ldr	r3, [r7, #4]
 8022b66:	681b      	ldr	r3, [r3, #0]
 8022b68:	2b00      	cmp	r3, #0
 8022b6a:	d102      	bne.n	8022b72 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8022b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022b70:	e000      	b.n	8022b74 <sys_mbox_new+0x3c>

  return ERR_OK;
 8022b72:	2300      	movs	r3, #0
}
 8022b74:	4618      	mov	r0, r3
 8022b76:	3718      	adds	r7, #24
 8022b78:	46bd      	mov	sp, r7
 8022b7a:	bd80      	pop	{r7, pc}

08022b7c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8022b7c:	b580      	push	{r7, lr}
 8022b7e:	b082      	sub	sp, #8
 8022b80:	af00      	add	r7, sp, #0
 8022b82:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8022b84:	687b      	ldr	r3, [r7, #4]
 8022b86:	681b      	ldr	r3, [r3, #0]
 8022b88:	4618      	mov	r0, r3
 8022b8a:	f7f0 fe65 	bl	8013858 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8022b8e:	687b      	ldr	r3, [r7, #4]
 8022b90:	681b      	ldr	r3, [r3, #0]
 8022b92:	4618      	mov	r0, r3
 8022b94:	f7f0 fe76 	bl	8013884 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8022b98:	bf00      	nop
 8022b9a:	3708      	adds	r7, #8
 8022b9c:	46bd      	mov	sp, r7
 8022b9e:	bd80      	pop	{r7, pc}

08022ba0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022ba0:	b580      	push	{r7, lr}
 8022ba2:	b084      	sub	sp, #16
 8022ba4:	af00      	add	r7, sp, #0
 8022ba6:	6078      	str	r0, [r7, #4]
 8022ba8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8022baa:	687b      	ldr	r3, [r7, #4]
 8022bac:	681b      	ldr	r3, [r3, #0]
 8022bae:	6839      	ldr	r1, [r7, #0]
 8022bb0:	2200      	movs	r2, #0
 8022bb2:	4618      	mov	r0, r3
 8022bb4:	f7f0 fd9c 	bl	80136f0 <osMessagePut>
 8022bb8:	4603      	mov	r3, r0
 8022bba:	2b00      	cmp	r3, #0
 8022bbc:	d102      	bne.n	8022bc4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8022bbe:	2300      	movs	r3, #0
 8022bc0:	73fb      	strb	r3, [r7, #15]
 8022bc2:	e001      	b.n	8022bc8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8022bc4:	23ff      	movs	r3, #255	; 0xff
 8022bc6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8022bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8022bcc:	4618      	mov	r0, r3
 8022bce:	3710      	adds	r7, #16
 8022bd0:	46bd      	mov	sp, r7
 8022bd2:	bd80      	pop	{r7, pc}

08022bd4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8022bd4:	b580      	push	{r7, lr}
 8022bd6:	b08c      	sub	sp, #48	; 0x30
 8022bd8:	af00      	add	r7, sp, #0
 8022bda:	61f8      	str	r0, [r7, #28]
 8022bdc:	61b9      	str	r1, [r7, #24]
 8022bde:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8022be0:	f7f0 fb6e 	bl	80132c0 <osKernelSysTick>
 8022be4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8022be6:	697b      	ldr	r3, [r7, #20]
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	d017      	beq.n	8022c1c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8022bec:	69fb      	ldr	r3, [r7, #28]
 8022bee:	6819      	ldr	r1, [r3, #0]
 8022bf0:	f107 0320 	add.w	r3, r7, #32
 8022bf4:	697a      	ldr	r2, [r7, #20]
 8022bf6:	4618      	mov	r0, r3
 8022bf8:	f7f0 fdba 	bl	8013770 <osMessageGet>

    if(event.status == osEventMessage)
 8022bfc:	6a3b      	ldr	r3, [r7, #32]
 8022bfe:	2b10      	cmp	r3, #16
 8022c00:	d109      	bne.n	8022c16 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8022c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022c04:	461a      	mov	r2, r3
 8022c06:	69bb      	ldr	r3, [r7, #24]
 8022c08:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8022c0a:	f7f0 fb59 	bl	80132c0 <osKernelSysTick>
 8022c0e:	4602      	mov	r2, r0
 8022c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c12:	1ad3      	subs	r3, r2, r3
 8022c14:	e019      	b.n	8022c4a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022c1a:	e016      	b.n	8022c4a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8022c1c:	69fb      	ldr	r3, [r7, #28]
 8022c1e:	6819      	ldr	r1, [r3, #0]
 8022c20:	463b      	mov	r3, r7
 8022c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022c26:	4618      	mov	r0, r3
 8022c28:	f7f0 fda2 	bl	8013770 <osMessageGet>
 8022c2c:	f107 0320 	add.w	r3, r7, #32
 8022c30:	463a      	mov	r2, r7
 8022c32:	ca07      	ldmia	r2, {r0, r1, r2}
 8022c34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8022c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022c3a:	461a      	mov	r2, r3
 8022c3c:	69bb      	ldr	r3, [r7, #24]
 8022c3e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8022c40:	f7f0 fb3e 	bl	80132c0 <osKernelSysTick>
 8022c44:	4602      	mov	r2, r0
 8022c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c48:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8022c4a:	4618      	mov	r0, r3
 8022c4c:	3730      	adds	r7, #48	; 0x30
 8022c4e:	46bd      	mov	sp, r7
 8022c50:	bd80      	pop	{r7, pc}

08022c52 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8022c52:	b480      	push	{r7}
 8022c54:	b083      	sub	sp, #12
 8022c56:	af00      	add	r7, sp, #0
 8022c58:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	681b      	ldr	r3, [r3, #0]
 8022c5e:	2b00      	cmp	r3, #0
 8022c60:	d101      	bne.n	8022c66 <sys_mbox_valid+0x14>
    return 0;
 8022c62:	2300      	movs	r3, #0
 8022c64:	e000      	b.n	8022c68 <sys_mbox_valid+0x16>
  else
    return 1;
 8022c66:	2301      	movs	r3, #1
}
 8022c68:	4618      	mov	r0, r3
 8022c6a:	370c      	adds	r7, #12
 8022c6c:	46bd      	mov	sp, r7
 8022c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c72:	4770      	bx	lr

08022c74 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8022c74:	b480      	push	{r7}
 8022c76:	b083      	sub	sp, #12
 8022c78:	af00      	add	r7, sp, #0
 8022c7a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8022c7c:	687b      	ldr	r3, [r7, #4]
 8022c7e:	2200      	movs	r2, #0
 8022c80:	601a      	str	r2, [r3, #0]
}
 8022c82:	bf00      	nop
 8022c84:	370c      	adds	r7, #12
 8022c86:	46bd      	mov	sp, r7
 8022c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c8c:	4770      	bx	lr

08022c8e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8022c8e:	b580      	push	{r7, lr}
 8022c90:	b084      	sub	sp, #16
 8022c92:	af00      	add	r7, sp, #0
 8022c94:	6078      	str	r0, [r7, #4]
 8022c96:	460b      	mov	r3, r1
 8022c98:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8022c9a:	2300      	movs	r3, #0
 8022c9c:	60bb      	str	r3, [r7, #8]
 8022c9e:	2300      	movs	r3, #0
 8022ca0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8022ca2:	f107 0308 	add.w	r3, r7, #8
 8022ca6:	2101      	movs	r1, #1
 8022ca8:	4618      	mov	r0, r3
 8022caa:	f7f0 fc21 	bl	80134f0 <osSemaphoreCreate>
 8022cae:	4602      	mov	r2, r0
 8022cb0:	687b      	ldr	r3, [r7, #4]
 8022cb2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8022cb4:	687b      	ldr	r3, [r7, #4]
 8022cb6:	681b      	ldr	r3, [r3, #0]
 8022cb8:	2b00      	cmp	r3, #0
 8022cba:	d102      	bne.n	8022cc2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8022cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022cc0:	e009      	b.n	8022cd6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8022cc2:	78fb      	ldrb	r3, [r7, #3]
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	d105      	bne.n	8022cd4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8022cc8:	687b      	ldr	r3, [r7, #4]
 8022cca:	681b      	ldr	r3, [r3, #0]
 8022ccc:	2100      	movs	r1, #0
 8022cce:	4618      	mov	r0, r3
 8022cd0:	f7f0 fc4e 	bl	8013570 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8022cd4:	2300      	movs	r3, #0
}
 8022cd6:	4618      	mov	r0, r3
 8022cd8:	3710      	adds	r7, #16
 8022cda:	46bd      	mov	sp, r7
 8022cdc:	bd80      	pop	{r7, pc}

08022cde <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8022cde:	b580      	push	{r7, lr}
 8022ce0:	b084      	sub	sp, #16
 8022ce2:	af00      	add	r7, sp, #0
 8022ce4:	6078      	str	r0, [r7, #4]
 8022ce6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8022ce8:	f7f0 faea 	bl	80132c0 <osKernelSysTick>
 8022cec:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8022cee:	683b      	ldr	r3, [r7, #0]
 8022cf0:	2b00      	cmp	r3, #0
 8022cf2:	d011      	beq.n	8022d18 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	681b      	ldr	r3, [r3, #0]
 8022cf8:	6839      	ldr	r1, [r7, #0]
 8022cfa:	4618      	mov	r0, r3
 8022cfc:	f7f0 fc38 	bl	8013570 <osSemaphoreWait>
 8022d00:	4603      	mov	r3, r0
 8022d02:	2b00      	cmp	r3, #0
 8022d04:	d105      	bne.n	8022d12 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8022d06:	f7f0 fadb 	bl	80132c0 <osKernelSysTick>
 8022d0a:	4602      	mov	r2, r0
 8022d0c:	68fb      	ldr	r3, [r7, #12]
 8022d0e:	1ad3      	subs	r3, r2, r3
 8022d10:	e012      	b.n	8022d38 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022d16:	e00f      	b.n	8022d38 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8022d18:	bf00      	nop
 8022d1a:	687b      	ldr	r3, [r7, #4]
 8022d1c:	681b      	ldr	r3, [r3, #0]
 8022d1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022d22:	4618      	mov	r0, r3
 8022d24:	f7f0 fc24 	bl	8013570 <osSemaphoreWait>
 8022d28:	4603      	mov	r3, r0
 8022d2a:	2b00      	cmp	r3, #0
 8022d2c:	d1f5      	bne.n	8022d1a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8022d2e:	f7f0 fac7 	bl	80132c0 <osKernelSysTick>
 8022d32:	4602      	mov	r2, r0
 8022d34:	68fb      	ldr	r3, [r7, #12]
 8022d36:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8022d38:	4618      	mov	r0, r3
 8022d3a:	3710      	adds	r7, #16
 8022d3c:	46bd      	mov	sp, r7
 8022d3e:	bd80      	pop	{r7, pc}

08022d40 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8022d40:	b580      	push	{r7, lr}
 8022d42:	b082      	sub	sp, #8
 8022d44:	af00      	add	r7, sp, #0
 8022d46:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8022d48:	687b      	ldr	r3, [r7, #4]
 8022d4a:	681b      	ldr	r3, [r3, #0]
 8022d4c:	4618      	mov	r0, r3
 8022d4e:	f7f0 fc5d 	bl	801360c <osSemaphoreRelease>
}
 8022d52:	bf00      	nop
 8022d54:	3708      	adds	r7, #8
 8022d56:	46bd      	mov	sp, r7
 8022d58:	bd80      	pop	{r7, pc}

08022d5a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8022d5a:	b580      	push	{r7, lr}
 8022d5c:	b082      	sub	sp, #8
 8022d5e:	af00      	add	r7, sp, #0
 8022d60:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	681b      	ldr	r3, [r3, #0]
 8022d66:	4618      	mov	r0, r3
 8022d68:	f7f0 fc86 	bl	8013678 <osSemaphoreDelete>
}
 8022d6c:	bf00      	nop
 8022d6e:	3708      	adds	r7, #8
 8022d70:	46bd      	mov	sp, r7
 8022d72:	bd80      	pop	{r7, pc}

08022d74 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8022d74:	b480      	push	{r7}
 8022d76:	b083      	sub	sp, #12
 8022d78:	af00      	add	r7, sp, #0
 8022d7a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8022d7c:	687b      	ldr	r3, [r7, #4]
 8022d7e:	681b      	ldr	r3, [r3, #0]
 8022d80:	2b00      	cmp	r3, #0
 8022d82:	d101      	bne.n	8022d88 <sys_sem_valid+0x14>
    return 0;
 8022d84:	2300      	movs	r3, #0
 8022d86:	e000      	b.n	8022d8a <sys_sem_valid+0x16>
  else
    return 1;
 8022d88:	2301      	movs	r3, #1
}
 8022d8a:	4618      	mov	r0, r3
 8022d8c:	370c      	adds	r7, #12
 8022d8e:	46bd      	mov	sp, r7
 8022d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d94:	4770      	bx	lr
	...

08022d98 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8022d98:	b580      	push	{r7, lr}
 8022d9a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8022d9c:	4803      	ldr	r0, [pc, #12]	; (8022dac <sys_init+0x14>)
 8022d9e:	f7f0 fb0b 	bl	80133b8 <osMutexCreate>
 8022da2:	4603      	mov	r3, r0
 8022da4:	4a02      	ldr	r2, [pc, #8]	; (8022db0 <sys_init+0x18>)
 8022da6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8022da8:	bf00      	nop
 8022daa:	bd80      	pop	{r7, pc}
 8022dac:	08028280 	.word	0x08028280
 8022db0:	20011474 	.word	0x20011474

08022db4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8022db4:	b580      	push	{r7, lr}
 8022db6:	b084      	sub	sp, #16
 8022db8:	af00      	add	r7, sp, #0
 8022dba:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8022dbc:	2300      	movs	r3, #0
 8022dbe:	60bb      	str	r3, [r7, #8]
 8022dc0:	2300      	movs	r3, #0
 8022dc2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8022dc4:	f107 0308 	add.w	r3, r7, #8
 8022dc8:	4618      	mov	r0, r3
 8022dca:	f7f0 faf5 	bl	80133b8 <osMutexCreate>
 8022dce:	4602      	mov	r2, r0
 8022dd0:	687b      	ldr	r3, [r7, #4]
 8022dd2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8022dd4:	687b      	ldr	r3, [r7, #4]
 8022dd6:	681b      	ldr	r3, [r3, #0]
 8022dd8:	2b00      	cmp	r3, #0
 8022dda:	d102      	bne.n	8022de2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8022ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022de0:	e000      	b.n	8022de4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8022de2:	2300      	movs	r3, #0
}
 8022de4:	4618      	mov	r0, r3
 8022de6:	3710      	adds	r7, #16
 8022de8:	46bd      	mov	sp, r7
 8022dea:	bd80      	pop	{r7, pc}

08022dec <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8022dec:	b580      	push	{r7, lr}
 8022dee:	b082      	sub	sp, #8
 8022df0:	af00      	add	r7, sp, #0
 8022df2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	681b      	ldr	r3, [r3, #0]
 8022df8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022dfc:	4618      	mov	r0, r3
 8022dfe:	f7f0 faf3 	bl	80133e8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8022e02:	bf00      	nop
 8022e04:	3708      	adds	r7, #8
 8022e06:	46bd      	mov	sp, r7
 8022e08:	bd80      	pop	{r7, pc}

08022e0a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8022e0a:	b580      	push	{r7, lr}
 8022e0c:	b082      	sub	sp, #8
 8022e0e:	af00      	add	r7, sp, #0
 8022e10:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8022e12:	687b      	ldr	r3, [r7, #4]
 8022e14:	681b      	ldr	r3, [r3, #0]
 8022e16:	4618      	mov	r0, r3
 8022e18:	f7f0 fb34 	bl	8013484 <osMutexRelease>
}
 8022e1c:	bf00      	nop
 8022e1e:	3708      	adds	r7, #8
 8022e20:	46bd      	mov	sp, r7
 8022e22:	bd80      	pop	{r7, pc}

08022e24 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8022e24:	b580      	push	{r7, lr}
 8022e26:	b08c      	sub	sp, #48	; 0x30
 8022e28:	af00      	add	r7, sp, #0
 8022e2a:	60f8      	str	r0, [r7, #12]
 8022e2c:	60b9      	str	r1, [r7, #8]
 8022e2e:	607a      	str	r2, [r7, #4]
 8022e30:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8022e32:	f107 0314 	add.w	r3, r7, #20
 8022e36:	2200      	movs	r2, #0
 8022e38:	601a      	str	r2, [r3, #0]
 8022e3a:	605a      	str	r2, [r3, #4]
 8022e3c:	609a      	str	r2, [r3, #8]
 8022e3e:	60da      	str	r2, [r3, #12]
 8022e40:	611a      	str	r2, [r3, #16]
 8022e42:	615a      	str	r2, [r3, #20]
 8022e44:	619a      	str	r2, [r3, #24]
 8022e46:	68fb      	ldr	r3, [r7, #12]
 8022e48:	617b      	str	r3, [r7, #20]
 8022e4a:	68bb      	ldr	r3, [r7, #8]
 8022e4c:	61bb      	str	r3, [r7, #24]
 8022e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022e50:	b21b      	sxth	r3, r3
 8022e52:	83bb      	strh	r3, [r7, #28]
 8022e54:	683b      	ldr	r3, [r7, #0]
 8022e56:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8022e58:	f107 0314 	add.w	r3, r7, #20
 8022e5c:	6879      	ldr	r1, [r7, #4]
 8022e5e:	4618      	mov	r0, r3
 8022e60:	f7f0 fa3e 	bl	80132e0 <osThreadCreate>
 8022e64:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8022e66:	4618      	mov	r0, r3
 8022e68:	3730      	adds	r7, #48	; 0x30
 8022e6a:	46bd      	mov	sp, r7
 8022e6c:	bd80      	pop	{r7, pc}
	...

08022e70 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8022e70:	b580      	push	{r7, lr}
 8022e72:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8022e74:	4b04      	ldr	r3, [pc, #16]	; (8022e88 <sys_arch_protect+0x18>)
 8022e76:	681b      	ldr	r3, [r3, #0]
 8022e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022e7c:	4618      	mov	r0, r3
 8022e7e:	f7f0 fab3 	bl	80133e8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8022e82:	2301      	movs	r3, #1
}
 8022e84:	4618      	mov	r0, r3
 8022e86:	bd80      	pop	{r7, pc}
 8022e88:	20011474 	.word	0x20011474

08022e8c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8022e8c:	b580      	push	{r7, lr}
 8022e8e:	b082      	sub	sp, #8
 8022e90:	af00      	add	r7, sp, #0
 8022e92:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8022e94:	4b04      	ldr	r3, [pc, #16]	; (8022ea8 <sys_arch_unprotect+0x1c>)
 8022e96:	681b      	ldr	r3, [r3, #0]
 8022e98:	4618      	mov	r0, r3
 8022e9a:	f7f0 faf3 	bl	8013484 <osMutexRelease>
}
 8022e9e:	bf00      	nop
 8022ea0:	3708      	adds	r7, #8
 8022ea2:	46bd      	mov	sp, r7
 8022ea4:	bd80      	pop	{r7, pc}
 8022ea6:	bf00      	nop
 8022ea8:	20011474 	.word	0x20011474

08022eac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8022eac:	b580      	push	{r7, lr}
 8022eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8022eb0:	2201      	movs	r2, #1
 8022eb2:	490e      	ldr	r1, [pc, #56]	; (8022eec <MX_USB_HOST_Init+0x40>)
 8022eb4:	480e      	ldr	r0, [pc, #56]	; (8022ef0 <MX_USB_HOST_Init+0x44>)
 8022eb6:	f7ee faeb 	bl	8011490 <USBH_Init>
 8022eba:	4603      	mov	r3, r0
 8022ebc:	2b00      	cmp	r3, #0
 8022ebe:	d001      	beq.n	8022ec4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8022ec0:	f7df f868 	bl	8001f94 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8022ec4:	490b      	ldr	r1, [pc, #44]	; (8022ef4 <MX_USB_HOST_Init+0x48>)
 8022ec6:	480a      	ldr	r0, [pc, #40]	; (8022ef0 <MX_USB_HOST_Init+0x44>)
 8022ec8:	f7ee fbb7 	bl	801163a <USBH_RegisterClass>
 8022ecc:	4603      	mov	r3, r0
 8022ece:	2b00      	cmp	r3, #0
 8022ed0:	d001      	beq.n	8022ed6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8022ed2:	f7df f85f 	bl	8001f94 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8022ed6:	4806      	ldr	r0, [pc, #24]	; (8022ef0 <MX_USB_HOST_Init+0x44>)
 8022ed8:	f7ee fc3b 	bl	8011752 <USBH_Start>
 8022edc:	4603      	mov	r3, r0
 8022ede:	2b00      	cmp	r3, #0
 8022ee0:	d001      	beq.n	8022ee6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8022ee2:	f7df f857 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8022ee6:	bf00      	nop
 8022ee8:	bd80      	pop	{r7, pc}
 8022eea:	bf00      	nop
 8022eec:	08022ef9 	.word	0x08022ef9
 8022ef0:	20011478 	.word	0x20011478
 8022ef4:	20000020 	.word	0x20000020

08022ef8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8022ef8:	b480      	push	{r7}
 8022efa:	b083      	sub	sp, #12
 8022efc:	af00      	add	r7, sp, #0
 8022efe:	6078      	str	r0, [r7, #4]
 8022f00:	460b      	mov	r3, r1
 8022f02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8022f04:	78fb      	ldrb	r3, [r7, #3]
 8022f06:	3b01      	subs	r3, #1
 8022f08:	2b04      	cmp	r3, #4
 8022f0a:	d819      	bhi.n	8022f40 <USBH_UserProcess+0x48>
 8022f0c:	a201      	add	r2, pc, #4	; (adr r2, 8022f14 <USBH_UserProcess+0x1c>)
 8022f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022f12:	bf00      	nop
 8022f14:	08022f41 	.word	0x08022f41
 8022f18:	08022f31 	.word	0x08022f31
 8022f1c:	08022f41 	.word	0x08022f41
 8022f20:	08022f39 	.word	0x08022f39
 8022f24:	08022f29 	.word	0x08022f29
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8022f28:	4b09      	ldr	r3, [pc, #36]	; (8022f50 <USBH_UserProcess+0x58>)
 8022f2a:	2203      	movs	r2, #3
 8022f2c:	701a      	strb	r2, [r3, #0]
  break;
 8022f2e:	e008      	b.n	8022f42 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8022f30:	4b07      	ldr	r3, [pc, #28]	; (8022f50 <USBH_UserProcess+0x58>)
 8022f32:	2202      	movs	r2, #2
 8022f34:	701a      	strb	r2, [r3, #0]
  break;
 8022f36:	e004      	b.n	8022f42 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8022f38:	4b05      	ldr	r3, [pc, #20]	; (8022f50 <USBH_UserProcess+0x58>)
 8022f3a:	2201      	movs	r2, #1
 8022f3c:	701a      	strb	r2, [r3, #0]
  break;
 8022f3e:	e000      	b.n	8022f42 <USBH_UserProcess+0x4a>

  default:
  break;
 8022f40:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8022f42:	bf00      	nop
 8022f44:	370c      	adds	r7, #12
 8022f46:	46bd      	mov	sp, r7
 8022f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f4c:	4770      	bx	lr
 8022f4e:	bf00      	nop
 8022f50:	2001185c 	.word	0x2001185c

08022f54 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8022f54:	b580      	push	{r7, lr}
 8022f56:	b08a      	sub	sp, #40	; 0x28
 8022f58:	af00      	add	r7, sp, #0
 8022f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022f5c:	f107 0314 	add.w	r3, r7, #20
 8022f60:	2200      	movs	r2, #0
 8022f62:	601a      	str	r2, [r3, #0]
 8022f64:	605a      	str	r2, [r3, #4]
 8022f66:	609a      	str	r2, [r3, #8]
 8022f68:	60da      	str	r2, [r3, #12]
 8022f6a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8022f6c:	687b      	ldr	r3, [r7, #4]
 8022f6e:	681b      	ldr	r3, [r3, #0]
 8022f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8022f74:	d13c      	bne.n	8022ff0 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022f76:	4b20      	ldr	r3, [pc, #128]	; (8022ff8 <HAL_HCD_MspInit+0xa4>)
 8022f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f7a:	4a1f      	ldr	r2, [pc, #124]	; (8022ff8 <HAL_HCD_MspInit+0xa4>)
 8022f7c:	f043 0301 	orr.w	r3, r3, #1
 8022f80:	6313      	str	r3, [r2, #48]	; 0x30
 8022f82:	4b1d      	ldr	r3, [pc, #116]	; (8022ff8 <HAL_HCD_MspInit+0xa4>)
 8022f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f86:	f003 0301 	and.w	r3, r3, #1
 8022f8a:	613b      	str	r3, [r7, #16]
 8022f8c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8022f8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8022f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022f94:	2302      	movs	r3, #2
 8022f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022f98:	2300      	movs	r3, #0
 8022f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022f9c:	2303      	movs	r3, #3
 8022f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8022fa0:	230a      	movs	r3, #10
 8022fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022fa4:	f107 0314 	add.w	r3, r7, #20
 8022fa8:	4619      	mov	r1, r3
 8022faa:	4814      	ldr	r0, [pc, #80]	; (8022ffc <HAL_HCD_MspInit+0xa8>)
 8022fac:	f7e2 fdd4 	bl	8005b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022fb0:	4b11      	ldr	r3, [pc, #68]	; (8022ff8 <HAL_HCD_MspInit+0xa4>)
 8022fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022fb4:	4a10      	ldr	r2, [pc, #64]	; (8022ff8 <HAL_HCD_MspInit+0xa4>)
 8022fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022fba:	6353      	str	r3, [r2, #52]	; 0x34
 8022fbc:	4b0e      	ldr	r3, [pc, #56]	; (8022ff8 <HAL_HCD_MspInit+0xa4>)
 8022fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022fc4:	60fb      	str	r3, [r7, #12]
 8022fc6:	68fb      	ldr	r3, [r7, #12]
 8022fc8:	4b0b      	ldr	r3, [pc, #44]	; (8022ff8 <HAL_HCD_MspInit+0xa4>)
 8022fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022fcc:	4a0a      	ldr	r2, [pc, #40]	; (8022ff8 <HAL_HCD_MspInit+0xa4>)
 8022fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8022fd4:	4b08      	ldr	r3, [pc, #32]	; (8022ff8 <HAL_HCD_MspInit+0xa4>)
 8022fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022fdc:	60bb      	str	r3, [r7, #8]
 8022fde:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8022fe0:	2200      	movs	r2, #0
 8022fe2:	2105      	movs	r1, #5
 8022fe4:	2043      	movs	r0, #67	; 0x43
 8022fe6:	f7e0 fec3 	bl	8003d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8022fea:	2043      	movs	r0, #67	; 0x43
 8022fec:	f7e0 fedc 	bl	8003da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8022ff0:	bf00      	nop
 8022ff2:	3728      	adds	r7, #40	; 0x28
 8022ff4:	46bd      	mov	sp, r7
 8022ff6:	bd80      	pop	{r7, pc}
 8022ff8:	40023800 	.word	0x40023800
 8022ffc:	40020000 	.word	0x40020000

08023000 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8023000:	b580      	push	{r7, lr}
 8023002:	b082      	sub	sp, #8
 8023004:	af00      	add	r7, sp, #0
 8023006:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8023008:	687b      	ldr	r3, [r7, #4]
 802300a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802300e:	4618      	mov	r0, r3
 8023010:	f7ef f857 	bl	80120c2 <USBH_LL_IncTimer>
}
 8023014:	bf00      	nop
 8023016:	3708      	adds	r7, #8
 8023018:	46bd      	mov	sp, r7
 802301a:	bd80      	pop	{r7, pc}

0802301c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 802301c:	b580      	push	{r7, lr}
 802301e:	b082      	sub	sp, #8
 8023020:	af00      	add	r7, sp, #0
 8023022:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8023024:	687b      	ldr	r3, [r7, #4]
 8023026:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802302a:	4618      	mov	r0, r3
 802302c:	f7ef f89b 	bl	8012166 <USBH_LL_Connect>
}
 8023030:	bf00      	nop
 8023032:	3708      	adds	r7, #8
 8023034:	46bd      	mov	sp, r7
 8023036:	bd80      	pop	{r7, pc}

08023038 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8023038:	b580      	push	{r7, lr}
 802303a:	b082      	sub	sp, #8
 802303c:	af00      	add	r7, sp, #0
 802303e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8023040:	687b      	ldr	r3, [r7, #4]
 8023042:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8023046:	4618      	mov	r0, r3
 8023048:	f7ef f8b0 	bl	80121ac <USBH_LL_Disconnect>
}
 802304c:	bf00      	nop
 802304e:	3708      	adds	r7, #8
 8023050:	46bd      	mov	sp, r7
 8023052:	bd80      	pop	{r7, pc}

08023054 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8023054:	b580      	push	{r7, lr}
 8023056:	b082      	sub	sp, #8
 8023058:	af00      	add	r7, sp, #0
 802305a:	6078      	str	r0, [r7, #4]
 802305c:	460b      	mov	r3, r1
 802305e:	70fb      	strb	r3, [r7, #3]
 8023060:	4613      	mov	r3, r2
 8023062:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8023064:	687b      	ldr	r3, [r7, #4]
 8023066:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802306a:	4618      	mov	r0, r3
 802306c:	f7ef f8e5 	bl	801223a <USBH_LL_NotifyURBChange>
#endif
}
 8023070:	bf00      	nop
 8023072:	3708      	adds	r7, #8
 8023074:	46bd      	mov	sp, r7
 8023076:	bd80      	pop	{r7, pc}

08023078 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8023078:	b580      	push	{r7, lr}
 802307a:	b082      	sub	sp, #8
 802307c:	af00      	add	r7, sp, #0
 802307e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8023080:	687b      	ldr	r3, [r7, #4]
 8023082:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8023086:	4618      	mov	r0, r3
 8023088:	f7ef f845 	bl	8012116 <USBH_LL_PortEnabled>
}
 802308c:	bf00      	nop
 802308e:	3708      	adds	r7, #8
 8023090:	46bd      	mov	sp, r7
 8023092:	bd80      	pop	{r7, pc}

08023094 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8023094:	b580      	push	{r7, lr}
 8023096:	b082      	sub	sp, #8
 8023098:	af00      	add	r7, sp, #0
 802309a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802309c:	687b      	ldr	r3, [r7, #4]
 802309e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80230a2:	4618      	mov	r0, r3
 80230a4:	f7ef f851 	bl	801214a <USBH_LL_PortDisabled>
}
 80230a8:	bf00      	nop
 80230aa:	3708      	adds	r7, #8
 80230ac:	46bd      	mov	sp, r7
 80230ae:	bd80      	pop	{r7, pc}

080230b0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80230b0:	b580      	push	{r7, lr}
 80230b2:	b082      	sub	sp, #8
 80230b4:	af00      	add	r7, sp, #0
 80230b6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80230b8:	687b      	ldr	r3, [r7, #4]
 80230ba:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80230be:	2b01      	cmp	r3, #1
 80230c0:	d12a      	bne.n	8023118 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80230c2:	4a18      	ldr	r2, [pc, #96]	; (8023124 <USBH_LL_Init+0x74>)
 80230c4:	687b      	ldr	r3, [r7, #4]
 80230c6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80230ca:	687b      	ldr	r3, [r7, #4]
 80230cc:	4a15      	ldr	r2, [pc, #84]	; (8023124 <USBH_LL_Init+0x74>)
 80230ce:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80230d2:	4b14      	ldr	r3, [pc, #80]	; (8023124 <USBH_LL_Init+0x74>)
 80230d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80230d8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80230da:	4b12      	ldr	r3, [pc, #72]	; (8023124 <USBH_LL_Init+0x74>)
 80230dc:	2208      	movs	r2, #8
 80230de:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80230e0:	4b10      	ldr	r3, [pc, #64]	; (8023124 <USBH_LL_Init+0x74>)
 80230e2:	2201      	movs	r2, #1
 80230e4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80230e6:	4b0f      	ldr	r3, [pc, #60]	; (8023124 <USBH_LL_Init+0x74>)
 80230e8:	2200      	movs	r2, #0
 80230ea:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80230ec:	4b0d      	ldr	r3, [pc, #52]	; (8023124 <USBH_LL_Init+0x74>)
 80230ee:	2202      	movs	r2, #2
 80230f0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80230f2:	4b0c      	ldr	r3, [pc, #48]	; (8023124 <USBH_LL_Init+0x74>)
 80230f4:	2200      	movs	r2, #0
 80230f6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80230f8:	480a      	ldr	r0, [pc, #40]	; (8023124 <USBH_LL_Init+0x74>)
 80230fa:	f7e2 ff0a 	bl	8005f12 <HAL_HCD_Init>
 80230fe:	4603      	mov	r3, r0
 8023100:	2b00      	cmp	r3, #0
 8023102:	d001      	beq.n	8023108 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8023104:	f7de ff46 	bl	8001f94 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8023108:	4806      	ldr	r0, [pc, #24]	; (8023124 <USBH_LL_Init+0x74>)
 802310a:	f7e3 faee 	bl	80066ea <HAL_HCD_GetCurrentFrame>
 802310e:	4603      	mov	r3, r0
 8023110:	4619      	mov	r1, r3
 8023112:	6878      	ldr	r0, [r7, #4]
 8023114:	f7ee ffc6 	bl	80120a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8023118:	2300      	movs	r3, #0
}
 802311a:	4618      	mov	r0, r3
 802311c:	3708      	adds	r7, #8
 802311e:	46bd      	mov	sp, r7
 8023120:	bd80      	pop	{r7, pc}
 8023122:	bf00      	nop
 8023124:	20011860 	.word	0x20011860

08023128 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8023128:	b580      	push	{r7, lr}
 802312a:	b084      	sub	sp, #16
 802312c:	af00      	add	r7, sp, #0
 802312e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023130:	2300      	movs	r3, #0
 8023132:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023134:	2300      	movs	r3, #0
 8023136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8023138:	687b      	ldr	r3, [r7, #4]
 802313a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802313e:	4618      	mov	r0, r3
 8023140:	f7e3 fa5d 	bl	80065fe <HAL_HCD_Start>
 8023144:	4603      	mov	r3, r0
 8023146:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8023148:	7bfb      	ldrb	r3, [r7, #15]
 802314a:	4618      	mov	r0, r3
 802314c:	f000 f95c 	bl	8023408 <USBH_Get_USB_Status>
 8023150:	4603      	mov	r3, r0
 8023152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023154:	7bbb      	ldrb	r3, [r7, #14]
}
 8023156:	4618      	mov	r0, r3
 8023158:	3710      	adds	r7, #16
 802315a:	46bd      	mov	sp, r7
 802315c:	bd80      	pop	{r7, pc}

0802315e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802315e:	b580      	push	{r7, lr}
 8023160:	b084      	sub	sp, #16
 8023162:	af00      	add	r7, sp, #0
 8023164:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023166:	2300      	movs	r3, #0
 8023168:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802316a:	2300      	movs	r3, #0
 802316c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802316e:	687b      	ldr	r3, [r7, #4]
 8023170:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8023174:	4618      	mov	r0, r3
 8023176:	f7e3 fa65 	bl	8006644 <HAL_HCD_Stop>
 802317a:	4603      	mov	r3, r0
 802317c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802317e:	7bfb      	ldrb	r3, [r7, #15]
 8023180:	4618      	mov	r0, r3
 8023182:	f000 f941 	bl	8023408 <USBH_Get_USB_Status>
 8023186:	4603      	mov	r3, r0
 8023188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802318a:	7bbb      	ldrb	r3, [r7, #14]
}
 802318c:	4618      	mov	r0, r3
 802318e:	3710      	adds	r7, #16
 8023190:	46bd      	mov	sp, r7
 8023192:	bd80      	pop	{r7, pc}

08023194 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8023194:	b580      	push	{r7, lr}
 8023196:	b084      	sub	sp, #16
 8023198:	af00      	add	r7, sp, #0
 802319a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802319c:	2301      	movs	r3, #1
 802319e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80231a6:	4618      	mov	r0, r3
 80231a8:	f7e3 faad 	bl	8006706 <HAL_HCD_GetCurrentSpeed>
 80231ac:	4603      	mov	r3, r0
 80231ae:	2b02      	cmp	r3, #2
 80231b0:	d00c      	beq.n	80231cc <USBH_LL_GetSpeed+0x38>
 80231b2:	2b02      	cmp	r3, #2
 80231b4:	d80d      	bhi.n	80231d2 <USBH_LL_GetSpeed+0x3e>
 80231b6:	2b00      	cmp	r3, #0
 80231b8:	d002      	beq.n	80231c0 <USBH_LL_GetSpeed+0x2c>
 80231ba:	2b01      	cmp	r3, #1
 80231bc:	d003      	beq.n	80231c6 <USBH_LL_GetSpeed+0x32>
 80231be:	e008      	b.n	80231d2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80231c0:	2300      	movs	r3, #0
 80231c2:	73fb      	strb	r3, [r7, #15]
    break;
 80231c4:	e008      	b.n	80231d8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80231c6:	2301      	movs	r3, #1
 80231c8:	73fb      	strb	r3, [r7, #15]
    break;
 80231ca:	e005      	b.n	80231d8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80231cc:	2302      	movs	r3, #2
 80231ce:	73fb      	strb	r3, [r7, #15]
    break;
 80231d0:	e002      	b.n	80231d8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80231d2:	2301      	movs	r3, #1
 80231d4:	73fb      	strb	r3, [r7, #15]
    break;
 80231d6:	bf00      	nop
  }
  return  speed;
 80231d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80231da:	4618      	mov	r0, r3
 80231dc:	3710      	adds	r7, #16
 80231de:	46bd      	mov	sp, r7
 80231e0:	bd80      	pop	{r7, pc}

080231e2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80231e2:	b580      	push	{r7, lr}
 80231e4:	b084      	sub	sp, #16
 80231e6:	af00      	add	r7, sp, #0
 80231e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80231ea:	2300      	movs	r3, #0
 80231ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80231ee:	2300      	movs	r3, #0
 80231f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80231f8:	4618      	mov	r0, r3
 80231fa:	f7e3 fa40 	bl	800667e <HAL_HCD_ResetPort>
 80231fe:	4603      	mov	r3, r0
 8023200:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8023202:	7bfb      	ldrb	r3, [r7, #15]
 8023204:	4618      	mov	r0, r3
 8023206:	f000 f8ff 	bl	8023408 <USBH_Get_USB_Status>
 802320a:	4603      	mov	r3, r0
 802320c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802320e:	7bbb      	ldrb	r3, [r7, #14]
}
 8023210:	4618      	mov	r0, r3
 8023212:	3710      	adds	r7, #16
 8023214:	46bd      	mov	sp, r7
 8023216:	bd80      	pop	{r7, pc}

08023218 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8023218:	b580      	push	{r7, lr}
 802321a:	b082      	sub	sp, #8
 802321c:	af00      	add	r7, sp, #0
 802321e:	6078      	str	r0, [r7, #4]
 8023220:	460b      	mov	r3, r1
 8023222:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8023224:	687b      	ldr	r3, [r7, #4]
 8023226:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802322a:	78fa      	ldrb	r2, [r7, #3]
 802322c:	4611      	mov	r1, r2
 802322e:	4618      	mov	r0, r3
 8023230:	f7e3 fa47 	bl	80066c2 <HAL_HCD_HC_GetXferCount>
 8023234:	4603      	mov	r3, r0
}
 8023236:	4618      	mov	r0, r3
 8023238:	3708      	adds	r7, #8
 802323a:	46bd      	mov	sp, r7
 802323c:	bd80      	pop	{r7, pc}

0802323e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802323e:	b590      	push	{r4, r7, lr}
 8023240:	b089      	sub	sp, #36	; 0x24
 8023242:	af04      	add	r7, sp, #16
 8023244:	6078      	str	r0, [r7, #4]
 8023246:	4608      	mov	r0, r1
 8023248:	4611      	mov	r1, r2
 802324a:	461a      	mov	r2, r3
 802324c:	4603      	mov	r3, r0
 802324e:	70fb      	strb	r3, [r7, #3]
 8023250:	460b      	mov	r3, r1
 8023252:	70bb      	strb	r3, [r7, #2]
 8023254:	4613      	mov	r3, r2
 8023256:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023258:	2300      	movs	r3, #0
 802325a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802325c:	2300      	movs	r3, #0
 802325e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8023266:	787c      	ldrb	r4, [r7, #1]
 8023268:	78ba      	ldrb	r2, [r7, #2]
 802326a:	78f9      	ldrb	r1, [r7, #3]
 802326c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802326e:	9302      	str	r3, [sp, #8]
 8023270:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8023274:	9301      	str	r3, [sp, #4]
 8023276:	f897 3020 	ldrb.w	r3, [r7, #32]
 802327a:	9300      	str	r3, [sp, #0]
 802327c:	4623      	mov	r3, r4
 802327e:	f7e2 feaa 	bl	8005fd6 <HAL_HCD_HC_Init>
 8023282:	4603      	mov	r3, r0
 8023284:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8023286:	7bfb      	ldrb	r3, [r7, #15]
 8023288:	4618      	mov	r0, r3
 802328a:	f000 f8bd 	bl	8023408 <USBH_Get_USB_Status>
 802328e:	4603      	mov	r3, r0
 8023290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023292:	7bbb      	ldrb	r3, [r7, #14]
}
 8023294:	4618      	mov	r0, r3
 8023296:	3714      	adds	r7, #20
 8023298:	46bd      	mov	sp, r7
 802329a:	bd90      	pop	{r4, r7, pc}

0802329c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802329c:	b580      	push	{r7, lr}
 802329e:	b084      	sub	sp, #16
 80232a0:	af00      	add	r7, sp, #0
 80232a2:	6078      	str	r0, [r7, #4]
 80232a4:	460b      	mov	r3, r1
 80232a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80232a8:	2300      	movs	r3, #0
 80232aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80232ac:	2300      	movs	r3, #0
 80232ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80232b0:	687b      	ldr	r3, [r7, #4]
 80232b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80232b6:	78fa      	ldrb	r2, [r7, #3]
 80232b8:	4611      	mov	r1, r2
 80232ba:	4618      	mov	r0, r3
 80232bc:	f7e2 ff1a 	bl	80060f4 <HAL_HCD_HC_Halt>
 80232c0:	4603      	mov	r3, r0
 80232c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80232c4:	7bfb      	ldrb	r3, [r7, #15]
 80232c6:	4618      	mov	r0, r3
 80232c8:	f000 f89e 	bl	8023408 <USBH_Get_USB_Status>
 80232cc:	4603      	mov	r3, r0
 80232ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80232d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80232d2:	4618      	mov	r0, r3
 80232d4:	3710      	adds	r7, #16
 80232d6:	46bd      	mov	sp, r7
 80232d8:	bd80      	pop	{r7, pc}

080232da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80232da:	b590      	push	{r4, r7, lr}
 80232dc:	b089      	sub	sp, #36	; 0x24
 80232de:	af04      	add	r7, sp, #16
 80232e0:	6078      	str	r0, [r7, #4]
 80232e2:	4608      	mov	r0, r1
 80232e4:	4611      	mov	r1, r2
 80232e6:	461a      	mov	r2, r3
 80232e8:	4603      	mov	r3, r0
 80232ea:	70fb      	strb	r3, [r7, #3]
 80232ec:	460b      	mov	r3, r1
 80232ee:	70bb      	strb	r3, [r7, #2]
 80232f0:	4613      	mov	r3, r2
 80232f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80232f4:	2300      	movs	r3, #0
 80232f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80232f8:	2300      	movs	r3, #0
 80232fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80232fc:	687b      	ldr	r3, [r7, #4]
 80232fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8023302:	787c      	ldrb	r4, [r7, #1]
 8023304:	78ba      	ldrb	r2, [r7, #2]
 8023306:	78f9      	ldrb	r1, [r7, #3]
 8023308:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802330c:	9303      	str	r3, [sp, #12]
 802330e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023310:	9302      	str	r3, [sp, #8]
 8023312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023314:	9301      	str	r3, [sp, #4]
 8023316:	f897 3020 	ldrb.w	r3, [r7, #32]
 802331a:	9300      	str	r3, [sp, #0]
 802331c:	4623      	mov	r3, r4
 802331e:	f7e2 ff0d 	bl	800613c <HAL_HCD_HC_SubmitRequest>
 8023322:	4603      	mov	r3, r0
 8023324:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8023326:	7bfb      	ldrb	r3, [r7, #15]
 8023328:	4618      	mov	r0, r3
 802332a:	f000 f86d 	bl	8023408 <USBH_Get_USB_Status>
 802332e:	4603      	mov	r3, r0
 8023330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8023332:	7bbb      	ldrb	r3, [r7, #14]
}
 8023334:	4618      	mov	r0, r3
 8023336:	3714      	adds	r7, #20
 8023338:	46bd      	mov	sp, r7
 802333a:	bd90      	pop	{r4, r7, pc}

0802333c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802333c:	b580      	push	{r7, lr}
 802333e:	b082      	sub	sp, #8
 8023340:	af00      	add	r7, sp, #0
 8023342:	6078      	str	r0, [r7, #4]
 8023344:	460b      	mov	r3, r1
 8023346:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8023348:	687b      	ldr	r3, [r7, #4]
 802334a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802334e:	78fa      	ldrb	r2, [r7, #3]
 8023350:	4611      	mov	r1, r2
 8023352:	4618      	mov	r0, r3
 8023354:	f7e3 f9a1 	bl	800669a <HAL_HCD_HC_GetURBState>
 8023358:	4603      	mov	r3, r0
}
 802335a:	4618      	mov	r0, r3
 802335c:	3708      	adds	r7, #8
 802335e:	46bd      	mov	sp, r7
 8023360:	bd80      	pop	{r7, pc}

08023362 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8023362:	b580      	push	{r7, lr}
 8023364:	b082      	sub	sp, #8
 8023366:	af00      	add	r7, sp, #0
 8023368:	6078      	str	r0, [r7, #4]
 802336a:	460b      	mov	r3, r1
 802336c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 802336e:	687b      	ldr	r3, [r7, #4]
 8023370:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8023374:	2b01      	cmp	r3, #1
 8023376:	d103      	bne.n	8023380 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8023378:	78fb      	ldrb	r3, [r7, #3]
 802337a:	4618      	mov	r0, r3
 802337c:	f000 f870 	bl	8023460 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8023380:	20c8      	movs	r0, #200	; 0xc8
 8023382:	f7e0 f979 	bl	8003678 <HAL_Delay>
  return USBH_OK;
 8023386:	2300      	movs	r3, #0
}
 8023388:	4618      	mov	r0, r3
 802338a:	3708      	adds	r7, #8
 802338c:	46bd      	mov	sp, r7
 802338e:	bd80      	pop	{r7, pc}

08023390 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8023390:	b480      	push	{r7}
 8023392:	b085      	sub	sp, #20
 8023394:	af00      	add	r7, sp, #0
 8023396:	6078      	str	r0, [r7, #4]
 8023398:	460b      	mov	r3, r1
 802339a:	70fb      	strb	r3, [r7, #3]
 802339c:	4613      	mov	r3, r2
 802339e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80233a0:	687b      	ldr	r3, [r7, #4]
 80233a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80233a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80233a8:	78fb      	ldrb	r3, [r7, #3]
 80233aa:	68fa      	ldr	r2, [r7, #12]
 80233ac:	212c      	movs	r1, #44	; 0x2c
 80233ae:	fb01 f303 	mul.w	r3, r1, r3
 80233b2:	4413      	add	r3, r2
 80233b4:	333b      	adds	r3, #59	; 0x3b
 80233b6:	781b      	ldrb	r3, [r3, #0]
 80233b8:	2b00      	cmp	r3, #0
 80233ba:	d009      	beq.n	80233d0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80233bc:	78fb      	ldrb	r3, [r7, #3]
 80233be:	68fa      	ldr	r2, [r7, #12]
 80233c0:	212c      	movs	r1, #44	; 0x2c
 80233c2:	fb01 f303 	mul.w	r3, r1, r3
 80233c6:	4413      	add	r3, r2
 80233c8:	3354      	adds	r3, #84	; 0x54
 80233ca:	78ba      	ldrb	r2, [r7, #2]
 80233cc:	701a      	strb	r2, [r3, #0]
 80233ce:	e008      	b.n	80233e2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80233d0:	78fb      	ldrb	r3, [r7, #3]
 80233d2:	68fa      	ldr	r2, [r7, #12]
 80233d4:	212c      	movs	r1, #44	; 0x2c
 80233d6:	fb01 f303 	mul.w	r3, r1, r3
 80233da:	4413      	add	r3, r2
 80233dc:	3355      	adds	r3, #85	; 0x55
 80233de:	78ba      	ldrb	r2, [r7, #2]
 80233e0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80233e2:	2300      	movs	r3, #0
}
 80233e4:	4618      	mov	r0, r3
 80233e6:	3714      	adds	r7, #20
 80233e8:	46bd      	mov	sp, r7
 80233ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233ee:	4770      	bx	lr

080233f0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80233f0:	b580      	push	{r7, lr}
 80233f2:	b082      	sub	sp, #8
 80233f4:	af00      	add	r7, sp, #0
 80233f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80233f8:	6878      	ldr	r0, [r7, #4]
 80233fa:	f7e0 f93d 	bl	8003678 <HAL_Delay>
}
 80233fe:	bf00      	nop
 8023400:	3708      	adds	r7, #8
 8023402:	46bd      	mov	sp, r7
 8023404:	bd80      	pop	{r7, pc}
	...

08023408 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8023408:	b480      	push	{r7}
 802340a:	b085      	sub	sp, #20
 802340c:	af00      	add	r7, sp, #0
 802340e:	4603      	mov	r3, r0
 8023410:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8023412:	2300      	movs	r3, #0
 8023414:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8023416:	79fb      	ldrb	r3, [r7, #7]
 8023418:	2b03      	cmp	r3, #3
 802341a:	d817      	bhi.n	802344c <USBH_Get_USB_Status+0x44>
 802341c:	a201      	add	r2, pc, #4	; (adr r2, 8023424 <USBH_Get_USB_Status+0x1c>)
 802341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023422:	bf00      	nop
 8023424:	08023435 	.word	0x08023435
 8023428:	0802343b 	.word	0x0802343b
 802342c:	08023441 	.word	0x08023441
 8023430:	08023447 	.word	0x08023447
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8023434:	2300      	movs	r3, #0
 8023436:	73fb      	strb	r3, [r7, #15]
    break;
 8023438:	e00b      	b.n	8023452 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802343a:	2302      	movs	r3, #2
 802343c:	73fb      	strb	r3, [r7, #15]
    break;
 802343e:	e008      	b.n	8023452 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8023440:	2301      	movs	r3, #1
 8023442:	73fb      	strb	r3, [r7, #15]
    break;
 8023444:	e005      	b.n	8023452 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8023446:	2302      	movs	r3, #2
 8023448:	73fb      	strb	r3, [r7, #15]
    break;
 802344a:	e002      	b.n	8023452 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802344c:	2302      	movs	r3, #2
 802344e:	73fb      	strb	r3, [r7, #15]
    break;
 8023450:	bf00      	nop
  }
  return usb_status;
 8023452:	7bfb      	ldrb	r3, [r7, #15]
}
 8023454:	4618      	mov	r0, r3
 8023456:	3714      	adds	r7, #20
 8023458:	46bd      	mov	sp, r7
 802345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802345e:	4770      	bx	lr

08023460 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8023460:	b580      	push	{r7, lr}
 8023462:	b084      	sub	sp, #16
 8023464:	af00      	add	r7, sp, #0
 8023466:	4603      	mov	r3, r0
 8023468:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802346a:	79fb      	ldrb	r3, [r7, #7]
 802346c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 802346e:	79fb      	ldrb	r3, [r7, #7]
 8023470:	2b00      	cmp	r3, #0
 8023472:	d102      	bne.n	802347a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8023474:	2300      	movs	r3, #0
 8023476:	73fb      	strb	r3, [r7, #15]
 8023478:	e001      	b.n	802347e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 802347a:	2301      	movs	r3, #1
 802347c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 802347e:	7bfb      	ldrb	r3, [r7, #15]
 8023480:	461a      	mov	r2, r3
 8023482:	2120      	movs	r1, #32
 8023484:	4803      	ldr	r0, [pc, #12]	; (8023494 <MX_DriverVbusFS+0x34>)
 8023486:	f7e2 fd2b 	bl	8005ee0 <HAL_GPIO_WritePin>
}
 802348a:	bf00      	nop
 802348c:	3710      	adds	r7, #16
 802348e:	46bd      	mov	sp, r7
 8023490:	bd80      	pop	{r7, pc}
 8023492:	bf00      	nop
 8023494:	40020c00 	.word	0x40020c00

08023498 <malloc>:
 8023498:	4b02      	ldr	r3, [pc, #8]	; (80234a4 <malloc+0xc>)
 802349a:	4601      	mov	r1, r0
 802349c:	6818      	ldr	r0, [r3, #0]
 802349e:	f000 b82b 	b.w	80234f8 <_malloc_r>
 80234a2:	bf00      	nop
 80234a4:	200000a8 	.word	0x200000a8

080234a8 <free>:
 80234a8:	4b02      	ldr	r3, [pc, #8]	; (80234b4 <free+0xc>)
 80234aa:	4601      	mov	r1, r0
 80234ac:	6818      	ldr	r0, [r3, #0]
 80234ae:	f000 baf7 	b.w	8023aa0 <_free_r>
 80234b2:	bf00      	nop
 80234b4:	200000a8 	.word	0x200000a8

080234b8 <sbrk_aligned>:
 80234b8:	b570      	push	{r4, r5, r6, lr}
 80234ba:	4e0e      	ldr	r6, [pc, #56]	; (80234f4 <sbrk_aligned+0x3c>)
 80234bc:	460c      	mov	r4, r1
 80234be:	6831      	ldr	r1, [r6, #0]
 80234c0:	4605      	mov	r5, r0
 80234c2:	b911      	cbnz	r1, 80234ca <sbrk_aligned+0x12>
 80234c4:	f000 fa80 	bl	80239c8 <_sbrk_r>
 80234c8:	6030      	str	r0, [r6, #0]
 80234ca:	4621      	mov	r1, r4
 80234cc:	4628      	mov	r0, r5
 80234ce:	f000 fa7b 	bl	80239c8 <_sbrk_r>
 80234d2:	1c43      	adds	r3, r0, #1
 80234d4:	d00a      	beq.n	80234ec <sbrk_aligned+0x34>
 80234d6:	1cc4      	adds	r4, r0, #3
 80234d8:	f024 0403 	bic.w	r4, r4, #3
 80234dc:	42a0      	cmp	r0, r4
 80234de:	d007      	beq.n	80234f0 <sbrk_aligned+0x38>
 80234e0:	1a21      	subs	r1, r4, r0
 80234e2:	4628      	mov	r0, r5
 80234e4:	f000 fa70 	bl	80239c8 <_sbrk_r>
 80234e8:	3001      	adds	r0, #1
 80234ea:	d101      	bne.n	80234f0 <sbrk_aligned+0x38>
 80234ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80234f0:	4620      	mov	r0, r4
 80234f2:	bd70      	pop	{r4, r5, r6, pc}
 80234f4:	20011b68 	.word	0x20011b68

080234f8 <_malloc_r>:
 80234f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80234fc:	1ccd      	adds	r5, r1, #3
 80234fe:	f025 0503 	bic.w	r5, r5, #3
 8023502:	3508      	adds	r5, #8
 8023504:	2d0c      	cmp	r5, #12
 8023506:	bf38      	it	cc
 8023508:	250c      	movcc	r5, #12
 802350a:	2d00      	cmp	r5, #0
 802350c:	4607      	mov	r7, r0
 802350e:	db01      	blt.n	8023514 <_malloc_r+0x1c>
 8023510:	42a9      	cmp	r1, r5
 8023512:	d905      	bls.n	8023520 <_malloc_r+0x28>
 8023514:	230c      	movs	r3, #12
 8023516:	603b      	str	r3, [r7, #0]
 8023518:	2600      	movs	r6, #0
 802351a:	4630      	mov	r0, r6
 802351c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023520:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80235f4 <_malloc_r+0xfc>
 8023524:	f000 f868 	bl	80235f8 <__malloc_lock>
 8023528:	f8d8 3000 	ldr.w	r3, [r8]
 802352c:	461c      	mov	r4, r3
 802352e:	bb5c      	cbnz	r4, 8023588 <_malloc_r+0x90>
 8023530:	4629      	mov	r1, r5
 8023532:	4638      	mov	r0, r7
 8023534:	f7ff ffc0 	bl	80234b8 <sbrk_aligned>
 8023538:	1c43      	adds	r3, r0, #1
 802353a:	4604      	mov	r4, r0
 802353c:	d155      	bne.n	80235ea <_malloc_r+0xf2>
 802353e:	f8d8 4000 	ldr.w	r4, [r8]
 8023542:	4626      	mov	r6, r4
 8023544:	2e00      	cmp	r6, #0
 8023546:	d145      	bne.n	80235d4 <_malloc_r+0xdc>
 8023548:	2c00      	cmp	r4, #0
 802354a:	d048      	beq.n	80235de <_malloc_r+0xe6>
 802354c:	6823      	ldr	r3, [r4, #0]
 802354e:	4631      	mov	r1, r6
 8023550:	4638      	mov	r0, r7
 8023552:	eb04 0903 	add.w	r9, r4, r3
 8023556:	f000 fa37 	bl	80239c8 <_sbrk_r>
 802355a:	4581      	cmp	r9, r0
 802355c:	d13f      	bne.n	80235de <_malloc_r+0xe6>
 802355e:	6821      	ldr	r1, [r4, #0]
 8023560:	1a6d      	subs	r5, r5, r1
 8023562:	4629      	mov	r1, r5
 8023564:	4638      	mov	r0, r7
 8023566:	f7ff ffa7 	bl	80234b8 <sbrk_aligned>
 802356a:	3001      	adds	r0, #1
 802356c:	d037      	beq.n	80235de <_malloc_r+0xe6>
 802356e:	6823      	ldr	r3, [r4, #0]
 8023570:	442b      	add	r3, r5
 8023572:	6023      	str	r3, [r4, #0]
 8023574:	f8d8 3000 	ldr.w	r3, [r8]
 8023578:	2b00      	cmp	r3, #0
 802357a:	d038      	beq.n	80235ee <_malloc_r+0xf6>
 802357c:	685a      	ldr	r2, [r3, #4]
 802357e:	42a2      	cmp	r2, r4
 8023580:	d12b      	bne.n	80235da <_malloc_r+0xe2>
 8023582:	2200      	movs	r2, #0
 8023584:	605a      	str	r2, [r3, #4]
 8023586:	e00f      	b.n	80235a8 <_malloc_r+0xb0>
 8023588:	6822      	ldr	r2, [r4, #0]
 802358a:	1b52      	subs	r2, r2, r5
 802358c:	d41f      	bmi.n	80235ce <_malloc_r+0xd6>
 802358e:	2a0b      	cmp	r2, #11
 8023590:	d917      	bls.n	80235c2 <_malloc_r+0xca>
 8023592:	1961      	adds	r1, r4, r5
 8023594:	42a3      	cmp	r3, r4
 8023596:	6025      	str	r5, [r4, #0]
 8023598:	bf18      	it	ne
 802359a:	6059      	strne	r1, [r3, #4]
 802359c:	6863      	ldr	r3, [r4, #4]
 802359e:	bf08      	it	eq
 80235a0:	f8c8 1000 	streq.w	r1, [r8]
 80235a4:	5162      	str	r2, [r4, r5]
 80235a6:	604b      	str	r3, [r1, #4]
 80235a8:	4638      	mov	r0, r7
 80235aa:	f104 060b 	add.w	r6, r4, #11
 80235ae:	f000 f829 	bl	8023604 <__malloc_unlock>
 80235b2:	f026 0607 	bic.w	r6, r6, #7
 80235b6:	1d23      	adds	r3, r4, #4
 80235b8:	1af2      	subs	r2, r6, r3
 80235ba:	d0ae      	beq.n	802351a <_malloc_r+0x22>
 80235bc:	1b9b      	subs	r3, r3, r6
 80235be:	50a3      	str	r3, [r4, r2]
 80235c0:	e7ab      	b.n	802351a <_malloc_r+0x22>
 80235c2:	42a3      	cmp	r3, r4
 80235c4:	6862      	ldr	r2, [r4, #4]
 80235c6:	d1dd      	bne.n	8023584 <_malloc_r+0x8c>
 80235c8:	f8c8 2000 	str.w	r2, [r8]
 80235cc:	e7ec      	b.n	80235a8 <_malloc_r+0xb0>
 80235ce:	4623      	mov	r3, r4
 80235d0:	6864      	ldr	r4, [r4, #4]
 80235d2:	e7ac      	b.n	802352e <_malloc_r+0x36>
 80235d4:	4634      	mov	r4, r6
 80235d6:	6876      	ldr	r6, [r6, #4]
 80235d8:	e7b4      	b.n	8023544 <_malloc_r+0x4c>
 80235da:	4613      	mov	r3, r2
 80235dc:	e7cc      	b.n	8023578 <_malloc_r+0x80>
 80235de:	230c      	movs	r3, #12
 80235e0:	603b      	str	r3, [r7, #0]
 80235e2:	4638      	mov	r0, r7
 80235e4:	f000 f80e 	bl	8023604 <__malloc_unlock>
 80235e8:	e797      	b.n	802351a <_malloc_r+0x22>
 80235ea:	6025      	str	r5, [r4, #0]
 80235ec:	e7dc      	b.n	80235a8 <_malloc_r+0xb0>
 80235ee:	605b      	str	r3, [r3, #4]
 80235f0:	deff      	udf	#255	; 0xff
 80235f2:	bf00      	nop
 80235f4:	20011b64 	.word	0x20011b64

080235f8 <__malloc_lock>:
 80235f8:	4801      	ldr	r0, [pc, #4]	; (8023600 <__malloc_lock+0x8>)
 80235fa:	f000 ba1a 	b.w	8023a32 <__retarget_lock_acquire_recursive>
 80235fe:	bf00      	nop
 8023600:	20011cac 	.word	0x20011cac

08023604 <__malloc_unlock>:
 8023604:	4801      	ldr	r0, [pc, #4]	; (802360c <__malloc_unlock+0x8>)
 8023606:	f000 ba15 	b.w	8023a34 <__retarget_lock_release_recursive>
 802360a:	bf00      	nop
 802360c:	20011cac 	.word	0x20011cac

08023610 <siprintf>:
 8023610:	b40e      	push	{r1, r2, r3}
 8023612:	b500      	push	{lr}
 8023614:	b09c      	sub	sp, #112	; 0x70
 8023616:	ab1d      	add	r3, sp, #116	; 0x74
 8023618:	9002      	str	r0, [sp, #8]
 802361a:	9006      	str	r0, [sp, #24]
 802361c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023620:	4809      	ldr	r0, [pc, #36]	; (8023648 <siprintf+0x38>)
 8023622:	9107      	str	r1, [sp, #28]
 8023624:	9104      	str	r1, [sp, #16]
 8023626:	4909      	ldr	r1, [pc, #36]	; (802364c <siprintf+0x3c>)
 8023628:	f853 2b04 	ldr.w	r2, [r3], #4
 802362c:	9105      	str	r1, [sp, #20]
 802362e:	6800      	ldr	r0, [r0, #0]
 8023630:	9301      	str	r3, [sp, #4]
 8023632:	a902      	add	r1, sp, #8
 8023634:	f000 fada 	bl	8023bec <_svfiprintf_r>
 8023638:	9b02      	ldr	r3, [sp, #8]
 802363a:	2200      	movs	r2, #0
 802363c:	701a      	strb	r2, [r3, #0]
 802363e:	b01c      	add	sp, #112	; 0x70
 8023640:	f85d eb04 	ldr.w	lr, [sp], #4
 8023644:	b003      	add	sp, #12
 8023646:	4770      	bx	lr
 8023648:	200000a8 	.word	0x200000a8
 802364c:	ffff0208 	.word	0xffff0208

08023650 <rand>:
 8023650:	4b16      	ldr	r3, [pc, #88]	; (80236ac <rand+0x5c>)
 8023652:	b510      	push	{r4, lr}
 8023654:	681c      	ldr	r4, [r3, #0]
 8023656:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023658:	b9b3      	cbnz	r3, 8023688 <rand+0x38>
 802365a:	2018      	movs	r0, #24
 802365c:	f7ff ff1c 	bl	8023498 <malloc>
 8023660:	4602      	mov	r2, r0
 8023662:	6320      	str	r0, [r4, #48]	; 0x30
 8023664:	b920      	cbnz	r0, 8023670 <rand+0x20>
 8023666:	4b12      	ldr	r3, [pc, #72]	; (80236b0 <rand+0x60>)
 8023668:	4812      	ldr	r0, [pc, #72]	; (80236b4 <rand+0x64>)
 802366a:	2152      	movs	r1, #82	; 0x52
 802366c:	f000 f9fa 	bl	8023a64 <__assert_func>
 8023670:	4911      	ldr	r1, [pc, #68]	; (80236b8 <rand+0x68>)
 8023672:	4b12      	ldr	r3, [pc, #72]	; (80236bc <rand+0x6c>)
 8023674:	e9c0 1300 	strd	r1, r3, [r0]
 8023678:	4b11      	ldr	r3, [pc, #68]	; (80236c0 <rand+0x70>)
 802367a:	6083      	str	r3, [r0, #8]
 802367c:	230b      	movs	r3, #11
 802367e:	8183      	strh	r3, [r0, #12]
 8023680:	2100      	movs	r1, #0
 8023682:	2001      	movs	r0, #1
 8023684:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023688:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802368a:	480e      	ldr	r0, [pc, #56]	; (80236c4 <rand+0x74>)
 802368c:	690b      	ldr	r3, [r1, #16]
 802368e:	694c      	ldr	r4, [r1, #20]
 8023690:	4a0d      	ldr	r2, [pc, #52]	; (80236c8 <rand+0x78>)
 8023692:	4358      	muls	r0, r3
 8023694:	fb02 0004 	mla	r0, r2, r4, r0
 8023698:	fba3 3202 	umull	r3, r2, r3, r2
 802369c:	3301      	adds	r3, #1
 802369e:	eb40 0002 	adc.w	r0, r0, r2
 80236a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80236a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80236aa:	bd10      	pop	{r4, pc}
 80236ac:	200000a8 	.word	0x200000a8
 80236b0:	08028288 	.word	0x08028288
 80236b4:	0802829f 	.word	0x0802829f
 80236b8:	abcd330e 	.word	0xabcd330e
 80236bc:	e66d1234 	.word	0xe66d1234
 80236c0:	0005deec 	.word	0x0005deec
 80236c4:	5851f42d 	.word	0x5851f42d
 80236c8:	4c957f2d 	.word	0x4c957f2d

080236cc <std>:
 80236cc:	2300      	movs	r3, #0
 80236ce:	b510      	push	{r4, lr}
 80236d0:	4604      	mov	r4, r0
 80236d2:	e9c0 3300 	strd	r3, r3, [r0]
 80236d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80236da:	6083      	str	r3, [r0, #8]
 80236dc:	8181      	strh	r1, [r0, #12]
 80236de:	6643      	str	r3, [r0, #100]	; 0x64
 80236e0:	81c2      	strh	r2, [r0, #14]
 80236e2:	6183      	str	r3, [r0, #24]
 80236e4:	4619      	mov	r1, r3
 80236e6:	2208      	movs	r2, #8
 80236e8:	305c      	adds	r0, #92	; 0x5c
 80236ea:	f000 f90e 	bl	802390a <memset>
 80236ee:	4b0d      	ldr	r3, [pc, #52]	; (8023724 <std+0x58>)
 80236f0:	6263      	str	r3, [r4, #36]	; 0x24
 80236f2:	4b0d      	ldr	r3, [pc, #52]	; (8023728 <std+0x5c>)
 80236f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80236f6:	4b0d      	ldr	r3, [pc, #52]	; (802372c <std+0x60>)
 80236f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80236fa:	4b0d      	ldr	r3, [pc, #52]	; (8023730 <std+0x64>)
 80236fc:	6323      	str	r3, [r4, #48]	; 0x30
 80236fe:	4b0d      	ldr	r3, [pc, #52]	; (8023734 <std+0x68>)
 8023700:	6224      	str	r4, [r4, #32]
 8023702:	429c      	cmp	r4, r3
 8023704:	d006      	beq.n	8023714 <std+0x48>
 8023706:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802370a:	4294      	cmp	r4, r2
 802370c:	d002      	beq.n	8023714 <std+0x48>
 802370e:	33d0      	adds	r3, #208	; 0xd0
 8023710:	429c      	cmp	r4, r3
 8023712:	d105      	bne.n	8023720 <std+0x54>
 8023714:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802371c:	f000 b988 	b.w	8023a30 <__retarget_lock_init_recursive>
 8023720:	bd10      	pop	{r4, pc}
 8023722:	bf00      	nop
 8023724:	080244ed 	.word	0x080244ed
 8023728:	0802450f 	.word	0x0802450f
 802372c:	08024547 	.word	0x08024547
 8023730:	0802456b 	.word	0x0802456b
 8023734:	20011b6c 	.word	0x20011b6c

08023738 <stdio_exit_handler>:
 8023738:	4a02      	ldr	r2, [pc, #8]	; (8023744 <stdio_exit_handler+0xc>)
 802373a:	4903      	ldr	r1, [pc, #12]	; (8023748 <stdio_exit_handler+0x10>)
 802373c:	4803      	ldr	r0, [pc, #12]	; (802374c <stdio_exit_handler+0x14>)
 802373e:	f000 b869 	b.w	8023814 <_fwalk_sglue>
 8023742:	bf00      	nop
 8023744:	20000050 	.word	0x20000050
 8023748:	0802449d 	.word	0x0802449d
 802374c:	2000005c 	.word	0x2000005c

08023750 <cleanup_stdio>:
 8023750:	6841      	ldr	r1, [r0, #4]
 8023752:	4b0c      	ldr	r3, [pc, #48]	; (8023784 <cleanup_stdio+0x34>)
 8023754:	4299      	cmp	r1, r3
 8023756:	b510      	push	{r4, lr}
 8023758:	4604      	mov	r4, r0
 802375a:	d001      	beq.n	8023760 <cleanup_stdio+0x10>
 802375c:	f000 fe9e 	bl	802449c <_fflush_r>
 8023760:	68a1      	ldr	r1, [r4, #8]
 8023762:	4b09      	ldr	r3, [pc, #36]	; (8023788 <cleanup_stdio+0x38>)
 8023764:	4299      	cmp	r1, r3
 8023766:	d002      	beq.n	802376e <cleanup_stdio+0x1e>
 8023768:	4620      	mov	r0, r4
 802376a:	f000 fe97 	bl	802449c <_fflush_r>
 802376e:	68e1      	ldr	r1, [r4, #12]
 8023770:	4b06      	ldr	r3, [pc, #24]	; (802378c <cleanup_stdio+0x3c>)
 8023772:	4299      	cmp	r1, r3
 8023774:	d004      	beq.n	8023780 <cleanup_stdio+0x30>
 8023776:	4620      	mov	r0, r4
 8023778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802377c:	f000 be8e 	b.w	802449c <_fflush_r>
 8023780:	bd10      	pop	{r4, pc}
 8023782:	bf00      	nop
 8023784:	20011b6c 	.word	0x20011b6c
 8023788:	20011bd4 	.word	0x20011bd4
 802378c:	20011c3c 	.word	0x20011c3c

08023790 <global_stdio_init.part.0>:
 8023790:	b510      	push	{r4, lr}
 8023792:	4b0b      	ldr	r3, [pc, #44]	; (80237c0 <global_stdio_init.part.0+0x30>)
 8023794:	4c0b      	ldr	r4, [pc, #44]	; (80237c4 <global_stdio_init.part.0+0x34>)
 8023796:	4a0c      	ldr	r2, [pc, #48]	; (80237c8 <global_stdio_init.part.0+0x38>)
 8023798:	601a      	str	r2, [r3, #0]
 802379a:	4620      	mov	r0, r4
 802379c:	2200      	movs	r2, #0
 802379e:	2104      	movs	r1, #4
 80237a0:	f7ff ff94 	bl	80236cc <std>
 80237a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80237a8:	2201      	movs	r2, #1
 80237aa:	2109      	movs	r1, #9
 80237ac:	f7ff ff8e 	bl	80236cc <std>
 80237b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80237b4:	2202      	movs	r2, #2
 80237b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80237ba:	2112      	movs	r1, #18
 80237bc:	f7ff bf86 	b.w	80236cc <std>
 80237c0:	20011ca4 	.word	0x20011ca4
 80237c4:	20011b6c 	.word	0x20011b6c
 80237c8:	08023739 	.word	0x08023739

080237cc <__sfp_lock_acquire>:
 80237cc:	4801      	ldr	r0, [pc, #4]	; (80237d4 <__sfp_lock_acquire+0x8>)
 80237ce:	f000 b930 	b.w	8023a32 <__retarget_lock_acquire_recursive>
 80237d2:	bf00      	nop
 80237d4:	20011cad 	.word	0x20011cad

080237d8 <__sfp_lock_release>:
 80237d8:	4801      	ldr	r0, [pc, #4]	; (80237e0 <__sfp_lock_release+0x8>)
 80237da:	f000 b92b 	b.w	8023a34 <__retarget_lock_release_recursive>
 80237de:	bf00      	nop
 80237e0:	20011cad 	.word	0x20011cad

080237e4 <__sinit>:
 80237e4:	b510      	push	{r4, lr}
 80237e6:	4604      	mov	r4, r0
 80237e8:	f7ff fff0 	bl	80237cc <__sfp_lock_acquire>
 80237ec:	6a23      	ldr	r3, [r4, #32]
 80237ee:	b11b      	cbz	r3, 80237f8 <__sinit+0x14>
 80237f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80237f4:	f7ff bff0 	b.w	80237d8 <__sfp_lock_release>
 80237f8:	4b04      	ldr	r3, [pc, #16]	; (802380c <__sinit+0x28>)
 80237fa:	6223      	str	r3, [r4, #32]
 80237fc:	4b04      	ldr	r3, [pc, #16]	; (8023810 <__sinit+0x2c>)
 80237fe:	681b      	ldr	r3, [r3, #0]
 8023800:	2b00      	cmp	r3, #0
 8023802:	d1f5      	bne.n	80237f0 <__sinit+0xc>
 8023804:	f7ff ffc4 	bl	8023790 <global_stdio_init.part.0>
 8023808:	e7f2      	b.n	80237f0 <__sinit+0xc>
 802380a:	bf00      	nop
 802380c:	08023751 	.word	0x08023751
 8023810:	20011ca4 	.word	0x20011ca4

08023814 <_fwalk_sglue>:
 8023814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023818:	4607      	mov	r7, r0
 802381a:	4688      	mov	r8, r1
 802381c:	4614      	mov	r4, r2
 802381e:	2600      	movs	r6, #0
 8023820:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023824:	f1b9 0901 	subs.w	r9, r9, #1
 8023828:	d505      	bpl.n	8023836 <_fwalk_sglue+0x22>
 802382a:	6824      	ldr	r4, [r4, #0]
 802382c:	2c00      	cmp	r4, #0
 802382e:	d1f7      	bne.n	8023820 <_fwalk_sglue+0xc>
 8023830:	4630      	mov	r0, r6
 8023832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023836:	89ab      	ldrh	r3, [r5, #12]
 8023838:	2b01      	cmp	r3, #1
 802383a:	d907      	bls.n	802384c <_fwalk_sglue+0x38>
 802383c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023840:	3301      	adds	r3, #1
 8023842:	d003      	beq.n	802384c <_fwalk_sglue+0x38>
 8023844:	4629      	mov	r1, r5
 8023846:	4638      	mov	r0, r7
 8023848:	47c0      	blx	r8
 802384a:	4306      	orrs	r6, r0
 802384c:	3568      	adds	r5, #104	; 0x68
 802384e:	e7e9      	b.n	8023824 <_fwalk_sglue+0x10>

08023850 <iprintf>:
 8023850:	b40f      	push	{r0, r1, r2, r3}
 8023852:	b507      	push	{r0, r1, r2, lr}
 8023854:	4906      	ldr	r1, [pc, #24]	; (8023870 <iprintf+0x20>)
 8023856:	ab04      	add	r3, sp, #16
 8023858:	6808      	ldr	r0, [r1, #0]
 802385a:	f853 2b04 	ldr.w	r2, [r3], #4
 802385e:	6881      	ldr	r1, [r0, #8]
 8023860:	9301      	str	r3, [sp, #4]
 8023862:	f000 faeb 	bl	8023e3c <_vfiprintf_r>
 8023866:	b003      	add	sp, #12
 8023868:	f85d eb04 	ldr.w	lr, [sp], #4
 802386c:	b004      	add	sp, #16
 802386e:	4770      	bx	lr
 8023870:	200000a8 	.word	0x200000a8

08023874 <strcat>:
 8023874:	b510      	push	{r4, lr}
 8023876:	4602      	mov	r2, r0
 8023878:	7814      	ldrb	r4, [r2, #0]
 802387a:	4613      	mov	r3, r2
 802387c:	3201      	adds	r2, #1
 802387e:	2c00      	cmp	r4, #0
 8023880:	d1fa      	bne.n	8023878 <strcat+0x4>
 8023882:	3b01      	subs	r3, #1
 8023884:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023888:	f803 2f01 	strb.w	r2, [r3, #1]!
 802388c:	2a00      	cmp	r2, #0
 802388e:	d1f9      	bne.n	8023884 <strcat+0x10>
 8023890:	bd10      	pop	{r4, pc}

08023892 <strncmp>:
 8023892:	b510      	push	{r4, lr}
 8023894:	b16a      	cbz	r2, 80238b2 <strncmp+0x20>
 8023896:	3901      	subs	r1, #1
 8023898:	1884      	adds	r4, r0, r2
 802389a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802389e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80238a2:	429a      	cmp	r2, r3
 80238a4:	d103      	bne.n	80238ae <strncmp+0x1c>
 80238a6:	42a0      	cmp	r0, r4
 80238a8:	d001      	beq.n	80238ae <strncmp+0x1c>
 80238aa:	2a00      	cmp	r2, #0
 80238ac:	d1f5      	bne.n	802389a <strncmp+0x8>
 80238ae:	1ad0      	subs	r0, r2, r3
 80238b0:	bd10      	pop	{r4, pc}
 80238b2:	4610      	mov	r0, r2
 80238b4:	e7fc      	b.n	80238b0 <strncmp+0x1e>

080238b6 <memcmp>:
 80238b6:	b510      	push	{r4, lr}
 80238b8:	3901      	subs	r1, #1
 80238ba:	4402      	add	r2, r0
 80238bc:	4290      	cmp	r0, r2
 80238be:	d101      	bne.n	80238c4 <memcmp+0xe>
 80238c0:	2000      	movs	r0, #0
 80238c2:	e005      	b.n	80238d0 <memcmp+0x1a>
 80238c4:	7803      	ldrb	r3, [r0, #0]
 80238c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80238ca:	42a3      	cmp	r3, r4
 80238cc:	d001      	beq.n	80238d2 <memcmp+0x1c>
 80238ce:	1b18      	subs	r0, r3, r4
 80238d0:	bd10      	pop	{r4, pc}
 80238d2:	3001      	adds	r0, #1
 80238d4:	e7f2      	b.n	80238bc <memcmp+0x6>

080238d6 <memmove>:
 80238d6:	4288      	cmp	r0, r1
 80238d8:	b510      	push	{r4, lr}
 80238da:	eb01 0402 	add.w	r4, r1, r2
 80238de:	d902      	bls.n	80238e6 <memmove+0x10>
 80238e0:	4284      	cmp	r4, r0
 80238e2:	4623      	mov	r3, r4
 80238e4:	d807      	bhi.n	80238f6 <memmove+0x20>
 80238e6:	1e43      	subs	r3, r0, #1
 80238e8:	42a1      	cmp	r1, r4
 80238ea:	d008      	beq.n	80238fe <memmove+0x28>
 80238ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80238f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80238f4:	e7f8      	b.n	80238e8 <memmove+0x12>
 80238f6:	4402      	add	r2, r0
 80238f8:	4601      	mov	r1, r0
 80238fa:	428a      	cmp	r2, r1
 80238fc:	d100      	bne.n	8023900 <memmove+0x2a>
 80238fe:	bd10      	pop	{r4, pc}
 8023900:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023904:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023908:	e7f7      	b.n	80238fa <memmove+0x24>

0802390a <memset>:
 802390a:	4402      	add	r2, r0
 802390c:	4603      	mov	r3, r0
 802390e:	4293      	cmp	r3, r2
 8023910:	d100      	bne.n	8023914 <memset+0xa>
 8023912:	4770      	bx	lr
 8023914:	f803 1b01 	strb.w	r1, [r3], #1
 8023918:	e7f9      	b.n	802390e <memset+0x4>
	...

0802391c <_reclaim_reent>:
 802391c:	4b29      	ldr	r3, [pc, #164]	; (80239c4 <_reclaim_reent+0xa8>)
 802391e:	681b      	ldr	r3, [r3, #0]
 8023920:	4283      	cmp	r3, r0
 8023922:	b570      	push	{r4, r5, r6, lr}
 8023924:	4604      	mov	r4, r0
 8023926:	d04b      	beq.n	80239c0 <_reclaim_reent+0xa4>
 8023928:	69c3      	ldr	r3, [r0, #28]
 802392a:	b143      	cbz	r3, 802393e <_reclaim_reent+0x22>
 802392c:	68db      	ldr	r3, [r3, #12]
 802392e:	2b00      	cmp	r3, #0
 8023930:	d144      	bne.n	80239bc <_reclaim_reent+0xa0>
 8023932:	69e3      	ldr	r3, [r4, #28]
 8023934:	6819      	ldr	r1, [r3, #0]
 8023936:	b111      	cbz	r1, 802393e <_reclaim_reent+0x22>
 8023938:	4620      	mov	r0, r4
 802393a:	f000 f8b1 	bl	8023aa0 <_free_r>
 802393e:	6961      	ldr	r1, [r4, #20]
 8023940:	b111      	cbz	r1, 8023948 <_reclaim_reent+0x2c>
 8023942:	4620      	mov	r0, r4
 8023944:	f000 f8ac 	bl	8023aa0 <_free_r>
 8023948:	69e1      	ldr	r1, [r4, #28]
 802394a:	b111      	cbz	r1, 8023952 <_reclaim_reent+0x36>
 802394c:	4620      	mov	r0, r4
 802394e:	f000 f8a7 	bl	8023aa0 <_free_r>
 8023952:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023954:	b111      	cbz	r1, 802395c <_reclaim_reent+0x40>
 8023956:	4620      	mov	r0, r4
 8023958:	f000 f8a2 	bl	8023aa0 <_free_r>
 802395c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802395e:	b111      	cbz	r1, 8023966 <_reclaim_reent+0x4a>
 8023960:	4620      	mov	r0, r4
 8023962:	f000 f89d 	bl	8023aa0 <_free_r>
 8023966:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8023968:	b111      	cbz	r1, 8023970 <_reclaim_reent+0x54>
 802396a:	4620      	mov	r0, r4
 802396c:	f000 f898 	bl	8023aa0 <_free_r>
 8023970:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8023972:	b111      	cbz	r1, 802397a <_reclaim_reent+0x5e>
 8023974:	4620      	mov	r0, r4
 8023976:	f000 f893 	bl	8023aa0 <_free_r>
 802397a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802397c:	b111      	cbz	r1, 8023984 <_reclaim_reent+0x68>
 802397e:	4620      	mov	r0, r4
 8023980:	f000 f88e 	bl	8023aa0 <_free_r>
 8023984:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8023986:	b111      	cbz	r1, 802398e <_reclaim_reent+0x72>
 8023988:	4620      	mov	r0, r4
 802398a:	f000 f889 	bl	8023aa0 <_free_r>
 802398e:	6a23      	ldr	r3, [r4, #32]
 8023990:	b1b3      	cbz	r3, 80239c0 <_reclaim_reent+0xa4>
 8023992:	4620      	mov	r0, r4
 8023994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023998:	4718      	bx	r3
 802399a:	5949      	ldr	r1, [r1, r5]
 802399c:	b941      	cbnz	r1, 80239b0 <_reclaim_reent+0x94>
 802399e:	3504      	adds	r5, #4
 80239a0:	69e3      	ldr	r3, [r4, #28]
 80239a2:	2d80      	cmp	r5, #128	; 0x80
 80239a4:	68d9      	ldr	r1, [r3, #12]
 80239a6:	d1f8      	bne.n	802399a <_reclaim_reent+0x7e>
 80239a8:	4620      	mov	r0, r4
 80239aa:	f000 f879 	bl	8023aa0 <_free_r>
 80239ae:	e7c0      	b.n	8023932 <_reclaim_reent+0x16>
 80239b0:	680e      	ldr	r6, [r1, #0]
 80239b2:	4620      	mov	r0, r4
 80239b4:	f000 f874 	bl	8023aa0 <_free_r>
 80239b8:	4631      	mov	r1, r6
 80239ba:	e7ef      	b.n	802399c <_reclaim_reent+0x80>
 80239bc:	2500      	movs	r5, #0
 80239be:	e7ef      	b.n	80239a0 <_reclaim_reent+0x84>
 80239c0:	bd70      	pop	{r4, r5, r6, pc}
 80239c2:	bf00      	nop
 80239c4:	200000a8 	.word	0x200000a8

080239c8 <_sbrk_r>:
 80239c8:	b538      	push	{r3, r4, r5, lr}
 80239ca:	4d06      	ldr	r5, [pc, #24]	; (80239e4 <_sbrk_r+0x1c>)
 80239cc:	2300      	movs	r3, #0
 80239ce:	4604      	mov	r4, r0
 80239d0:	4608      	mov	r0, r1
 80239d2:	602b      	str	r3, [r5, #0]
 80239d4:	f7df fc4e 	bl	8003274 <_sbrk>
 80239d8:	1c43      	adds	r3, r0, #1
 80239da:	d102      	bne.n	80239e2 <_sbrk_r+0x1a>
 80239dc:	682b      	ldr	r3, [r5, #0]
 80239de:	b103      	cbz	r3, 80239e2 <_sbrk_r+0x1a>
 80239e0:	6023      	str	r3, [r4, #0]
 80239e2:	bd38      	pop	{r3, r4, r5, pc}
 80239e4:	20011ca8 	.word	0x20011ca8

080239e8 <__libc_init_array>:
 80239e8:	b570      	push	{r4, r5, r6, lr}
 80239ea:	4d0d      	ldr	r5, [pc, #52]	; (8023a20 <__libc_init_array+0x38>)
 80239ec:	4c0d      	ldr	r4, [pc, #52]	; (8023a24 <__libc_init_array+0x3c>)
 80239ee:	1b64      	subs	r4, r4, r5
 80239f0:	10a4      	asrs	r4, r4, #2
 80239f2:	2600      	movs	r6, #0
 80239f4:	42a6      	cmp	r6, r4
 80239f6:	d109      	bne.n	8023a0c <__libc_init_array+0x24>
 80239f8:	4d0b      	ldr	r5, [pc, #44]	; (8023a28 <__libc_init_array+0x40>)
 80239fa:	4c0c      	ldr	r4, [pc, #48]	; (8023a2c <__libc_init_array+0x44>)
 80239fc:	f000 ffae 	bl	802495c <_init>
 8023a00:	1b64      	subs	r4, r4, r5
 8023a02:	10a4      	asrs	r4, r4, #2
 8023a04:	2600      	movs	r6, #0
 8023a06:	42a6      	cmp	r6, r4
 8023a08:	d105      	bne.n	8023a16 <__libc_init_array+0x2e>
 8023a0a:	bd70      	pop	{r4, r5, r6, pc}
 8023a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8023a10:	4798      	blx	r3
 8023a12:	3601      	adds	r6, #1
 8023a14:	e7ee      	b.n	80239f4 <__libc_init_array+0xc>
 8023a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8023a1a:	4798      	blx	r3
 8023a1c:	3601      	adds	r6, #1
 8023a1e:	e7f2      	b.n	8023a06 <__libc_init_array+0x1e>
 8023a20:	08028370 	.word	0x08028370
 8023a24:	08028370 	.word	0x08028370
 8023a28:	08028370 	.word	0x08028370
 8023a2c:	08028374 	.word	0x08028374

08023a30 <__retarget_lock_init_recursive>:
 8023a30:	4770      	bx	lr

08023a32 <__retarget_lock_acquire_recursive>:
 8023a32:	4770      	bx	lr

08023a34 <__retarget_lock_release_recursive>:
 8023a34:	4770      	bx	lr

08023a36 <memcpy>:
 8023a36:	440a      	add	r2, r1
 8023a38:	4291      	cmp	r1, r2
 8023a3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8023a3e:	d100      	bne.n	8023a42 <memcpy+0xc>
 8023a40:	4770      	bx	lr
 8023a42:	b510      	push	{r4, lr}
 8023a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023a48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023a4c:	4291      	cmp	r1, r2
 8023a4e:	d1f9      	bne.n	8023a44 <memcpy+0xe>
 8023a50:	bd10      	pop	{r4, pc}

08023a52 <strcpy>:
 8023a52:	4603      	mov	r3, r0
 8023a54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023a58:	f803 2b01 	strb.w	r2, [r3], #1
 8023a5c:	2a00      	cmp	r2, #0
 8023a5e:	d1f9      	bne.n	8023a54 <strcpy+0x2>
 8023a60:	4770      	bx	lr
	...

08023a64 <__assert_func>:
 8023a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023a66:	4614      	mov	r4, r2
 8023a68:	461a      	mov	r2, r3
 8023a6a:	4b09      	ldr	r3, [pc, #36]	; (8023a90 <__assert_func+0x2c>)
 8023a6c:	681b      	ldr	r3, [r3, #0]
 8023a6e:	4605      	mov	r5, r0
 8023a70:	68d8      	ldr	r0, [r3, #12]
 8023a72:	b14c      	cbz	r4, 8023a88 <__assert_func+0x24>
 8023a74:	4b07      	ldr	r3, [pc, #28]	; (8023a94 <__assert_func+0x30>)
 8023a76:	9100      	str	r1, [sp, #0]
 8023a78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023a7c:	4906      	ldr	r1, [pc, #24]	; (8023a98 <__assert_func+0x34>)
 8023a7e:	462b      	mov	r3, r5
 8023a80:	f000 fd78 	bl	8024574 <fiprintf>
 8023a84:	f000 ff16 	bl	80248b4 <abort>
 8023a88:	4b04      	ldr	r3, [pc, #16]	; (8023a9c <__assert_func+0x38>)
 8023a8a:	461c      	mov	r4, r3
 8023a8c:	e7f3      	b.n	8023a76 <__assert_func+0x12>
 8023a8e:	bf00      	nop
 8023a90:	200000a8 	.word	0x200000a8
 8023a94:	080282f7 	.word	0x080282f7
 8023a98:	08028304 	.word	0x08028304
 8023a9c:	08028332 	.word	0x08028332

08023aa0 <_free_r>:
 8023aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023aa2:	2900      	cmp	r1, #0
 8023aa4:	d044      	beq.n	8023b30 <_free_r+0x90>
 8023aa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023aaa:	9001      	str	r0, [sp, #4]
 8023aac:	2b00      	cmp	r3, #0
 8023aae:	f1a1 0404 	sub.w	r4, r1, #4
 8023ab2:	bfb8      	it	lt
 8023ab4:	18e4      	addlt	r4, r4, r3
 8023ab6:	f7ff fd9f 	bl	80235f8 <__malloc_lock>
 8023aba:	4a1e      	ldr	r2, [pc, #120]	; (8023b34 <_free_r+0x94>)
 8023abc:	9801      	ldr	r0, [sp, #4]
 8023abe:	6813      	ldr	r3, [r2, #0]
 8023ac0:	b933      	cbnz	r3, 8023ad0 <_free_r+0x30>
 8023ac2:	6063      	str	r3, [r4, #4]
 8023ac4:	6014      	str	r4, [r2, #0]
 8023ac6:	b003      	add	sp, #12
 8023ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023acc:	f7ff bd9a 	b.w	8023604 <__malloc_unlock>
 8023ad0:	42a3      	cmp	r3, r4
 8023ad2:	d908      	bls.n	8023ae6 <_free_r+0x46>
 8023ad4:	6825      	ldr	r5, [r4, #0]
 8023ad6:	1961      	adds	r1, r4, r5
 8023ad8:	428b      	cmp	r3, r1
 8023ada:	bf01      	itttt	eq
 8023adc:	6819      	ldreq	r1, [r3, #0]
 8023ade:	685b      	ldreq	r3, [r3, #4]
 8023ae0:	1949      	addeq	r1, r1, r5
 8023ae2:	6021      	streq	r1, [r4, #0]
 8023ae4:	e7ed      	b.n	8023ac2 <_free_r+0x22>
 8023ae6:	461a      	mov	r2, r3
 8023ae8:	685b      	ldr	r3, [r3, #4]
 8023aea:	b10b      	cbz	r3, 8023af0 <_free_r+0x50>
 8023aec:	42a3      	cmp	r3, r4
 8023aee:	d9fa      	bls.n	8023ae6 <_free_r+0x46>
 8023af0:	6811      	ldr	r1, [r2, #0]
 8023af2:	1855      	adds	r5, r2, r1
 8023af4:	42a5      	cmp	r5, r4
 8023af6:	d10b      	bne.n	8023b10 <_free_r+0x70>
 8023af8:	6824      	ldr	r4, [r4, #0]
 8023afa:	4421      	add	r1, r4
 8023afc:	1854      	adds	r4, r2, r1
 8023afe:	42a3      	cmp	r3, r4
 8023b00:	6011      	str	r1, [r2, #0]
 8023b02:	d1e0      	bne.n	8023ac6 <_free_r+0x26>
 8023b04:	681c      	ldr	r4, [r3, #0]
 8023b06:	685b      	ldr	r3, [r3, #4]
 8023b08:	6053      	str	r3, [r2, #4]
 8023b0a:	440c      	add	r4, r1
 8023b0c:	6014      	str	r4, [r2, #0]
 8023b0e:	e7da      	b.n	8023ac6 <_free_r+0x26>
 8023b10:	d902      	bls.n	8023b18 <_free_r+0x78>
 8023b12:	230c      	movs	r3, #12
 8023b14:	6003      	str	r3, [r0, #0]
 8023b16:	e7d6      	b.n	8023ac6 <_free_r+0x26>
 8023b18:	6825      	ldr	r5, [r4, #0]
 8023b1a:	1961      	adds	r1, r4, r5
 8023b1c:	428b      	cmp	r3, r1
 8023b1e:	bf04      	itt	eq
 8023b20:	6819      	ldreq	r1, [r3, #0]
 8023b22:	685b      	ldreq	r3, [r3, #4]
 8023b24:	6063      	str	r3, [r4, #4]
 8023b26:	bf04      	itt	eq
 8023b28:	1949      	addeq	r1, r1, r5
 8023b2a:	6021      	streq	r1, [r4, #0]
 8023b2c:	6054      	str	r4, [r2, #4]
 8023b2e:	e7ca      	b.n	8023ac6 <_free_r+0x26>
 8023b30:	b003      	add	sp, #12
 8023b32:	bd30      	pop	{r4, r5, pc}
 8023b34:	20011b64 	.word	0x20011b64

08023b38 <__ssputs_r>:
 8023b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b3c:	688e      	ldr	r6, [r1, #8]
 8023b3e:	461f      	mov	r7, r3
 8023b40:	42be      	cmp	r6, r7
 8023b42:	680b      	ldr	r3, [r1, #0]
 8023b44:	4682      	mov	sl, r0
 8023b46:	460c      	mov	r4, r1
 8023b48:	4690      	mov	r8, r2
 8023b4a:	d82c      	bhi.n	8023ba6 <__ssputs_r+0x6e>
 8023b4c:	898a      	ldrh	r2, [r1, #12]
 8023b4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023b52:	d026      	beq.n	8023ba2 <__ssputs_r+0x6a>
 8023b54:	6965      	ldr	r5, [r4, #20]
 8023b56:	6909      	ldr	r1, [r1, #16]
 8023b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023b5c:	eba3 0901 	sub.w	r9, r3, r1
 8023b60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023b64:	1c7b      	adds	r3, r7, #1
 8023b66:	444b      	add	r3, r9
 8023b68:	106d      	asrs	r5, r5, #1
 8023b6a:	429d      	cmp	r5, r3
 8023b6c:	bf38      	it	cc
 8023b6e:	461d      	movcc	r5, r3
 8023b70:	0553      	lsls	r3, r2, #21
 8023b72:	d527      	bpl.n	8023bc4 <__ssputs_r+0x8c>
 8023b74:	4629      	mov	r1, r5
 8023b76:	f7ff fcbf 	bl	80234f8 <_malloc_r>
 8023b7a:	4606      	mov	r6, r0
 8023b7c:	b360      	cbz	r0, 8023bd8 <__ssputs_r+0xa0>
 8023b7e:	6921      	ldr	r1, [r4, #16]
 8023b80:	464a      	mov	r2, r9
 8023b82:	f7ff ff58 	bl	8023a36 <memcpy>
 8023b86:	89a3      	ldrh	r3, [r4, #12]
 8023b88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023b90:	81a3      	strh	r3, [r4, #12]
 8023b92:	6126      	str	r6, [r4, #16]
 8023b94:	6165      	str	r5, [r4, #20]
 8023b96:	444e      	add	r6, r9
 8023b98:	eba5 0509 	sub.w	r5, r5, r9
 8023b9c:	6026      	str	r6, [r4, #0]
 8023b9e:	60a5      	str	r5, [r4, #8]
 8023ba0:	463e      	mov	r6, r7
 8023ba2:	42be      	cmp	r6, r7
 8023ba4:	d900      	bls.n	8023ba8 <__ssputs_r+0x70>
 8023ba6:	463e      	mov	r6, r7
 8023ba8:	6820      	ldr	r0, [r4, #0]
 8023baa:	4632      	mov	r2, r6
 8023bac:	4641      	mov	r1, r8
 8023bae:	f7ff fe92 	bl	80238d6 <memmove>
 8023bb2:	68a3      	ldr	r3, [r4, #8]
 8023bb4:	1b9b      	subs	r3, r3, r6
 8023bb6:	60a3      	str	r3, [r4, #8]
 8023bb8:	6823      	ldr	r3, [r4, #0]
 8023bba:	4433      	add	r3, r6
 8023bbc:	6023      	str	r3, [r4, #0]
 8023bbe:	2000      	movs	r0, #0
 8023bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bc4:	462a      	mov	r2, r5
 8023bc6:	f000 fce7 	bl	8024598 <_realloc_r>
 8023bca:	4606      	mov	r6, r0
 8023bcc:	2800      	cmp	r0, #0
 8023bce:	d1e0      	bne.n	8023b92 <__ssputs_r+0x5a>
 8023bd0:	6921      	ldr	r1, [r4, #16]
 8023bd2:	4650      	mov	r0, sl
 8023bd4:	f7ff ff64 	bl	8023aa0 <_free_r>
 8023bd8:	230c      	movs	r3, #12
 8023bda:	f8ca 3000 	str.w	r3, [sl]
 8023bde:	89a3      	ldrh	r3, [r4, #12]
 8023be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023be4:	81a3      	strh	r3, [r4, #12]
 8023be6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023bea:	e7e9      	b.n	8023bc0 <__ssputs_r+0x88>

08023bec <_svfiprintf_r>:
 8023bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bf0:	4698      	mov	r8, r3
 8023bf2:	898b      	ldrh	r3, [r1, #12]
 8023bf4:	061b      	lsls	r3, r3, #24
 8023bf6:	b09d      	sub	sp, #116	; 0x74
 8023bf8:	4607      	mov	r7, r0
 8023bfa:	460d      	mov	r5, r1
 8023bfc:	4614      	mov	r4, r2
 8023bfe:	d50e      	bpl.n	8023c1e <_svfiprintf_r+0x32>
 8023c00:	690b      	ldr	r3, [r1, #16]
 8023c02:	b963      	cbnz	r3, 8023c1e <_svfiprintf_r+0x32>
 8023c04:	2140      	movs	r1, #64	; 0x40
 8023c06:	f7ff fc77 	bl	80234f8 <_malloc_r>
 8023c0a:	6028      	str	r0, [r5, #0]
 8023c0c:	6128      	str	r0, [r5, #16]
 8023c0e:	b920      	cbnz	r0, 8023c1a <_svfiprintf_r+0x2e>
 8023c10:	230c      	movs	r3, #12
 8023c12:	603b      	str	r3, [r7, #0]
 8023c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023c18:	e0d0      	b.n	8023dbc <_svfiprintf_r+0x1d0>
 8023c1a:	2340      	movs	r3, #64	; 0x40
 8023c1c:	616b      	str	r3, [r5, #20]
 8023c1e:	2300      	movs	r3, #0
 8023c20:	9309      	str	r3, [sp, #36]	; 0x24
 8023c22:	2320      	movs	r3, #32
 8023c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8023c2c:	2330      	movs	r3, #48	; 0x30
 8023c2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8023dd4 <_svfiprintf_r+0x1e8>
 8023c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023c36:	f04f 0901 	mov.w	r9, #1
 8023c3a:	4623      	mov	r3, r4
 8023c3c:	469a      	mov	sl, r3
 8023c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023c42:	b10a      	cbz	r2, 8023c48 <_svfiprintf_r+0x5c>
 8023c44:	2a25      	cmp	r2, #37	; 0x25
 8023c46:	d1f9      	bne.n	8023c3c <_svfiprintf_r+0x50>
 8023c48:	ebba 0b04 	subs.w	fp, sl, r4
 8023c4c:	d00b      	beq.n	8023c66 <_svfiprintf_r+0x7a>
 8023c4e:	465b      	mov	r3, fp
 8023c50:	4622      	mov	r2, r4
 8023c52:	4629      	mov	r1, r5
 8023c54:	4638      	mov	r0, r7
 8023c56:	f7ff ff6f 	bl	8023b38 <__ssputs_r>
 8023c5a:	3001      	adds	r0, #1
 8023c5c:	f000 80a9 	beq.w	8023db2 <_svfiprintf_r+0x1c6>
 8023c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023c62:	445a      	add	r2, fp
 8023c64:	9209      	str	r2, [sp, #36]	; 0x24
 8023c66:	f89a 3000 	ldrb.w	r3, [sl]
 8023c6a:	2b00      	cmp	r3, #0
 8023c6c:	f000 80a1 	beq.w	8023db2 <_svfiprintf_r+0x1c6>
 8023c70:	2300      	movs	r3, #0
 8023c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023c7a:	f10a 0a01 	add.w	sl, sl, #1
 8023c7e:	9304      	str	r3, [sp, #16]
 8023c80:	9307      	str	r3, [sp, #28]
 8023c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023c86:	931a      	str	r3, [sp, #104]	; 0x68
 8023c88:	4654      	mov	r4, sl
 8023c8a:	2205      	movs	r2, #5
 8023c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023c90:	4850      	ldr	r0, [pc, #320]	; (8023dd4 <_svfiprintf_r+0x1e8>)
 8023c92:	f7dc fac5 	bl	8000220 <memchr>
 8023c96:	9a04      	ldr	r2, [sp, #16]
 8023c98:	b9d8      	cbnz	r0, 8023cd2 <_svfiprintf_r+0xe6>
 8023c9a:	06d0      	lsls	r0, r2, #27
 8023c9c:	bf44      	itt	mi
 8023c9e:	2320      	movmi	r3, #32
 8023ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023ca4:	0711      	lsls	r1, r2, #28
 8023ca6:	bf44      	itt	mi
 8023ca8:	232b      	movmi	r3, #43	; 0x2b
 8023caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023cae:	f89a 3000 	ldrb.w	r3, [sl]
 8023cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8023cb4:	d015      	beq.n	8023ce2 <_svfiprintf_r+0xf6>
 8023cb6:	9a07      	ldr	r2, [sp, #28]
 8023cb8:	4654      	mov	r4, sl
 8023cba:	2000      	movs	r0, #0
 8023cbc:	f04f 0c0a 	mov.w	ip, #10
 8023cc0:	4621      	mov	r1, r4
 8023cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023cc6:	3b30      	subs	r3, #48	; 0x30
 8023cc8:	2b09      	cmp	r3, #9
 8023cca:	d94d      	bls.n	8023d68 <_svfiprintf_r+0x17c>
 8023ccc:	b1b0      	cbz	r0, 8023cfc <_svfiprintf_r+0x110>
 8023cce:	9207      	str	r2, [sp, #28]
 8023cd0:	e014      	b.n	8023cfc <_svfiprintf_r+0x110>
 8023cd2:	eba0 0308 	sub.w	r3, r0, r8
 8023cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8023cda:	4313      	orrs	r3, r2
 8023cdc:	9304      	str	r3, [sp, #16]
 8023cde:	46a2      	mov	sl, r4
 8023ce0:	e7d2      	b.n	8023c88 <_svfiprintf_r+0x9c>
 8023ce2:	9b03      	ldr	r3, [sp, #12]
 8023ce4:	1d19      	adds	r1, r3, #4
 8023ce6:	681b      	ldr	r3, [r3, #0]
 8023ce8:	9103      	str	r1, [sp, #12]
 8023cea:	2b00      	cmp	r3, #0
 8023cec:	bfbb      	ittet	lt
 8023cee:	425b      	neglt	r3, r3
 8023cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8023cf4:	9307      	strge	r3, [sp, #28]
 8023cf6:	9307      	strlt	r3, [sp, #28]
 8023cf8:	bfb8      	it	lt
 8023cfa:	9204      	strlt	r2, [sp, #16]
 8023cfc:	7823      	ldrb	r3, [r4, #0]
 8023cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8023d00:	d10c      	bne.n	8023d1c <_svfiprintf_r+0x130>
 8023d02:	7863      	ldrb	r3, [r4, #1]
 8023d04:	2b2a      	cmp	r3, #42	; 0x2a
 8023d06:	d134      	bne.n	8023d72 <_svfiprintf_r+0x186>
 8023d08:	9b03      	ldr	r3, [sp, #12]
 8023d0a:	1d1a      	adds	r2, r3, #4
 8023d0c:	681b      	ldr	r3, [r3, #0]
 8023d0e:	9203      	str	r2, [sp, #12]
 8023d10:	2b00      	cmp	r3, #0
 8023d12:	bfb8      	it	lt
 8023d14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023d18:	3402      	adds	r4, #2
 8023d1a:	9305      	str	r3, [sp, #20]
 8023d1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8023de4 <_svfiprintf_r+0x1f8>
 8023d20:	7821      	ldrb	r1, [r4, #0]
 8023d22:	2203      	movs	r2, #3
 8023d24:	4650      	mov	r0, sl
 8023d26:	f7dc fa7b 	bl	8000220 <memchr>
 8023d2a:	b138      	cbz	r0, 8023d3c <_svfiprintf_r+0x150>
 8023d2c:	9b04      	ldr	r3, [sp, #16]
 8023d2e:	eba0 000a 	sub.w	r0, r0, sl
 8023d32:	2240      	movs	r2, #64	; 0x40
 8023d34:	4082      	lsls	r2, r0
 8023d36:	4313      	orrs	r3, r2
 8023d38:	3401      	adds	r4, #1
 8023d3a:	9304      	str	r3, [sp, #16]
 8023d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023d40:	4825      	ldr	r0, [pc, #148]	; (8023dd8 <_svfiprintf_r+0x1ec>)
 8023d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023d46:	2206      	movs	r2, #6
 8023d48:	f7dc fa6a 	bl	8000220 <memchr>
 8023d4c:	2800      	cmp	r0, #0
 8023d4e:	d038      	beq.n	8023dc2 <_svfiprintf_r+0x1d6>
 8023d50:	4b22      	ldr	r3, [pc, #136]	; (8023ddc <_svfiprintf_r+0x1f0>)
 8023d52:	bb1b      	cbnz	r3, 8023d9c <_svfiprintf_r+0x1b0>
 8023d54:	9b03      	ldr	r3, [sp, #12]
 8023d56:	3307      	adds	r3, #7
 8023d58:	f023 0307 	bic.w	r3, r3, #7
 8023d5c:	3308      	adds	r3, #8
 8023d5e:	9303      	str	r3, [sp, #12]
 8023d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d62:	4433      	add	r3, r6
 8023d64:	9309      	str	r3, [sp, #36]	; 0x24
 8023d66:	e768      	b.n	8023c3a <_svfiprintf_r+0x4e>
 8023d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8023d6c:	460c      	mov	r4, r1
 8023d6e:	2001      	movs	r0, #1
 8023d70:	e7a6      	b.n	8023cc0 <_svfiprintf_r+0xd4>
 8023d72:	2300      	movs	r3, #0
 8023d74:	3401      	adds	r4, #1
 8023d76:	9305      	str	r3, [sp, #20]
 8023d78:	4619      	mov	r1, r3
 8023d7a:	f04f 0c0a 	mov.w	ip, #10
 8023d7e:	4620      	mov	r0, r4
 8023d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023d84:	3a30      	subs	r2, #48	; 0x30
 8023d86:	2a09      	cmp	r2, #9
 8023d88:	d903      	bls.n	8023d92 <_svfiprintf_r+0x1a6>
 8023d8a:	2b00      	cmp	r3, #0
 8023d8c:	d0c6      	beq.n	8023d1c <_svfiprintf_r+0x130>
 8023d8e:	9105      	str	r1, [sp, #20]
 8023d90:	e7c4      	b.n	8023d1c <_svfiprintf_r+0x130>
 8023d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8023d96:	4604      	mov	r4, r0
 8023d98:	2301      	movs	r3, #1
 8023d9a:	e7f0      	b.n	8023d7e <_svfiprintf_r+0x192>
 8023d9c:	ab03      	add	r3, sp, #12
 8023d9e:	9300      	str	r3, [sp, #0]
 8023da0:	462a      	mov	r2, r5
 8023da2:	4b0f      	ldr	r3, [pc, #60]	; (8023de0 <_svfiprintf_r+0x1f4>)
 8023da4:	a904      	add	r1, sp, #16
 8023da6:	4638      	mov	r0, r7
 8023da8:	f3af 8000 	nop.w
 8023dac:	1c42      	adds	r2, r0, #1
 8023dae:	4606      	mov	r6, r0
 8023db0:	d1d6      	bne.n	8023d60 <_svfiprintf_r+0x174>
 8023db2:	89ab      	ldrh	r3, [r5, #12]
 8023db4:	065b      	lsls	r3, r3, #25
 8023db6:	f53f af2d 	bmi.w	8023c14 <_svfiprintf_r+0x28>
 8023dba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023dbc:	b01d      	add	sp, #116	; 0x74
 8023dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023dc2:	ab03      	add	r3, sp, #12
 8023dc4:	9300      	str	r3, [sp, #0]
 8023dc6:	462a      	mov	r2, r5
 8023dc8:	4b05      	ldr	r3, [pc, #20]	; (8023de0 <_svfiprintf_r+0x1f4>)
 8023dca:	a904      	add	r1, sp, #16
 8023dcc:	4638      	mov	r0, r7
 8023dce:	f000 f9bd 	bl	802414c <_printf_i>
 8023dd2:	e7eb      	b.n	8023dac <_svfiprintf_r+0x1c0>
 8023dd4:	08028333 	.word	0x08028333
 8023dd8:	0802833d 	.word	0x0802833d
 8023ddc:	00000000 	.word	0x00000000
 8023de0:	08023b39 	.word	0x08023b39
 8023de4:	08028339 	.word	0x08028339

08023de8 <__sfputc_r>:
 8023de8:	6893      	ldr	r3, [r2, #8]
 8023dea:	3b01      	subs	r3, #1
 8023dec:	2b00      	cmp	r3, #0
 8023dee:	b410      	push	{r4}
 8023df0:	6093      	str	r3, [r2, #8]
 8023df2:	da08      	bge.n	8023e06 <__sfputc_r+0x1e>
 8023df4:	6994      	ldr	r4, [r2, #24]
 8023df6:	42a3      	cmp	r3, r4
 8023df8:	db01      	blt.n	8023dfe <__sfputc_r+0x16>
 8023dfa:	290a      	cmp	r1, #10
 8023dfc:	d103      	bne.n	8023e06 <__sfputc_r+0x1e>
 8023dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023e02:	f000 bbf8 	b.w	80245f6 <__swbuf_r>
 8023e06:	6813      	ldr	r3, [r2, #0]
 8023e08:	1c58      	adds	r0, r3, #1
 8023e0a:	6010      	str	r0, [r2, #0]
 8023e0c:	7019      	strb	r1, [r3, #0]
 8023e0e:	4608      	mov	r0, r1
 8023e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023e14:	4770      	bx	lr

08023e16 <__sfputs_r>:
 8023e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e18:	4606      	mov	r6, r0
 8023e1a:	460f      	mov	r7, r1
 8023e1c:	4614      	mov	r4, r2
 8023e1e:	18d5      	adds	r5, r2, r3
 8023e20:	42ac      	cmp	r4, r5
 8023e22:	d101      	bne.n	8023e28 <__sfputs_r+0x12>
 8023e24:	2000      	movs	r0, #0
 8023e26:	e007      	b.n	8023e38 <__sfputs_r+0x22>
 8023e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023e2c:	463a      	mov	r2, r7
 8023e2e:	4630      	mov	r0, r6
 8023e30:	f7ff ffda 	bl	8023de8 <__sfputc_r>
 8023e34:	1c43      	adds	r3, r0, #1
 8023e36:	d1f3      	bne.n	8023e20 <__sfputs_r+0xa>
 8023e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023e3c <_vfiprintf_r>:
 8023e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e40:	460d      	mov	r5, r1
 8023e42:	b09d      	sub	sp, #116	; 0x74
 8023e44:	4614      	mov	r4, r2
 8023e46:	4698      	mov	r8, r3
 8023e48:	4606      	mov	r6, r0
 8023e4a:	b118      	cbz	r0, 8023e54 <_vfiprintf_r+0x18>
 8023e4c:	6a03      	ldr	r3, [r0, #32]
 8023e4e:	b90b      	cbnz	r3, 8023e54 <_vfiprintf_r+0x18>
 8023e50:	f7ff fcc8 	bl	80237e4 <__sinit>
 8023e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023e56:	07d9      	lsls	r1, r3, #31
 8023e58:	d405      	bmi.n	8023e66 <_vfiprintf_r+0x2a>
 8023e5a:	89ab      	ldrh	r3, [r5, #12]
 8023e5c:	059a      	lsls	r2, r3, #22
 8023e5e:	d402      	bmi.n	8023e66 <_vfiprintf_r+0x2a>
 8023e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023e62:	f7ff fde6 	bl	8023a32 <__retarget_lock_acquire_recursive>
 8023e66:	89ab      	ldrh	r3, [r5, #12]
 8023e68:	071b      	lsls	r3, r3, #28
 8023e6a:	d501      	bpl.n	8023e70 <_vfiprintf_r+0x34>
 8023e6c:	692b      	ldr	r3, [r5, #16]
 8023e6e:	b99b      	cbnz	r3, 8023e98 <_vfiprintf_r+0x5c>
 8023e70:	4629      	mov	r1, r5
 8023e72:	4630      	mov	r0, r6
 8023e74:	f000 fbfc 	bl	8024670 <__swsetup_r>
 8023e78:	b170      	cbz	r0, 8023e98 <_vfiprintf_r+0x5c>
 8023e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023e7c:	07dc      	lsls	r4, r3, #31
 8023e7e:	d504      	bpl.n	8023e8a <_vfiprintf_r+0x4e>
 8023e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023e84:	b01d      	add	sp, #116	; 0x74
 8023e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e8a:	89ab      	ldrh	r3, [r5, #12]
 8023e8c:	0598      	lsls	r0, r3, #22
 8023e8e:	d4f7      	bmi.n	8023e80 <_vfiprintf_r+0x44>
 8023e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023e92:	f7ff fdcf 	bl	8023a34 <__retarget_lock_release_recursive>
 8023e96:	e7f3      	b.n	8023e80 <_vfiprintf_r+0x44>
 8023e98:	2300      	movs	r3, #0
 8023e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8023e9c:	2320      	movs	r3, #32
 8023e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8023ea6:	2330      	movs	r3, #48	; 0x30
 8023ea8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802405c <_vfiprintf_r+0x220>
 8023eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023eb0:	f04f 0901 	mov.w	r9, #1
 8023eb4:	4623      	mov	r3, r4
 8023eb6:	469a      	mov	sl, r3
 8023eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023ebc:	b10a      	cbz	r2, 8023ec2 <_vfiprintf_r+0x86>
 8023ebe:	2a25      	cmp	r2, #37	; 0x25
 8023ec0:	d1f9      	bne.n	8023eb6 <_vfiprintf_r+0x7a>
 8023ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8023ec6:	d00b      	beq.n	8023ee0 <_vfiprintf_r+0xa4>
 8023ec8:	465b      	mov	r3, fp
 8023eca:	4622      	mov	r2, r4
 8023ecc:	4629      	mov	r1, r5
 8023ece:	4630      	mov	r0, r6
 8023ed0:	f7ff ffa1 	bl	8023e16 <__sfputs_r>
 8023ed4:	3001      	adds	r0, #1
 8023ed6:	f000 80a9 	beq.w	802402c <_vfiprintf_r+0x1f0>
 8023eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023edc:	445a      	add	r2, fp
 8023ede:	9209      	str	r2, [sp, #36]	; 0x24
 8023ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8023ee4:	2b00      	cmp	r3, #0
 8023ee6:	f000 80a1 	beq.w	802402c <_vfiprintf_r+0x1f0>
 8023eea:	2300      	movs	r3, #0
 8023eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023ef4:	f10a 0a01 	add.w	sl, sl, #1
 8023ef8:	9304      	str	r3, [sp, #16]
 8023efa:	9307      	str	r3, [sp, #28]
 8023efc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023f00:	931a      	str	r3, [sp, #104]	; 0x68
 8023f02:	4654      	mov	r4, sl
 8023f04:	2205      	movs	r2, #5
 8023f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023f0a:	4854      	ldr	r0, [pc, #336]	; (802405c <_vfiprintf_r+0x220>)
 8023f0c:	f7dc f988 	bl	8000220 <memchr>
 8023f10:	9a04      	ldr	r2, [sp, #16]
 8023f12:	b9d8      	cbnz	r0, 8023f4c <_vfiprintf_r+0x110>
 8023f14:	06d1      	lsls	r1, r2, #27
 8023f16:	bf44      	itt	mi
 8023f18:	2320      	movmi	r3, #32
 8023f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023f1e:	0713      	lsls	r3, r2, #28
 8023f20:	bf44      	itt	mi
 8023f22:	232b      	movmi	r3, #43	; 0x2b
 8023f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023f28:	f89a 3000 	ldrb.w	r3, [sl]
 8023f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8023f2e:	d015      	beq.n	8023f5c <_vfiprintf_r+0x120>
 8023f30:	9a07      	ldr	r2, [sp, #28]
 8023f32:	4654      	mov	r4, sl
 8023f34:	2000      	movs	r0, #0
 8023f36:	f04f 0c0a 	mov.w	ip, #10
 8023f3a:	4621      	mov	r1, r4
 8023f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023f40:	3b30      	subs	r3, #48	; 0x30
 8023f42:	2b09      	cmp	r3, #9
 8023f44:	d94d      	bls.n	8023fe2 <_vfiprintf_r+0x1a6>
 8023f46:	b1b0      	cbz	r0, 8023f76 <_vfiprintf_r+0x13a>
 8023f48:	9207      	str	r2, [sp, #28]
 8023f4a:	e014      	b.n	8023f76 <_vfiprintf_r+0x13a>
 8023f4c:	eba0 0308 	sub.w	r3, r0, r8
 8023f50:	fa09 f303 	lsl.w	r3, r9, r3
 8023f54:	4313      	orrs	r3, r2
 8023f56:	9304      	str	r3, [sp, #16]
 8023f58:	46a2      	mov	sl, r4
 8023f5a:	e7d2      	b.n	8023f02 <_vfiprintf_r+0xc6>
 8023f5c:	9b03      	ldr	r3, [sp, #12]
 8023f5e:	1d19      	adds	r1, r3, #4
 8023f60:	681b      	ldr	r3, [r3, #0]
 8023f62:	9103      	str	r1, [sp, #12]
 8023f64:	2b00      	cmp	r3, #0
 8023f66:	bfbb      	ittet	lt
 8023f68:	425b      	neglt	r3, r3
 8023f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8023f6e:	9307      	strge	r3, [sp, #28]
 8023f70:	9307      	strlt	r3, [sp, #28]
 8023f72:	bfb8      	it	lt
 8023f74:	9204      	strlt	r2, [sp, #16]
 8023f76:	7823      	ldrb	r3, [r4, #0]
 8023f78:	2b2e      	cmp	r3, #46	; 0x2e
 8023f7a:	d10c      	bne.n	8023f96 <_vfiprintf_r+0x15a>
 8023f7c:	7863      	ldrb	r3, [r4, #1]
 8023f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8023f80:	d134      	bne.n	8023fec <_vfiprintf_r+0x1b0>
 8023f82:	9b03      	ldr	r3, [sp, #12]
 8023f84:	1d1a      	adds	r2, r3, #4
 8023f86:	681b      	ldr	r3, [r3, #0]
 8023f88:	9203      	str	r2, [sp, #12]
 8023f8a:	2b00      	cmp	r3, #0
 8023f8c:	bfb8      	it	lt
 8023f8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023f92:	3402      	adds	r4, #2
 8023f94:	9305      	str	r3, [sp, #20]
 8023f96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802406c <_vfiprintf_r+0x230>
 8023f9a:	7821      	ldrb	r1, [r4, #0]
 8023f9c:	2203      	movs	r2, #3
 8023f9e:	4650      	mov	r0, sl
 8023fa0:	f7dc f93e 	bl	8000220 <memchr>
 8023fa4:	b138      	cbz	r0, 8023fb6 <_vfiprintf_r+0x17a>
 8023fa6:	9b04      	ldr	r3, [sp, #16]
 8023fa8:	eba0 000a 	sub.w	r0, r0, sl
 8023fac:	2240      	movs	r2, #64	; 0x40
 8023fae:	4082      	lsls	r2, r0
 8023fb0:	4313      	orrs	r3, r2
 8023fb2:	3401      	adds	r4, #1
 8023fb4:	9304      	str	r3, [sp, #16]
 8023fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023fba:	4829      	ldr	r0, [pc, #164]	; (8024060 <_vfiprintf_r+0x224>)
 8023fbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023fc0:	2206      	movs	r2, #6
 8023fc2:	f7dc f92d 	bl	8000220 <memchr>
 8023fc6:	2800      	cmp	r0, #0
 8023fc8:	d03f      	beq.n	802404a <_vfiprintf_r+0x20e>
 8023fca:	4b26      	ldr	r3, [pc, #152]	; (8024064 <_vfiprintf_r+0x228>)
 8023fcc:	bb1b      	cbnz	r3, 8024016 <_vfiprintf_r+0x1da>
 8023fce:	9b03      	ldr	r3, [sp, #12]
 8023fd0:	3307      	adds	r3, #7
 8023fd2:	f023 0307 	bic.w	r3, r3, #7
 8023fd6:	3308      	adds	r3, #8
 8023fd8:	9303      	str	r3, [sp, #12]
 8023fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fdc:	443b      	add	r3, r7
 8023fde:	9309      	str	r3, [sp, #36]	; 0x24
 8023fe0:	e768      	b.n	8023eb4 <_vfiprintf_r+0x78>
 8023fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8023fe6:	460c      	mov	r4, r1
 8023fe8:	2001      	movs	r0, #1
 8023fea:	e7a6      	b.n	8023f3a <_vfiprintf_r+0xfe>
 8023fec:	2300      	movs	r3, #0
 8023fee:	3401      	adds	r4, #1
 8023ff0:	9305      	str	r3, [sp, #20]
 8023ff2:	4619      	mov	r1, r3
 8023ff4:	f04f 0c0a 	mov.w	ip, #10
 8023ff8:	4620      	mov	r0, r4
 8023ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023ffe:	3a30      	subs	r2, #48	; 0x30
 8024000:	2a09      	cmp	r2, #9
 8024002:	d903      	bls.n	802400c <_vfiprintf_r+0x1d0>
 8024004:	2b00      	cmp	r3, #0
 8024006:	d0c6      	beq.n	8023f96 <_vfiprintf_r+0x15a>
 8024008:	9105      	str	r1, [sp, #20]
 802400a:	e7c4      	b.n	8023f96 <_vfiprintf_r+0x15a>
 802400c:	fb0c 2101 	mla	r1, ip, r1, r2
 8024010:	4604      	mov	r4, r0
 8024012:	2301      	movs	r3, #1
 8024014:	e7f0      	b.n	8023ff8 <_vfiprintf_r+0x1bc>
 8024016:	ab03      	add	r3, sp, #12
 8024018:	9300      	str	r3, [sp, #0]
 802401a:	462a      	mov	r2, r5
 802401c:	4b12      	ldr	r3, [pc, #72]	; (8024068 <_vfiprintf_r+0x22c>)
 802401e:	a904      	add	r1, sp, #16
 8024020:	4630      	mov	r0, r6
 8024022:	f3af 8000 	nop.w
 8024026:	4607      	mov	r7, r0
 8024028:	1c78      	adds	r0, r7, #1
 802402a:	d1d6      	bne.n	8023fda <_vfiprintf_r+0x19e>
 802402c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802402e:	07d9      	lsls	r1, r3, #31
 8024030:	d405      	bmi.n	802403e <_vfiprintf_r+0x202>
 8024032:	89ab      	ldrh	r3, [r5, #12]
 8024034:	059a      	lsls	r2, r3, #22
 8024036:	d402      	bmi.n	802403e <_vfiprintf_r+0x202>
 8024038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802403a:	f7ff fcfb 	bl	8023a34 <__retarget_lock_release_recursive>
 802403e:	89ab      	ldrh	r3, [r5, #12]
 8024040:	065b      	lsls	r3, r3, #25
 8024042:	f53f af1d 	bmi.w	8023e80 <_vfiprintf_r+0x44>
 8024046:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024048:	e71c      	b.n	8023e84 <_vfiprintf_r+0x48>
 802404a:	ab03      	add	r3, sp, #12
 802404c:	9300      	str	r3, [sp, #0]
 802404e:	462a      	mov	r2, r5
 8024050:	4b05      	ldr	r3, [pc, #20]	; (8024068 <_vfiprintf_r+0x22c>)
 8024052:	a904      	add	r1, sp, #16
 8024054:	4630      	mov	r0, r6
 8024056:	f000 f879 	bl	802414c <_printf_i>
 802405a:	e7e4      	b.n	8024026 <_vfiprintf_r+0x1ea>
 802405c:	08028333 	.word	0x08028333
 8024060:	0802833d 	.word	0x0802833d
 8024064:	00000000 	.word	0x00000000
 8024068:	08023e17 	.word	0x08023e17
 802406c:	08028339 	.word	0x08028339

08024070 <_printf_common>:
 8024070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024074:	4616      	mov	r6, r2
 8024076:	4699      	mov	r9, r3
 8024078:	688a      	ldr	r2, [r1, #8]
 802407a:	690b      	ldr	r3, [r1, #16]
 802407c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024080:	4293      	cmp	r3, r2
 8024082:	bfb8      	it	lt
 8024084:	4613      	movlt	r3, r2
 8024086:	6033      	str	r3, [r6, #0]
 8024088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802408c:	4607      	mov	r7, r0
 802408e:	460c      	mov	r4, r1
 8024090:	b10a      	cbz	r2, 8024096 <_printf_common+0x26>
 8024092:	3301      	adds	r3, #1
 8024094:	6033      	str	r3, [r6, #0]
 8024096:	6823      	ldr	r3, [r4, #0]
 8024098:	0699      	lsls	r1, r3, #26
 802409a:	bf42      	ittt	mi
 802409c:	6833      	ldrmi	r3, [r6, #0]
 802409e:	3302      	addmi	r3, #2
 80240a0:	6033      	strmi	r3, [r6, #0]
 80240a2:	6825      	ldr	r5, [r4, #0]
 80240a4:	f015 0506 	ands.w	r5, r5, #6
 80240a8:	d106      	bne.n	80240b8 <_printf_common+0x48>
 80240aa:	f104 0a19 	add.w	sl, r4, #25
 80240ae:	68e3      	ldr	r3, [r4, #12]
 80240b0:	6832      	ldr	r2, [r6, #0]
 80240b2:	1a9b      	subs	r3, r3, r2
 80240b4:	42ab      	cmp	r3, r5
 80240b6:	dc26      	bgt.n	8024106 <_printf_common+0x96>
 80240b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80240bc:	1e13      	subs	r3, r2, #0
 80240be:	6822      	ldr	r2, [r4, #0]
 80240c0:	bf18      	it	ne
 80240c2:	2301      	movne	r3, #1
 80240c4:	0692      	lsls	r2, r2, #26
 80240c6:	d42b      	bmi.n	8024120 <_printf_common+0xb0>
 80240c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80240cc:	4649      	mov	r1, r9
 80240ce:	4638      	mov	r0, r7
 80240d0:	47c0      	blx	r8
 80240d2:	3001      	adds	r0, #1
 80240d4:	d01e      	beq.n	8024114 <_printf_common+0xa4>
 80240d6:	6823      	ldr	r3, [r4, #0]
 80240d8:	6922      	ldr	r2, [r4, #16]
 80240da:	f003 0306 	and.w	r3, r3, #6
 80240de:	2b04      	cmp	r3, #4
 80240e0:	bf02      	ittt	eq
 80240e2:	68e5      	ldreq	r5, [r4, #12]
 80240e4:	6833      	ldreq	r3, [r6, #0]
 80240e6:	1aed      	subeq	r5, r5, r3
 80240e8:	68a3      	ldr	r3, [r4, #8]
 80240ea:	bf0c      	ite	eq
 80240ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80240f0:	2500      	movne	r5, #0
 80240f2:	4293      	cmp	r3, r2
 80240f4:	bfc4      	itt	gt
 80240f6:	1a9b      	subgt	r3, r3, r2
 80240f8:	18ed      	addgt	r5, r5, r3
 80240fa:	2600      	movs	r6, #0
 80240fc:	341a      	adds	r4, #26
 80240fe:	42b5      	cmp	r5, r6
 8024100:	d11a      	bne.n	8024138 <_printf_common+0xc8>
 8024102:	2000      	movs	r0, #0
 8024104:	e008      	b.n	8024118 <_printf_common+0xa8>
 8024106:	2301      	movs	r3, #1
 8024108:	4652      	mov	r2, sl
 802410a:	4649      	mov	r1, r9
 802410c:	4638      	mov	r0, r7
 802410e:	47c0      	blx	r8
 8024110:	3001      	adds	r0, #1
 8024112:	d103      	bne.n	802411c <_printf_common+0xac>
 8024114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802411c:	3501      	adds	r5, #1
 802411e:	e7c6      	b.n	80240ae <_printf_common+0x3e>
 8024120:	18e1      	adds	r1, r4, r3
 8024122:	1c5a      	adds	r2, r3, #1
 8024124:	2030      	movs	r0, #48	; 0x30
 8024126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802412a:	4422      	add	r2, r4
 802412c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024134:	3302      	adds	r3, #2
 8024136:	e7c7      	b.n	80240c8 <_printf_common+0x58>
 8024138:	2301      	movs	r3, #1
 802413a:	4622      	mov	r2, r4
 802413c:	4649      	mov	r1, r9
 802413e:	4638      	mov	r0, r7
 8024140:	47c0      	blx	r8
 8024142:	3001      	adds	r0, #1
 8024144:	d0e6      	beq.n	8024114 <_printf_common+0xa4>
 8024146:	3601      	adds	r6, #1
 8024148:	e7d9      	b.n	80240fe <_printf_common+0x8e>
	...

0802414c <_printf_i>:
 802414c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024150:	7e0f      	ldrb	r7, [r1, #24]
 8024152:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024154:	2f78      	cmp	r7, #120	; 0x78
 8024156:	4691      	mov	r9, r2
 8024158:	4680      	mov	r8, r0
 802415a:	460c      	mov	r4, r1
 802415c:	469a      	mov	sl, r3
 802415e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8024162:	d807      	bhi.n	8024174 <_printf_i+0x28>
 8024164:	2f62      	cmp	r7, #98	; 0x62
 8024166:	d80a      	bhi.n	802417e <_printf_i+0x32>
 8024168:	2f00      	cmp	r7, #0
 802416a:	f000 80d4 	beq.w	8024316 <_printf_i+0x1ca>
 802416e:	2f58      	cmp	r7, #88	; 0x58
 8024170:	f000 80c0 	beq.w	80242f4 <_printf_i+0x1a8>
 8024174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802417c:	e03a      	b.n	80241f4 <_printf_i+0xa8>
 802417e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024182:	2b15      	cmp	r3, #21
 8024184:	d8f6      	bhi.n	8024174 <_printf_i+0x28>
 8024186:	a101      	add	r1, pc, #4	; (adr r1, 802418c <_printf_i+0x40>)
 8024188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802418c:	080241e5 	.word	0x080241e5
 8024190:	080241f9 	.word	0x080241f9
 8024194:	08024175 	.word	0x08024175
 8024198:	08024175 	.word	0x08024175
 802419c:	08024175 	.word	0x08024175
 80241a0:	08024175 	.word	0x08024175
 80241a4:	080241f9 	.word	0x080241f9
 80241a8:	08024175 	.word	0x08024175
 80241ac:	08024175 	.word	0x08024175
 80241b0:	08024175 	.word	0x08024175
 80241b4:	08024175 	.word	0x08024175
 80241b8:	080242fd 	.word	0x080242fd
 80241bc:	08024225 	.word	0x08024225
 80241c0:	080242b7 	.word	0x080242b7
 80241c4:	08024175 	.word	0x08024175
 80241c8:	08024175 	.word	0x08024175
 80241cc:	0802431f 	.word	0x0802431f
 80241d0:	08024175 	.word	0x08024175
 80241d4:	08024225 	.word	0x08024225
 80241d8:	08024175 	.word	0x08024175
 80241dc:	08024175 	.word	0x08024175
 80241e0:	080242bf 	.word	0x080242bf
 80241e4:	682b      	ldr	r3, [r5, #0]
 80241e6:	1d1a      	adds	r2, r3, #4
 80241e8:	681b      	ldr	r3, [r3, #0]
 80241ea:	602a      	str	r2, [r5, #0]
 80241ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80241f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80241f4:	2301      	movs	r3, #1
 80241f6:	e09f      	b.n	8024338 <_printf_i+0x1ec>
 80241f8:	6820      	ldr	r0, [r4, #0]
 80241fa:	682b      	ldr	r3, [r5, #0]
 80241fc:	0607      	lsls	r7, r0, #24
 80241fe:	f103 0104 	add.w	r1, r3, #4
 8024202:	6029      	str	r1, [r5, #0]
 8024204:	d501      	bpl.n	802420a <_printf_i+0xbe>
 8024206:	681e      	ldr	r6, [r3, #0]
 8024208:	e003      	b.n	8024212 <_printf_i+0xc6>
 802420a:	0646      	lsls	r6, r0, #25
 802420c:	d5fb      	bpl.n	8024206 <_printf_i+0xba>
 802420e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024212:	2e00      	cmp	r6, #0
 8024214:	da03      	bge.n	802421e <_printf_i+0xd2>
 8024216:	232d      	movs	r3, #45	; 0x2d
 8024218:	4276      	negs	r6, r6
 802421a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802421e:	485a      	ldr	r0, [pc, #360]	; (8024388 <_printf_i+0x23c>)
 8024220:	230a      	movs	r3, #10
 8024222:	e012      	b.n	802424a <_printf_i+0xfe>
 8024224:	682b      	ldr	r3, [r5, #0]
 8024226:	6820      	ldr	r0, [r4, #0]
 8024228:	1d19      	adds	r1, r3, #4
 802422a:	6029      	str	r1, [r5, #0]
 802422c:	0605      	lsls	r5, r0, #24
 802422e:	d501      	bpl.n	8024234 <_printf_i+0xe8>
 8024230:	681e      	ldr	r6, [r3, #0]
 8024232:	e002      	b.n	802423a <_printf_i+0xee>
 8024234:	0641      	lsls	r1, r0, #25
 8024236:	d5fb      	bpl.n	8024230 <_printf_i+0xe4>
 8024238:	881e      	ldrh	r6, [r3, #0]
 802423a:	4853      	ldr	r0, [pc, #332]	; (8024388 <_printf_i+0x23c>)
 802423c:	2f6f      	cmp	r7, #111	; 0x6f
 802423e:	bf0c      	ite	eq
 8024240:	2308      	moveq	r3, #8
 8024242:	230a      	movne	r3, #10
 8024244:	2100      	movs	r1, #0
 8024246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802424a:	6865      	ldr	r5, [r4, #4]
 802424c:	60a5      	str	r5, [r4, #8]
 802424e:	2d00      	cmp	r5, #0
 8024250:	bfa2      	ittt	ge
 8024252:	6821      	ldrge	r1, [r4, #0]
 8024254:	f021 0104 	bicge.w	r1, r1, #4
 8024258:	6021      	strge	r1, [r4, #0]
 802425a:	b90e      	cbnz	r6, 8024260 <_printf_i+0x114>
 802425c:	2d00      	cmp	r5, #0
 802425e:	d04b      	beq.n	80242f8 <_printf_i+0x1ac>
 8024260:	4615      	mov	r5, r2
 8024262:	fbb6 f1f3 	udiv	r1, r6, r3
 8024266:	fb03 6711 	mls	r7, r3, r1, r6
 802426a:	5dc7      	ldrb	r7, [r0, r7]
 802426c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024270:	4637      	mov	r7, r6
 8024272:	42bb      	cmp	r3, r7
 8024274:	460e      	mov	r6, r1
 8024276:	d9f4      	bls.n	8024262 <_printf_i+0x116>
 8024278:	2b08      	cmp	r3, #8
 802427a:	d10b      	bne.n	8024294 <_printf_i+0x148>
 802427c:	6823      	ldr	r3, [r4, #0]
 802427e:	07de      	lsls	r6, r3, #31
 8024280:	d508      	bpl.n	8024294 <_printf_i+0x148>
 8024282:	6923      	ldr	r3, [r4, #16]
 8024284:	6861      	ldr	r1, [r4, #4]
 8024286:	4299      	cmp	r1, r3
 8024288:	bfde      	ittt	le
 802428a:	2330      	movle	r3, #48	; 0x30
 802428c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024290:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8024294:	1b52      	subs	r2, r2, r5
 8024296:	6122      	str	r2, [r4, #16]
 8024298:	f8cd a000 	str.w	sl, [sp]
 802429c:	464b      	mov	r3, r9
 802429e:	aa03      	add	r2, sp, #12
 80242a0:	4621      	mov	r1, r4
 80242a2:	4640      	mov	r0, r8
 80242a4:	f7ff fee4 	bl	8024070 <_printf_common>
 80242a8:	3001      	adds	r0, #1
 80242aa:	d14a      	bne.n	8024342 <_printf_i+0x1f6>
 80242ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80242b0:	b004      	add	sp, #16
 80242b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80242b6:	6823      	ldr	r3, [r4, #0]
 80242b8:	f043 0320 	orr.w	r3, r3, #32
 80242bc:	6023      	str	r3, [r4, #0]
 80242be:	4833      	ldr	r0, [pc, #204]	; (802438c <_printf_i+0x240>)
 80242c0:	2778      	movs	r7, #120	; 0x78
 80242c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80242c6:	6823      	ldr	r3, [r4, #0]
 80242c8:	6829      	ldr	r1, [r5, #0]
 80242ca:	061f      	lsls	r7, r3, #24
 80242cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80242d0:	d402      	bmi.n	80242d8 <_printf_i+0x18c>
 80242d2:	065f      	lsls	r7, r3, #25
 80242d4:	bf48      	it	mi
 80242d6:	b2b6      	uxthmi	r6, r6
 80242d8:	07df      	lsls	r7, r3, #31
 80242da:	bf48      	it	mi
 80242dc:	f043 0320 	orrmi.w	r3, r3, #32
 80242e0:	6029      	str	r1, [r5, #0]
 80242e2:	bf48      	it	mi
 80242e4:	6023      	strmi	r3, [r4, #0]
 80242e6:	b91e      	cbnz	r6, 80242f0 <_printf_i+0x1a4>
 80242e8:	6823      	ldr	r3, [r4, #0]
 80242ea:	f023 0320 	bic.w	r3, r3, #32
 80242ee:	6023      	str	r3, [r4, #0]
 80242f0:	2310      	movs	r3, #16
 80242f2:	e7a7      	b.n	8024244 <_printf_i+0xf8>
 80242f4:	4824      	ldr	r0, [pc, #144]	; (8024388 <_printf_i+0x23c>)
 80242f6:	e7e4      	b.n	80242c2 <_printf_i+0x176>
 80242f8:	4615      	mov	r5, r2
 80242fa:	e7bd      	b.n	8024278 <_printf_i+0x12c>
 80242fc:	682b      	ldr	r3, [r5, #0]
 80242fe:	6826      	ldr	r6, [r4, #0]
 8024300:	6961      	ldr	r1, [r4, #20]
 8024302:	1d18      	adds	r0, r3, #4
 8024304:	6028      	str	r0, [r5, #0]
 8024306:	0635      	lsls	r5, r6, #24
 8024308:	681b      	ldr	r3, [r3, #0]
 802430a:	d501      	bpl.n	8024310 <_printf_i+0x1c4>
 802430c:	6019      	str	r1, [r3, #0]
 802430e:	e002      	b.n	8024316 <_printf_i+0x1ca>
 8024310:	0670      	lsls	r0, r6, #25
 8024312:	d5fb      	bpl.n	802430c <_printf_i+0x1c0>
 8024314:	8019      	strh	r1, [r3, #0]
 8024316:	2300      	movs	r3, #0
 8024318:	6123      	str	r3, [r4, #16]
 802431a:	4615      	mov	r5, r2
 802431c:	e7bc      	b.n	8024298 <_printf_i+0x14c>
 802431e:	682b      	ldr	r3, [r5, #0]
 8024320:	1d1a      	adds	r2, r3, #4
 8024322:	602a      	str	r2, [r5, #0]
 8024324:	681d      	ldr	r5, [r3, #0]
 8024326:	6862      	ldr	r2, [r4, #4]
 8024328:	2100      	movs	r1, #0
 802432a:	4628      	mov	r0, r5
 802432c:	f7db ff78 	bl	8000220 <memchr>
 8024330:	b108      	cbz	r0, 8024336 <_printf_i+0x1ea>
 8024332:	1b40      	subs	r0, r0, r5
 8024334:	6060      	str	r0, [r4, #4]
 8024336:	6863      	ldr	r3, [r4, #4]
 8024338:	6123      	str	r3, [r4, #16]
 802433a:	2300      	movs	r3, #0
 802433c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024340:	e7aa      	b.n	8024298 <_printf_i+0x14c>
 8024342:	6923      	ldr	r3, [r4, #16]
 8024344:	462a      	mov	r2, r5
 8024346:	4649      	mov	r1, r9
 8024348:	4640      	mov	r0, r8
 802434a:	47d0      	blx	sl
 802434c:	3001      	adds	r0, #1
 802434e:	d0ad      	beq.n	80242ac <_printf_i+0x160>
 8024350:	6823      	ldr	r3, [r4, #0]
 8024352:	079b      	lsls	r3, r3, #30
 8024354:	d413      	bmi.n	802437e <_printf_i+0x232>
 8024356:	68e0      	ldr	r0, [r4, #12]
 8024358:	9b03      	ldr	r3, [sp, #12]
 802435a:	4298      	cmp	r0, r3
 802435c:	bfb8      	it	lt
 802435e:	4618      	movlt	r0, r3
 8024360:	e7a6      	b.n	80242b0 <_printf_i+0x164>
 8024362:	2301      	movs	r3, #1
 8024364:	4632      	mov	r2, r6
 8024366:	4649      	mov	r1, r9
 8024368:	4640      	mov	r0, r8
 802436a:	47d0      	blx	sl
 802436c:	3001      	adds	r0, #1
 802436e:	d09d      	beq.n	80242ac <_printf_i+0x160>
 8024370:	3501      	adds	r5, #1
 8024372:	68e3      	ldr	r3, [r4, #12]
 8024374:	9903      	ldr	r1, [sp, #12]
 8024376:	1a5b      	subs	r3, r3, r1
 8024378:	42ab      	cmp	r3, r5
 802437a:	dcf2      	bgt.n	8024362 <_printf_i+0x216>
 802437c:	e7eb      	b.n	8024356 <_printf_i+0x20a>
 802437e:	2500      	movs	r5, #0
 8024380:	f104 0619 	add.w	r6, r4, #25
 8024384:	e7f5      	b.n	8024372 <_printf_i+0x226>
 8024386:	bf00      	nop
 8024388:	08028344 	.word	0x08028344
 802438c:	08028355 	.word	0x08028355

08024390 <__sflush_r>:
 8024390:	898a      	ldrh	r2, [r1, #12]
 8024392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024396:	4605      	mov	r5, r0
 8024398:	0710      	lsls	r0, r2, #28
 802439a:	460c      	mov	r4, r1
 802439c:	d458      	bmi.n	8024450 <__sflush_r+0xc0>
 802439e:	684b      	ldr	r3, [r1, #4]
 80243a0:	2b00      	cmp	r3, #0
 80243a2:	dc05      	bgt.n	80243b0 <__sflush_r+0x20>
 80243a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80243a6:	2b00      	cmp	r3, #0
 80243a8:	dc02      	bgt.n	80243b0 <__sflush_r+0x20>
 80243aa:	2000      	movs	r0, #0
 80243ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80243b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80243b2:	2e00      	cmp	r6, #0
 80243b4:	d0f9      	beq.n	80243aa <__sflush_r+0x1a>
 80243b6:	2300      	movs	r3, #0
 80243b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80243bc:	682f      	ldr	r7, [r5, #0]
 80243be:	6a21      	ldr	r1, [r4, #32]
 80243c0:	602b      	str	r3, [r5, #0]
 80243c2:	d032      	beq.n	802442a <__sflush_r+0x9a>
 80243c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80243c6:	89a3      	ldrh	r3, [r4, #12]
 80243c8:	075a      	lsls	r2, r3, #29
 80243ca:	d505      	bpl.n	80243d8 <__sflush_r+0x48>
 80243cc:	6863      	ldr	r3, [r4, #4]
 80243ce:	1ac0      	subs	r0, r0, r3
 80243d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80243d2:	b10b      	cbz	r3, 80243d8 <__sflush_r+0x48>
 80243d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80243d6:	1ac0      	subs	r0, r0, r3
 80243d8:	2300      	movs	r3, #0
 80243da:	4602      	mov	r2, r0
 80243dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80243de:	6a21      	ldr	r1, [r4, #32]
 80243e0:	4628      	mov	r0, r5
 80243e2:	47b0      	blx	r6
 80243e4:	1c43      	adds	r3, r0, #1
 80243e6:	89a3      	ldrh	r3, [r4, #12]
 80243e8:	d106      	bne.n	80243f8 <__sflush_r+0x68>
 80243ea:	6829      	ldr	r1, [r5, #0]
 80243ec:	291d      	cmp	r1, #29
 80243ee:	d82b      	bhi.n	8024448 <__sflush_r+0xb8>
 80243f0:	4a29      	ldr	r2, [pc, #164]	; (8024498 <__sflush_r+0x108>)
 80243f2:	410a      	asrs	r2, r1
 80243f4:	07d6      	lsls	r6, r2, #31
 80243f6:	d427      	bmi.n	8024448 <__sflush_r+0xb8>
 80243f8:	2200      	movs	r2, #0
 80243fa:	6062      	str	r2, [r4, #4]
 80243fc:	04d9      	lsls	r1, r3, #19
 80243fe:	6922      	ldr	r2, [r4, #16]
 8024400:	6022      	str	r2, [r4, #0]
 8024402:	d504      	bpl.n	802440e <__sflush_r+0x7e>
 8024404:	1c42      	adds	r2, r0, #1
 8024406:	d101      	bne.n	802440c <__sflush_r+0x7c>
 8024408:	682b      	ldr	r3, [r5, #0]
 802440a:	b903      	cbnz	r3, 802440e <__sflush_r+0x7e>
 802440c:	6560      	str	r0, [r4, #84]	; 0x54
 802440e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024410:	602f      	str	r7, [r5, #0]
 8024412:	2900      	cmp	r1, #0
 8024414:	d0c9      	beq.n	80243aa <__sflush_r+0x1a>
 8024416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802441a:	4299      	cmp	r1, r3
 802441c:	d002      	beq.n	8024424 <__sflush_r+0x94>
 802441e:	4628      	mov	r0, r5
 8024420:	f7ff fb3e 	bl	8023aa0 <_free_r>
 8024424:	2000      	movs	r0, #0
 8024426:	6360      	str	r0, [r4, #52]	; 0x34
 8024428:	e7c0      	b.n	80243ac <__sflush_r+0x1c>
 802442a:	2301      	movs	r3, #1
 802442c:	4628      	mov	r0, r5
 802442e:	47b0      	blx	r6
 8024430:	1c41      	adds	r1, r0, #1
 8024432:	d1c8      	bne.n	80243c6 <__sflush_r+0x36>
 8024434:	682b      	ldr	r3, [r5, #0]
 8024436:	2b00      	cmp	r3, #0
 8024438:	d0c5      	beq.n	80243c6 <__sflush_r+0x36>
 802443a:	2b1d      	cmp	r3, #29
 802443c:	d001      	beq.n	8024442 <__sflush_r+0xb2>
 802443e:	2b16      	cmp	r3, #22
 8024440:	d101      	bne.n	8024446 <__sflush_r+0xb6>
 8024442:	602f      	str	r7, [r5, #0]
 8024444:	e7b1      	b.n	80243aa <__sflush_r+0x1a>
 8024446:	89a3      	ldrh	r3, [r4, #12]
 8024448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802444c:	81a3      	strh	r3, [r4, #12]
 802444e:	e7ad      	b.n	80243ac <__sflush_r+0x1c>
 8024450:	690f      	ldr	r7, [r1, #16]
 8024452:	2f00      	cmp	r7, #0
 8024454:	d0a9      	beq.n	80243aa <__sflush_r+0x1a>
 8024456:	0793      	lsls	r3, r2, #30
 8024458:	680e      	ldr	r6, [r1, #0]
 802445a:	bf08      	it	eq
 802445c:	694b      	ldreq	r3, [r1, #20]
 802445e:	600f      	str	r7, [r1, #0]
 8024460:	bf18      	it	ne
 8024462:	2300      	movne	r3, #0
 8024464:	eba6 0807 	sub.w	r8, r6, r7
 8024468:	608b      	str	r3, [r1, #8]
 802446a:	f1b8 0f00 	cmp.w	r8, #0
 802446e:	dd9c      	ble.n	80243aa <__sflush_r+0x1a>
 8024470:	6a21      	ldr	r1, [r4, #32]
 8024472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024474:	4643      	mov	r3, r8
 8024476:	463a      	mov	r2, r7
 8024478:	4628      	mov	r0, r5
 802447a:	47b0      	blx	r6
 802447c:	2800      	cmp	r0, #0
 802447e:	dc06      	bgt.n	802448e <__sflush_r+0xfe>
 8024480:	89a3      	ldrh	r3, [r4, #12]
 8024482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024486:	81a3      	strh	r3, [r4, #12]
 8024488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802448c:	e78e      	b.n	80243ac <__sflush_r+0x1c>
 802448e:	4407      	add	r7, r0
 8024490:	eba8 0800 	sub.w	r8, r8, r0
 8024494:	e7e9      	b.n	802446a <__sflush_r+0xda>
 8024496:	bf00      	nop
 8024498:	dfbffffe 	.word	0xdfbffffe

0802449c <_fflush_r>:
 802449c:	b538      	push	{r3, r4, r5, lr}
 802449e:	690b      	ldr	r3, [r1, #16]
 80244a0:	4605      	mov	r5, r0
 80244a2:	460c      	mov	r4, r1
 80244a4:	b913      	cbnz	r3, 80244ac <_fflush_r+0x10>
 80244a6:	2500      	movs	r5, #0
 80244a8:	4628      	mov	r0, r5
 80244aa:	bd38      	pop	{r3, r4, r5, pc}
 80244ac:	b118      	cbz	r0, 80244b6 <_fflush_r+0x1a>
 80244ae:	6a03      	ldr	r3, [r0, #32]
 80244b0:	b90b      	cbnz	r3, 80244b6 <_fflush_r+0x1a>
 80244b2:	f7ff f997 	bl	80237e4 <__sinit>
 80244b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80244ba:	2b00      	cmp	r3, #0
 80244bc:	d0f3      	beq.n	80244a6 <_fflush_r+0xa>
 80244be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80244c0:	07d0      	lsls	r0, r2, #31
 80244c2:	d404      	bmi.n	80244ce <_fflush_r+0x32>
 80244c4:	0599      	lsls	r1, r3, #22
 80244c6:	d402      	bmi.n	80244ce <_fflush_r+0x32>
 80244c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80244ca:	f7ff fab2 	bl	8023a32 <__retarget_lock_acquire_recursive>
 80244ce:	4628      	mov	r0, r5
 80244d0:	4621      	mov	r1, r4
 80244d2:	f7ff ff5d 	bl	8024390 <__sflush_r>
 80244d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80244d8:	07da      	lsls	r2, r3, #31
 80244da:	4605      	mov	r5, r0
 80244dc:	d4e4      	bmi.n	80244a8 <_fflush_r+0xc>
 80244de:	89a3      	ldrh	r3, [r4, #12]
 80244e0:	059b      	lsls	r3, r3, #22
 80244e2:	d4e1      	bmi.n	80244a8 <_fflush_r+0xc>
 80244e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80244e6:	f7ff faa5 	bl	8023a34 <__retarget_lock_release_recursive>
 80244ea:	e7dd      	b.n	80244a8 <_fflush_r+0xc>

080244ec <__sread>:
 80244ec:	b510      	push	{r4, lr}
 80244ee:	460c      	mov	r4, r1
 80244f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80244f4:	f000 f9ba 	bl	802486c <_read_r>
 80244f8:	2800      	cmp	r0, #0
 80244fa:	bfab      	itete	ge
 80244fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80244fe:	89a3      	ldrhlt	r3, [r4, #12]
 8024500:	181b      	addge	r3, r3, r0
 8024502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024506:	bfac      	ite	ge
 8024508:	6563      	strge	r3, [r4, #84]	; 0x54
 802450a:	81a3      	strhlt	r3, [r4, #12]
 802450c:	bd10      	pop	{r4, pc}

0802450e <__swrite>:
 802450e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024512:	461f      	mov	r7, r3
 8024514:	898b      	ldrh	r3, [r1, #12]
 8024516:	05db      	lsls	r3, r3, #23
 8024518:	4605      	mov	r5, r0
 802451a:	460c      	mov	r4, r1
 802451c:	4616      	mov	r6, r2
 802451e:	d505      	bpl.n	802452c <__swrite+0x1e>
 8024520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024524:	2302      	movs	r3, #2
 8024526:	2200      	movs	r2, #0
 8024528:	f000 f98e 	bl	8024848 <_lseek_r>
 802452c:	89a3      	ldrh	r3, [r4, #12]
 802452e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024536:	81a3      	strh	r3, [r4, #12]
 8024538:	4632      	mov	r2, r6
 802453a:	463b      	mov	r3, r7
 802453c:	4628      	mov	r0, r5
 802453e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024542:	f000 b9a5 	b.w	8024890 <_write_r>

08024546 <__sseek>:
 8024546:	b510      	push	{r4, lr}
 8024548:	460c      	mov	r4, r1
 802454a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802454e:	f000 f97b 	bl	8024848 <_lseek_r>
 8024552:	1c43      	adds	r3, r0, #1
 8024554:	89a3      	ldrh	r3, [r4, #12]
 8024556:	bf15      	itete	ne
 8024558:	6560      	strne	r0, [r4, #84]	; 0x54
 802455a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802455e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024562:	81a3      	strheq	r3, [r4, #12]
 8024564:	bf18      	it	ne
 8024566:	81a3      	strhne	r3, [r4, #12]
 8024568:	bd10      	pop	{r4, pc}

0802456a <__sclose>:
 802456a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802456e:	f000 b939 	b.w	80247e4 <_close_r>
	...

08024574 <fiprintf>:
 8024574:	b40e      	push	{r1, r2, r3}
 8024576:	b503      	push	{r0, r1, lr}
 8024578:	4601      	mov	r1, r0
 802457a:	ab03      	add	r3, sp, #12
 802457c:	4805      	ldr	r0, [pc, #20]	; (8024594 <fiprintf+0x20>)
 802457e:	f853 2b04 	ldr.w	r2, [r3], #4
 8024582:	6800      	ldr	r0, [r0, #0]
 8024584:	9301      	str	r3, [sp, #4]
 8024586:	f7ff fc59 	bl	8023e3c <_vfiprintf_r>
 802458a:	b002      	add	sp, #8
 802458c:	f85d eb04 	ldr.w	lr, [sp], #4
 8024590:	b003      	add	sp, #12
 8024592:	4770      	bx	lr
 8024594:	200000a8 	.word	0x200000a8

08024598 <_realloc_r>:
 8024598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802459c:	4680      	mov	r8, r0
 802459e:	4614      	mov	r4, r2
 80245a0:	460e      	mov	r6, r1
 80245a2:	b921      	cbnz	r1, 80245ae <_realloc_r+0x16>
 80245a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80245a8:	4611      	mov	r1, r2
 80245aa:	f7fe bfa5 	b.w	80234f8 <_malloc_r>
 80245ae:	b92a      	cbnz	r2, 80245bc <_realloc_r+0x24>
 80245b0:	f7ff fa76 	bl	8023aa0 <_free_r>
 80245b4:	4625      	mov	r5, r4
 80245b6:	4628      	mov	r0, r5
 80245b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80245bc:	f000 f981 	bl	80248c2 <_malloc_usable_size_r>
 80245c0:	4284      	cmp	r4, r0
 80245c2:	4607      	mov	r7, r0
 80245c4:	d802      	bhi.n	80245cc <_realloc_r+0x34>
 80245c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80245ca:	d812      	bhi.n	80245f2 <_realloc_r+0x5a>
 80245cc:	4621      	mov	r1, r4
 80245ce:	4640      	mov	r0, r8
 80245d0:	f7fe ff92 	bl	80234f8 <_malloc_r>
 80245d4:	4605      	mov	r5, r0
 80245d6:	2800      	cmp	r0, #0
 80245d8:	d0ed      	beq.n	80245b6 <_realloc_r+0x1e>
 80245da:	42bc      	cmp	r4, r7
 80245dc:	4622      	mov	r2, r4
 80245de:	4631      	mov	r1, r6
 80245e0:	bf28      	it	cs
 80245e2:	463a      	movcs	r2, r7
 80245e4:	f7ff fa27 	bl	8023a36 <memcpy>
 80245e8:	4631      	mov	r1, r6
 80245ea:	4640      	mov	r0, r8
 80245ec:	f7ff fa58 	bl	8023aa0 <_free_r>
 80245f0:	e7e1      	b.n	80245b6 <_realloc_r+0x1e>
 80245f2:	4635      	mov	r5, r6
 80245f4:	e7df      	b.n	80245b6 <_realloc_r+0x1e>

080245f6 <__swbuf_r>:
 80245f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80245f8:	460e      	mov	r6, r1
 80245fa:	4614      	mov	r4, r2
 80245fc:	4605      	mov	r5, r0
 80245fe:	b118      	cbz	r0, 8024608 <__swbuf_r+0x12>
 8024600:	6a03      	ldr	r3, [r0, #32]
 8024602:	b90b      	cbnz	r3, 8024608 <__swbuf_r+0x12>
 8024604:	f7ff f8ee 	bl	80237e4 <__sinit>
 8024608:	69a3      	ldr	r3, [r4, #24]
 802460a:	60a3      	str	r3, [r4, #8]
 802460c:	89a3      	ldrh	r3, [r4, #12]
 802460e:	071a      	lsls	r2, r3, #28
 8024610:	d525      	bpl.n	802465e <__swbuf_r+0x68>
 8024612:	6923      	ldr	r3, [r4, #16]
 8024614:	b31b      	cbz	r3, 802465e <__swbuf_r+0x68>
 8024616:	6823      	ldr	r3, [r4, #0]
 8024618:	6922      	ldr	r2, [r4, #16]
 802461a:	1a98      	subs	r0, r3, r2
 802461c:	6963      	ldr	r3, [r4, #20]
 802461e:	b2f6      	uxtb	r6, r6
 8024620:	4283      	cmp	r3, r0
 8024622:	4637      	mov	r7, r6
 8024624:	dc04      	bgt.n	8024630 <__swbuf_r+0x3a>
 8024626:	4621      	mov	r1, r4
 8024628:	4628      	mov	r0, r5
 802462a:	f7ff ff37 	bl	802449c <_fflush_r>
 802462e:	b9e0      	cbnz	r0, 802466a <__swbuf_r+0x74>
 8024630:	68a3      	ldr	r3, [r4, #8]
 8024632:	3b01      	subs	r3, #1
 8024634:	60a3      	str	r3, [r4, #8]
 8024636:	6823      	ldr	r3, [r4, #0]
 8024638:	1c5a      	adds	r2, r3, #1
 802463a:	6022      	str	r2, [r4, #0]
 802463c:	701e      	strb	r6, [r3, #0]
 802463e:	6962      	ldr	r2, [r4, #20]
 8024640:	1c43      	adds	r3, r0, #1
 8024642:	429a      	cmp	r2, r3
 8024644:	d004      	beq.n	8024650 <__swbuf_r+0x5a>
 8024646:	89a3      	ldrh	r3, [r4, #12]
 8024648:	07db      	lsls	r3, r3, #31
 802464a:	d506      	bpl.n	802465a <__swbuf_r+0x64>
 802464c:	2e0a      	cmp	r6, #10
 802464e:	d104      	bne.n	802465a <__swbuf_r+0x64>
 8024650:	4621      	mov	r1, r4
 8024652:	4628      	mov	r0, r5
 8024654:	f7ff ff22 	bl	802449c <_fflush_r>
 8024658:	b938      	cbnz	r0, 802466a <__swbuf_r+0x74>
 802465a:	4638      	mov	r0, r7
 802465c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802465e:	4621      	mov	r1, r4
 8024660:	4628      	mov	r0, r5
 8024662:	f000 f805 	bl	8024670 <__swsetup_r>
 8024666:	2800      	cmp	r0, #0
 8024668:	d0d5      	beq.n	8024616 <__swbuf_r+0x20>
 802466a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802466e:	e7f4      	b.n	802465a <__swbuf_r+0x64>

08024670 <__swsetup_r>:
 8024670:	b538      	push	{r3, r4, r5, lr}
 8024672:	4b2a      	ldr	r3, [pc, #168]	; (802471c <__swsetup_r+0xac>)
 8024674:	4605      	mov	r5, r0
 8024676:	6818      	ldr	r0, [r3, #0]
 8024678:	460c      	mov	r4, r1
 802467a:	b118      	cbz	r0, 8024684 <__swsetup_r+0x14>
 802467c:	6a03      	ldr	r3, [r0, #32]
 802467e:	b90b      	cbnz	r3, 8024684 <__swsetup_r+0x14>
 8024680:	f7ff f8b0 	bl	80237e4 <__sinit>
 8024684:	89a3      	ldrh	r3, [r4, #12]
 8024686:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802468a:	0718      	lsls	r0, r3, #28
 802468c:	d422      	bmi.n	80246d4 <__swsetup_r+0x64>
 802468e:	06d9      	lsls	r1, r3, #27
 8024690:	d407      	bmi.n	80246a2 <__swsetup_r+0x32>
 8024692:	2309      	movs	r3, #9
 8024694:	602b      	str	r3, [r5, #0]
 8024696:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802469a:	81a3      	strh	r3, [r4, #12]
 802469c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80246a0:	e034      	b.n	802470c <__swsetup_r+0x9c>
 80246a2:	0758      	lsls	r0, r3, #29
 80246a4:	d512      	bpl.n	80246cc <__swsetup_r+0x5c>
 80246a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80246a8:	b141      	cbz	r1, 80246bc <__swsetup_r+0x4c>
 80246aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80246ae:	4299      	cmp	r1, r3
 80246b0:	d002      	beq.n	80246b8 <__swsetup_r+0x48>
 80246b2:	4628      	mov	r0, r5
 80246b4:	f7ff f9f4 	bl	8023aa0 <_free_r>
 80246b8:	2300      	movs	r3, #0
 80246ba:	6363      	str	r3, [r4, #52]	; 0x34
 80246bc:	89a3      	ldrh	r3, [r4, #12]
 80246be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80246c2:	81a3      	strh	r3, [r4, #12]
 80246c4:	2300      	movs	r3, #0
 80246c6:	6063      	str	r3, [r4, #4]
 80246c8:	6923      	ldr	r3, [r4, #16]
 80246ca:	6023      	str	r3, [r4, #0]
 80246cc:	89a3      	ldrh	r3, [r4, #12]
 80246ce:	f043 0308 	orr.w	r3, r3, #8
 80246d2:	81a3      	strh	r3, [r4, #12]
 80246d4:	6923      	ldr	r3, [r4, #16]
 80246d6:	b94b      	cbnz	r3, 80246ec <__swsetup_r+0x7c>
 80246d8:	89a3      	ldrh	r3, [r4, #12]
 80246da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80246de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80246e2:	d003      	beq.n	80246ec <__swsetup_r+0x7c>
 80246e4:	4621      	mov	r1, r4
 80246e6:	4628      	mov	r0, r5
 80246e8:	f000 f840 	bl	802476c <__smakebuf_r>
 80246ec:	89a0      	ldrh	r0, [r4, #12]
 80246ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80246f2:	f010 0301 	ands.w	r3, r0, #1
 80246f6:	d00a      	beq.n	802470e <__swsetup_r+0x9e>
 80246f8:	2300      	movs	r3, #0
 80246fa:	60a3      	str	r3, [r4, #8]
 80246fc:	6963      	ldr	r3, [r4, #20]
 80246fe:	425b      	negs	r3, r3
 8024700:	61a3      	str	r3, [r4, #24]
 8024702:	6923      	ldr	r3, [r4, #16]
 8024704:	b943      	cbnz	r3, 8024718 <__swsetup_r+0xa8>
 8024706:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802470a:	d1c4      	bne.n	8024696 <__swsetup_r+0x26>
 802470c:	bd38      	pop	{r3, r4, r5, pc}
 802470e:	0781      	lsls	r1, r0, #30
 8024710:	bf58      	it	pl
 8024712:	6963      	ldrpl	r3, [r4, #20]
 8024714:	60a3      	str	r3, [r4, #8]
 8024716:	e7f4      	b.n	8024702 <__swsetup_r+0x92>
 8024718:	2000      	movs	r0, #0
 802471a:	e7f7      	b.n	802470c <__swsetup_r+0x9c>
 802471c:	200000a8 	.word	0x200000a8

08024720 <__swhatbuf_r>:
 8024720:	b570      	push	{r4, r5, r6, lr}
 8024722:	460c      	mov	r4, r1
 8024724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024728:	2900      	cmp	r1, #0
 802472a:	b096      	sub	sp, #88	; 0x58
 802472c:	4615      	mov	r5, r2
 802472e:	461e      	mov	r6, r3
 8024730:	da0d      	bge.n	802474e <__swhatbuf_r+0x2e>
 8024732:	89a3      	ldrh	r3, [r4, #12]
 8024734:	f013 0f80 	tst.w	r3, #128	; 0x80
 8024738:	f04f 0100 	mov.w	r1, #0
 802473c:	bf0c      	ite	eq
 802473e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8024742:	2340      	movne	r3, #64	; 0x40
 8024744:	2000      	movs	r0, #0
 8024746:	6031      	str	r1, [r6, #0]
 8024748:	602b      	str	r3, [r5, #0]
 802474a:	b016      	add	sp, #88	; 0x58
 802474c:	bd70      	pop	{r4, r5, r6, pc}
 802474e:	466a      	mov	r2, sp
 8024750:	f000 f858 	bl	8024804 <_fstat_r>
 8024754:	2800      	cmp	r0, #0
 8024756:	dbec      	blt.n	8024732 <__swhatbuf_r+0x12>
 8024758:	9901      	ldr	r1, [sp, #4]
 802475a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802475e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8024762:	4259      	negs	r1, r3
 8024764:	4159      	adcs	r1, r3
 8024766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802476a:	e7eb      	b.n	8024744 <__swhatbuf_r+0x24>

0802476c <__smakebuf_r>:
 802476c:	898b      	ldrh	r3, [r1, #12]
 802476e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024770:	079d      	lsls	r5, r3, #30
 8024772:	4606      	mov	r6, r0
 8024774:	460c      	mov	r4, r1
 8024776:	d507      	bpl.n	8024788 <__smakebuf_r+0x1c>
 8024778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802477c:	6023      	str	r3, [r4, #0]
 802477e:	6123      	str	r3, [r4, #16]
 8024780:	2301      	movs	r3, #1
 8024782:	6163      	str	r3, [r4, #20]
 8024784:	b002      	add	sp, #8
 8024786:	bd70      	pop	{r4, r5, r6, pc}
 8024788:	ab01      	add	r3, sp, #4
 802478a:	466a      	mov	r2, sp
 802478c:	f7ff ffc8 	bl	8024720 <__swhatbuf_r>
 8024790:	9900      	ldr	r1, [sp, #0]
 8024792:	4605      	mov	r5, r0
 8024794:	4630      	mov	r0, r6
 8024796:	f7fe feaf 	bl	80234f8 <_malloc_r>
 802479a:	b948      	cbnz	r0, 80247b0 <__smakebuf_r+0x44>
 802479c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80247a0:	059a      	lsls	r2, r3, #22
 80247a2:	d4ef      	bmi.n	8024784 <__smakebuf_r+0x18>
 80247a4:	f023 0303 	bic.w	r3, r3, #3
 80247a8:	f043 0302 	orr.w	r3, r3, #2
 80247ac:	81a3      	strh	r3, [r4, #12]
 80247ae:	e7e3      	b.n	8024778 <__smakebuf_r+0xc>
 80247b0:	89a3      	ldrh	r3, [r4, #12]
 80247b2:	6020      	str	r0, [r4, #0]
 80247b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80247b8:	81a3      	strh	r3, [r4, #12]
 80247ba:	9b00      	ldr	r3, [sp, #0]
 80247bc:	6163      	str	r3, [r4, #20]
 80247be:	9b01      	ldr	r3, [sp, #4]
 80247c0:	6120      	str	r0, [r4, #16]
 80247c2:	b15b      	cbz	r3, 80247dc <__smakebuf_r+0x70>
 80247c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80247c8:	4630      	mov	r0, r6
 80247ca:	f000 f82d 	bl	8024828 <_isatty_r>
 80247ce:	b128      	cbz	r0, 80247dc <__smakebuf_r+0x70>
 80247d0:	89a3      	ldrh	r3, [r4, #12]
 80247d2:	f023 0303 	bic.w	r3, r3, #3
 80247d6:	f043 0301 	orr.w	r3, r3, #1
 80247da:	81a3      	strh	r3, [r4, #12]
 80247dc:	89a3      	ldrh	r3, [r4, #12]
 80247de:	431d      	orrs	r5, r3
 80247e0:	81a5      	strh	r5, [r4, #12]
 80247e2:	e7cf      	b.n	8024784 <__smakebuf_r+0x18>

080247e4 <_close_r>:
 80247e4:	b538      	push	{r3, r4, r5, lr}
 80247e6:	4d06      	ldr	r5, [pc, #24]	; (8024800 <_close_r+0x1c>)
 80247e8:	2300      	movs	r3, #0
 80247ea:	4604      	mov	r4, r0
 80247ec:	4608      	mov	r0, r1
 80247ee:	602b      	str	r3, [r5, #0]
 80247f0:	f7de fd0b 	bl	800320a <_close>
 80247f4:	1c43      	adds	r3, r0, #1
 80247f6:	d102      	bne.n	80247fe <_close_r+0x1a>
 80247f8:	682b      	ldr	r3, [r5, #0]
 80247fa:	b103      	cbz	r3, 80247fe <_close_r+0x1a>
 80247fc:	6023      	str	r3, [r4, #0]
 80247fe:	bd38      	pop	{r3, r4, r5, pc}
 8024800:	20011ca8 	.word	0x20011ca8

08024804 <_fstat_r>:
 8024804:	b538      	push	{r3, r4, r5, lr}
 8024806:	4d07      	ldr	r5, [pc, #28]	; (8024824 <_fstat_r+0x20>)
 8024808:	2300      	movs	r3, #0
 802480a:	4604      	mov	r4, r0
 802480c:	4608      	mov	r0, r1
 802480e:	4611      	mov	r1, r2
 8024810:	602b      	str	r3, [r5, #0]
 8024812:	f7de fd06 	bl	8003222 <_fstat>
 8024816:	1c43      	adds	r3, r0, #1
 8024818:	d102      	bne.n	8024820 <_fstat_r+0x1c>
 802481a:	682b      	ldr	r3, [r5, #0]
 802481c:	b103      	cbz	r3, 8024820 <_fstat_r+0x1c>
 802481e:	6023      	str	r3, [r4, #0]
 8024820:	bd38      	pop	{r3, r4, r5, pc}
 8024822:	bf00      	nop
 8024824:	20011ca8 	.word	0x20011ca8

08024828 <_isatty_r>:
 8024828:	b538      	push	{r3, r4, r5, lr}
 802482a:	4d06      	ldr	r5, [pc, #24]	; (8024844 <_isatty_r+0x1c>)
 802482c:	2300      	movs	r3, #0
 802482e:	4604      	mov	r4, r0
 8024830:	4608      	mov	r0, r1
 8024832:	602b      	str	r3, [r5, #0]
 8024834:	f7de fd05 	bl	8003242 <_isatty>
 8024838:	1c43      	adds	r3, r0, #1
 802483a:	d102      	bne.n	8024842 <_isatty_r+0x1a>
 802483c:	682b      	ldr	r3, [r5, #0]
 802483e:	b103      	cbz	r3, 8024842 <_isatty_r+0x1a>
 8024840:	6023      	str	r3, [r4, #0]
 8024842:	bd38      	pop	{r3, r4, r5, pc}
 8024844:	20011ca8 	.word	0x20011ca8

08024848 <_lseek_r>:
 8024848:	b538      	push	{r3, r4, r5, lr}
 802484a:	4d07      	ldr	r5, [pc, #28]	; (8024868 <_lseek_r+0x20>)
 802484c:	4604      	mov	r4, r0
 802484e:	4608      	mov	r0, r1
 8024850:	4611      	mov	r1, r2
 8024852:	2200      	movs	r2, #0
 8024854:	602a      	str	r2, [r5, #0]
 8024856:	461a      	mov	r2, r3
 8024858:	f7de fcfe 	bl	8003258 <_lseek>
 802485c:	1c43      	adds	r3, r0, #1
 802485e:	d102      	bne.n	8024866 <_lseek_r+0x1e>
 8024860:	682b      	ldr	r3, [r5, #0]
 8024862:	b103      	cbz	r3, 8024866 <_lseek_r+0x1e>
 8024864:	6023      	str	r3, [r4, #0]
 8024866:	bd38      	pop	{r3, r4, r5, pc}
 8024868:	20011ca8 	.word	0x20011ca8

0802486c <_read_r>:
 802486c:	b538      	push	{r3, r4, r5, lr}
 802486e:	4d07      	ldr	r5, [pc, #28]	; (802488c <_read_r+0x20>)
 8024870:	4604      	mov	r4, r0
 8024872:	4608      	mov	r0, r1
 8024874:	4611      	mov	r1, r2
 8024876:	2200      	movs	r2, #0
 8024878:	602a      	str	r2, [r5, #0]
 802487a:	461a      	mov	r2, r3
 802487c:	f7de fc8c 	bl	8003198 <_read>
 8024880:	1c43      	adds	r3, r0, #1
 8024882:	d102      	bne.n	802488a <_read_r+0x1e>
 8024884:	682b      	ldr	r3, [r5, #0]
 8024886:	b103      	cbz	r3, 802488a <_read_r+0x1e>
 8024888:	6023      	str	r3, [r4, #0]
 802488a:	bd38      	pop	{r3, r4, r5, pc}
 802488c:	20011ca8 	.word	0x20011ca8

08024890 <_write_r>:
 8024890:	b538      	push	{r3, r4, r5, lr}
 8024892:	4d07      	ldr	r5, [pc, #28]	; (80248b0 <_write_r+0x20>)
 8024894:	4604      	mov	r4, r0
 8024896:	4608      	mov	r0, r1
 8024898:	4611      	mov	r1, r2
 802489a:	2200      	movs	r2, #0
 802489c:	602a      	str	r2, [r5, #0]
 802489e:	461a      	mov	r2, r3
 80248a0:	f7de fc97 	bl	80031d2 <_write>
 80248a4:	1c43      	adds	r3, r0, #1
 80248a6:	d102      	bne.n	80248ae <_write_r+0x1e>
 80248a8:	682b      	ldr	r3, [r5, #0]
 80248aa:	b103      	cbz	r3, 80248ae <_write_r+0x1e>
 80248ac:	6023      	str	r3, [r4, #0]
 80248ae:	bd38      	pop	{r3, r4, r5, pc}
 80248b0:	20011ca8 	.word	0x20011ca8

080248b4 <abort>:
 80248b4:	b508      	push	{r3, lr}
 80248b6:	2006      	movs	r0, #6
 80248b8:	f000 f834 	bl	8024924 <raise>
 80248bc:	2001      	movs	r0, #1
 80248be:	f7de fc61 	bl	8003184 <_exit>

080248c2 <_malloc_usable_size_r>:
 80248c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80248c6:	1f18      	subs	r0, r3, #4
 80248c8:	2b00      	cmp	r3, #0
 80248ca:	bfbc      	itt	lt
 80248cc:	580b      	ldrlt	r3, [r1, r0]
 80248ce:	18c0      	addlt	r0, r0, r3
 80248d0:	4770      	bx	lr

080248d2 <_raise_r>:
 80248d2:	291f      	cmp	r1, #31
 80248d4:	b538      	push	{r3, r4, r5, lr}
 80248d6:	4604      	mov	r4, r0
 80248d8:	460d      	mov	r5, r1
 80248da:	d904      	bls.n	80248e6 <_raise_r+0x14>
 80248dc:	2316      	movs	r3, #22
 80248de:	6003      	str	r3, [r0, #0]
 80248e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80248e4:	bd38      	pop	{r3, r4, r5, pc}
 80248e6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80248e8:	b112      	cbz	r2, 80248f0 <_raise_r+0x1e>
 80248ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80248ee:	b94b      	cbnz	r3, 8024904 <_raise_r+0x32>
 80248f0:	4620      	mov	r0, r4
 80248f2:	f000 f831 	bl	8024958 <_getpid_r>
 80248f6:	462a      	mov	r2, r5
 80248f8:	4601      	mov	r1, r0
 80248fa:	4620      	mov	r0, r4
 80248fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024900:	f000 b818 	b.w	8024934 <_kill_r>
 8024904:	2b01      	cmp	r3, #1
 8024906:	d00a      	beq.n	802491e <_raise_r+0x4c>
 8024908:	1c59      	adds	r1, r3, #1
 802490a:	d103      	bne.n	8024914 <_raise_r+0x42>
 802490c:	2316      	movs	r3, #22
 802490e:	6003      	str	r3, [r0, #0]
 8024910:	2001      	movs	r0, #1
 8024912:	e7e7      	b.n	80248e4 <_raise_r+0x12>
 8024914:	2400      	movs	r4, #0
 8024916:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802491a:	4628      	mov	r0, r5
 802491c:	4798      	blx	r3
 802491e:	2000      	movs	r0, #0
 8024920:	e7e0      	b.n	80248e4 <_raise_r+0x12>
	...

08024924 <raise>:
 8024924:	4b02      	ldr	r3, [pc, #8]	; (8024930 <raise+0xc>)
 8024926:	4601      	mov	r1, r0
 8024928:	6818      	ldr	r0, [r3, #0]
 802492a:	f7ff bfd2 	b.w	80248d2 <_raise_r>
 802492e:	bf00      	nop
 8024930:	200000a8 	.word	0x200000a8

08024934 <_kill_r>:
 8024934:	b538      	push	{r3, r4, r5, lr}
 8024936:	4d07      	ldr	r5, [pc, #28]	; (8024954 <_kill_r+0x20>)
 8024938:	2300      	movs	r3, #0
 802493a:	4604      	mov	r4, r0
 802493c:	4608      	mov	r0, r1
 802493e:	4611      	mov	r1, r2
 8024940:	602b      	str	r3, [r5, #0]
 8024942:	f7de fc0d 	bl	8003160 <_kill>
 8024946:	1c43      	adds	r3, r0, #1
 8024948:	d102      	bne.n	8024950 <_kill_r+0x1c>
 802494a:	682b      	ldr	r3, [r5, #0]
 802494c:	b103      	cbz	r3, 8024950 <_kill_r+0x1c>
 802494e:	6023      	str	r3, [r4, #0]
 8024950:	bd38      	pop	{r3, r4, r5, pc}
 8024952:	bf00      	nop
 8024954:	20011ca8 	.word	0x20011ca8

08024958 <_getpid_r>:
 8024958:	f7de bbfa 	b.w	8003150 <_getpid>

0802495c <_init>:
 802495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802495e:	bf00      	nop
 8024960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024962:	bc08      	pop	{r3}
 8024964:	469e      	mov	lr, r3
 8024966:	4770      	bx	lr

08024968 <_fini>:
 8024968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802496a:	bf00      	nop
 802496c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802496e:	bc08      	pop	{r3}
 8024970:	469e      	mov	lr, r3
 8024972:	4770      	bx	lr
